<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Diagram.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.DiagramBaseAssembly">
            <summary>
            This class holds the name of the grid assembly and provides a helper
            routine that helps with resolving types when loading a serialization stream.
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information, e.g. "Syncfusion.Grid".
            </summary>
        </member>
        <member name="F:Syncfusion.DiagramBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the Diagram assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.DiagramBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as an event handler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            Use this handler when reading back types from a serialization stream
            saved with an earlier version of this assembly.
            </remarks>
        </member>
        <member name="T:Syncfusion.DiagramBaseAssembly.Binder">
            The Binder class helps with the resolution of Diagram types between different versions of 
            the Syncfusion assemblies.
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection">
            <summary>
            Collection of nodes that can be transferred to and from the clipboard.
            </summary>
            <remarks>
            <para>
            This is a specialized NodeCollection class that is used for storing nodes
            on the clipboard. It maintains a GUID (Globally Unique IDentifier) that
            identifies the object that placed the collection of nodes on the clipboard.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionEx">
            <summary>
            Base class for list collections that fire events before and after changes
            occur.
            </summary>
            <remarks>
            This class provides a base implementation of the IList and IEnumerable
            interfaces. The internal implementation of the collection is an ArrayList.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IServiceReferenceHolder">
            <summary>
            Used to update all internal references from given provider.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IServiceReferenceHolder.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider">
            <summary>
            Used for get references from provider.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The type.</param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionEx.m_members">
            <summary>
            Typed members storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionEx.m_owner">
            <summary>
            Collection owner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionEx.m_bQuietMode">
            <summary>
            Indicates whether collection events are raized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionEx.m_bUpdateReferences">
            <summary>
            Indicates whether collection will update its members service refences.
            </summary>
            <remarks>
            Used for helper collections like Selection containing or Active layers collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> class.
            </summary>
            <param name="owner">The collection owner</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor(Syncfusion.Windows.Forms.Diagram.CollectionEx)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> class.
            </summary>
            <param name="src">The collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">
            <paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.-or- The <see cref="T:System.Collections.IList"/> has a fixed size. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero. </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="array"/> is multidimensional.-or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. </exception>
            <exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references using service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Provides the service reference for object that use that instance.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RaiseViewerEvent(System.Object,System.Boolean)">
            <summary>
            Raises viewer event.
            </summary>
            <param name="selectedEvent">true if NodeSelected event should be raised; otherwise, false.</param>
            <param name="value">value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Sort(System.Collections.IComparer)">
            <summary>
            Sort list using the specified comparer.
            </summary>
            <param name="comparer">The comparer to sort items.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">The values to validate.</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:Changing"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.OnChangesComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:ChangesComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.AddValue(System.Object)">
            <summary>
            Adds an item to the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.AddRange(System.Collections.ICollection)">
            <summary>
            Adds an items to the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.
            </summary>
            <param name="values">The <see cref="T:System.Collections.ICollection"/> to add to the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Clear">
            <summary>
            Removes all items from the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.InsertValue(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> at the specified index.
            </summary>
            <param name="index">The zero-based index ar which <paramref name="index"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.Set(System.Int32,System.Object)">
            <summary>
            Assigns new value to member in specified position .
            </summary>
            <param name="index">The index of element.</param>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RemoveValue(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</param>
            <returns>true, if remove value otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RemoveRange(System.Collections.ICollection)">
            <summary>
            Removes the values occurrence of a specific object from the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.
            </summary>
            <param name="values">The <see cref="T:System.Collections.ICollection"/> to remove from the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionEx"/>.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Updates the service references the collection members.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RecordCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,Syncfusion.Windows.Forms.Diagram.CollectionEx,System.Object,System.Int32)">
            <summary>
            Records the collection changes.
            </summary>
            <param name="changeType">Type of the change.</param>
            <param name="collection">The changed collection.</param>
            <param name="element">The changed element.</param>
            <param name="nIndex">Index of the element in specified collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RecordCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,Syncfusion.Windows.Forms.Diagram.CollectionEx,System.Collections.ICollection,System.Int32)">
            <summary>
            Records the collection changes.
            </summary>
            <param name="changeType">Type of the change.</param>
            <param name="collection">The changed collection.</param>
            <param name="elements">The changed collection elements.</param>
            <param name="nIndex">Index of the first element of the changes elements in specified collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RaiseChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise Changing event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionEx.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.QuietMode">
            <summary>
            Gets or sets a value indicating whether quiet mode for events raising.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.UpdateReferences">
            <summary>
            Gets or sets a value indicating whether members service references will be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.Owner">
            <summary>
            Gets or sets the collection owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.Members">
            <summary>
            Gets the collection members.
            </summary>
            <value>The members.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.EventSink">
            <summary>
            Gets the reference event sink.
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The object in list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionEx.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodeCollection.c_strNODE">
            <summary>
            Name of the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> class.
            </summary>
            <param name="src">The node collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> class.
            </summary>
            <param name="src">The node collection</param>
            <param name="cloning">Clone the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Add(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Adds an node to the end of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </summary>
            <param name="node">The node to add.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Searches for the specified node and returns the zero-based index of 
            the first occurrence within the entire <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="node"/> 
            within the entire <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>, 
            if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Inserts an element into the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </summary>
            <param name="index">The zero-based starting index of the search.</param>
            <param name="node">The node to locate in the 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Remove(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes the first occurrence of a specific node from the 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </summary>
            <param name="node">The node.</param>
            <returns>true, if remove the node, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Remove(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Removes a range of elements from the 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Contains(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines whether <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> 
            contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>
            <c>true</c> if NodeCollection contains the specified node; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.CopyTo(Syncfusion.Windows.Forms.Diagram.Node[],System.Int32)">
            <summary>
            Copies the entire <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> 
            to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the beginning of the target array.
            </summary>
            <param name="nodes">The one-dimensional array that is the destination 
            of the elements copied from <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.</param>
            <param name="index">is equal to or greater than the length of <paramref name="nodes"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Contains(System.String)">
            <summary>
            Determines whether <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/> 
            contains the node with specified name.
            </summary>
            <param name="strNodeName">Name of the node.</param>
            <returns>
            <c>true</c> if NodeCollection contains the node with specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.RestoreConnections(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Restores the connections as original node.
            </summary>
            <param name="originalNode">The original node.</param>
            <param name="clonedNodes">The cloned node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.FindNodeByName(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Find node by unique name in cloned collection.
            </summary>
            <param name="node">The original node.</param>
            <param name="nodes">The cloned nodes collection.</param>
            <returns>The node having the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">The values to validate.</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.RaiseChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise Changing event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Updates the service references the collection members.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.GenerateUniqueName(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Generates the unique node name.
            </summary>
            <param name="node">The node.</param>
            <returns>The unique name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeCollection.FindNodeByName(System.String)">
            <summary>
            Finds the node by unique name.
            </summary>
            <param name="strNodeName">Name of the node.</param>
            <returns>The node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.First">
            <summary>
            Gets or sets the first item in collection.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If collection count less than 1.</exception>
            <value>The first.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Last">
            <summary>
            Gets or sets the last item in collection.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If collection count less than 1.</exception>
            <value>The last.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The node</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> with the specified node name.
            </summary>
            <param name="strNodeName">Node name.</param>
            <value>The node with the specified name.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection"/> class.
            Constructs a ClipboardNodeCollection given a GUID.
            </summary>
            <param name="srcGuid">GUID that identifies the source of the nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection"/> class.
            Serialization constructor for a ClipboardNodeCollection.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.CompareSourceGuid(System.Guid)">
            <summary>
            Compares the given GUID to the source GUID of the collection.
            </summary>
            <param name="guid">GUID to compare.</param>
            <returns>True if the GUIDs match; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClipboardNodeCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection">
            <summary>
            Collection of end points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.#ctor(Syncfusion.Windows.Forms.Diagram.EndPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Add(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Adds the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Returns the index of end point in current collection.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>The index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Insert end point to the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Remove(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Removes the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Contains(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Determines whether collection contains the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>
            <c>true</c> if [contains] [the specified end point]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.CopyTo(Syncfusion.Windows.Forms.Diagram.EndPoint[],System.Int32)">
            <summary>
            Copies members to array.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.GetEnumerator">
            <summary>
            Creates enumerator.
            </summary>
            <returns>Created enumerator</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">values to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Updates the service references.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointCollection.RaiseChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise Changing event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPoint"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The end point.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection">
            <summary>
            Collection of ConnectionPoint objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Add(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Adds the specified port.
            </summary>
            <param name="port">The port.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Port index in current collection.
            </summary>
            <param name="port">The port.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Inserts port to the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Remove(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Removes the specified port.
            </summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Contains(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Determines whether collection contains the specified port.
            </summary>
            <param name="port">The port.</param>
            <returns>
            <c>true</c> if collection contains the specified port; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.CopyTo(Syncfusion.Windows.Forms.Diagram.ConnectionPoint[],System.Int32)">
            <summary>
            Copy collection members to array.
            </summary>
            <param name="ports">The ports.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.FindConnectionPointByID(System.Int32)">
            <summary>
            Finds the connection point by ID.
            </summary>
            <param name="nID">The ID.</param>
            <returns>First end point with given ID.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">The values to validate.</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.OnChangesComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:ChangesComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPointCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The connection point.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> objects.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Label"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor(Syncfusion.Windows.Forms.Diagram.LabelCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollection"/> class.
            </summary>
            <param name="src">The label collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelCollection"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Add(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Adds the specified label.
            </summary>
            <param name="label">The label.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Returns the index of the label.
            </summary>
            <param name="label">The label.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Inserts label at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Remove(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Removes the specified label.
            </summary>
            <param name="label">The label.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Contains(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Determines whether the member contains the specified label.
            </summary>
            <param name="label">The label.</param>
            <returns>
            <c>true</c> if it contains the specified label; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.CopyTo(Syncfusion.Windows.Forms.Diagram.Label[],System.Int32)">
            <summary>
            Copies the labels collection to the specified index.
            </summary>
            <param name="labels">The labels.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Contains(System.String)">
            <summary>
            Determines specified label name.
            </summary>
            <param name="strLabelName">Name of the label.</param>
            <returns>
            <c>true</c> if the specified STR label name is available; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">The values to validate.</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.OnChangesComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:ChangesComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelCollection.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollection.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The label at the specified index.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> with the specified STR label name.
            </summary>
            <param name="strLabelName">The index</param>
            <value>The label at the specified index.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayerCollection.c_strLAYER">
            <summary>
            Default new layer item name.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(Syncfusion.Windows.Forms.Diagram.LayerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Add(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Adds the specified layer.
            </summary>
            <param name="layer">The layer.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.IndexOf(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Gets the layer index in current collection.
            </summary>
            <param name="layer">The layer.</param>
            <returns>The index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Inserts the layer by specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Remove(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Removes the specified layer.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Contains(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Determines whether collection contains the specified layer.
            </summary>
            <param name="layer">The layer.</param>
            <returns>
            <c>true</c> if collection contains the specified layer; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.CopyTo(Syncfusion.Windows.Forms.Diagram.Layer[],System.Int32)">
            <summary>
            Copy all collection members to array.
            </summary>
            <param name="layers">The layers.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Contains(System.String)">
            <summary>
            Determines whether collections contains the layer with specified name.
            </summary>
            <param name="strLayerName">Name of the layer.</param>
            <returns>
            <c>true</c> if collection contains the layer with specified name; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.FindNodeLayer(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Finds the layer that contain given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The layer at the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.GetEnumerator">
            <summary>
            Creates the collection enumerator.
            </summary>
            <returns>Created enumerator</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:Changing"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnValidate(System.Object)">
            <summary>
            Validates given value.
            </summary>
            <param name="value">value to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnValidate(System.Collections.ICollection)">
            <summary>
            Validates given values.
            </summary>
            <param name="values">values to validate</param>
            <exception cref="T:System.InvalidCastException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.OnChangesComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:ChangesComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.RaiseChangesCompleteEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises ChangesComplete event.
            </summary>
            <param name="evtArgs">event args</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.GenerateUniqueName(Syncfusion.Windows.Forms.Diagram.Layer,System.String@)">
            <summary>
            Generates the unique name for given layer.
            </summary>
            <param name="layer">The layer.</param>
            <param name="layerName">Name of the layer.</param>
            <returns>true, if generate unique name otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.SplitLayerName(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Splits the name of the layer.
            </summary>
            <param name="layerName">Name of the layer.</param>
            <param name="regex">The regex.</param>
            <returns>The splitted layer name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.FindLayerByName(System.String)">
            <summary>
            Finds the layer by name.
            </summary>
            <param name="strLayerName">Name of the layer.</param>
            <returns>The layer with the specified name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.Container">
            <summary>
            Gets or sets the collection container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The layer at the specified index.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> with the specified layer name.
            </summary>
            <param name="strLayerName">The layer name.</param>
            <value>The layer with the specified name.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator">
            <summary>
            Implement enumerator for <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator.#ctor(Syncfusion.Windows.Forms.Diagram.LayerCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator"/> class.
            </summary>
            <param name="layers">The layers.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerCollection.LayerEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionEEventHandler">
            <summary>
            Collection event handler delegate.
            </summary>
            <param name="sender">The sender</param>
            <param name="evtArgs">Event Args</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs">
            <summary>
            CollectionEx event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.#ctor(System.Object,Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Object,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="changeType">Type of the change.</param>
            <param name="element">The element.</param>
            <param name="nIndex">Index of the n.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.#ctor(System.Object,Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,System.Collections.ICollection,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> class.
            </summary>
            <param name="owner">The owner.</param>
            <param name="changeType">Type of the change.</param>
            <param name="elements">The elements.</param>
            <param name="nIndex">Index of the n.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Owner">
            <summary>
            Gets Owner of this collection change.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.ChangeType">
            <summary>
            Gets ColectionEx change type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Index">
            <summary>
            Gets index of the element involved in collection change.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether cancels pending collection changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Elements">
            <summary>
            Gets elements involved in collection change.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs.Element">
            <summary>
            Gets element involved in collection change.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType">
            <summary>
            Identifies a type of changes made to a collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Insert">
            <summary>
            One or more items were inserted into collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Remove">
            <summary>
            One or more items were removed from collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Clear">
            <summary>
            All of the items were removed from collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionExChangeType.Set">
            <summary>
            One of the collection items was modified.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ImageButton">
            <summary>
            Wizard button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageButton.NormalImage">
            <summary>
            Gets or sets the normal image.
            </summary>
            <value>The normal image.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ImageButton.HoverImage">
            <summary>
            Gets or sets the hover image.
            </summary>
            <value>The hover image.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICommand">
            <summary>
            This interface is implemented by command objects.
            </summary>
            <remarks>
            A command object encapsulates an action and the data required to
            perform the action. A command is executed using
            <see cref="M:Syncfusion.Windows.Forms.Diagram.ICommand.Do(System.Object)"/> and can
            be reversed using the <see cref="M:Syncfusion.Windows.Forms.Diagram.ICommand.Undo"/>
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommand.Do(System.Object)">
            <summary>
            Performs the action.
            </summary>
            <param name="target">Object that is acted upon (noun).</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommand.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommand.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICommand.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommand.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICommand.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DPN">
            <summary>
            Diagram Properties names
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionModifyCommand">
            <summary>
            Collection modify commands.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionModifyCommand.updateBounds(System.String,System.Object,System.Int32,System.Boolean)">
            <summary>
            update group's children bounds while performing undo/redo operation
            </summary>
            <param name="ownerDescription">ownerDescription only for Group</param>
            <param name="target">parent</param>
            <param name="cmdIndex">index of the command</param>
            <param name="undoOperation">checking the undo or redo operation</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CollectionModifyCommand.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CollectionModifyCommand.Reverse(System.Collections.ICollection)">
            <summary>
            Reverse the sequence of the elements.
            </summary>
            <param name="elements">The elements.</param>
            <returns>The collection.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MacroCmd">
            <summary>
            List of commands that are bundled into a single command.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MacroCmd"/> class.
            </summary>
            <param name="strDescription">The description.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.SetModel(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            set the value of current parent
            </summary>
            <param name="model">model</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Do(System.Object)">
            <summary>
            Executes all commands in the macro.
            </summary>
            <param name="cmdTarget">Command target object.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.AddCommand(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Add a command to the macro.
            </summary>
            <param name="cmd">Command to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Clear">
            <summary>
            Removes all commands from the macro.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MacroCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MacroCmd.cmds">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MacroCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MacroCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd">
            <summary>
            Command used for save handle changes to history.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.m_pathNode">
            <summary>
            Move handle container. Used to check if handle is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.m_ptsPrevPathPoints">
            <summary>
            Path points in model coordinates what use to undo changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.m_ptsNewPathPoints">
            <summary>
            Path points in model coordinates what use to redo changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd"/> class.
            </summary>
            <param name="pathNode">The path node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.Do(System.Object)">
            <summary>
            Performs the action.
            </summary>
            <param name="target">Object that is acted upon (noun).</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.DisableMerging">
            <summary>
            Disable the merging of control points.
            </summary>
            <returns>true, if disable merging.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.RestoreMerging(System.Boolean)">
            <summary>
            Restore node previous state.
            </summary>
            <param name="bMerge">if set to <c>true</c> to enable merge flag.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MoveHandleCmd.PathNodeConnectorState">
            <summary>
            Gets or sets the state of the path node connector.
            </summary>
            <value>The state of the path node connector.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd">
            <summary>
            Command used with PathNode's GraphicsPath updating.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd"/> class.
            </summary>
            <param name="nodePath">The node path.</param>
            <param name="pathCurrent">The path current.</param>
            <param name="pathToCombineWith">The path to combine with.</param>
            <param name="bConnect">if set to <c>true</c>  combined graphics paths.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.Do(System.Object)">
            <summary>
            Performs the action.
            </summary>
            <param name="target">Object that is acted upon (noun).</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetGraphicsPathCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetPointsCmd">
            <summary>
            Command used with PathNode's GraphicsPath updating.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SetPointsCmd"/> class.
            </summary>
            <param name="nodePath">The node path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.Do(System.Object)">
            <summary>
            Performs the action.
            </summary>
            <param name="target">Object that is acted upon.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.DisableMerging">
            <summary>
            Disable the merging of control points.
            </summary>
            <returns>true, if disable merging.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.RestoreMerging(System.Boolean)">
            <summary>
            Restore node previous state.
            </summary>
            <param name="bMerge">if set to <c>true</c> to enable merge flag.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.GetOldValue">
            <summary>
            Get the old path points array.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPointsCmd.PathNodeConnectorState">
            <summary>
            Gets or sets the state of the path node connector.
            </summary>
            <value>The state of the path node connector.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd">
            <summary>
            Sets the value of a property in one or more nodes.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd"/> class.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.String,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd"/> class.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="szMoveOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified CMD merging.
            </summary>
            <param name="cmdMerging">The CMD merging.</param>
            <returns>
            <c>true</c> if this instance can merge the specified CMD merging; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command to merge.
            </summary>
            <param name="cmtToMerge">The command to merge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Do(System.Object)">
            <summary>
            Does the specified command target.
            </summary>
            <param name="cmdTarget">The command target.</param>
            <returns>true, if do the specified command target.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.PropertyContainer">
            <summary>
            Gets the property container.
            </summary>
            <value>The property container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.AffectedPropertyPath">
            <summary>
            Gets the affected property path.
            </summary>
            <value>The affected property path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.AffectedProperty">
            <summary>
            Gets the affected property.
            </summary>
            <value>The affected property.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SetPropertyCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexCmd">
            <summary>
            Vertex commands
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexCmd.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexCmd"/> class.
            </summary>
            <param name="nodeVertexContainer">The node vertex container.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nVertexIdx">The vertex index.</param>
            <param name="ptVertexLocation">The vertex location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexCmd.Do(System.Object)">
            <summary>
            Does the specified command target.
            </summary>
            <param name="cmdTarget">The command target.</param>
            <returns>true, if do the specified command target.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexCmd.Undo">
            <summary>
            Reverses the command.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command.
            </summary>
            <param name="command">The command.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.VertexCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd">
            <summary>
            Change the Z-order of one or more nodes.
            </summary>
            <remarks>
            <para>Z-order determines the order in which nodes are rendered
            and affects how nodes overlap.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> class.
            </summary>
            <param name="nodeAffected">Node which ZOrder has changed.</param>
            <param name="changeType">Specifies how Z-order will be changed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Do(System.Object)">
            <summary>
            Executes the ZOrderCmd.
            </summary>
            <param name="cmdTarget">Not used.</param>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            <para>
            Loops through the nodes attached to the command and changes the Z-order of each
            node. The type of change made to the Z-order is specified by the ZOrderUpdate
            parameter passed in the constructor. The parent of each node must support the
            IZOrderContainer service.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IZOrderContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Undo">
            <summary>
            Restores the Z-order of the attached nodes back to their original position.
            </summary>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command to previous recorded command.
            </summary>
            <param name="cmd">The command to merge.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to last recorded command; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command with last recorded user operation.
            </summary>
            <param name="cmd">The command to merge.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.commands">
            <summary>
            List of commands to execute.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.Description">
            <summary>
            Gets short, user-friendly description of the command.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderCmd.CanUndo">
            <summary>
            Gets a value indicating whether or not the command supports undo.
            </summary>
            <value>true, if can undo.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderComparer">
            <summary>
            Change the z-order of the nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>The value indicating whether one
            is less than, equal to or greater than the other.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ReverseZOrderComparer">
            <summary>
            Reverse the z-order of the nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ReverseZOrderComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>The value indicating whether one
            is less than, equal to or greater than the other.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate">
            <summary>
            Specifies relative Z-order movement.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Front">
            <summary>
            Move to front of Z-order.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Back">
            <summary>
            Move to back of Z-order.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Forward">
            <summary>
            Move forward in Z-order by 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Backward">
            <summary>
            Move backward in Z-order by 1.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZOrderUpdate.Set">
            <summary>
            Sets specified Z-order.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexChangeType">
            <summary>
            Specifies vertex change type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.VertexChangeType.Insert">
            <summary>
            Insert vertex.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.VertexChangeType.Remove">
            <summary>
            Remove vertex.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.VertexChangeType.Set">
            <summary>
            Set vertex.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl">
            <summary>
            Drawing scale control.
            </summary>
            <summary>
            Drawing scale control designer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.PageScaleChanged">
            <summary>
            Occurs when page scale is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.PageSizeChanged">
            <summary>
            Occurs when page size is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.MeasureUnitsChanged">
            <summary>
            Occurs when measure units is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.PageScale">
            <summary>
            Gets or sets the page scale.
            </summary>
            <value>The page scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.PageSize">
            <summary>
            Gets or sets the size in measure current measurement units.
            </summary>
            <value>The size in current measurement units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DrawingScaleControl.MeasureUnits">
            <summary>
            Gets or sets the current setting measure units.
            </summary>
            <value>The measure units.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureTextBox">
            <summary>
            Measure TextBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureTextBox"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the TextChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.OnEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Enter"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.SetValue(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the value.
            </summary>
            <param name="fValue">The value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.ValueChanging">
            <summary>
            Occurs when value is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.ValueChanged">
            <summary>
            Occurs when value is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.Text">
            <summary>
            Gets or sets the current text in the <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <value></value>
            <returns>The text displayed in the control.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.DefaultMeasureUnits">
            <summary>
            Gets or sets the default measure units.
            </summary>
            <value>The default measure units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.ValidatedValue">
            <summary>
            Gets a value indicating whether value is validated.
            </summary>
            <value><c>true</c> if value is validated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureTextBox.MeasureUnits">
            <summary>
            Gets or sets the measure units.
            </summary>
            <value>The measure units.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageSizeControl">
            <summary>
            Page size control
            </summary>
            <summary>
            Page size control class designer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSizeControl"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PageSizeControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.PageSizeControl.PageSizeChanged">
            <summary>
            Occurs when page size is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeControl.PrinterSettings">
            <summary>
            Gets or sets the printer settings.
            </summary>
            <value>The printer settings.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeControl.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeControl.PageLandscape">
            <summary>
            Gets or sets a value indicating whether page landscape is checked.
            </summary>
            <value><c>true</c> if page landscape is checked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeControl.ModelContentSize">
            <summary>
            Gets or sets the size of content of the model.
            </summary>
            <value>The content of the model.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor">
            <summary>
            Editor used for Header and Footer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            true if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)"/> is implemented; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm">
            <summary>
            Header footer form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.btn1_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the button control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterForm.TextBox">
            <summary>
            Gets or sets the text box.
            </summary>
            <value>The text box.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ImageLayoutEditor">
            <summary>
            Image Layout Editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageLayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageLayoutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageLayoutEditor.SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the selected index changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelNameEditor">
            <summary>
            Property editor for default label name in a symbol.
            </summary>
            <remarks>
            This custom property editor displays a combo box filled with the
            collection of labels available in a symbol.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelNameEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            true if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)"/> is implemented; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerNameEditor">
            <summary>
            Property editor for default layer name in a model.
            </summary>
            <remarks>
            This custom property editor displays a combo box filled with the
            collection of layers available in a model.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerNameEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicates whether the specified context supports painting a representation of an object's value within the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            true if <see cref="M:System.Drawing.Design.UITypeEditor.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)"/> is implemented; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive">
            <summary>
            Base class for node's primitives like ControlPoint, EndPoint, ConnectionPoint etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer">
            <summary>
            A style is an object that encapsulates one or more properties
            in a property container.
            </summary>
            <remarks>
            Style objects provide a wrapper for a collection of properties in
            a property container. Getting and setting properties through a style
            object is easier than doing it through the IPropertyContainer interface
            because the style object provides type-safe wrappers for each property.
            The properties exposed through a style object are also browsable in
            the property grid.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPropertyObserver">
            <summary>
            Base property container interface to notify all properties changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyObserver.OnPropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property changing otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyObserver.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer">
            <summary>
            Template interface type that contains Container Name property and GetPropertyContainerByName method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the name of the property container by.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IPropertyContainer.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyContainer.m_units">
            <summary>
            Container measure units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyContainer.m_bInheritContainerUnits">
            <summary>
            Indicates whether node's units will change on its container's MeasureUnits changing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.#ctor(Syncfusion.Windows.Forms.Diagram.PropertyContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider,Syncfusion.Windows.Forms.Diagram.HistoryManager)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
             <param name="provider">The History.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.RecordPropertyChanged(System.String)">
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.OnPropertyChanging(System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property is changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.OnPropertyChanged(System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the container of the property by name.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns>The property container.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measure units changing.
            </summary>
            <param name="from">The old value.</param>
            <param name="to">The new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>The property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyContainer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.PropertyObserber">
            <summary>
            Gets the property observer.
            </summary>
            <value>The property observer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            <c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.HistoryService">
            <summary>
            Gets the history manager service.
            </summary>
            <value>The history manager service.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyContainer.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.m_delUpdCallback">
            <summary>
            Delegate used to update container node's refresh rect.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive"/> class.
            </summary>
            <param name="container">The primitive container node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive"/> class.
            </summary>
            <param name="container">The primitive container node.</param>
            <param name="position">The primitive position relative to its container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.#ctor(Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.GetPosition">
            <summary>
            Gets the primitive object position in local coordinates.
            </summary>
            <returns>Position of primitive in local coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.Draw(System.Drawing.Graphics)">
            <summary>
            Draws primitive to the specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <remarks>
            Call the abstract method - Render(Graphics gfx).
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.PositionChange(System.Single,System.Single)">
            <summary>
            Calling when primitive position is changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.RecordPropertyChanged(System.String)">
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Name of the changed property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert to required measurement units
            </summary>
            <param from="MeasureUnits">Convert from Measurement unit.</param>
            <param to="MeasureUnits">Convert to Measurement unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.Render(System.Drawing.Graphics)">
            <summary>
            Renders the primitive object to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data to serialize instance.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.InvokeUpdateCallback">
            <summary>
            Invokes the update refresh rectangle callback. Used for update refresh rectangle 
            for container by calling prospected non-parameter method UpdateRefreshRect().
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.Position">
            <summary>
            Gets or sets the position of primitive in local coordinates.
            </summary>
            <value>The position relative to its container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.Container">
            <summary>
            Gets or sets the container node of primitive.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.OffsetX">
            <summary>
            Gets or sets AnchoringPrimitive offset in percents
            relative to its container's width from container's top left point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.OffsetY">
            <summary>
            Gets or sets AnchoringPrimitive offset in percents
            relative to its container's height from container's top left point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AnchoringPrimitive.ID">
            <summary>
            Gets or sets the unique AnchoringPrimitive ID.
            </summary>
            <value>The unique ID.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Port">
            <summary>
            Connection port.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint">
            <summary>
            The port bases class that use to connect end point to node.
            Collected in <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointCollection"/> collection in Node class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint"/> class.
            </summary>
            <param name="container">The node container.</param>
            <param name="gpPortShape">The port path shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectionPoint"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.CanConnect(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Determines whether this instance can connect the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified end point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.TryConnect(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Tries the connect to specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified end point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Connect(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Connect the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Disconnect(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Disconnect from the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.DisconnectAll">
            <summary>
            Disconnects from all connected endpoints.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.PositionChange(System.Single,System.Single)">
            <summary>
            Calling when primitive position is changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data to serialize instance.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Render(System.Drawing.Graphics)">
            <summary>
            Renders the primitive object to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Connectors">
            <summary>
            Generate the Bridge when current port is intersected with these connectors. 
            if not intersected, then update the bridge and remove the connectors from these collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.FullName">
            <summary>
            Gets or sets the unique connection point full name.
            </summary>
            <value>The unique port full name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Name">
            <summary>
            Gets or sets the unique connection point name.
            </summary>
            <value>The unique port name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Connections">
            <summary>
            Gets the collection of connected EndPoint's.
            </summary>
            <value>The EndPoint collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.ConnectionPointType">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.ConnectionPointType"/> type of the connection point.
            Determine if port can connect to <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint"/> or <see cref="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint"/> or both.
            </summary>
            <value>The type of the connection point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.ConnectionsLimit">
            <summary>
            Gets or sets the connections limit. Determine max connections count.
            </summary>
            <value>The connections limit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Tag">
            <summary>
            User-defined data associated with the object.
            </summary>
            <value>The <see cref="T:System.Object"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.Size">
            <summary>
            Gets or sets the connection point size.
            </summary>
            <value>The size of the port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.VisualType">
            <summary>
            VisualType contains <see cref="T:Syncfusion.Windows.Forms.Diagram.PortVisualType"/> for current ConnectionPoint.
            </summary>
            <value>The type of the visual shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.GraphicsPath">
            <summary>
            Gets or sets the graphics path. Return cloned graphics path instance.
            </summary>
            <value>The graphics path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.ConnectionPointSize">
            <summary>
            Size of the current ConnectionPoint. Calculated from port path shape.
            </summary>
            <value>The size of the connection point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.LineStyle">
            <summary>
            Line drawing properties for this connection point.
            </summary>
            <value>The line style.</value>
            <remarks>
            The line style determines the configuration of the pen used to
            render lines.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectionPoint.FillStyle">
            <summary>
            Properties used to fill the interior.
            </summary>
            <value>The fill style.</value>
            <remarks>
            	<para>
            The fill style is used to create brushes for painting interior
            </para>
            	<seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecorator">
            <summary>
            End point decorator.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Link">
            <summary>
            Link to connect the nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineConnector">
            <summary>
            Class containing Line Connector.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase">
            <summary>
            Template connector class that contains Head and Tail EndPoints, CompassHeadings, Segments and Bridges.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineBase">
            <summary>
            Base shape class to visualize line with end point decorators.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PathNode">
            <summary>
            Basic shape node that contain collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/>,
            segments, vertices to draw simple shapes.
            </summary>
            <remarks>
            Used as base class for <see cref="T:Syncfusion.Windows.Forms.Diagram.FilledPath"/> 
            and <see cref="T:Syncfusion.Windows.Forms.Diagram.LineBase"/> nodes.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Node">
            <summary>
            Abstract class that implement base methods that used to transform and visualize 
            diagram objects. Implement moving, rotating, scaling, hittesting and serialization.
            </summary>
            <remarks>
            This is a basic object on the diagram that can represent connectors, images,
            text box, controls and other simple shapes.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IUnitIndependent">
            <summary>
            Contains all node trasformation methods related with PinPoint position, PintPoint Offset, Size and Bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.GetBoundingRectangle(Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean)">
            <summary>
            Gets the bounding rectangle.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <param name="bRelativeToModel">if set to <c>true</c> to get bounds in model coordinates, otherwise - <c>false</c>.</param>
            <returns>The <see cref="T:System.Drawing.RectangleF"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.GetPinPoint(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the node pin point.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The <see cref="T:System.Drawing.PointF"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.GetSize(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the node size.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The <see cref="T:System.Drawing.SizeF"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.GetPinPointOffset(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the node pin point offset.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The <see cref="T:System.Drawing.SizeF"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.SetPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the node pin point.
            </summary>
            <param name="ptValue">The new value.</param>
            <param name="unit">The measure unit of ptValue parameter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.SetSize(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the node size.
            </summary>
            <param name="szValue">The new value.</param>
            <param name="unit">The measure unit of szValue parameter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IUnitIndependent.SetPinPointOffset(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the node pin point offset.
            </summary>
            <param name="szValue">The new value.</param>
            <param name="unit">The measure unit of szValue parameter.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents">
            <summary>
            Provides nodes with a mechanism for forwarding events up the node hierarchy.
            </summary>
            <remarks>
            Nodes that implement this interface can be notified of events and will
            respond by either forwarding the event up the node hierarchy or handling the
            event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.Click(System.EventArgs)">
            <summary>
            Called when a node is clicked.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.DoubleClick(System.EventArgs)">
            <summary>
            Called when a node is double clicked.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseEnter(System.EventArgs)">
            <summary>
            Called when the mouse enters a node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents.MouseLeave(System.EventArgs)">
            <summary>
            Called when the mouse leaves a node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.INode">
            <summary>
            Interface to a node in a hierarchy or graph of objects.
            </summary>
            <remarks>
            <para>
            A node is a named object in a hierarchical tree structure. Each node
            has a <see cref="P:Syncfusion.Windows.Forms.Diagram.INode.Name"/>
            and a parent. A node's name must is unique within the scope of its
            parent node. The
            <see cref="P:Syncfusion.Windows.Forms.Diagram.INode.FullName"/>
            of a node is unique within the scope of the entire node hierarchy.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Parent">
            <summary>
            Gets or sets reference to the composite node this node is a child of.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Root">
            <summary>
            Gets root node in the node hierarchy.
            </summary>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.Name">
            <summary>
            Gets or sets name of the node.
            </summary>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.INode.FullName">
            <summary>
            Gets fully qualified name of the node.
            </summary>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGraphNode">
            <summary>
            Interface to a node in a graph.
            </summary>
            <remarks>
            A node is an object in a graph that can have edges entering
            and leaving. Nodes are connected to other nodes by edges.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.Edges">
            <summary>
            Gets collection of all edges entering or leaving the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.EdgesEntering">
            <summary>
            Gets collection of edges entering the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphNode.EdgesLeaving">
            <summary>
            Gets collection of edges leaving the node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_AllowLabelDrag">
            <summary>
            Member of the class for allow to drag the labels
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_ZOrder">
            <summary>
            Member of the class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_grphPath">
            <summary>
            Member of the LogicalGraphicsPath property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bObstacle">
            <summary>
            Indicates whether LineRouter
            will treat this node as obstacle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_centralPort">
            <summary>
            Reference to center port in port collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bEnableCentralPort">
            <summary>
            Indicated whether center port is enable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_strName">
            <summary>
            Node's name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_parent">
            <summary>
            Node's parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bVisible">
            <summary>
            Indicates whether node is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_isExpanded">
            <summary>
            Indicates whether node is Expanded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_layers">
            <summary>
             Layers the shape belongs to.
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_rgnCache">
            <summary>
            Region used for HitTesting.
            </summary>
            <remarks>
            Internal usage only.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_fPadding">
            <summary>
            Helper member used to store previous hit test padding value.
            If padding value is not equal to value stored in m_fPadding member
            cached region used to hit test point is recreated.
            </summary>
            <remarks>
            Internal usage only.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_fHitTestPadding">
            <summary>
            Padding around the node used for hit testing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_fRotationAngle">
            <summary>
            Node's rotation angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bFlipX">
            <summary>
            Indicates whether node is flipped along X axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bFlipY">
            <summary>
            Indicates whether node is flipped along Y axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_styleLine">
            <summary>
            Properties for creating pens to draw lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_styleEdit">
            <summary>
            Properties for determining edit capabilities.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_styleShadow">
            <summary>
            Shape's shadow style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_provider">
            <summary>
            Service references provider.
            </summary>
            <remarks>
            Provides references to HistoryManger and DocumentEventSink.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_mgrHistory">
            <summary>
            History manager reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_eventSink">
            <summary>
            DocumentEventSink reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_mgrLink">
            <summary>
            Link Manager reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_mgrBridge">
            <summary>
            Bridge Manager reference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bLockUpdate">
            <summary>
            Lock updates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bDrawPorts">
            <summary>
            Indicates whether node ports are visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bPrintPorts">
            <summary>
            Indicates whether node port is Visible while printing or not. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bInheritContainerUnits">
            <summary>
            Indicates whether node's units will change on its container's MeasureUnits changing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_rectBounding">
            <summary>
            Cached node's bounding rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_rectRefresh">
            <summary>
            Cached node's refresh rectangle.
            </summary>
            <remarks>
            Defines node's refresh rectangle used during rendering.
            Differs from BoundingRectangle as it includes additional data
            such as labels, ports, connector bridges etc.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_objTag">
            <summary>
            Custom data associated with Node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_bPortUpdating">
            <summary>
            Indicate whether node updating self ports connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_nodeContainer">
            <summary>
            Container node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_nPropertyBag">
            <summary>
            Dynamic property data
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Node.m_strToolTipText">
            <summary>
            Tooltip text associated with the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the name of the property container by.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnPropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Draw(System.Drawing.Graphics)">
            <summary>
            Draws object to the specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Draw(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws object to the specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="bExcludeTransformation">if set to <c>true</c> to draws the object without the transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.PrepareGraphics(System.Drawing.Graphics)">
            <summary>
            Prepares the graphics to draw.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.RenderContiguousData(System.Drawing.Graphics)">
            <summary>
            methods used to draw contiguous date. Such as labels or ports
            </summary>
            <param name="gfx">Graphics to draw on </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws shape's shadow on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Performs given point hit test.
            </summary>
            <param name="ptTest">Point to test</param>
            <remarks>
            Point must be in pixel units.
            </remarks>
            <returns>true, if contains point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ShowResizeHandles">
            <summary>
            Indicate that selection and resize handles will draw on diagram canvas.
            </summary>
            <returns>true, if show resize handles.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Translate(System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Moves the shape by the given X and Y offsets.
            </summary>
            <param name="fX">Distance to move along X axis.</param>
            <param name="fY">Distance to move along Y axis.</param>
            <param name="measureUnits">Specifies translate offsets measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Translate(System.Single,System.Single)">
            <summary>
            Moves the shape by the given X and Y offsets.
            </summary>
            <param name="fX">Distance to move along X axis.</param>
            <param name="fY">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Rotate(System.Single)">
            <summary>
            Rotates the shape a specified number of degrees about its center point.
            </summary>
            <param name="degrees">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Scale(System.Single,System.Single)">
            <summary>
            Scales the shape about its center point by a given ratio.
            </summary>
            <param name="fScaleFactorX">Scaling ratio for X axis.</param>
            <param name="fScaleFactorY">Scaling ratio for Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.AppendFlipTransforms(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Appends filp transformation to given matrix
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.AppendLocalFlipTransforms(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Appends filp transformation to given matrix
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetTransformations">
            <summary>
            Gets node's transformations.
            </summary>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetLocalTransformations">
            <summary>
            Gets local node's transformations.
            </summary>
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetParentTransformation(System.Boolean)">
            <summary>
            Gets the parent transformation.
            </summary>
            <param name="bCurrentInclude">if set to <c>true</c> to include current node transformation.</param>
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.AppendFlipTransforms(System.Drawing.Drawing2D.Matrix,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Appends the flip transforms.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="ptPinPoint">Node's pin point.</param>
            <param name="bFlipX">if set to <c>true</c> flip X will flipped vertical.</param>
            <param name="bFlipY">if set to <c>true</c> flip Y will flipped horizontal.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetTransformations(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Gets the transformations.
            </summary>
            <param name="ptPinPoint">The pin point.</param>
            <param name="szPinOffset">The pin offset.</param>
            <param name="fAngle">The rotation angle.</param>
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnMeasurementUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measurement units value changing.
            </summary>
            <param name="unitsNew">The units new.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.QuiteBoundarySet(System.Boolean)">
            <summary>
            Quites set boundary value without record in history and calling sink events.
            </summary>
            <param name="bBoundaryConstraintsEnabled">if set to <c>true</c> boundary constraints enabled.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on pin offset value changed.
            </summary>
            <param name="szOldPinOffset">The old pin offset value.</param>
            <param name="szNewPinOffset">The new pin offset value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on size value changed.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SafeHistoryPause">
            <summary>
            Safe pause history recording.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SafeHistoryResume">
            <summary>
            Safe restore history recording.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnNodeScaleChanged(System.String)">
            <summary>
            Called when node scale factor is changed.
            </summary>
            <param name="strPropertyName">The property name that change scale factor value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.DrawShadowInternal(System.Drawing.Graphics)">
            <summary>
            Draws the node shadow internal.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateBoundingRectangle">
            <summary>
            Updates the bounding rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetNodeBounds(System.Boolean,System.Boolean)">
            <summary>
            Gets the Node bounds with or without the labels or ports 
            </summary>
            <param name="excludeLabel">if true, include the label bounds, otherwise exclude</param>
            <param name="excludePort">if true, include the Port bounds, otherwise exclude</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetRectBounds(System.Boolean,System.Boolean)">
            <summary>
            Return the path bounds of the node 
            </summary>
            <param name="excludeLabel">if true, include the label bounds, otherwise exclude</param>
            <param name="excludePort">if true, include the Port bounds, otherwise exclude</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetPathBounds">
            <summary>
            Methods used to get node's GraphicsPath
            </summary>
            <remarks>
            Used primarily for Group node to get
            all children paths union with transformations.
            </remarks>
            <returns>node's GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateRefreshRect">
            <summary>
            Updates node's refresh rect
            </summary>
            <remarks>
            Includes all contiguous data like ports, labels etc.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateRefreshRect(System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Updates node's refresh rect used node graphics path bounds.
            </summary>
            <param name="rcPathBounds">The node path bounds.</param>
            <param name="mtxNodeTransformation">Node matrix transformations.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rect.
            </summary>
            <param name="rcRefresh">The rc refresh.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetScaleTransformation">
            <summary>
            Gets the node scale transformation.
            </summary>
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ConvertToNodeCoordinates(System.Drawing.PointF)">
            <summary>
            Converts given point from model's to node's coordinates.
            </summary>
            <param name="ptToConvert">Point to convert.</param>
            <returns>Converted point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ConvertToModelCoordinates(System.Drawing.PointF)">
            <summary>
            Converts given point from node's to model's coordinates.
            </summary>
            <param name="ptToConvert">Point to convert.</param>
            <returns>Converted point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SetZOrder(System.Int32)">
            <summary>
            Set Zorder value to member 
            </summary>
            <param name="zOrder">zorder of the current node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Move(System.Single,System.Single)">
            <summary>
            Moves the specified offset.
            </summary>
            <param name="fX">The x offset.</param>
            <param name="fY">The y offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckPortsIntersectWithConnector">
            <summary>
            Checking the currently moving node's Ports are intersect with any connectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetAllPorts(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets all ports of the current Node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ChangeFlipX(System.Boolean)">
            <summary>
            Called after change the flipX value.
            </summary>
            <param name="value">New flip x value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ChangeFlipY(System.Boolean)">
            <summary>
            Called after change the flipY value.
            </summary>
            <param name="value">New flip y value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.ChangeRotationBy(System.Single)">
            <summary>
            Called after change the rotation by give angle.
            </summary>
            <param name="fRotationChange">The rotation angle offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SetPinOffset(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Sets the pin offset.
            </summary>
            <param name="szOldPinOffset">The old pin offset.</param>
            <param name="szNewPinOffset">The new pin offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SetSize(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">Old size.</param>
            <param name="szNewSize">New size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnParentChanging">
            <summary>
            Called when parent changing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnParentChanged">
            <summary>
            Called when parent changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.LogicalUnitChange(System.Drawing.GraphicsUnit)">
            <summary>
            Logicals the unit change.
            </summary>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateHelperRegion">
            <summary>
            Creates region used for hit testing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CanWiden(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Determine whether can widen the specified graphics path.
            </summary>
            <param name="path">The graphics path.</param>
            <returns>
            <c>true</c> if can widen the specified graphics path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnMouseClick(System.EventArgs)">
            <summary>
            Raises the mouse single click event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnMouseDoubleClick(System.EventArgs)">
            <summary>
            Raises the mouse double click event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the mouse enter event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the mouse leave event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.SetPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Set the pin point position.
            </summary>
            <param name="ptValue">The pin position.</param>
            <param name="unit">The measure unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.EventSink_PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs)">
            <summary>
            Raise when node property changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.EventSink_PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Raise when node property changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CreateBoundsInfo">
            <summary>
            Create the bounds info container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CreateBoundsInfo(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Creates the bounds info.
            </summary>
            <param name="ptPinPoint">The pin point position.</param>
            <param name="szPinPointOffset">The pin point offset.</param>
            <param name="szSize">The size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CreateBoundsInfo(Syncfusion.Windows.Forms.Diagram.BoundsInfo)">
            <summary>
            Creates the bounds info.
            </summary>
            <param name="src">The primary object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CreateBoundsInfo(Syncfusion.Windows.Forms.Diagram.BoundsInfo,Syncfusion.Windows.Forms.Diagram.PageScale)">
            <summary>
            Creates the bounds info.
            </summary>
            <param name="src">The primary object.</param>
            <param name="scale">The scale.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Expand(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Expand the selected node
            </summary>
            <param name="node">The node to get expanded.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Collapse(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Collapse the selected node
            </summary>
            <param name="node">The node to get collapsed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateCentralPort">
            <summary>
            Update center point in port collections.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdatePortPositions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Update port positions on change node size.
            </summary>
            <param name="szOldSize">Old size.</param>
            <param name="szNewSize">New size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateContainerBounds">
            <summary>
            Updates the container bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CanUpdateConnections(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Determines whether this EndPoint can update connections the specified end point.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>
            <c>true</c> if this EndPoint can update connections the specified end point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.IsClosedPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Determines whether specified shape is closed.
            </summary>
            <param name="path">The path.</param>
            <returns>
            <c>true</c> if the specified shape is closed ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetBoundsRect(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the cached bounds rectangle from given node.
            </summary>
            <param name="node">The node to get BoundRect property value.</param>
            <returns>The bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.UpdateGraphicsPath(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Updates the graphics path and region.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetUpperLeftPoint(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the upper left point in given units.
            </summary>
            <param name="unit">The graphics unit.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.RecordPropertyChanged(System.String)">
            <summary>
            Updates the ports connections.
            </summary>
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Property name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnRotationChanging(System.Single)">
            <summary>
            Called when rotation changing.
            </summary>
            <param name="fRotationOffset">The rotation change.</param>
            <returns>true, if rotationg changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnRotationChanged(System.Single)">
            <summary>
            Called when rotation changed.
            </summary>
            <param name="fRotationOffset">The rotation change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnFlipXChanging(System.Boolean)">
            <summary>
            Called when flip X changing.
            </summary>
            <param name="bFlipX">if set to <c>true</c> flipped horizontal .</param>
            <returns>true, if flip x changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnFlipXChanged(System.Boolean)">
            <summary>
            Called when flip X changed.
            </summary>
            <param name="bFlipX">if set to <c>true</c> flipped horizontal.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnFlipYChanging(System.Boolean)">
            <summary>
            Called when flip Y changing.
            </summary>
            <param name="bFlipY">if set to <c>true</c> flipped vertical.</param>
            <returns>true, if flip Y changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnFlipYChanged(System.Boolean)">
            <summary>
            Called when Flip Y changed.
            </summary>
            <param name="bFlipY">if set to <c>true</c> flip vertical.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckConstrainingRegion(System.Drawing.PointF)">
            <summary>
            Checks the constraining region.
            </summary>
            <param name="ptPoint">The given point.</param>
            <returns>true, if check constraining region</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckConstrainingRegion(System.Drawing.RectangleF)">
            <summary>
            Checks the constraining region.
            </summary>
            <param name="bounds">The bounds.</param>
            <returns>true, if check constraining region.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckConstrainingRegion(System.Drawing.Drawing2D.Matrix,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Checks the constraining region.
            </summary>
            <param name="matrixTransformation">The matrix append.</param>
            <param name="ptPinPoint">Node's pin point.</param>
            <param name="szSize">Node's size.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckNewPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new pin point.
            </summary>
            <param name="ptPinPoint">The pin point.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckNewPinOffset(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new pin offset.
            </summary>
            <param name="szPinOffset">The pin offset.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckNewSize(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new size.
            </summary>
            <param name="szSize">The new size.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckNewRotationAngle(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new rotation angle.
            </summary>
            <param name="fAngle">The rotation angle.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.CheckNewFlipValue(System.Boolean,System.Boolean,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new flip value.
            </summary>
            <param name="bFlipX">Flip by vertical if set to <c>true</c>.</param>
            <param name="bFlipY">Flip by horizontal if set to <c>true</c>.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#GetPinPoint(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the pin point.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The pin point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#GetSize(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the size.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#GetPinPointOffset(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the pin point offset.
            </summary>
            <param name="unit">The unit.</param>
            <returns>The pin point offset/</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#GetBoundingRectangle(Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean)">
            <summary>
            Gets the bounding rectangle.
            </summary>
            <param name="unit">The unit.</param>
            <param name="bRelativeToModel">if set to <c>true</c> to get bounds in model coordinates, otherwise - <c>false</c>.</param>
            <returns>
            The <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#SetPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Set the pin point.
            </summary>
            <param name="ptValue">The location value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#SetSize(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Set the size.
            </summary>
            <param name="szValue">The new size value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.Syncfusion#Windows#Forms#Diagram#IUnitIndependent#SetPinPointOffset(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Set the pin point offset.
            </summary>
            <param name="szValue">The new offset size value.</param>
            <param name="unit">The unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Node.OnDeserialized">
            <summary>
            Called when node is deserialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.AllowLabelDrag">
            <summary>
            Enable/Disable to Drag the labels in Node
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.TreatAsObstacle">
            <summary>
            Gets or sets a value indicating whether node treat as obstacle.
            </summary>
            <value><c>true</c> if need node treat as obstacle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.PrintPorts">
            <summary>
            Gets or sets a value indicating whether node will draw it ports while printing.
            </summary>
            <value><c>true</c> if [print ports]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.DrawPorts">
            <summary>
            Gets or sets a value indicating whether node will draw it ports.
            </summary>
            <value><c>true</c> if n node will draw it ports; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Ports">
            <summary>
            Gets the node port collection.
            </summary>
            <value>The ports.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.ZOrder">
            <summary>
            Gets or sets node's ZOrder.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.EnableCentralPort">
            <summary>
            Gets or sets a value indicating whether central port is enabled.
            </summary>
            <value><c>true</c> if central port is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.CentralPort">
            <summary>
            Gets the center port from port collection.
            </summary>
            <value>The center port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Tag">
            <summary>
            Gets or sets Custom data associated with Node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.ExcludeFromLayout">
            <summary>
            Gets or sets a value indicating whether the node can be excluded from layout or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.IsExpanded">
            <summary>
            Gets or Sets the selected node as expand or collapse.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Name">
            <summary>
            Gets or sets node's name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.FullName">
            <summary>
            Gets fully qualified name of the node.
            </summary>
            <value></value>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Container">
            <summary>
            Gets or sets node's container node
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Parent">
            <summary>
            Gets or sets node's parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Root">
            <summary>
            Gets the root node in the node hierarchy.
            </summary>
            <value></value>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Visible">
            <summary>
            Gets or sets a value indicating whether node is visible.
            </summary>
            <remarks>
            This flag can be changed to True only if one of its owner layer are visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Layers">
            <summary>
            Gets the layers the shape belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.LineHitTestPadding">
            <summary>
            Gets or sets the line hit test padding.
            </summary>
            <value>The line hit test padding.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.MeasurementUnit">
            <summary>
            Gets or sets the measurement unit.
            </summary>
            <value>The measurement unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether container measure units can be inherited.
            </summary>
            <value>
            <c>true</c> if inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.LogicalGraphicsPath">
            <summary>
            Gets node graphics path without scale transformation.
            </summary>
            <value>The logical graphics path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.GraphicsPath">
            <summary>
            Gets cloned node GraphicsPath with appended scale transformations.
            </summary>
            <value>The graphics path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.HistoryManager">
            <summary>
            Gets the children to model history manager.
            </summary>
            <value>The history manager.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.EventSink">
            <summary>
            Gets the reference to model event sink.
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.PropertyBag">
            <summary>
            Gets or sets the dynamic property data dictionary.
            </summary>       
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.ToolTipText">
            <summary>
            Gets or sets the tooltip text associated with the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.RefreshRect">
            <summary>
            Gets node's refresh rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.BoundingRect">
            <summary>
            Gets or sets node's bounding rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.BoundsInfo">
            <summary>
            Gets the reference to bounds info.
            </summary>
            <value>The bounds info.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.BoundingRectangle">
            <summary>
            Gets the shape's bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Size">
            <summary>
            Gets or sets size of the node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.PinPointOffset">
            <summary>
            Gets or sets the node pin point offset.
            </summary>
            <value>The pin point offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.PinPoint">
            <summary>
            Gets or sets the node pin point position.
            </summary>
            <value>The pin point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.NodeScale">
            <summary>
            Gets or sets the node scale.
            </summary>
            <value>The node scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.ShadowStyle">
            <summary>
            Gets properties of the shadow applied to the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.LineStyle">
            <summary>
            Gets line drawing properties for this node.
            </summary>
            <remarks>
            Gets the line style determines the configuration of the pen used to
            render lines.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.EditStyle">
            <summary>
            Gets edit properties for this node.
            </summary>
            <remarks>
            Edit properties determine how this node can be edited.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>The rotation angle in range [ -180; 180 ].</value>
            <remarks>
            Rotation angle saved in rotation range [ -180; 180 ]
            But on set this property new rotation angle must be
            in range [ 0; 360 ]
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.FlipX">
            <summary>
            Gets or sets a value indicating whether flip X is enabled.
            </summary>
            <value><c>true</c> if node vertical flipped ; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.FlipY">
            <summary>
            Gets or sets a value indicating whether flip Y is enabled.
            </summary>
            <value><c>true</c> if node horizontal flipped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.Edges">
            <summary>
            Gets collection of all edges entering or leaving the node.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.EdgesEntering">
            <summary>
            Gets collection of edges entering the node.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Node.EdgesLeaving">
            <summary>
            Gets collection of edges leaving the node.
            </summary>
            <value></value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.c_nBEZIER_SEGMENT">
            <summary>
            Constant segments count of bezier shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_cacheRegionsSegment">
            <summary>
            Cached regions array for line segments hit testing.
            </summary>
            <remarks>
            Internal usage only. Optimization.
            Created on MouseEnter for optimization.
            Cleared on MouseLeave.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_controlPoints">
            <summary>
            Collection of control points. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_bCanChangePath">
            <summary>
            Indicate that m_gpPath member can be changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_bIsVertexEditable">
            <summary>
            Indicate that node vertex can be changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_maxPoints">
            <summary>
            The maximum of path points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_minPoints">
            <summary>
            The minimum of path points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathNode.m_gpPath">
            <summary>
            GraphicsPath containing points and instructions for rendering the shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on size value changed.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnDeserialized">
            <summary>
            Called when node is deserialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.RenderContiguousData(System.Drawing.Graphics)">
            <summary>
            The methods used to draw contiguous date. Such as labels or ports.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the mouse enter event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the mouse leave event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rectangle.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnNodeScaleChanged(System.String)">
            <summary>
            Called when node scale factor is changed.
            </summary>
            <param name="strPropertyName">The property name that change scale factor value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.IsControlPointValid(Syncfusion.Windows.Forms.Diagram.ControlPoint)">
            <summary>
            Determines whether given control point is valid.
            </summary>
            <param name="ctrlPtValidating">The control point to validating.</param>
            <returns>
            <c>true</c> if given control point is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Does the handle move related.
            </summary>
            <param name="handleMoved">The handle moved.</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.HandleMove(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Handles the move.
            </summary>
            <param name="handleMoved">The moving handle.</param>
            <param name="szOffset">Handle move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.TransformControlPoints(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Transforms the node control points.
            </summary>
            <param name="mtxTransform">Matrix transformations.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateSegmentsRegion">
            <summary>
            Updates the segments region cache.
            </summary>
            <remarks>
            Create region segment cache and save to m_cacheRegionsSegment.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdatePathNodeData">
            <summary>
            Updates the graphics path.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPathPoints">
            <summary>
            Gets array of points needed to construct node's GraphicsPath.
            </summary>
            <returns>Array of path points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPathPoints(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Gets the transformed path points.
            </summary>
            <param name="mtxTransform">Matrix transformations.</param>
            <returns>Array of transformed path points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates node's GraphicsPath on given array of points.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CreateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates the graphics path from path points.
            </summary>
            <param name="pts">The path points array.</param>
            <returns>Graphics path</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the bounds info.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.PreparePathPointsForInsert(System.Int32,System.Drawing.PointF)">
            <summary>
            Prepares new path points
            </summary>
            <param name="ptIdx">The point index.</param>
            <param name="val">The point.</param>
            <returns>The new path points.</returns>
            <remarks>
            You should override this method if custom login needed
            (e.g. - if You are inserting point into orthogonal line -&gt; two points must be inserted!)
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetAdjacentPathPoint(System.Drawing.PointF,System.Boolean,System.Boolean,System.Drawing.PointF@)">
            <summary>
            Searches for adjacent point from points that forms pathnode's path.
            </summary>
            <param name="ptPathPoint">Point to search adjacent point to.</param>
            <param name="bInLocalCoordinates">Indicates whether adjacent point is in local coordinates.</param>
            <param name="bLeftHand">Indicates whether adjacent point is previous or next to given point.</param>
            <param name="ptAdjacentPoint">Adjacent point.</param>
            <returns>Value indicating whether search was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.ContainsHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Determines whether the node contains specific handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>
            <c>true</c> if the handle contains specific  handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetControlPoints">
            <summary>
            Gets the array of control points.
            </summary>
            <returns>Control points array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanDrawControlPoints">
            <summary>
            Determines whether this node can draw control points.
            </summary>
            <returns>
            <c>true</c> if this node can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.DrawControlPoints(System.Drawing.Graphics)">
            <summary>
            Draws the control points.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.DrawControlPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.ControlPoint,System.Drawing.SizeF,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Draw the control point on graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="ctrlPoint">The control point.</param>
            <param name="szHandleSize">Size of the handle.</param>
            <param name="penHandleOutline">The pen handle outline.</param>
            <param name="brushHandle">The fill brush handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetControlPointAt(System.Drawing.PointF)">
            <summary>
            Gets the control point at position.
            </summary>
            <param name="ptTesting">The given point.</param>
            <returns>Control point at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetControlPointAt(System.Int32)">
            <summary>
            Gets the control point by list index.
            </summary>
            <param name="nIndex">Point list index.</param>
            <returns>Control point at the specified index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetControlPointByID(System.Int32)">
            <summary>
            Gets the control point by ID.
            </summary>
            <param name="nID">The control point unique ID.</param>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.TryCombine(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Tries to combine given graphics path with current.
            </summary>
            <param name="pathToCombineWith">The path to combine with.</param>
            <param name="bConnect">if set to <c>true</c> connect.</param>
            <returns>
            If path's combined successfully - true, otherwise - false
            </returns>
            <remarks>
            All combining path pathPoints must be in GraphicsUnit.Pixel.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanCombine(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Determines whether this instance can combine the specified path to combine with.
            </summary>
            <param name="pathToCombineWith">The path to combine with.</param>
            <returns>
            <c>true</c> if this instance can combine the specified path to combine with; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPoints(System.Boolean)">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <param name="bInLocal">Set to <c>true</c> to get points in local coordinates, otherwise - <b>false</b>.</param>
            <returns>
            The <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns>Array of points in local coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetPoints(System.Drawing.PointF[],System.Boolean)">
            <summary>
            Sets the new points.
            </summary>
            <param name="pts">The points to set.</param>
            <param name="bInLocal">Set to <c>true</c> if given points in local coordinates, otherwise - <b>false</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetPoints(System.Drawing.PointF[])">
            <summary>
            Sets the new points in local coordinates.
            </summary>
            <param name="pts">The local points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.FinishSetPoints">
            <summary>
            Finishes the set points operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.MoveSegment(System.Int32,System.Drawing.SizeF)">
            <summary>
            Moves the segment to given offset.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The segment move offset.</param>
            <returns>The points to offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPoint(System.Int32)">
            <summary>
            Gets the vertex point in local coordinates.
            </summary>
            <param name="ptIdx">The vertex index.</param>
            <returns>
            The <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetPoint(System.Int32,System.Boolean)">
            <summary>
            Gets the vertex point in local coordinates. Set the boolean parameter to True to get the Graphical path for line connector.
            </summary>
            <param name="ptIdx">The vertex index.</param>
            <param name="bReturnGraphical">Determines whether the points should be relative to grpah.</param>
            <returns>
            The <see cref="T:System.Drawing.PointF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetPoint(System.Int32,System.Drawing.PointF,System.Boolean)">
            <summary>
            Sets the point new value.
            </summary>
            <param name="ptIdx">The vertex index.</param>
            <param name="val">The point to set.</param>
            <param name="bInLocal">Set to <c>true</c> if given point in local coordinates, otherwise - <b>false</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Sets the point new value.
            </summary>
            <param name="ptIdx">The vertex index.</param>
            <param name="val">The new value point in local coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.AddPoint(System.Drawing.PointF,System.Boolean)">
            <summary>
            Adds the point to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/>.
            </summary>
            <param name="val">The <see cref="T:System.Drawing.PointF"/> to add to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/>.</param>
            <param name="bInLocal">Set to <c>true</c> if given point in local coordinates, otherwise - <b>false</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.AddPoint(System.Drawing.PointF)">
            <summary>
            Adds the point to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/>.
            </summary>
            <param name="val">The <see cref="T:System.Drawing.PointF"/> to add to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> in local coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.InsertPoint(System.Int32,System.Drawing.PointF,System.Boolean)">
            <summary>
            Inserts the point to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> at the specified index.
            </summary>
            <param name="ptIdx">The zero-based index ar which <paramref name="ptIdx"/> should be inserted.</param>
            <param name="val">The point to insert.</param>
            <param name="bInLocal">Set to <c>true</c> if given point in local coordinates, otherwise - <b>false</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts the point to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> at the specified index.
            </summary>
            <param name="ptIdx">The zero-based index ar which <paramref name="ptIdx"/> should be inserted.</param>
            <param name="val">The point in local coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.RemovePoint(System.Int32)">
            <summary>
            Removes the path point by it id.
            </summary>
            <param name="ptIdx">The vertex index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetLineSegmentAtPoint(System.Drawing.PointF)">
            <summary>
            Gets the line segment at point it local coordinates.
            </summary>
            <param name="ptTesting">The point testing.</param>
            <returns>return the value for the Line segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetLineSegmentPoints(System.Int32)">
            <summary>
            Gets the segment points.
            </summary>
            <param name="segmentIndex">Index of the segment.</param>
            <returns>One-dimension array with two elements where 
            first element is start point and second is end point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.MoveLineSegment(System.Int32,System.Drawing.SizeF)">
            <summary>
            Moves the line segment.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The size offset.</param>
            <returns>If move operation is succeed.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.BeforeMoveSegment(System.Drawing.PointF[]@)">
            <summary>
            Helper method used to perform additional
            actions before updating path node data.
            Used by Connectors to merge control points.
            </summary>
            <param name="ptsNew">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.ValidateOffset(System.Int32,System.Drawing.SizeF@)">
            <summary>
            Validates the offset.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateControlPoints(System.Drawing.PointF[],System.Int32)">
            <summary>
            Update the control points using given path points.
            </summary>
            <param name="ptsPath">The array of points.</param>
            <param name="nStartIndex">Index of the beginning control path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetControlPoints(System.Drawing.PointF[],System.Int32)">
            <summary>
            Set the control points location.
            </summary>
            <param name="ptsPath">The points path.</param>
            <param name="nStartIndex">Index of the beginning control path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.SetControlPoints(System.Collections.ArrayList)">
            <summary>
            Update current points into m_ctrlPts
            and Update previous points into m_prevCtrlPts
            </summary>
            <param name="m_contrlpts"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdateNonLineBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the non line bounds info.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdatePinPoint(System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Updates the pin point.
            </summary>
            <param name="oldPinPoint">The old pin point.</param>
            <param name="newPinPoint">The new pin point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetNewBounds(System.Drawing.PointF[])">
            <summary>
            Gets the new bounds.
            </summary>
            <param name="pts">The array of points.</param>
            <returns>The node bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.GetNewPathBounds(System.Drawing.PointF[])">
            <summary>
            Gets the new path points bounds.
            </summary>
            <param name="pathPoints">The path points.</param>
            <returns>
            The <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.UpdatePathLocation(System.Drawing.Drawing2D.GraphicsPath@,System.Drawing.RectangleF)">
            <summary>
            Updates the path location.
            </summary>
            <param name="pathCombined">The combined path .</param>
            <param name="rect">The rectangle to combine.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.IsPathVertexEditable(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Checks whether VertexEditMode can be applied to current PathNode.
            </summary>
            <param name="path">The path.</param>
            <returns>
            <c>true</c> if specified path is vertex editable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.RecordVertexChanged(Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Records the vertex changed.
            </summary>
            <param name="changeType">Type of collection change.</param>
            <param name="nVertexIdx">The vertex index.</param>
            <param name="ptVertexNewLocation">The vertex new location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnVertexChanging(Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Called when vertex changing.
            </summary>
            <param name="changeType">Type of vertex the change.</param>
            <param name="nVertexIdx">The vertex id.</param>
            <param name="ptLocation">The  point location.</param>
            <returns>true, if vertex is changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.OnVertexChanged(Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Called when vertex change.
            </summary>
            <param name="changeType">Type of collection change.</param>
            <param name="nVertexIdx">The vertex index.</param>
            <param name="ptLocation">The given point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CanChangePoints(System.Drawing.PointF[])">
            <summary>
            Determines whether this points can locate in current model.
            </summary>
            <param name="pts">The points.</param>
            <returns>
            <c>true</c> if this points can locate in model; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathNode.CreateSegmentsRegions">
            <summary>
            Creates the segments regions for hit testing.
            </summary>
            <returns>
            The array of <see cref="T:System.Drawing.Region"/> items.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.Labels">
            <summary>
            Gets the node collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> items.
            </summary>
            <value>The collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> items.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.LogicalGraphicsPath">
            <summary>
            GraphicsPath containing points and instructions for rendering the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.PointCount">
            <summary>
            Gets number of vertices contained by the shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.LineSegmentCount">
            <summary>
            Gets the line segment count.
            </summary>
            <remarks>
            Segment count equal to path point count for a closed path, 
            and one less count for non-closed shape.
            </remarks>
            <value>The line segment count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.MinPoints">
            <summary>
            Gets or sets minimum number of vertices this shape may contain.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.MaxPoints">
            <summary>
            Gets or sets maximum number of vertices this shape may contain.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.CanChangePath">
            <summary>
            Gets a value indicating whether this instance can change path.
            </summary>
            <value>
            <c>true</c> if this instance can change path; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.IsVertexEditable">
            <summary>
            Gets a value indicating whether this instance is vertex editable.
            </summary>
            <value>
            <c>true</c> if this instance is vertex editable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.PathPoints">
            <summary>
            Gets or sets the path points cache.
            </summary>
            <value>The path points array.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.PathPointsRelative">
            <summary>
            Gets or sets the internal relative path points cache.
            </summary>
            <value>The path points array.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PathNode.ControlPoints">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/> items.
            </summary>
            <value>The collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/> items.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.#ctor(Syncfusion.Windows.Forms.Diagram.LineBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineBase"/> class.
            </summary>
            <param name="src">The LineBase instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineBase"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.ShowResizeHandles">
            <summary>
            Indicate that selection and resize handles will draw on diagram canvas.
            </summary>
            <returns><c>True</c> if node can be resized, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.DrawPath(System.Drawing.Graphics)">
            <summary>
            Draws the path to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.DrawDecorators(System.Drawing.Graphics)">
            <summary>
            Draw decorators.
            Default implementation provides decorators drawing for line.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.UpdateHelperRegion">
            <summary>
            Creates region used for hit testing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The property container object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rect.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.DrawShadowInternal(System.Drawing.Graphics)">
            <summary>
            Draws the shadow internal.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.DrawLineBaseShadow(System.Drawing.Graphics)">
            <summary>
            Draw shadow for linebase node with clip end points.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.DrawDecoratorsShadow(System.Drawing.Graphics)">
            <summary>
            Draw the decorators shadow to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.ClipDecorators(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Clip end points for decorator draw..
            </summary>
            <param name="gphPath">The sorce graphics path.</param>
            <returns>Grapphics path with clip pathPoints.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.CanDrawHeadDecorator">
            <summary>
            Determines whether pathNode can draw head decorator.
            </summary>
            <returns>
            <c>true</c> if pathNode can draw head decorator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.CanDrawTailDecorator">
            <summary>
            Determines whether head decorator  can draw tail decorator.
            </summary>
            <returns>
            <c>true</c> if pathNode can draw head decorator; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetDecoratorTransfrom(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Calculates the decorator transform.
            </summary>
            <param name="ptPoint">The last point.</param>
            <param name="ptControl">The next to last point.</param>
            <param name="depth">The depth of decorator to next last point.</param>
            <returns>
            The <see cref="T:System.Drawing.Drawing2D.Matrix"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetTailDecoratorTransformations">
            <summary>
            Gets the head decorator transformations.
            </summary>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetHeadDecoratorTransformations">
            <summary>
            Gets the tail decorator transformations.
            </summary>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.InitBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Initialize the bounds info.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.GetLineSegmentAt(System.Int32)">
            <summary>
            Gets the line segment at given point.
            </summary>
            <param name="nSegmentIndex">Index of the segment.</param>
            <returns>The line segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineBase.SynchronizeEndPoint(Syncfusion.Windows.Forms.Diagram.EndPoint,System.Drawing.SizeF)">
            <summary>
            Quite move endpoint to current offset.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineBase.HeadDecorator">
            <summary>
            Gets the head end point decorator.
            </summary>
            <value>The head decorator.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineBase.TailDecorator">
            <summary>
            Gets the tail end point decorator.
            </summary>
            <value>The tail decorator.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer">
            <summary>
            End point container interface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.HeadEndPoint">
            <summary>
            Gets the head end point handle.
            </summary>
            <value>The head end point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IEndPointContainer.TailEndPoint">
            <summary>
            Gets the tail end point handle.
            </summary>
            <value>The tail end point.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGraphEdge">
            <summary>
            Interface to an edge in a graph.
            </summary>
            <remarks>
            An edge links together two nodes in a graph. It provides a path
            between two nodes.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IGraphNode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGraphEdge.IsNodeLeaving(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is leaving the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is leaving the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGraphEdge.IsNodeEntering(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is entering the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is entering the given node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.FromNode">
            <summary>
            Gets Node connected to the tail of the edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.ToNode">
            <summary>
            Gets Node connected to the head of the edge.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGraphEdge.EdgeWeight">
            <summary>
            Gets Weight value associated with the edge.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_bParentChangingBridgeUpdate">
            <summary>
            Indicate that line bridging was updated in parent changing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_bridgeStyle">
            <summary>
            Store bridge style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_lineSegments">
            <summary>
            Collection of segments with bridges.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_bLineBridgingEnabled">
            <summary>
            Flag used to enable line bridging.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_fLineBridgeSize">
            <summary>
            Line bridge size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_cntState">
            <summary>
            Defines connector state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_fHeadingDistance">
            <summary>
            Default value of heading distance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_bLockHandleMove">
            <summary>
            Flag what use for lock handle moving while EditStyle.AllowRotate = false;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorBase.m_bEnableRoundedCorner">
            <summary>
            Defines the edge of the connector
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase"/> class.
            </summary>
            <param name="src">The source connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IntersectSegmentWith(System.Int32,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Updates the connectors intersecting.
            </summary>
            <param name="segmentIndex">Index of the segment.</param>
            <param name="nodes">The collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> items.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.getDecrotorPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Getting Decorator points for creating the bounds
            </summary>
            <param name="point">endpoint of segment</param>
            <param name="checkPt">other endpoint of segment to check</param>
            <param name="size">Decorator size</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ClipDecorator(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment)">
            <summary>
            Clipping the decorator to prevent the bridges when intersect the decorator with port
            </summary>
            <param name="portBounds">port bounds</param>
            <param name="segment">connector segment</param>
            <returns>return false if decorator intersect with port, otherwise true.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CheckDecorator(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.Decorator)">
            <summary>
            Clipping the decorator to prevent the bridges when intersect the decorator with port
            </summary>
            <param name="portBounds">port bounds</param>
            <param name="ptsSegment1">tail/head end points</param>
            <param name="ptsSegment2">opposite end point of tail/head end point</param>
            <param name="decorator">current decorator</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.LengthenLine(System.Drawing.PointF,System.Drawing.PointF@,System.Single)">
            <summary>
            Draws the curve for the line
            </summary>
            <param name="startPoint">start point</param>
            <param name="endPoint"> end point</param>
            <param name="pixelCount"> curve radius</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.EventSink_PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Raise when node property is changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsLineBridgingEnabled">
            <summary>
            Determines whether the Model.Bridging is enable.
            </summary>
            <returns>
            <c>true</c> if model.bridging is enable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ZOrderHigher(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Check who node has higher ZOrder.
            </summary>
            <param name="higherNode">Possible higher node.</param>
            <param name="smallerNode">Possible smaller node.</param>
            <returns>If <b>true</b> higherNode is higher, elsewere  smallerNode is higher.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DrawSegment(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment)">
            <summary>
            Draws the line segment to specified graphics.
            </summary>
            <param name="gfx">Graphics to on.</param>
            <param name="segment">The segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DrawShadowSegment(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment)">
            <summary>
            Render given line segment to specified graphics.
            </summary>
            <param name="gfx">Graphics render to.</param>
            <param name="segment">Line segment to render.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetHandleAt(System.Int32)">
            <summary>
            Gets the handle by index of pathPoints.
            </summary>
            <param name="nIndex">Index of handle in points list.</param>
            <returns>Handle by path points index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If index less that zero or larger that handle count.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderBridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render bridge appropriate to its style defenited by BridgeStyle property.
            </summary>
            <param name="gfx">Graphics bridge render to.</param>
            <param name="pen">Pen used to draw bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="centerPoint">Center point of the bgidge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderArcBridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render arc bridge.
            </summary>
            <param name="gfx">Graphics bridge render to.</param>
            <param name="pen">Pen used to draw bridge.</param>
            <param name="ptStart">Start point of the bridge.</param>
            <param name="ptCenter">Center point of the bgidge.</param>
            <param name="ptEnd">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSquareBridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render square bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides2Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides2 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="centerPoint">Center point of the bgidge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides3Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides3 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides4Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides4 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="centerPoint">Center point of the bgidge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides5Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides5 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides6Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides6 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="centerPoint">Center point of the bgidge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RenderSides7Bridge(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Render sides7 bridge.
            </summary>
            <param name="gfx">Graphics to render bridge to.</param>
            <param name="pen">Pen to render bridge.</param>
            <param name="startPoint">Start point of the bridge.</param>
            <param name="endPoint">End point of the bridge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.InitEndPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Inits the end points from two points.
            </summary>
            <param name="ptStart">The tail end point position .</param>
            <param name="ptEnd">The head end point position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.InitConnector">
            <summary>
            Initialize connector necessary variables..
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.MergeNearBridges(System.Int32@,Syncfusion.Windows.Forms.Diagram.Bridge,Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment,System.Single@,System.Single@)">
            <summary>
            Merges the near bridges.
            </summary>
            <param name="nIndex">Index of the bridge.</param>
            <param name="bridge">The bridge.</param>
            <param name="lineSegment">The line segment.</param>
            <param name="fOffsetHelper">The bridegSize helper.</param>
            <param name="fBridgeOffset">The bridge offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetLineBridgeSize">
            <summary>
            Gets the length of the line bridge.
            </summary>
            <returns>The bridge length.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ResetSegmentBridges(Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment,Syncfusion.Windows.Forms.Diagram.ConnectorBase,System.Int32)">
            <summary>
            Resets the segment bridges.
            </summary>
            <param name="segmentBridges">The segment bridges.</param>
            <param name="connector">The segment checking container.</param>
            <param name="nSegmentCheckingID">The checking segment ID.</param>
            <returns>true, if reset segment bridges</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CheckLineSegmentIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Checks the line segment intersect.
            </summary>
            <param name="ptStart1">The first start point.</param>
            <param name="ptEnd1">The first end point.</param>
            <param name="ptStart2">The second start point.</param>
            <param name="ptEnd2">The pt second end point.</param>
            <param name="ptIntersect">The intersection point.</param>
            <returns>true, if line segment intersect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetAllConnectors(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Gets all connectors in composite nodes in deep.
            </summary>
            <param name="composite">The composite node.</param>
            <returns>
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetChildren(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Collect all group nodes in deep.
            </summary>
            <param name="compositeNode">The composite node.</param>
            <returns>
            The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeCollection"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.FlipEndPoints(System.Boolean,System.Boolean)">
            <summary>
            Flips the end points by horizontal and vertical axis.
            </summary>
            <param name="bFlipX">if set to <c>true</c> to flipped by X axis.</param>
            <param name="bFlipY">if set to <c>true</c> to flipped by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.SetEndPoints(System.Drawing.PointF[])">
            <summary>
            Updates EndPoints locations.
            </summary>
            <param name="ptsPath">New path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.UpdateSegments">
            <summary>
            Updates connector's segments.
            </summary>
            <remarks>
            Update using path points and related 
            handles to create new segments.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsConnected">
            <summary>
            Determines whether this line is connected.
            </summary>
            <returns>
            <c>true</c> if this line is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsHeadConnected">
            <summary>
            Determines whether HeadEdnPoints is connected
            </summary>
            <returns>true - if HeadEndPoints is connected otherwise - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsTailConnected">
            <summary>
            Determines whether TailEdnPoints is connected
            </summary>
            <returns>true - if TailEndPoints is connected otherwise - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.MergeControlPoints">
            <summary>
            Merges the control points placed in line.
            </summary>
            <remarks>
            Used with handle moving.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.MergeControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Merges the control points placed in line.
            </summary>
            <param name="ptsNew">The new points.</param>
            <remarks>
            Used with line segment move.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.SyncEndPointsWithPort">
            <summary>
            Synchronize head and tail end points with port if need.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CanDrawControlPoints">
            <summary>
            Determines whether this node can draw control points.
            </summary>
            <returns>
            <c>true</c> if this node can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ContainsHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Determines whether the node contains specific handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>
            <c>true</c> if the handle contains specific  handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetLineSegmentAt(System.Int32)">
            <summary>
            Gets the line segment by it index.
            </summary>
            <param name="nSegmentIndex">Index of the segment.</param>
            <returns>Line segment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.InsertPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts the point to the <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> at the specified index.
            </summary>
            <param name="ptIdx">The zero-based index ar which <paramref name="ptIdx"/> should be inserted.</param>
            <param name="val">The point in local coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.MoveSegment(System.Int32,System.Drawing.SizeF)">
            <summary>
            Moves the segment to given offset.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The segment move offset.</param>
            <returns>The points to offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.OnNodeScaleChanged(System.String)">
            <summary>
            Called when node scale factor is changed.
            </summary>
            <param name="strPropertyName">The property name that change scale factor value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Perfoms additional changes on handle move.
            </summary>
            <param name="handleMoved">The moved handle .</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">The old size.</param>
            <param name="szNewSize">The new size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ChangeFlipX(System.Boolean)">
            <summary>
            Called after change the flipX value.
            </summary>
            <param name="value">New flipX value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ChangeFlipY(System.Boolean)">
            <summary>
            Called after change the flipY value.
            </summary>
            <param name="value">New flipY value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ChangeRotationBy(System.Single)">
            <summary>
            Called after change the rotation by give angle.
            </summary>
            <param name="fRotationChange">The rotation angle offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on pin offset value changed.
            </summary>
            <param name="szOldPinOffset">The old pin offset value.</param>
            <param name="szNewPinOffset">The new pin offset value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.FinishSetPoints">
            <summary>
            Finishes the set points operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DrawPath(System.Drawing.Graphics)">
            <summary>
            Draws line in graphics.
            </summary>
            <param name="gfx">The graphics.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DrawRoundCornorPoints(System.Drawing.PointF[],System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Drawing the RoundCorner of the connector.
            </summary>
            <param name="points">Segment points</param>
            <param name="gfx">if gfx is not null then drawn the RoundCorner.</param>
            <param name="gpPath">if gpPath is not null then update and return the RoundCorner path.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.AdjustPoints(System.Boolean,System.Drawing.PointF[],System.Int32,Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Clipping the RoundCorner while generating the bridge
            </summary>
            <param name="isStart">isStart is true then udpate and return the start point. Otherwise end point. </param>
            <param name="points">segment points</param>
            <param name="index">current segment index.</param>
            <param name="connector">current connector.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetCurveRadius(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Get the CurveRadius of the current connector.
            </summary>
            <param name="connector">current connector.</param>
            <returns>return the CurveRadius</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.DrawShadowInternal(System.Drawing.Graphics)">
            <summary>
            Render connector's shadow.
            </summary>
            <param name="gfx">Graphics render shadow to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetPathPoints">
            <summary>
            Retrieves array of points needed to construct node's GraphicsPath.
            </summary>
            <returns>Array of path points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.OnParentChanging">
            <summary>
            Called when parent property changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.OnParentChanged">
            <summary>
            Called when parent changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the STR property container.</param>
            <returns>The property container object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.BeforeMoveSegment(System.Drawing.PointF[]@)">
            <summary>
            Helper method used to perform additional
            actions before updating path node data.
            Used by Connectors to merge control points.
            </summary>
            <param name="ptsNew">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rect.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CheckNewPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new pin point.
            </summary>
            <param name="ptPinPoint">The pin point.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates node's GraphicsPath on given array of points.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.MoveEndPoints(System.Drawing.SizeF)">
            <summary>
            Moves the end points to given offset.
            </summary>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.SetControlPoints(System.Drawing.PointF[],System.Int32)">
            <summary>
            Set the control points location.
            </summary>
            <param name="ptsPath">The points path.</param>
            <param name="nStartIndex">Index of the beginning control path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.OnDeserialized">
            <summary>
            Called when node is deserialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsNodeLeaving(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is leaving the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is leaving the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsNodeEntering(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is entering the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is entering the given node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.HeadingDistance">
            <summary>
            Gets or sets the distance from heading to obstacle node.
            </summary>
            <value>The heading distance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.BridgeStyle">
            <summary>
            Gets or sets bridge style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.LineRoutingEnabled">
            <summary>
            Gets or sets a value indicating whether that line routing is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.HeadingHead">
            <summary>
            Gets or sets the heading head.
            </summary>
            <value>The heading head.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.HeadingTail">
            <summary>
            Gets or sets the heading tail.
            </summary>
            <value>The heading tail.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.LineSegments">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment"/> items.
            </summary>
            <value>The collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment"/> items.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.FlipX">
            <summary>
            Gets or sets a value indicating whether flip X is enable.
            </summary>
            <value><c>true</c> if node vertical flipped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.FlipY">
            <summary>
            Gets or sets a value indicating whether flip Y is enable.
            </summary>
            <value><c>true</c> if node horizontal flipped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>The rotation angle in range [ -180; 180 ].</value>
            <remarks>
            Rotation angle saved in rotation range [ -180; 180 ]
            But on set this property new rotation angle must be
            in range [ 0; 360 ]
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.LineBridgingEnabled">
            <summary>
            Gets or sets a value indicating whether line bridging is enabled for this connector only.
            </summary>
            <remarks>
            Used by BridgeManager to check if current 
            segment can contains bridges.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ConnectorState">
            <summary>
            Gets or sets the state of the connector.
            </summary>
            <value>The state of the connector.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.EnableRoundedCorner">
            <summary>
            Gets or sets the edge type of the connector.
            </summary>
            <value>The edge of the connector.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ObstaclesInPath">
            <summary>
            Gets or sets a value indicating whether an obstacle present in the the path of connector.
            </summary>        
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.IsCycleEdge">
            <summary>
            Gets or sets a value indicating whether the connector causes the cyclical relation or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.HeadEndPoint">
            <summary>
            Gets the head end point.
            </summary>
            <value>The head end point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.TailEndPoint">
            <summary>
            Gets the tail end point.
            </summary>
            <value>The tail end point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.FromNode">
            <summary>
            Gets node connected to the tail of the edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.ToNode">
            <summary>
            Gets node connected to the head of the edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorBase.EdgeWeight">
            <summary>
            Gets weight value associated with the edge.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineConnector"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineConnector"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineConnector"/> class.
            </summary>
            <param name="pts">The PTS.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.#ctor(Syncfusion.Windows.Forms.Diagram.LineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineConnector"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineConnector"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.MergeControlPoints">
            <summary>
            Merges the control points placed in line.
            </summary>
            <remarks>
            Used with handle moving.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.MergeControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Merges the control points placed in line.
            </summary>
            <param name="ptsNew">New points.</param>
            <remarks>
            Used with line segment move.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.MoveEndPoints(System.Drawing.SizeF)">
            <summary>
            Moves the end points to given offset.
            </summary>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the Pin position, pin offset and size from new bounds rectangle.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Perfoms additional changes on handle move.
            </summary>
            <param name="handleMoved">The moved handle .</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineConnector.UpdateRotationAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Updates the rotation angle.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Link.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Link"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine">
            <summary>
            Line connector to connect the node orthogonally.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector">
            <summary>
            Line connector that contains horizontal and vertical line segments.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.m_ptsPathClone">
            <summary>
            Saved path poitns before route end point to heading in model coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.m_eHeadingState">
            <summary>
            Indicate what heading is changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="measureUnits">The measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="measureUnits">The measure units.</param>
            <param name="flip">true if path should be flipped; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
            <param name="flip">true if path should be flipped; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
            <param name="flip">true if path should be flipped; otherwise, false.</param>
            <param name="roundCorner">true if corner should be rounded; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(Syncfusion.Windows.Forms.Diagram.OrthogonalConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="src">The connector source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">The old size.</param>
            <param name="szNewSize">The new size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs pin offset related actions.
            </summary>
            <param name="szOldPinOffset">Old pin offset</param>
            <param name="szNewPinOffset">New pin offset</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Does the handle move related.
            </summary>
            <param name="handleMoved">The handle moved.</param>
            <param name="szOffset">The size offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.IsTailConnected">
            <summary>
            Determines whether TailEndPoints is connected
            </summary>
            <returns>
            true - if TailEndPoints is connected otherwise - false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.IsHeadConnected">
            <summary>
            Determines whether HeadEndPoints is connected
            </summary>
            <returns>
            true - if HeadEndPoints is connected otherwise - false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the Pin position, pin offset and size from new bounds rectangle.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CanChangePoints(System.Drawing.PointF[])">
            <summary>
            Determines whether this points can locate in current model.
            </summary>
            <param name="pts">The points.</param>
            <returns>
            <c>true</c> if this points can locate in model; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.MergeControlPoints">
            <summary>
            Merges the control points placed in line.
            </summary>
            <remarks>
            Used with handle moving.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates node's GraphicsPath on given array of points.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.MergeControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Merges the control points placed in line.
            </summary>
            <param name="ptsNew">New points</param>
            <remarks>
            Used with line segment move.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.PreparePathPointsForInsert(System.Int32,System.Drawing.PointF)">
            <summary>
            Prepares new path points
            </summary>
            <param name="ptIdx">The point index.</param>
            <param name="val">The point.</param>
            <returns>The new path points.</returns>
            <remarks>
            You should override this method if custom login needed
            (e.g. - if you are inserting point into orthogonal line -&gt; two points must be inserted!)
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.UpdateSegments">
            <summary>
            Updates connector's segments.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If handles count less that pathPoints count.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.GetFirstSegmentOrientation(System.Drawing.PointF[])">
            <summary>
            Get the first segment orientation in points array.
            </summary>
            <param name="ptsPoints">The array of points.</param>
            <returns>Orientation of first segment in points array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.ValidateOffset(System.Int32,System.Drawing.SizeF@)">
            <summary>
            Validates the offset.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CheckNewPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new pin point.
            </summary>
            <param name="ptPinPoint">The pin point.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.FinishSetPoints">
            <summary>
            Finishes the set points operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SyncEndPointsWithPort">
            <summary>
            Synchronize head and tail end points with port if need.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.EventSink_PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Raise when node property changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.InitializeOrthogonalLine(System.Drawing.PointF[])">
            <summary>
            Initializes the orthogonal.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.InitControlPoints(System.Drawing.PointF[])">
            <summary>
            Updates the control points.
            </summary>
            <param name="ptsPoints">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SaveSynchronizationState">
            <summary>
            Saves the path points to save form. 
            Used for correct heading calculation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SyncWithHeading(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Synchronization control point to heading direction.
            </summary>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SyncWithHeading(Syncfusion.Windows.Forms.Diagram.ConnectionPoint,Syncfusion.Windows.Forms.Diagram.CompassHeading,Syncfusion.Windows.Forms.Diagram.ControlPoint,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Synchronization control point to the with port using heading direction.
            </summary>
            <param name="port">The port.</param>
            <param name="heading">The heading.</param>
            <param name="cntPoint">The control point.</param>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SyncEndPointSegments">
            <summary>
            Synchronize end point segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.SyncSegments(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Synchronized realted sement with moved handle.
            </summary>
            <param name="handleMoved">Moved handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CanMergeControlPoints(System.Int32,System.Int32,System.Drawing.PointF[])">
            <summary>
            Determines whether connector can merge control points by specified position.
            </summary>
            <param name="nIndex">Index of the path point.</param>
            <param name="nLength">Length of the path points.</param>
            <param name="ptsPath">The array of points.</param>
            <returns>
            <c>true</c> if this connector can merge control points by specified position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.RouteHeading(System.String,System.Single)">
            <summary>
            Route the end points to heading.
            </summary>
            <param name="strPropertyName">Name of the property from DPN.</param>
            <param name="fDistance">The route distance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.GetRoutedPath(Syncfusion.Windows.Forms.Diagram.EndPoint,System.Single)">
            <summary>
            Gets the end point routed path in local coordinates.
            </summary>
            <param name="endPoint">The end point to route.</param>
            <param name="fDistance">The route distance.</param>
            <returns>
            The new routed path points in local coordinates.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.GetSegmentCenter(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calcs the segment center point.
            </summary>
            <param name="ptSegmentStart">Segment's start point.</param>
            <param name="ptSegmentEnd">Segment's end point.</param>
            <returns>Segment's center point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.FilterControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Filters the control points.
            </summary>
            <param name="ptsPath">The path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.MergeSegements">
            <summary>
            Updates the looping segments of the connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.MergeSegments">
            <summary>
            Updates the looping segments of the connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.GetOrientationOffset(System.Drawing.SizeF,System.Int32)">
            <summary>
            Gets the orientation offset.
            </summary>
            <param name="szOffset">The offset size.</param>
            <param name="segIndex">Index of the segment.</param>
            <returns>Offset size.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.RotationAngle">
            <summary>
            orthogonal connector is not rotatable.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.MoveConnectedSegments">
            <summary>
            Gets or sets a value indicating whether connected segments are movable.
            </summary>       
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.CurveRadius">
            <summary>
            Gets or sets the radius of the curve.
            </summary>       
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.HeadingState">
            <summary>
            Helper enumerator of heading states.
            Use internal only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.HeadingState.None">
            <summary>
            No heading state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.HeadingState.HeadingHead">
            <summary>
            Heading head state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalConnector.HeadingState.HeadingTail">
            <summary>
            Heading tail state.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLine.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLine"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="measureUnits">Real world units of measurement.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Polyline">
            <summary>
            Node that is rendered in poly line.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PolylineNode">
            <summary>
            Node that will be rendered as Poly line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolylineNode"/> class.
            </summary>
            <param name="pts">The PTS.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.#ctor(Syncfusion.Windows.Forms.Diagram.PolylineNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolylineNode"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolylineNode"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.ShowResizeHandles">
            <summary>
            Indicate that selection and resize handles will draw on diagram canvas.
            </summary>
            <returns><c>True</c> if node can be resized, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolylineNode.InitializePolyLine(System.Drawing.PointF[])">
            <summary>
            Initializes the poly line.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polyline.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Polyline"/> class.
            </summary>
            <param name="pts">The points collection.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Arc">
            <summary>
            Arc node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SplineNode">
            <summary>
            This node is used to draw spline-like appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Line">
            <summary>
            Line node that contains endpoints and control points. Can be used as connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.m_endPointHead">
            <summary>
            Head end point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.m_endPointTail">
            <summary>
            Tail end point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.m_lineSegments">
            <summary>
            Collection of segments with bridges.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.m_cntState">
            <summary>
            Defines connector state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Line.m_bLockHandleMove">
            <summary>
            Flag what use for lock handle moving while EditStyle.AllowRotate = false;
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF[],Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="pts">The array of points.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(Syncfusion.Windows.Forms.Diagram.Line)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="src">The Line instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> class.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Called when node is moved.
            </summary>
            <param name="fX">The x offset.</param>
            <param name="fY">The y offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ChangeFlipX(System.Boolean)">
            <summary>
            Called after change the flipX value.
            </summary>
            <param name="value">New flip x value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ChangeFlipY(System.Boolean)">
            <summary>
            Called after change the flipY value.
            </summary>
            <param name="value">New flip y value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ChangeRotationBy(System.Single)">
            <summary>
            Called after change the rotation by give angle.
            </summary>
            <param name="fRotationChange">The rotation angle offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">The old size.</param>
            <param name="szNewSize">The new size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on pin offset value changed.
            </summary>
            <param name="szOldPinOffset">The old pin offset value.</param>
            <param name="szNewPinOffset">The new pin offset value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Perfoms additional changes on handle move.
            </summary>
            <param name="handleMoved">The moved handle .</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.OnNodeScaleChanged(System.String)">
            <summary>
            Called when node scale factor is changed.
            </summary>
            <param name="strPropertyName">The property name that change scale factor value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CanDrawControlPoints">
            <summary>
            Determines whether this node can draw control points.
            </summary>
            <returns>
            <c>true</c> if this node can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.ContainsHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Determines whether the node contains specific handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns>
            <c>true</c> if the handle contains specific  handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetLineSegmentAt(System.Int32)">
            <summary>
            Gets the line segment by its index.
            </summary>
            <param name="nSegmentIndex">Index of the segment.</param>
            <returns>The line segment</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetPathPoints">
            <summary>
            Retrieves array of points needed to construct node's GraphicsPath.
            </summary>
            <returns>The path points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CheckNewPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Checks the new pin point.
            </summary>
            <param name="ptPinPoint">The pin point.</param>
            <param name="unit">The unit.</param>
            <returns>
            <c>true</c> if this value can set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates node's GraphicsPath on given array of points.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the STR property container.</param>
            <returns>Property container value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the Pin position, pin offset and size from new bounds rectangle.
            </summary>
            <param name="rcBounds">The updated bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.MergeControlPoints">
            <summary>
            Merges the control points.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.MergeControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Merges the control points.
            </summary>
            <param name="ptsNew">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.SetEndPoints(System.Drawing.PointF[])">
            <summary>
            Updates EndPoints locations.
            </summary>
            <param name="ptsPath">New path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateSegments">
            <summary>
            Updates connector's segments from PathPoints.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateSegments(System.Drawing.PointF[])">
            <summary>
            Updates connector's segments.
            </summary>
            <param name="ptsPoints">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.IsConnected">
            <summary>
            Determines whether this line is connected.
            </summary>
            <returns>
            <c>true</c> if this line is connected; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.IsHeadConnected">
            <summary>
            Determines whether HeadEdnPoints is connected
            </summary>
            <returns>true - if HeadEndPoints is connected otherwise - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.IsTailConnected">
            <summary>
            Determines whether TailEdnPoints is connected
            </summary>
            <returns>true - if TailEndPoints is connected otherwise - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.FlipEndPoints(System.Boolean,System.Boolean)">
            <summary>
            Flips the end points.
            </summary>
            <param name="bFlipX">if set to <c>true</c> flip by X.</param>
            <param name="bFlipY">if set to <c>true</c> flip by Y.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.UpdateRotationAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Updates the rotation angle.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.InitializeLine">
            <summary>
            Initializes the line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.IsNodeLeaving(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is leaving the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is leaving the given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Line.IsNodeEntering(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Determines if this edge is entering the given node.
            </summary>
            <param name="graphNode">Node to test.</param>
            <returns>True if edge is entering the given node.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.ConnectorState">
            <summary>
            Gets or sets the state of the connector.
            </summary>
            <value>The state of the connector.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.LineSegments">
            <summary>
            Gets the line segments list.
            </summary>
            <value>The line segments.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.FlipX">
            <summary>
            Gets or sets a value indicating whether [flip X].
            </summary>
            <value><c>true</c> if flip X; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.FlipY">
            <summary>
            Gets or sets a value indicating whether [flip Y].
            </summary>
            <value><c>true</c> if flip Y; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.RotationAngle">
            <summary>
            Gets or sets the rotation angle.
            </summary>
            <value>The rotation angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.HeadEndPoint">
            <summary>
            Gets the head end point handle.
            </summary>
            <value>The head end point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.TailEndPoint">
            <summary>
            Gets the tail end point handle.
            </summary>
            <value>The tail end point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.FromNode">
            <summary>
            Gets node connected to the tail of the edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.ToNode">
            <summary>
            Gets node connected to the head of the edge.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Line.EdgeWeight">
            <summary>
            Gets weight value associated with the edge.
            </summary>
            <value></value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.#ctor(Syncfusion.Windows.Forms.Diagram.SplineNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SplineNode"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SplineNode"/> class.
            </summary>
            <param name="pts">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SplineNode"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptControl">The control point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SplineNode"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex point.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CanEditSegment">
            <summary>
            Determines whether this node can edit segment.
            </summary>
            <returns>
            <c>true</c> if this node can edit segment; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Override base class's(Line) method
            </summary>
            <param name="rcBounds">Updated bounds info.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CanDrawControlPoints">
            <summary>
            Determines whether this spline can draw control points.
            </summary>
            <returns>
            <c>true</c> if this spline can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.GetPathPoints">
            <summary>
            Retrieves array of points needed to construct node's GraphicsPath.
            </summary>
            <returns>The path points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path form points.
            </summary>
            <param name="pts">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.GetNewPathBounds(System.Drawing.PointF[])">
            <summary>
            Gets the new path points bounds.
            </summary>
            <param name="pathPoints">The path points.</param>
            <returns>
            The <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SplineNode.InitializeSpline(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes the arc.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptControl">The control point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Arc.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/> class.
            </summary>
            <param name="pts">The points collection.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Shape">
            <summary>
            Shape class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Shape.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FilledShape">
            <summary>
            Filled shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FilledPath">
            <summary>
            Base shape class to visualize closed path and fill it using the FillStyle property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FilledPath.m_styleFill">
            <summary>
            Fill Style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FilledPath.m_benableshading">
            <summary>
            Flag to enable shading.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FilledPath"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FilledPath"/> class.
            </summary>
            <param name="path">The graphics path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.#ctor(Syncfusion.Windows.Forms.Diagram.FilledPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FilledPath"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FilledPath"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws shape's border on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.DrawInterior(System.Drawing.Graphics)">
            <summary>
            Draws shape's interior on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.DrawShading(System.Drawing.Graphics)">
            <summary>
            Draw the shading over node.
            </summary>
            <param name="gfx">The Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FilledPath.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The property container object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FilledPath.FillStyle">
            <summary>
            Gets the properties used to fill the interior of regions.
            </summary>
            <value>The fill style.</value>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior regions of
            the shape.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FilledPath.EnableShading">
            <summary>
            Gets or sets a value indicating whether shading should be enabled.
            </summary>
            <value><c>true</c> if enable shading; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Symbol">
            <summary>
            Symbol class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Symbol.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HorizontalRuler">
            <summary>
            This will render the horizontal ruler for the diagram control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Ruler">
            <summary>
            Ruler class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_ptLocation">
            <summary>
            Ruler location ( in pixels ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_szSize">
            <summary>
            Ruler size ( in pixels ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_clrBkgnd">
            <summary>
            Color used to fill background.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_clrMajorLines">
            <summary>
            Color used to draw major lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_clrMinorLines">
            <summary>
            Color used to draw minor lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_clrHighlightColor">
            <summary>
            Color used to draw highlight.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_clrMarker">
            <summary>
            Color used to draw marker ( current cursor position ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_styleFont">
            <summary>
            Text style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_ptMarkerLocation">
            <summary>
            Defines current marker location( in viewer coordinates ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_nHighlightAreaStart">
            <summary>
            Defines current highlight area position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_nHighlightAreaWidth">
            <summary>
            Defines current highlight area size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Ruler.m_markupRenderer">
            <summary>
            Renderer used to render markup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.#ctor">
            <summary>
            Creates instance of Ruler
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates Ruler as copy given
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.Draw(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.CreateMarkupRenderer(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Create Markup Renderer for Diagram Measure Units
            </summary>
            <param name="measureUnits"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ruler.GetMinimumCalibratedLineUnits(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the minimum calibrated line unit
            </summary>
            <param name="measureUnits">Measurement unit</param>
            <returns>Minimum calibrated line unit</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.Location">
            <summary>
            Gets or sets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
            <value>The color of the background.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MajorLinesColor">
            <summary>
            Gets or sets the color of the major lines.
            </summary>
            <value>The color of the major lines.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MinorLinesColor">
            <summary>
            Gets or sets the color of the minor lines.
            </summary>
            <value>The color of the minor lines.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.HighlightColor">
            <summary>
            Gets or sets the color of the highlight.
            </summary>
            <value>The color of the highlight.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MarkerColor">
            <summary>
            Gets or sets the color of the marker.
            </summary>
            <value>The color of the marker.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.TextStyle">
            <summary>
            Gets the text style.
            </summary>
            <value>The text style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MinimumCalibratedLineUnits">
            <summary>
            Gets the minimum calibrated line unit for ruler
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MajorCalibratedLineUnits">
            <summary>
            Gets or sets the major calibrated line unit for ruler
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MarkerPosition">
            <summary>
            Gets or sets the marker position.
            </summary>
            <value>The marker position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.HighlightAreaStart">
            <summary>
            Gets or sets the highlight area start.
            </summary>
            <value>The highlight area start.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.HighlightAreaWidth">
            <summary>
            Gets or sets the width of the highlight area.
            </summary>
            <value>The width of the highlight area.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Ruler.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            	<c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.#ctor(Syncfusion.Windows.Forms.Diagram.HorizontalRuler)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.Draw(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Renders the ruler
            </summary>
            <param name="gfx">Graphics element gfx</param>
            <param name="view">View class view</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HorizontalRuler.GetPropertyContainerName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VerticalRuler">
            <summary>
            This will render the vertical ruler for the diagram control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.#ctor">
            <summary>
            Creates instance
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.#ctor(Syncfusion.Windows.Forms.Diagram.VerticalRuler)">
            <summary>
            
            </summary>
            <param name="src"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.Draw(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Renders the ruler
            </summary>
            <param name="gfx">Graphics element gfx</param>
            <param name="view">View class view</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VerticalRuler.GetPropertyContainerName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CentimetersMarkupRenderer">
            <summary>
            Markup in Centimeters
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer">
            <summary>
            Provides the scale for the rulers.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.m_ruler">
            <summary>
            Store ruler to mark up.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates instance of RulerMarkupRenderer
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.RenderMarkup(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Render scale on ruler 
            </summary>
            <param name="gfx">Graphics render to</param>
            <param name="bounds">Bounds of the ruler</param>
            <param name="view">Diagram view</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.DrawHorizontalRuler(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Render scale on horizontal ruler 
            </summary>
            <param name="gfx">Graphics render to</param>
            <param name="bounds">Bounds of the ruler</param>
            <param name="view">Diagram view</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.DrawVerticalRuler(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Render scale on vertical ruler 
            </summary>
            <param name="gfx">Graphics render to</param>
            <param name="bounds">Bounds of the ruler</param>
            <param name="view">Diagram view</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.PixelInUnit">
            <summary>
            Gets precession in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RulerMarkupRenderer.NumericFormat">
            <summary>
            Gets numeric number format.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentimetersMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CentimetersMarkupRenderer"/>
            with given <see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render markup to.
            </summary>
            <param name="ruler"><see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render markup to.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CentimetersMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DisplayMarkupRenderer">
            <summary>
            Markup in Display
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DisplayMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DisplayMarkupRenderer"/>
            with given <see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render murlup to.
            </summary>
            <param name="ruler"><see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render murlup to.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DisplayMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DocumentMarkupRenderer">
            <summary>
            Markup in Document
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DocumentMarkupRenderer"/> with
            given <see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render markup to.
            </summary>
            <param name="ruler"><see cref="T:Syncfusion.Windows.Forms.Diagram.Ruler"/> to render markup to.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DocumentMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EightInchMarkupRenderer">
            <summary>
            Summary description for EightInchMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EightInchMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Creates instance of EightInchMarkupRenderer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FeetMarkupRenderer">
            <summary>
            Summary description for FeetMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FeetMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FeetMarkupRenderer.Precision">
            <summary>
            Gets the precision value for the scale
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FeetMarkupRenderer.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HalfInchMarkupRenderer">
            <summary>
            Summary description for HalfInchMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HalfInchMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.InchMarkupRenderer">
            <summary>
            Markup in Inches
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.InchMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.InchMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.KilometerMarkupRenderers">
            <summary>
            Summary description for KilometerMarkupRenderers.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.KilometerMarkupRenderers.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.KilometerMarkupRenderers.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.KilometerMarkupRenderers.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.KilometerMarkupRenderers.NumericFormat">
            <summary>
            Gets numeric number format.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetersMarkupRenderer">
            <summary>
            Markup in Meters
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetersMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetersMarkupRenderer"/> class.
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetersMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetersMarkupRenderer.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MileMarkupRenderer">
            <summary>
            Markup in Inches
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MileMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MileMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MileMarkupRenderer.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MileMarkupRenderer.NumericFormat">
            <summary>
            Gets numeric number format.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MillimetersMarkupRenderer">
            <summary>
            Markup in Millimeters
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MillimetersMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MillimetersMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PixelMarkupRenderer">
            <summary>
            Markup in Pixels
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PixelMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PixelMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PointsMarkupRenderer">
            <summary>
            Markup in Points
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointsMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PointsMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.QuarterInchMarkupRenderer">
            <summary>
            Summary description for QuarterInchMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.QuarterInchMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SixteenthInchMarkupRenderer">
            <summary>
            Summary description for SixteenthInchMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SixteenthInchMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.YardMarkupRenderer">
            <summary>
            Summary description for YardMarkupRenderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.YardMarkupRenderer.#ctor(Syncfusion.Windows.Forms.Diagram.Ruler)">
            <summary>
            
            </summary>
            <param name="ruler"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.YardMarkupRenderer.Precision">
            <summary>
            Gets minimum particle of the ruler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.YardMarkupRenderer.RoundPrecision">
            <summary>
            Gets specified precision for round mark.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CentralPort">
            <summary>
            Inherit from ConnectionPoint. Used as shape port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CentralPort.m_bDrawPort">
            <summary>
            Indication whether port will draw on model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CentralPort"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CentralPort"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="gpPortShape">The gp port shape.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.#ctor(Syncfusion.Windows.Forms.Diagram.CentralPort)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CentralPort"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CentralPort"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data to serialize instance.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.Render(System.Drawing.Graphics)">
            <summary>
            Renders the specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CentralPort.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CentralPort.DrawCentralPort">
            <summary>
            Gets or sets a value indicating whether port is visible.
            </summary>
            <value><c>true</c> if port is visible ; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlPoint">
            <summary>
            Summary description for ControlPoint.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IHandle">
            <summary>
            Base handle interface that contain all based transformation properties and methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IHandle.Move(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Move the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetUnits">The offset units.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.ID">
            <summary>
            Gets the handle ID.
            </summary>
            <value>The handle ID.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.Location">
            <summary>
            Gets the handle location.
            </summary>
            <value>The handle location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.AllowMoveX">
            <summary>
            Gets or sets a value indicating whether allow move by X axis.
            </summary>
            <value><c>true</c> if allow move by X axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.AllowMoveY">
            <summary>
            Gets or sets a value indicating whether allow move by Y axis.
            </summary>
            <value><c>true</c> if allow move by Y axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.InUpdate">
            <summary>
            Gets or sets a value indicating whether the handle is updating
            </summary>
            <value><c>true</c> if handle is updating; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IHandle.IsMoving">
            <summary>
            Gets or sets a value indicating whether the handle is moving
            </summary>
            <value><c>true</c> if handle is moving; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.PointF,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="ptLocation">The pt location.</param>
            <param name="nID">The n ID.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.#ctor(Syncfusion.Windows.Forms.Diagram.ControlPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlPoint"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.Move(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Moves the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="offsetUnits">The offset units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.OnVertexChanging(System.Drawing.PointF)">
            <summary>
            Called when vertex position changing.
            </summary>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.OnVertexChanged">
            <summary>
            Called when vertex position changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measure units property changing.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlPoint.RecordHandleMove">
            <summary>
            Record the handle move action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.Container">
            <summary>
            Gets or sets the container.
            </summary>
            <value>The container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.InUpdate">
            <summary>
            Gets or sets a value indicating whether the handle is updating
            </summary>
            <value><c>true</c> if handle is updating; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.IsMoving">
            <summary>
            Gets or sets a value indicating whether the handle is moving
            </summary>
            <value><c>true</c> if handle is moving; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.ID">
            <summary>
            Gets the ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.Location">
            <summary>
            Gets or sets the location in local coordinates.
            </summary>
            <value>The location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.AllowMoveX">
            <summary>
            Gets or sets a value indicating whether instance allow move by X axis.
            </summary>
            <value><c>true</c> if allow to move by X axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlPoint.AllowMoveY">
            <summary>
            Gets or sets a value indicating whether instance allow move by Y axis.
            </summary>
            <value><c>true</c> if allow to move by Y axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPoint">
            <summary>
            The bases connector endPoint handle class that implement
            moving, protection and serialization. Used by <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorBase"/> 
            and <see cref="T:Syncfusion.Windows.Forms.Diagram.Line"/> that implemented
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/> interface.
            </summary>
            <remarks>
            Used as base class for <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint"/> 
            and <see cref="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint"/> classes.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EndPoint.m_mergePointsCallback">
            <summary>
            Call container MegreControlPoints and UpdatePathNodeData methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPoint"/> class.
            </summary>
            <param name="container">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> container.</param>
            <param name="ptLocation">The handle location in parent coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPoint"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPoint"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.Move(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Move end point to the specified offset.
            </summary>
            <param name="offset">The move offset.</param>
            <param name="offsetUnits">The offset units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.GetHeading">
            <summary>
            Get the heading to this end point taken from container.
            </summary>
            <returns>Current heading value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.SyncPositionWithPort">
            <summary>
            Synchronizes EndPoint position with connected ConnectionPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.OnVertexChanging(System.Drawing.PointF)">
            <summary>
            Called when vertex position changing.
            </summary>
            <param name="newValue">The new position value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.OnVertexChanged">
            <summary>
            Called when vertex changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.RecordHandleMove">
            <summary>
            Record the handle move action to history.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPoint.SetLocation(System.Drawing.PointF)">
            <summary>
            Sets the new location value.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.Container">
            <summary>
            Gets or sets the end point container.
            </summary>
            <value>The PathNode container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.Port">
            <summary>
            Gets or sets the port which end point is connected. 
            Return null if end point isn't connected.
            </summary>
            <value>The port which end point is connected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.InUpdate">
            <summary>
            Gets or sets a value indicating whether the handle is updating
            </summary>
            <value><c>true</c> if handle is updating; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.IsMoving">
            <summary>
            Gets or sets a value indicating whether the handle is moving
            </summary>
            <value><c>true</c> if handle is moving; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.ID">
            <summary>
            Gets the EndPoint ID.
            </summary>
            <value>The ID.</value>
            <remarks>Always return 0.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.Location">
            <summary>
            Gets or sets the endpoint location in parent coordinates.
            </summary>
            <value>The location in parent coordinates.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.AllowMoveX">
            <summary>
            Gets or sets a value indicating whether handle can move by X axis.
            </summary>
            <value><c>true</c> if handle can move by X axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPoint.AllowMoveY">
            <summary>
            Gets or sets a value indicating whether can move by Y axis.
            </summary>
            <value><c>true</c> if handle can move by Y axis; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint">
            <summary>
            Summary description for HeadEndPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadEndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint"/> class.
            </summary>
            <param name="container">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> container.</param>
            <param name="ptLocation">The handle location in parent coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadEndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.HeadEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadEndPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadEndPoint"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadEndPoint.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadEndPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Label">
            <summary>
            A label is a text object that is attached to a container and
            is positioned relative to some control point on the container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="strText">The label text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(Syncfusion.Windows.Forms.Diagram.Label)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> class.
            </summary>
            <param name="src">The label source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.Render(System.Drawing.Graphics)">
            <summary>
            Renders the primitive object to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetPosition">
            <summary>
            Positions the Label based on the Position property.
            </summary>        
            <returns>The new location for the label control</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data to serialize instance.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The Runtime type handle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the container of the property by name.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.CalculateTextSize">
            <summary>
            Calculating the size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.TrimTextWithUnWrap(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Single@)">
            <summary>
            return the trimmed text when wrapping is set as false
            </summary>
            <param name="gfx"></param>
            <param name="font"></param>
            <param name="rectBounds"></param>
            <param name="fmt"></param>
            <param name="heightVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.TrimTextWithWrap(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Single@)">
            <summary>
            return the trimmed text when wrapping is set as true
            </summary>
            <param name="gfx"></param>
            <param name="font"></param>
            <param name="rectBounds"></param>
            <param name="fmt"></param>
            <param name="heightVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.GetStringFormat">
            <summary>
            Creates a StringFormat object that encapsulates the properties of
            the text object.
            </summary>
            <returns>System.Drawing.StringFormat object.</returns>
            <remarks>
            <para>
            The System.Drawing.StringFormat object returned by this method is
            used to draw the text using the System.Drawing.Graphics.DrawString
            method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Label.UpdateText">
            <summary>
            Updates the label text according to TextCase
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.TextOverflow">
            <summary>
            Gets or sets a value indicating whether overflowing the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.OverflowType">
            <summary>
            Gets or sets the Overflow Type
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Orientation">
            <summary>
            Gets or sets the orientation of label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.LineStyle">
            <summary>
            Gets the line drawing properties for the label.
            </summary>
            <value>The line style.</value>
            <remarks>
            Gets the line style determines the configuration of the pen used to
            render line.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.InheritContainerSize">
            <summary>
            Gets or sets a value indicating whether current instance inherit container size.
            </summary>
            <value>
            <c>true</c> if current instance inherit container size; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.FullName">
            <summary>
            Gets or sets the unique label full name.
            </summary>
            <value>The unique label full name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Name">
            <summary>
            Gets or sets the unique label name.
            </summary>
            <value>The unique label name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.ReadOnly">
            <summary>
            Flag indicating if the text object is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Visible">
            <summary>
            Specifies visibility of the label.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.FontColorStyle">
            <summary>
            Determines font color style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.BackgroundStyle">
            <summary>
            Determines text background style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.FontStyle">
            <summary>
            Gets the font style.
            </summary>
            <value>The font style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.PropertyBinding">
            <summary>
            Binds the text value of the label to a property.
            </summary>
            <remarks>
            <para>
            This property allows the label to be attached to any property of the
            label. The default binding is to the "Text" property, which is a
            string property maintained by the label. Setting this property to
            "ContainerName" will cause the label to display the name of the
            container (i.e. symbol) that is hosting it.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.Size">
            <summary>
            Gets the label text size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.SizeToNode">
            <summary>
            Gets or Sets Label fit into Parent Node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.UpdatePosition">
            <summary>
            Gets or Sets whether default positioning has to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.AdjustRotateAngle">
            <summary>
            When set will prevent the label from being inverted.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.TextCase">
            <summary>
            Gets or sets case of text in the label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <remarks>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object. This property
            corresponds to the Alignment property in the System.Drawing.StringFormat
            class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <remarks>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object.  This property
            corresponds to the LineAlignment property in the System.Drawing.StringFormat
            class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.FormatFlags">
            <summary>
            Gets flags used to format the text.
            </summary>
            <remarks>
            <para>
            See System.Drawing.StringFormatFlags for more details.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.WrapText">
            <summary>
            Gets or sets a value indicating whether text should be wrapped when it exceeds the width of
            the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.DirectionRightToLeft">
            <summary>
            Gets or sets a value indicating whether the text is right to left.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.DirectionVertical">
            <summary>
            Gets or sets a value indicating whether the text is vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.FitBlackBox">
            <summary>
            Gets or sets a value indicating whether no part of any glyph overhangs the bounding rectangle.
            </summary>
            <remarks>
            <para>
            By default some glyphs overhang the rectangle slightly where necessary to
            appear at the edge visually. For example when an italic lowercase letter
            f in a font such as Garamond is aligned at the far left of a rectangle,
            the lower part of the f will reach slightly further left than the left
            edge of the rectangle. Setting this flag will ensure no painting outside
            the rectangle but will cause the aligned edges of adjacent lines of text
            to appear uneven.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.LineLimit">
            <summary>
            Gets or sets a value indicating whether only entire lines are laid out in the formatting rectangle.
            </summary>
            <remarks>
            <para>
            By default, layout continues until the end of the text, or until no
            more lines are visible as a result of clipping, whichever comes first.
            Note that the default settings allow the last line to be partially
            obscured by a formatting rectangle that is not a whole multiple of
            the line height. To ensure that only whole lines are seen, specify
            this value and be careful to provide a formatting rectangle at least
            as tall as the height of one line.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether space at the end of each line in calculations that measure
            the size of the text.
            </summary>
            <remarks>
            <para>
            By default, the boundary rectangle returned by the MeasureString
            method excludes the space at the end of each line. Set this flag
            to include that space in measurement.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Label.NoClip">
            <summary>
            Gets or sets a value indicating whether overhanging parts of glyphs and unwrapped text reaching outside the
            formatting rectangle are allowed to show.
            </summary>
            <remarks>
            <para>
            By default, all text and glyph parts reaching outside the formatting
            rectangle are clipped.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OverflowType">
            <summary>
            Specifies the text overflow type for the label.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint">
            <summary>
            Summary description for TailEndPoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailEndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint"/> class.
            </summary>
            <param name="container">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PathNode"/> container.</param>
            <param name="ptLocation">The handle location in parent coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailEndPoint.#ctor(Syncfusion.Windows.Forms.Diagram.TailEndPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailEndPoint.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailEndPoint"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailEndPoint.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailEndPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Bridge">
            <summary>
            Template object that contain intersection information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Bridge.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectorBase,Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Bridge"/> class.
            </summary>
            <param name="connector">The connector.</param>
            <param name="segment">The segment.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Bridge.ConnectorIntersecting">
            <summary>
            Gets the connector intersecting.
            </summary>
            <value>The connector intersecting.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Bridge.SegmentIntersectingID">
            <summary>
            Gets the segment intersecting index.
            </summary>
            <value>The segment intersecting.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Bridge.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
            <remarks>
            Indicated offset bridge from segment start point 
            to center point of bridge.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BridgeComparer">
            <summary>
            Helper class to comparer two Bridge objects by Offset.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one
            is less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare.</param>
            <param name="y">Second object to compare.</param>
            <returns>
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Condition</description>
            </listheader>
            <item>
            <term> Less than zero</term>
            <description>
            <paramref name="x"/> is less than <paramref name="y"/>.</description>
            </item>
            <item>
            <term> Zero</term>
            <description>
            <paramref name="x"/> equals <paramref name="y"/>.</description>
            </item>
            <item>
            <term> Greater than zero</term>
            <description>
            <paramref name="x"/> is greater than <paramref name="y"/>.</description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">
            <para>Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.</para>
            <para>-or-</para>
            <para>
            <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other.</para>
            </exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Decorator">
            <summary>
            Base class for line decorators.
            </summary>
            <remarks>
            <para>
            A line decorator is an object that adorns an endpoint of a line or other shape.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Construct a line decorator given a graphics path for the visual.
            </summary>
            <param name="grfxPath">Visual representation of the decorator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.#ctor(Syncfusion.Windows.Forms.Diagram.Decorator)">
            <summary>
            Copy constructor.
            </summary>
            <param name="src">Source object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for line decorators.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.Load(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Load the endpoint decorator with a GraphicsPath.
            </summary>
            <param name="grfxPath">GraphicsPath to load.</param>
            <returns>True if successful; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the line decorator onto a System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Decorator.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the container of the property by name.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.DecoratorShape">
            <summary>
            Gets or sets the decorator shape.
            </summary>
            <value>The decorator shape.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.GraphicsPath">
            <summary>
            Gets the graphics path.
            </summary>
            <value>The graphics path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.Container">
            <summary>
            Reference to the container node the decorator is attached to.
            </summary>
            <remarks>
            <para>
            This can be any type of node that supports the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/> interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IEndPointContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.LineStyle">
            <summary>
            Line drawing properties for this decorator.
            </summary>
            <remarks>
            The line style determines the configuration of the pen used to
            outline decorator.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.FillStyle">
            <summary>
            Properties for creating a brush to fill the decorator with.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.Size">
            <summary>
            Width and height of the decorator.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Decorator.IsPathClosed">
            <summary>
            Gets a value indicating whether this instance is path closed.
            </summary>
            <value>
            	<c>true</c> if this instance is path closed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeadDecorator">
            <summary>
            Head decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadDecorator"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadDecorator"/> class.
            </summary>
            <param name="grfxPath">The GRFX path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.#ctor(Syncfusion.Windows.Forms.Diagram.HeadDecorator)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadDecorator"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeadDecorator"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeadDecorator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TailDecorator">
            <summary>
            This class is used to draw the tail decorator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailDecorator"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailDecorator"/> class.
            </summary>
            <param name="grfxPath">The GRFX path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.#ctor(Syncfusion.Windows.Forms.Diagram.TailDecorator)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailDecorator"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TailDecorator"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TailDecorator.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointConnection">
            <summary>
            Helper class that stores connections.
            </summary>
            <remarks>
            Used with Grouping or UnGrouping 
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EndPointConnection.Port">
            <summary>
            Connection point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EndPointConnection.EndPoints">
            <summary>
            Connection Point connections.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IConnectorLineSegment">
            <summary>
            Interface that handles line segment actions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IConnectorLineSegment.Move(System.Drawing.SizeF)">
            <summary>
            Move segment to offset.
            </summary>
            <param name="szOffset">Move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IConnectorLineSegment.SyncSegmentHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Synchronization segment to handle changes.
            </summary>
            <param name="handle">The handle synchronize to.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Layer">
            <summary>
            A layer is a collection of nodes that share a common set of default properties
            and the same Z-order relative to other layers.
            </summary>
            <remarks>
            <para>
            A layer contains zero or more nodes and is responsible for rendering
            those nodes. Since the nodes in a layer are rendered as a group, their
            Z-order is the same relative to other layers in the diagram. For example,
            if layer A has a higher Z-order than layer B, then all nodes in layer B
            will be rendered behind those in layer A. If the Visible flag on a layer
            is set to False, none of the nodes in the layer will be rendered.
            </para>
            <para>
            The nodes in the layer can inherit properties from the layer. If a
            property is not explicitly set in a node, the node inherits the property
            from the layer. If the layer does not have the property set, then the
            layer chains up to the model to get the property. This allows all nodes
            in a layer to share the same defaults.
            </para>
            <para>
            All nodes in the layer can be hidden by setting the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible"/> flag
            to False.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Layer.m_owner">
            <summary>
            Layer owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Layer.m_nodesMembers">
            <summary>
            Layer's NodeCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Layer.m_strLayerName">
            <summary>
            Layer's alias
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Layer.m_bVisible">
            <summary>
            Indicates whether layer is visible
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Layer.m_bEnabled">
            <summary>
            Indicates whether layer is Enabled
            </summary>
            <remarks>
            When layer is enabled nodes being added to layer's owner NodeCollection
            are added to enabled layer NodeCollection also
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(Syncfusion.Windows.Forms.Diagram.ILayerContainer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> class.
            </summary>
            <param name="owner">Container to attach the layer to.</param>
            <param name="strLayerName">Name to give the layer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> class.
            Serialization constructor for layers.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the list or a portion of the list to an array.
            </summary>
            <param name="array">Array in which to copy the items in the list.</param>
            <param name="index">Index at which to start copying in target array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Contains(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the specified node belongs to the layer.
            </summary>
            <param name="node">Node to search for.</param>
            <returns>
            True if the node belongs to the layer; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Adds a node the layer.
            </summary>
            <param name="node">Node to add.</param>
            <remarks>
            <para>
            If the node already belongs to this layer, this method does nothing.
            Before adding the node to this layer, this method 
            adds this layer to adding node's LayerCollection
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.Node)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Add(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Adds a collection of nodes to the layer.
            </summary>
            <param name="nodes">Nodes to add.</param>
            <remarks>
            <para>
            If the node already belongs to this layer, this method does nothing.
            Before adding the node to this layer, this method 
            adds this layer to adding node's LayerCollection
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.Node)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Remove(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes the specified node from this layer.
            </summary>
            <param name="node">Node to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.RemoveAll">
            <summary>
            Removes all nodes from this layer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.RecordPropertyChanged(System.String)">
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.SetChildrenVisibility(System.Boolean)">
            <summary>
            Sets the children visibility.
            </summary>
            <param name="bVisible">visible, if set to <c>true</c></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>The property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnPropertyChanging(System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property changing otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Layer.OnPropertyChanged(System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Container">
            <summary>
            Gets or sets object that contains the layer.
            </summary>
            <remarks>
            Each layer has a reference to a container object for the purpose of
            synchronizing changes in layers. This is necessary because a node
            can only belong to a single layer at a time. When a node is added to
            one layer, it must be removed from any other layer it might already
            belong to.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Constraints">
            <summary>
            To set Constraints for Layer
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Name">
            <summary>
            Gets or sets name of the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Visible">
            <summary>
            Gets or sets a value indicating whether the layer is visible.
            </summary>
            <remarks>
            If this flag is set to False, none of the nodes belonging to the layer
            will be rendered.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Enabled">
            <summary>
            Gets or sets a value indicating whether the layer is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Nodes">
            <summary>
            Gets typed collection of nodes belonging to layer
            </summary>
            <remark>
            Clone of layer node's is returned.
            Any layer node's manipulation must be done throught layer's
            public methods
            </remark>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.Count">
            <summary>
            Gets the number of nodes in the layer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.IsSynchronized">
            <summary>
            Gets a value indicating whether the collection is thread-safe.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Layer.SyncRoot">
            <summary>
            Gets the object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid">
            <summary>
            Base class for objects that draw a grid onto a view.
            </summary>
            <remarks>
            <para>
            Derived classes must override the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)"/>
            method in order to draw the grid.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutGrid.m_viewer">
            <summary>
            View this grid renders to.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid"/> class.
            </summary>
            <param name="containerView">View in which to draw the grid.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.#ctor(Syncfusion.Windows.Forms.Diagram.LayoutGrid)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid"/> class. Deserialization constructor.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.PointF)">
            <summary>
            Takes a device point and returns the point on the grid that is nearest
            to that point.
            </summary>
            <param name="ptScene">Input point.</param>
            <returns>Point on the grid in client coordinates.</returns>
            <remarks>
            <para>
            Points are in device coordinates. This method is used to when the snap
            to grid feature is enabled.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.SnapToGrid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Drawing context object.</param>
            <param name="rectGrid">Visible grid bounds.</param>
            <remarks>
            <para>
            This method is overridden in derived classes to render specific types of
            grids.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawPointGrid(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Drawing context object.</param>
            <param name="rectGridBounds">Visible grid bounds.</param>
            <remarks>
            <para>
            Sets pixel values directly on the view's drawing surface.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawLineGrid(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the grid onto a specified System.Drawing.Graphics object as lines.
            </summary>
            <param name="grfx">Drawing context object.</param>
            <param name="rectGridBounds">The grid bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawPoints(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws the points inside rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rectClip">The clip rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawVerticalLines(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws the vertical lines inside rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="penLine">The pen line.</param>
            <param name="rectClip">The graphics clip rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DrawHorizontalLines(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws the horizontal lines inside rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="penLine">The pen line.</param>
            <param name="rectClip">The graphics clip rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>The property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measure units changing.
            </summary>
            <param name="from">Old value of the measure units .</param>
            <param name="to">New value of the measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.ShouldSerializeColor">
            <summary>
            Serialize the color.
            </summary>
            <returns>true, if serialize the color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.ResetColor">
            <summary>
            Resets the color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.ContainerView">
            <summary>
            Gets or sets the view this grid is attached to.
            </summary>
            <remarks>
            <para>
            This property is a reference to the view that the layout grid renders
            itself onto.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GridStyle">
            <summary>
            Gets or sets the appearance of the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.VerticalSpacing">
            <summary>
            Gets or sets the vertical distance between grid points.
            </summary>
            <remarks>
            Spacing is specified in world units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal distance between grid points.
            </summary>
            <remarks>
            Spacing is specified in world units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.MinPixelSpacing">
            <summary>
            Gets or sets minimum spacing between grid points in device units.
            </summary>
            <remarks>
            This value specifies the threshold at which the grid will stop
            drawing itself because the spacing between grid points is too
            small.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Visible">
            <summary>
            Gets or sets a value indicating whether controls in the grid is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.SnapToGrid">
            <summary>
            Gets or sets a value indicating whether the snap to grid feature is enable or disabled.
            </summary>
            <remarks>
            <para>
            This property determines how the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.PointF)"/>
            method behaves.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.LayoutGrid.GetNearestGridPoint(System.Drawing.PointF,System.Int32)"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.Color">
            <summary>
            Gets or sets the color to use for drawing the grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DashStyle">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.DashStyle"/> value to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.DashOffset">
            <summary>
            Gets or sets distance from the start of the line to the dash pattern.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutGrid.RenderingStyle">
            <summary>
            Gets the grid rendering style.
            </summary>
            <remarks>
            The rendering style is used to configure graphics.
            </remarks>
            <value>The rendering style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment">
            <summary>
            Connector line segment.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineSegment">
            <summary>
            Encapsulates two points that comprise a line segment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineSegment.m_pt1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineSegment.m_pt2">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineSegment.nSegmentIndex">
            <summary>
            The segment index.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Constructs a line segment given two points.
            </summary>
            <param name="ptStartPoint">First point in line segment.</param>
            <param name="ptEndPoint">Second point in line segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Windows.Forms.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineSegment"/> class.
            </summary>
            <param name="ptStartPoint">The given point.</param>
            <param name="ptEndPoint">The given point.</param>
            <param name="orientation">The orientation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Constructs a line segment given two points.
            </summary>
            <param name="ptStartPoint">First point in line segment.</param>
            <param name="ptEndPoint">Second point in line segment.</param>
            <param name="segmentIndex">Segment index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Drawing.PointF[],System.Int32)">
            <summary>
            Constructs a line segment from an array of lines and a segment index.
            </summary>
            <param name="pts">Points that make up the polyline.</param>
            <param name="segIdx">Zero-based offset of segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.LineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineSegment"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineSegment"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.GetOrthogonalIntersect(Syncfusion.Windows.Forms.Diagram.LineSegment,System.Drawing.PointF@)">
            <summary>
            Gets the orthogonal intersect.
            </summary>
            <param name="lineSeg">The line segment.</param>
            <param name="ptIntersect">The intersect point.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineSegment.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.Point1">
            <summary>
            First point in the line segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.Point2">
            <summary>
            Second point in the line segment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineSegment.MidPoint">
            <summary>
            Gets the midpoint of the linesegment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.m_bridges">
            <summary>
            Collection of bridges.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.m_firstHandle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.m_secondHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.IHandle,Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Constructs a line segment given two points.
            </summary>
            <param name="firstHandle">First point in line segment.</param>
            <param name="secondHandle">Second point in line segment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.IHandle,Syncfusion.Windows.Forms.Diagram.IHandle,System.Int32)">
            <summary>
            Constructs a line segment given two points.
            </summary>
            <param name="firstHandle">First point in line segment.</param>
            <param name="secondHandle">Second point in line segment.</param>
            <param name="segmentIndex">Line segment index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.GetFirstPointLocation(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Calculate first point location.
            </summary>
            <param name="mtx">Parent transformation. If equals null return Point1 property.</param>
            <returns>First point location.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.GetSecondPointLocation(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Calculate second point location.
            </summary>
            <param name="mtx">Parent transformation. If equals null return Point2 property.</param>
            <returns>Second point location.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.Move(System.Drawing.SizeF)">
            <summary>
            Move segment to offset.
            </summary>
            <param name="szOffset">Move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.SyncSegmentHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Synchronization segment to handle changes.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.CanMove">
            <summary>
            Determines whether segment can move.
            </summary>
            <returns>
            	<c>true</c> if segment can move; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.GetHandleLocation(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Gets the handle location in local coordinates.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.GetHandleLocation(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Gets the handle location in local coordinates.
            </summary>
            <param name="handle">The handle.</param>
            <param name="mtx"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.Bridges">
            <summary>
            Gets the bridges.
            </summary>
            <value>The bridges.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.Point1">
            <summary>
            First point in the line segment.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ConnectorLineSegment.Point2">
            <summary>
            Second point in the line segment.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment">
            <summary>
            Custom orthogonal line segment for orthogonal connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.m_orientation">
            <summary>
            Indicate orientation of segment what set inside.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.IHandle,Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment"/> class.
            </summary>
            <param name="firstHandle">The first handle.</param>
            <param name="secondHandle">The second handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.#ctor(Syncfusion.Windows.Forms.Diagram.IHandle,Syncfusion.Windows.Forms.Diagram.IHandle,System.Windows.Forms.Orientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment"/> class.
            </summary>
            <param name="firstHandle">The first handle.</param>
            <param name="secondHandle">The second handle.</param>
            <param name="orientation">The segment orientation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.Move(System.Drawing.SizeF)">
            <summary>
            Move segment to offset.
            </summary>
            <param name="szOffset">Move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.SyncSegmentHandle(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Synchronization segment to handle changes.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.GetOrientationOffset(System.Drawing.SizeF)">
            <summary>
            Gets the orientation offset.
            </summary>
            <param name="szOffset">The offset size.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.UpdatePosition(Syncfusion.Windows.Forms.Diagram.IHandle,Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Update syncHandle position to lockHandle.
            </summary>
            <param name="syncHandle">The handle to synchronize.</param>
            <param name="lockHandle">The handle synchornize to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.GetHandleLocation(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Get the handle location in container local coordinates.
            </summary>
            <param name="handle">The handle.</param>
            <returns>Handle location in container local coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.SetHandleLocation(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Set the handle location in local coordinates.
            </summary>
            <param name="handle">The handle.</param>
            <param name="ptSet">The point in container local coordinates.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrthogonalLineSegment.Orientation">
            <summary>
            Orientation of segment
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette">
            <summary>
            A symbol palette is a collection of related SymbolModel objects used
            to add symbols to a diagram.
            </summary>
            <remarks>
            This class is a special type of model object that contains only
            SymbolModel objects. SymbolPalettes are serializable and can be
            saved to a file and reloaded. This class is used in conjunction
            with the PaletteGroupBar control, which displays the contents
            a SymbolPalette and allows the user to drag-and-drop symbols
            onto a diagram.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.c_SMALL_IMAGE_SIZE">
            <summary>
            Default small image size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.c_LARGE_IMAGE_SIZE">
            <summary>
            Default large image size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_styleRendering">
            <summary>
            Symbol palette rendering style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_strPaletteName">
            <summary>
            Store palette name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_paletteNodes">
            <summary>
            Store palette nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_smallImageList">
            <summary>
            Store small images of the palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_userSmallImages">
            <summary>
            Store array of bool values that indicates user definite small images.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_largeImageList">
            <summary>
            Store large images of the palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymbolPalette.m_userLargeImages">
            <summary>
            Store array of bool values that indicates user definite large images.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette"/> class.
            </summary>
            <param name="strPaletteName">Palette name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor(Syncfusion.Windows.Forms.Diagram.SymbolPalette)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymbolPalette"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.UpdateIcons">
            <summary>
            Updates icons to display on <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.RecreateIcons">
            <summary>
            Force recreation icons to display on <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.AppendChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Add node to the palette nodes and updates its icon to display on <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/>.
            </summary>
            <param name="nodeNewPaletteNode">Node to add.</param>
            <returns>Index of added node in the palette nodes collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.InsertImage(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Update icon associated with given Node.
            </summary>
            <param name="node">Node to update icon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.RemoveChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Remove node and its icons.
            </summary>
            <param name="nodePaletteChild">Node to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.InsertChild(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Inserts node at specified location.
            </summary>
            <param name="nodeToInsert">Node to insert.</param>
            <param name="nIndex">Insert index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.UpdateImage(System.Int32)">
            <summary>
            Updates icons by ones index.
            </summary>
            <param name="index">Index of icons in the ImageList</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetUserSmallImage(System.Int32,System.Drawing.Image)">
            <summary>
            Sets user definite small image to the node by its index.
            </summary>
            <param name="index">Index of the node to set icon</param>
            <param name="image">Icon to set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetUserLargeImage(System.Int32,System.Drawing.Image)">
            <summary>
            Sets user definite large image to the node by its index.
            </summary>
            <param name="index">Index of the node to set icon</param>
            <param name="image">Icon to set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.IsUserDefinitedSmallIcon(System.Int32)">
            <summary>
            Gets value indicates that small icon for given node is user definite.
            </summary>
            <param name="index">Index of the Node to check icon.</param>
            <returns>TRUE if icon is user definite, otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.IsUserDefinedSmallIcon(System.Int32)">
            <summary>
            Gets value indicates that small icon for given node is user defined.
            </summary>
            <param name="index">Index of the Node to check icon.</param>
            <returns>TRUE if icon is user definite, otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.IsUserDefinitedLargeIcon(System.Int32)">
            <summary>
            Gets value indicates that large icon for given node is user definite.
            </summary>
            <param name="index">Index of the Node to check icon.</param>
            <returns>TRUE if icon is user definite, otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.IsUserDefinedLargeIcon(System.Int32)">
            <summary>
            Gets value indicates that large icon for given node is user defined.
            </summary>
            <param name="index">Index of the Node to check icon.</param>
            <returns>TRUE if icon is user definite, otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.UpdateNode(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Update node in collection to given node by its index.
            </summary>
            <param name="node">Node to insert.</param>
            <param name="index">Index of old node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.OnPaletteChildrenComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the <see cref="E:PaletteChildrenComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.RemoveIcons(System.Int32)">
            <summary>
            Removes icons for given node by its index. Used only if node is removeng from palette nodes collection.
            </summary>
            <param name="index">index of the node to remove icons.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetIcons(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Updates icons for given node.
            </summary>
            <param name="node">Node to update icons</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetLargeIcon(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Update large icon for given node to default.
            </summary>
            <param name="node">Node to update icon.</param>
            <param name="index">Index of the node in palette nodes collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetSmallIcon(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Update small icon for given node to default.
            </summary>
            <param name="node">Node to update small icon.</param>
            <param name="index">index of the node in palette nodes collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SetIcons(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Updates icons for given node.
            </summary>
            <param name="node">Node to update icons.</param>
            <param name="insertIndex">Node's insert index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.MakeNodeSnapshot(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Size)">
            <summary>
            Makes snapshot for given node.
            </summary>
            <param name="node">Node to make snapshot.</param>
            <param name="szImg">Size of returned snapshot.</param>
            <returns>Snapshot for given node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.CheckMetafileNode(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Check for MetaFileNode existence.
            </summary>
            <param name="node">Node to check.</param>        
            <returns>true if node is MetaFileNode</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.ScaleImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Scale image to new size.
            </summary>
            <param name="imgScale">Image to resize.</param>
            <param name="szNewSize">New image size.</param>
            <returns>The scaled image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymbolPalette.FromFile(System.String)">
            <summary>
            Loads the symbol palette from the given path.
            </summary>
            <param name="filepath">Path of the file.</param>
            <returns>Symbol palette.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.RenderingStyle">
            <summary>
            Gets the SymbolPalette rendering style.
            </summary>
            <remarks>
            The rendering style is used to configure graphics.
            </remarks>
            <value>The rendering style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.LargeImageList">
            <summary>
            Gets or sets large <see cref="T:System.Windows.Forms.ImageList"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.SmallImageList">
            <summary>
            Gets or sets small <see cref="T:System.Windows.Forms.ImageList"/> of the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.Name">
            <summary>
            Gets or sets name of the palette.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.Nodes">
            <summary>
            Gets the copy of containing node collection.
            </summary>
            <value>The copy of containing node collection..</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymbolPalette.PaletteNodes">
            <summary>
            Gets palette nodes collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.SymbolPalette.PaletteChildrenChanged">
            <summary>
            Occurs when collection of the nodes was changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramDragHelper">
            <summary>
            Class for DragHelper
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDragHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DiagramDragHelper"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDragHelper.DragAction">
            <summary>
            Gets or sets the value indicating the current drag opeartion.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UpdateCallback">
            <summary>
            Delegate used by PropertyContainers to update container node's info.
            </summary>
            <remarks>
            Used by Decorator to update container node's hittesting region.
            Used by AnchiringPrimitives to update their container node's refresh rect.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleMoved">
            <summary>
            Delegate used by handles to update container node
            with info of what handle moved and move offset.
            </summary>
            <param name="handleMoved">The handle.</param>
            <param name="szOffset">The offset size.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GridStyle">
            <summary>
            Specifies grid style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GridStyle.Point">
            <summary>
            Point grid style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GridStyle.Line">
            <summary>
            Line grid style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SemiCircleType">
            <summary>
            Specifies semi cirlce type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SemiCircleType.Open">
            <summary>
            open type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SemiCircleType.Closed">
            <summary>
            closed type.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ArcType">
            <summary>
            Specifies arc type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcType.Open">
            <summary>
            open type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ArcType.Closed">
            <summary>
            closed type.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding">
            <summary>
            Specifies the property the label value is bound to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding.Text">
            <summary>
            Text property of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelPropertyBinding.ContainerName">
            <summary>
            Name property in the container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointType">
            <summary>
            Connection point types.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointType.IncomingOutgoing">
            <summary>
            Specifies whether port accepts outgoing and incoming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointType.Outgoing">
            <summary>
            Specifies whether port accepts outgoing connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointType.Incoming">
            <summary>
            Specifies whether port accepts incoming connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointType.Reject">
            <summary>
            Specifies whether the port rejects the incoming/outgoing connections or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Position">
            <summary>
            Specifies one of nine relative positions on a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.Center">
            <summary>
            Center of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.TopLeft">
            <summary>
            Top left point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.TopCenter">
            <summary>
            Top center point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.TopRight">
            <summary>
            Top right point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.MiddleLeft">
            <summary>
            Middle left point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.MiddleRight">
            <summary>
            Middle left point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.BottomLeft">
            <summary>
            Bottom left point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.BottomCenter">
            <summary>
            Bottom center point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.BottomRight">
            <summary>
            Bottom right point of the label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Position.Custom">
            <summary>
            Custom position of the label.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ParentPositions">
            <summary>
            Specifies parent position in the layout
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ParentPositions.Center">
            <summary>
            Center of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ParentPositions.Default">
            <summary>
            Default position of the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelOrientation">
            <summary>
            Specifies the orientation of label.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelOrientation.Auto">
            <summary>
            Auto alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LabelOrientation.Horizontal">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointVisuals">
            <summary>
            Contains static GraphicsPath objects that can be used for the
            visual representation of ports.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.OpenArrow">
            <summary>
            Gets open arrow visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.ClosedArrow">
            <summary>
            Gets closed arrow visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.Circle">
            <summary>
            Gets circle visual.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointVisuals.Diamond">
            <summary>
            Gets diamond visual.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PaperStandart">
            <summary>
            Paper standard information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperStandart.GetStandarts">
            <summary>
            Gets the allowed paper standards.
            </summary>
            <returns>The allowed paper standards.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperStandart.GetStandards">
            <summary>
            Gets the allowed paper standards.
            </summary>
            <returns>The allowed paper standards.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperStandart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PaperStandart"/> class.
            </summary>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperStandart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PaperStandart.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PaperStandart.PageSizes">
            <summary>
            Gets or sets the page sizes.
            </summary>
            <value>The page sizes.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart">
            <summary>
            Paper standard scale information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.GetStandarts">
            <summary>
            Gets the allowed scale standards.
            </summary>
            <returns>The paper scale standards.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.GetStandards">
            <summary>
            Gets the allowed scale standards.
            </summary>
            <returns>The paper scale standards.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart"/> class.
            </summary>
            <param name="name">The display name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PaperScaleStandart.PageScales">
            <summary>
            Gets or sets the page scales.
            </summary>
            <value>The page scales.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PathFactory">
            <summary>
            Path factory
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateClosedCurve(System.Drawing.PointF[])">
            <summary>
            Creates the closed curve.
            </summary>
            <param name="pts">The points.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateClosedCurve(System.Drawing.Point[])">
            <summary>
            Creates the closed curve.
            </summary>
            <param name="pts">The points.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateCurve(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates the curve.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptCtrl">The control point.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateCurve(System.Drawing.PointF[])">
            <summary>
            Creates the curve.
            </summary>
            <param name="pts">The points.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateCurve(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates the curve.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptCtrl">The CTRL point.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateCurve(System.Drawing.Point[])">
            <summary>
            Creates the curve.
            </summary>
            <param name="pts">The points.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates the bezier line.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptStartCtrl">The start control point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptEndCtrl">The end control point.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateBezier(System.Drawing.PointF[])">
            <summary>
            Creates the bezier line.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateLine(System.Drawing.Point[])">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="points">points to create GraphicsPath from</param>
            <returns>Resulted GraphicsPath</returns>
            <remarks>
            Only first to points are taken into account.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateLine(System.Drawing.PointF[])">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="points">points to create GraphicsPath from</param>
            <returns>Resulted GraphicsPath</returns>
            <remarks>
            Only first to points are taken into account.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="ptStart">Line's start point</param>
            <param name="ptEnd">Line's end point</param>
            <returns>Resulted GraphicsPath</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateLine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="ptStart">Line's start point</param>
            <param name="ptEnd">Line's end point</param>
            <returns>Resulted GraphicsPath</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateOrthogonalLine(System.Drawing.Point[])">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="points">points to create GraphicsPath from</param>
            <returns>Resulted GraphicsPath</returns>
            <remarks>
            Only first to points are taken into account.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateOrthogonalLine(System.Drawing.PointF[])">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="points">points to create GraphicsPath from</param>
            <returns>Resulted GraphicsPath</returns>
            <remarks>
            Only first to points are taken into account.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateOrthogonalLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="ptStart">Line's start point</param>
            <param name="ptEnd">Line's end point</param>
            <returns>Resulted GraphicsPath</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateOrthogonalLine(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates GraphicsPath with line shape.
            </summary>
            <param name="ptStart">Line's start point</param>
            <param name="ptEnd">Line's end point</param>
            <returns>Resulted GraphicsPath</returns>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateArc(System.Drawing.PointF,System.Drawing.SizeF,System.Single,System.Single)">
            <summary>
            Creates GraphicsPath with arc shape
            </summary>
            <param name="point">upper left point of arc's bounding rectangle</param>
            <param name="size">arc's bounding rectangle size</param>
            <param name="fStartAngle">starting angle of the arc</param>
            <param name="fSweepAngle">angle between startAngle and the end of the arc</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates GraphicsPath with arc shape
            </summary>
            <param name="fX">upper left X-coordinate of arc's bounding rectangle</param>
            <param name="fY">upper left Y-coordinate of arc's bounding rectangle</param>
            <param name="fWidth">arc's bounding rectangle width</param>
            <param name="fHeight">arc's bounding rectangle height</param>
            <param name="fStartAngle">starting angle of the arc</param>
            <param name="fSweepAngle">angle between startAngle and the end of the arc</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateArc(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Creates GraphicsPath with arc shape
            </summary>
            <param name="rectBounding">arc's bounding rectangle</param>
            <param name="fStartAngle">starting angle of the arc</param>
            <param name="fSweepAngle">angle between startAngle and the end of the arc</param>
            <returns>Resulted GraphicsPath</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRectangle(System.Drawing.RectangleF)">
            <summary>
            Creates GraphicsPath with rectangle shape
            </summary>
            <param name="rect">Rectangle to add</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRectangle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates GraphicsPath with rectangle shape
            </summary>
            <param name="ptUpperLeft">adding rectangle upperleft point</param>
            <param name="ptLowerRight">adding rectangle lowerright point</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRectangle(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates GraphicsPath with rectangle shape
            </summary>
            <param name="ptLocation">GraphicsPath's location</param>
            <param name="szSize">GraphicsPath's size</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRectangle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates GraphicsPath with rectangle shape
            </summary>
            <param name="fX">GraphicsPath's X-coordinate</param>
            <param name="fY">GraphicsPath's Y-coordinate</param>
            <param name="fWidth">GraphicsPath's width</param>
            <param name="fHeight">GraphicsPath's height</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRoundRectangle(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Create GraphicsPath with round rectangle shape.
            </summary>
            <param name="ptUpperLeft">Adding rectangle upperleft point.</param>
            <param name="ptLowerRight">Adding rectangle lowerright point.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <returns>Resulted GraphicsPath.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRoundRectangle(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Create GraphicsPath with round rectangle shape.
            </summary>
            <param name="ptLocation">The location.</param>
            <param name="szSize">The size.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <returns>Resulted GraphicsPath.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRoundRectangle(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Create GraphicsPath with round rectangle shape.
            </summary>
            <param name="fX">GraphicsPath's X-coordinate.</param>
            <param name="fY">GraphicsPath's Y-coordinate.</param>
            <param name="fWidth">GraphicsPath's width.</param>
            <param name="fHeight">GraphicsPath's height.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <returns>Resulted GraphicsPath.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateRoundRectangle(System.Drawing.RectangleF,System.Single)">
            <summary>
            Create GraphicsPath with round rectangle shape.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <returns>Resulted GraphicsPath.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateEllipse(System.Drawing.RectangleF)">
            <summary>
            Creates GraphicsPath with ellipse shape
            </summary>
            <param name="rectBounding">Ellipse bounding rectangle</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateEllipse(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates GraphicsPath with ellipse shape
            </summary>
            <param name="ptUpperLeft">adding rectangle upperleft point</param>
            <param name="ptLowerRight">adding rectangle lowerright point</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateEllipse(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates GraphicsPath with ellipse shape
            </summary>
            <param name="ptLocation">GraphicsPath's location</param>
            <param name="szSize">GraphicsPath's size</param>
            <returns>Resulted Graphicspath</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PathFactory.CreateEllipse(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates GraphicsPath with ellipse shape
            </summary>
            <param name="fX">GraphicsPath's X-coordinate</param>
            <param name="fY">GraphicsPath's Y-coordinate</param>
            <param name="fWidth">GraphicsPath's width</param>
            <param name="fHeight">GraphicsPath's height</param>
            <returns>Resulted GraphicsPath</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DecoratorShape">
            <summary>
            Decorator shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.None">
            <summary>
            No shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Custom">
            <summary>
            Custom shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Open45Arrow">
            <summary>
            45 degree open end arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Filled45Arrow">
            <summary>
            45 degree closed end arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Diamond">
            <summary>
            Diagram shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.FilledDiamond">
            <summary>
            Filled diamond shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Circle">
            <summary>
            Circle shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.FilledCircle">
            <summary>
            Filled circle shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Open60Arrow">
            <summary>
            60 degree open end arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Filled60Arrow">
            <summary>
            60 degree closed end arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.OpenFancyArrow">
            <summary>
            Open fancy arrow shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.FilledFancyArrow">
            <summary>
            Filled fancy arrow shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Square">
            <summary>
            Square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.FilledSquare">
            <summary>
            Filled square shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.DimensionLine">
            <summary>
            Dimension line shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Cross45">
            <summary>
            45 degrees cross shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.Cross90">
            <summary>
            90 degree cross shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.DoubleCross">
            <summary>
            Double cross shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.ReverseArrow">
            <summary>
            Reverse arrow shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.CrossReverseArrow">
            <summary>
            Cross reverse arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.CircleCross">
            <summary>
            Circle cross shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.CircleReverseArrow">
            <summary>
            Circle reverse arrow shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.DoubleArrow">
            <summary>
            Double arrow shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorShape.ReverseDoubleArrow">
            <summary>
            Reverse double arrow shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DecoratorFactory">
            <summary>
            Decorator factory.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.m_size">
            <summary>
            Default size of decorator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.m_halfSize">
            <summary>
            Half size of default decorator size
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.m_doubleSize">
            <summary>
            Double size of default decorator size
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.CreateDecorator(Syncfusion.Windows.Forms.Diagram.DecoratorShape)">
            <summary>
            Creates the decorator from specified shape.
            </summary>
            <param name="shape">The shape.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Open45Arrow">
            <summary>
            Gets the GraphicsPath of open45 arrow.
            </summary>
            <value>The GraphicsPath of open45 arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Filled45Arrow">
            <summary>
            Gets the GraphicsPath of filled45 arrow.
            </summary>
            <value>The GraphicsPath of filled45 arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Diamond">
            <summary>
            Gets the GraphicsPath of diamond.
            </summary>
            <value>The GraphicsPath of diamond.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.FilledDiamond">
            <summary>
            Gets the GraphicsPath of filled diamond.
            </summary>
            <value>The GraphicsPath of filled diamond.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Circle">
            <summary>
            Gets the GraphicsPath of circle.
            </summary>
            <value>The GraphicsPath of circle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.FilledCircle">
            <summary>
            Gets the GraphicsPath of filled circle.
            </summary>
            <value>The GraphicsPath of filled circle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Open60Arrow">
            <summary>
            Gets the GraphicsPath of open60 arrow.
            </summary>
            <value>The GraphicsPath of open60 arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Filled60Arrow">
            <summary>
            Gets the GraphicsPath of filled60 arrow.
            </summary>
            <value>The GraphicsPath of filled60 arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.OpenFancyArrow">
            <summary>
            Gets the GraphicsPath of fancy arrow.
            </summary>
            <value>The GraphicsPath of open fancy arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.FilledFancyArrow">
            <summary>
            Gets the GraphicsPath of filled fancy arrow.
            </summary>
            <value>The GraphicsPath of filled fancy arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Square">
            <summary>
            Gets the GraphicsPath of square.
            </summary>
            <value>The GraphicsPath of square.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.FilledSquare">
            <summary>
            Gets the GraphicsPath of filled square.
            </summary>
            <value>The GraphicsPath of filled square.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.DimensionLine">
            <summary>
            Gets the GraphicsPath of dimension line.
            </summary>
            <value>The GraphicsPath of dimension line.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Cross45">
            <summary>
            Gets the GraphicsPath of cross45.
            </summary>
            <value>The GraphicsPath of cross45.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.Cross90">
            <summary>
            Gets the GraphicsPath of cross90.
            </summary>
            <value>The GraphicsPath of cross90.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.DoubleCross">
            <summary>
            Gets the GraphicsPath of double cross.
            </summary>
            <value>The GraphicsPath of double cross.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.ReverseArrow">
            <summary>
            Gets the GraphicsPath of reverse arrow.
            </summary>
            <value>The GraphicsPath of reverse arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.CrossReverseArrow">
            <summary>
            Gets the GraphicsPath of cross reverse arrow.
            </summary>
            <value>The GraphicsPath of cross reverse arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.CircleCross">
            <summary>
            Gets the GraphicsPath of circle cross.
            </summary>
            <value>The GraphicsPath of circle cross.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.CircleReverseArrow">
            <summary>
            Gets the GraphicsPath of circle reverse arrow.
            </summary>
            <value>The GraphicsPath of circle reverse arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.DoubleArrow">
            <summary>
            Gets the GraphicsPath of reverse double arrow.
            </summary>
            <value>The GraphicsPath of reverse double arrow.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DecoratorFactory.ReverseDoubleArrow">
            <summary>
            Gets the GraphicsPath of reverse double arrow.
            </summary>
            <value>The GraphicsPath of reverse double arrow.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortVisualType">
            <summary>
            Contains PortVisual predefined types 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.CirclePort">
            <summary>
            Port will be drawn in circle format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.XPort">
            <summary>
            Port will be drawn in X format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.Triangleport">
            <summary>
            Port will be drawn in triangle format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.SquarePort">
            <summary>
            Port will be drawn in square format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.RhombPort">
            <summary>
            Port will be drawn in rhombus format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PortVisualType.Custom">
            <summary>
            Port will be drawn in custom format.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectionPointSize">
            <summary>
            Contains predefined sizes 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointSize.Large">
            <summary>
            Connection point size will be in 12 * 12 size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointSize.Medium">
            <summary>
            Connection point size will be in 9 * 9 size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointSize.Small">
            <summary>
            Connection point size will be in 6 * 6 size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectionPointSize.Custom">
            <summary>
            Connection point size will be custom size.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PortVisuals">
            <summary>
            Contains static GraphicsPath objects that can be used for the
            visual representation of ports.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PortVisuals.GetGraphicsPath(Syncfusion.Windows.Forms.Diagram.PortVisualType,System.Single)">
            <summary>
            Gets the graphics path from specified port style.
            </summary>
            <param name="type">The port style.</param>
            <param name="scale">The scale factor.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.CirclePort">
            <summary>
            Gets the circle with a crosshair in the middle style port.
            </summary>
            <value>The circle port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.XPort">
            <summary>
            Gets the X marks the spot style port.
            </summary>
            <value>The X port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.TrianglePort">
            <summary>
            Gets the triangle form port.
            </summary>
            <value>The triangle port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.SquarePort">
            <summary>
            Gets the square form port.
            </summary>
            <value>The square port.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PortVisuals.RhombPort">
            <summary>
            Gets the rhomb form port.
            </summary>
            <value>The rhomb port.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter">
            <summary>
            Line Routing engine that use A* find path Algorithm to route orthogonal lines.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineRouter">
            <summary>
            A line router provides line routing services for a diagram.
            model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_bInAction">
            <summary>
            Indicates whether line routing engine is updating routes right now.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_model">
            <summary>
            Document to which LineRouting engine is attached.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_nDistance">
            <summary>
            Distance from routing line to obstacles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_routingMode">
            <summary>
            Defines routing mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_nUpdateRequests">
            <summary>
            Document update requests.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_nodesConnectors">
            <summary>
            Collection of connectors to reroute in SemiAutomatic mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LineRouter.m_bGenerateBridges">
            <summary>
            Indicate that line router update bridges after route connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineRouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineRouter"/> class.
            </summary>
            <param name="model">Model to attach line router to</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineRouter"/> class.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteAllModelConnectors">
            <summary>
            Reroutes all model connectors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteConnectors(System.Collections.ICollection)">
            <summary>
            Route given collection of nodes
            </summary>
            <param name="connectors">Collections to route</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteConnector(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Route given connection.
            </summary>
            <param name="connector">Connection to route.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.Pause">
            <summary>
            Pauses the line router
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.Resume">
            <summary>
            Resumes the line router
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteAllModelConnectorsInternal">
            <summary>
            Route all connection from model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteConnectorsInternal(System.Collections.ICollection)">
            <summary>
            Route collection of connectors.
            </summary>
            <param name="connectors">Collection of connectors to route.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.RouteConnectorInternal(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Route connector.
            </summary>
            <param name="connector">Connector to route.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.SetNewModel(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Set new model to the instance.
            </summary>
            <param name="newValue">The new model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.Unsubscribe(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Unsubscribe from all events when node could change it location or size.
            </summary>
            <param name="model">Model to unsubscribe from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.Subscribe(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Subscribe to events of the model
            </summary>
            <param name="model">Model to subscribe to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouter.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.DistanceToObstacles">
            <summary>
            Gets or sets distance to obstacles.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.Model">
            <summary>
            Gets or sets model the line router is attached to.
            Increased when Model.BeginUpdate() is called
            and decreased when Model.EndUpdate() is called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.RoutingMode">
            <summary>
            Gets or sets routing mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.UpdateRequests">
            <summary>
            Gets or sets the update requests.
            </summary>
            <value>The update requests.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineRouter.ConnectorsToReroute">
            <summary>
            Gets collection of connectors to route.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_searchGrid">
            <summary>
            Store Search Grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_lstSearchNodes">
            <summary>
            Store search node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_lstObstacles">
            <summary>
            Helper class used while path find.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_nodesConnectors">
            <summary>
            Store collection of the connectors to route.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_rgnObstacles">
            <summary>
            Store region that represent all obstacles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_modelBounds">
            <summary>
            Store model bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_columnsCount">
            <summary>
            Store search grid's columns count.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.m_rowsCount">
            <summary>
            Store search grid's rows count.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter"/> class.
            </summary>
            <param name="model">The reference to diagram model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.RouteAllModelConnectorsInternal">
            <summary>
            Reroutes all available model connectors.
            </summary>
            <remarks>
            Call ResetSearchCache() and Reroute() method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.RouteConnectorsInternal(System.Collections.ICollection)">
            <summary>
            Route given collection of connectors.
            </summary>
            <param name="connectors">Collections to route.</param>
            <remarks>
            Modified RoutingConnectors collection property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.RouteConnectorInternal(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Route given connection.
            </summary>
            <param name="connector">Connection to route.</param>
            <remarks>
            Modified RoutingConnectors collection property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.ResetSearchCache">
            <summary>
            Recreate obstacles collections and generate search grid to find all possible ways.
            </summary>
            <remarks>
            Collect all obstacles ( node with enable Node.TreatAsObstacle property ) in model and save it to m_lstObstacles member.
            Then generate search grid by calling InitSerarchGrid() that used last obstacles collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Reroute">
            <summary>
            Reroutes connectors from RoutingConnectors collection.
            </summary>
            <remarks>
            Engine find short way and lay out connectors using SetPoints() method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.ConnectNode(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Adds nodeToConnectWith to Neighbours collection of nodeToConnect.
            </summary>
            <param name="nodeToConnect">Node to add neighbour to.</param>
            <param name="nodeToConnectWith">Neighbour to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.DisconnectNode(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Removes neighbour node from nodeDisconnectFrom Neighbours.
            </summary>
            <param name="nodeDisconnectFrom">Node to remove neighbour from.</param>
            <param name="nodeDisconnecting">Neighbour to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.DisconnectNodes(Syncfusion.Windows.Forms.Diagram.SearchNodeArray)">
            <summary>
            Clear neighbours.
            </summary>
            <param name="lstDisconnecting">Nodes to clear neighbours</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetBoundaryIntersects(System.Drawing.PointF,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Gets the search node array that intersect with rcBounds rectangle.
            </summary>
            <param name="ptEndPointLocation">The tested EndPoint location.</param>
            <param name="rcBounds">The bounds rectangle.</param>
            <param name="heading">The tested EndPoint heading.</param>
            <returns>The search node array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.CreateSearchNode(System.Drawing.PointF)">
            <summary>
            Creates the search node in given location.
            </summary>
            <param name="ptLoc">The search node location.</param>
            <returns><see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNode"/> instance in given location.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetNearestSearchGridNodes(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Gets intersection points of given search node with search grid.
            </summary>
            <param name="node">The search node.</param>
            <param name="endPoint">The end point to check.</param>
            <returns>The search node array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.ConnectNearestNodeNeighbour(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Connects the nearest node to Neighbour collection of nodeCur.
            </summary>
            <param name="nodeCur">The Neighbour collection container.</param>
            <param name="nodeNearest">The nearest search node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.InitSearchGrid">
            <summary>
            Initialize search grid using collected obstacles.
            </summary>
            <remarks>
            Generate search grid from <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchGridNode"/>  
            using m_lstObstacles member as obstacles collection.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.UpdateNeighbours(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Update nodes neighbours.
            </summary>
            <param name="nXNode1">The X axis position of first node.</param>
            <param name="nYNode1">The Y axis position of first node.</param>
            <param name="nXNode2">The X axis position of second node.</param>
            <param name="nYNode2">The Y axis position of second node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.CanConnect(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Check if two search nodes can be connected.
            </summary>
            <param name="node1">First node to check.</param>
            <param name="node2">Second node to check.</param>
            <returns>true, if can connect to the nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.IsValid(System.Drawing.PointF)">
            <summary>
            Gets value indicates that model's bounds constrains given point.
            </summary>
            <param name="ptTesting">Point to check.</param>
            <returns>TRUE in model's bounds constrains point, otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetObstacles">
            <summary>
            Creates array of obstacles.
            </summary>
            <returns>Array of obstacles.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.FindPath(Syncfusion.Windows.Forms.Diagram.EndPoint,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Searches for route from endPointHead to endPointTail.
            </summary>
            <param name="endPointHead">EndPoint to start search from.</param>
            <param name="endPointTail">EndPoint to search to.</param>
            <returns>Array of points that represent path</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetTopParentNode(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the top parent node.
            </summary>
            <param name="node">The node.</param>
            <returns>The top parent node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.CheckPointOnLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Check are points on one horizontal or vertical line.
            </summary>
            <param name="ptStart">Start point to check.</param>
            <param name="ptEnd">End point to check.</param>
            <returns>TRUE if points are on one horizontal or vertical line, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.FindPath(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Searches for route from nodeStart to nodeEnd.
            </summary>
            <param name="nodeStart">Node to start search from.</param>
            <param name="nodeEnd">Node to search to.</param>
            <returns>True if route found, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetEndPointPosition(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Gets the end point position in model coordinates.
            </summary>
            <param name="endPoint">The end point in model coordinates.</param>
            <returns>The end points collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetEndPointPortContainerBounds(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Gets the bounds of end point port container .
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>Bounds of port container node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetIntersectBounds(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Get node bounds will intersected nodes.
            </summary>
            <param name="node">Node that use to calculate related bounds.</param>
            <returns>The node bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetNodesIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Gets the collection of intersecting obstacles in collection with given rectangle.
            </summary>
            <param name="nodes">The node collection.</param>
            <param name="recbBounding">The bounds rectangle to intersect with.</param>
            <returns>The intersecting nodes collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.GetBoundingRect(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the bounding rectangle of node collection.
            </summary>
            <param name="nodes">The node collection.</param>
            <returns><see cref="T:System.Drawing.RectangleF"/> instance.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.RoutingConnectors">
            <summary>
            Gets the reference to collection of connectors that will be routed by engine.
            </summary>
            <value>The reference to routing connector collection.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Obstacle">
            <summary>
            Simple obstance template that used to find short way. Contain the HasCentralPort flag
            and the BoundingRect properties.
            </summary>
            <remarks>
            Instance created from node that contain port collection and it bounding rectangle.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Obstacle.HasCentralPort">
            <summary>
            Store value indivates that the obstacle has enabled central port.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Obstacle.BoundingRect">
            <summary>
            Store bounding rectangle of the obstacle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Obstacle.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.AStarLineRouter.Obstacle"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="rcBounding">The bounding rectangle.</param>
            <exception cref="T:System.ArgumentNullException">When node is equal null.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray">
            <summary>
            Collection of search nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.m_array">
            <summary>
            Store array of SearchNodes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.m_count">
            <summary>
            Store count of SearchNodes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.#ctor(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.#ctor(Syncfusion.Windows.Forms.Diagram.SearchNode,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Add(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Add SearchNode to collection
            </summary>
            <param name="item">SearchNode to add</param>
            <returns>Index of added SearchNode</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Contains(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets value indicates is SearchNode in collection
            </summary>
            <param name="node">SearchNode to check</param>
            <returns>TRUE in node belongs to collection otherwise FALSE.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.RemoveAt(System.Int32)">
            <summary>
            Remove node by its index in collection
            </summary>
            <param name="index">Index of node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets IEnumerator.
            </summary>
            <returns>The IEnumerator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.IndexOf(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets index of node in collection.
            </summary>
            <param name="item">Node to get index</param>
            <returns>Index of the node in collection. If node collection doesn't constrain node return -1</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Insert(System.Int32,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.GetInsertIndex(Syncfusion.Windows.Forms.Diagram.SearchNode,System.Int32,System.Int32)">
            <summary>
            Gets the index of the insert.
            </summary>
            <param name="node">The node.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns>The index to insert the node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.ProvideSpaceFor(System.Int32)">
            <summary>
            Checks if collection can constrain Count + nItems. If not
            increase collection by collection capacity.
            </summary>
            <param name="nItems">Count of nodes to check collection size</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.ValidateIndex(System.Int32)">
            <summary>
            Validates the index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Capacity">
            <summary>
            Gets or sets collection capacity.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Item(System.Int32)">
            <summary>
            Gets or sets SearchNode by its index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether collection is synchronized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets SyncRoot.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Count">
            <summary>
            Gets count of elements in collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator">
            <summary>
            The node search enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator.#ctor(Syncfusion.Windows.Forms.Diagram.SearchNodeArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator"/> class.
            </summary>
            <param name="tc">The search node array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.-or- The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.PriorityComparer">
            <summary>
            Priority comparer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.PriorityComparer.#ctor(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.PriorityComparer"/> class.
            </summary>
            <param name="nodeEnd">The node end.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNodeArray.PriorityComparer.Compare(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Compares the specified x.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>1, if x is greater than y.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SearchNode">
            <summary>
            The helper point that the grid of the findpaths' possible ways consists of.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_bGCalcFlag">
            <summary>
            Indicates whether F or G value will be calculated in
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetMoveCost"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_bHCalcFlag">
            <summary>
            Indicates whether F or G value will be calculated in
            <see cref="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode)"/> method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_fH">
            <summary>
            Heuristic.Estimate of what it will cost to get to the goal node.
            Sum of all the costs it will take to get to the goal( Total path estimate ).
            </summary>
            <remarks>
            F = G + H = gone + heuristic.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_fG">
            <summary>
            Sum off all the costs it took to get here.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_ptLocation">
            <summary>
            PathNode location. In model coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_sgnParent">
            <summary>
            Parent node.
            </summary>
            <remarks>
            Used to get route vertices when path found.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SearchNode.m_lstNeighbours">
            <summary>
            Possible route succeding nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNode"/> class.
            </summary>
            <param name="ptLocation">The point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetGridHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets the grid heuristic cost.
            </summary>
            <param name="from">Node to calc heuristic from.</param>
            <param name="to">Node to calc heuristic to.</param>
            <returns>Heuristic from from to to.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetGridMoveCost(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets the grid move cost.
            </summary>
            <param name="from">From node.</param>
            <param name="to">To node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetGraphMoveCost(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets the graph move cost.
            </summary>
            <param name="from">The source node.</param>
            <param name="to">The target node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetGraphHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode,Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets the graph heuristic cost.
            </summary>
            <param name="from">From node.</param>
            <param name="to">To node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.ResetFGCalculations">
            <summary>
            Sets CalcFlag to true.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetMoveCost">
            <summary>
            Calculates G value for this node from given node.
            </summary>
            <returns>G value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Gets the heuristic cost.
            </summary>
            <param name="node">The node.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.GetAllCosts">
            <summary>
            Gets all costs.
            </summary>
            <remarks>Always return 0.</remarks>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.CalcMoveCost(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Calculates the move cost.
            </summary>
            <param name="nodeFrom">The node from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchNode.CalcHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Calculates the heuristic cost.
            </summary>
            <param name="nodeTo">The node to.</param>
            <returns>The value.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNode.Processed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchNode"/> is processed.
            </summary>
            <value><c>true</c> if processed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNode.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNode.Neighbours">
            <summary>
            Gets the neighbours.
            </summary>
            <value>The neighbours.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SearchNode.Location">
            <summary>
            Gets the location.
            </summary>
            <value>The location.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SearchGridNode">
            <summary>
            Search grid node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchGridNode.#ctor(System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SearchGridNode"/> class.
            </summary>
            <param name="ptLocation">The point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchGridNode.CalcHeuristicCost(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Calculates the heuristic cost.
            </summary>
            <param name="nodeTo">The node to.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SearchGridNode.CalcMoveCost(Syncfusion.Windows.Forms.Diagram.SearchNode)">
            <summary>
            Calcs the move cost.
            </summary>
            <param name="nodeFrom">The node from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RoutingMode">
            <summary>
            Routing mode for line routing engine.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoutingMode.Inactive">
            <summary>
            Defines that line routing engine
            will skip all document changes it is attached to.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoutingMode.Automatic">
            <summary>
            Defines that line routing engine
            will reroute all connectors in document.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoutingMode.SemiAutomatic">
            <summary>
            Defines that line routing engine will
            reroute currently moved node connector's only.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager">
            <summary>
            The DirectedTreeLayoutManager class, a specialization of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/> 
            base, implements a layout manager for arranging nodes in a tree-like structure. The <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> 
            can be applied to any diagram that is composed as a directed tree graph with a unique root and child nodes. The layout manager 
            lets you orient the tree in just about any direction around the root, and can be used for creating arrangements such as 
            top-to-bottom vertical trees, bottom-to-top vertical trees, right-to-left horizontal trees, left-to-right horizontal trees, 
            angular trees etc.,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager">
            <summary>
            The GraphLayoutManager defines the base class used for implementing layout managers for diagrams composed 
            of nodes that form a connected graph. The <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/> 
            provides the necessary foundation for initializing, validating and creating the diagram graph. The GraphLayoutManager 
            also implements the infrastructure for positioning diagram nodes using the specialized layout strategies 
            provided by custom layout managers.
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutManager">
            <summary>
            Base class for layout managers.
            </summary>
            <remarks>
            <para>
            This class provides the basic plumbing for layout managers. A layout
            manager is an object that controls the positioning of nodes in a model.
            Each layout manager object is attached to a single model by the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.Model"/>
            property.
            </para>
            <para>
            Layout managers can operate one of two modes: manual or
            auto-update. When the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.AutoLayout"/>
            flag is set to True, the layout manager responds to events in the model
            by automatically repositioning nodes in the model. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.UpdateLayout(System.Object)"/>
            method can be called at any time to reposition the nodes in the model.
            If the AutoLayout flag is False, then UpdateLayout must be called manually
            in order to update the layout of nodes in the model.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.m_lstNodes">
            <summary>
            Nodes who  will lay out.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.mdl">
            <summary>
            Reference to model and layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.layoutUpdatingFlag">
            <summary>
            Flag indicationg if layouting in process.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.autoLayoutFlag">
            <summary>
            Flag indicating if layout is to be updated automatically.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutManager.LayoutUpdated">
            <summary>
            Fired after the layout has been updated by the layout manager.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.UpdateLayout(System.Object)">
            <summary>
            Updates the layout of the nodes in the model.
            </summary>
            <param name="contextInfo">Provides context information to help with updating the layout.</param>
            <returns>True if changes were made; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnNodeCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called when nodes are added or removed from the model.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnConnectionsChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called when connection collections is changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnLayoutUpdated(System.EventArgs)">
            <summary>
            Called after the layout has been updated by the layout manager.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.OnPropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Called when one or more nodes in the model are has change properties.
            </summary>
            <param name="evtArgs">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutManager.mdl_ViewUpdate(System.Object,System.EventArgs)">
            <summary>
            Handles the ViewUpdate event of the model.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.Nodes">
            <summary>
            Gets the nodes collection by who will apply layout.
            </summary>
            <value>The nodes collection.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.Model">
            <summary>
            Gets or sets the model attached to this layout manager.
            </summary>
            <remarks>
            <para>
            The model referenced by this property is updated when the
            UpdateLayout method is called.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.AutoLayout">
            <summary>
            Gets or sets a value indicating whether the layout manager automatically updates the layout of the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.UpdatingLayout">
            <summary>
            Gets or sets a value indicating whether layout update state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.LeftMargin">
            <summary>
            Gets or Sets the left margin for the layout manager.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayoutManager.TopMargin">
            <summary>
            Gets or Sets the top margin for the layout manager.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.m_helperSelectedNode">
            <summary>
            Selected node what constraint graph in position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fHorizontalSpacing">The horizontal spacing between nodes.</param>
            <param name="fVerticalSpacing">The vertical spacing between nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.UpdateLayout(System.Object)">
            <summary>
            Updates the layout of the nodes in the model.
            </summary>
            <param name="contextInfo">Provides context information to help with updating the layout.</param>
            <returns>True if changes were made; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.OnPreferredLayout(Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs)">
            <summary>
            Occurs before a node(or graph) is positioned.
            </summary>
            <param name="evtargs">Event arguments.</param>
            <remarks>
            <para>This method can be overridden in derived classes.</para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.UpdateLayout(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Updates the layout of the given nodes.
            </summary>
            <param name="nodesToLayout">The nodes to layout.</param>
            <returns>
            True if changes were made; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.DoLayout">
            <summary>
            Does the layout with Nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.DetectCyclesInGraph(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Detects the cyclical relationship between nodes.
            </summary>
            <param name="nodes">Node collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.getUnVisitedChildNodes(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the unvisited child nodes
            </summary>
            <param name="top">Parent node</param>
            <returns>returns child node collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.GetNodesToPosition(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Selects nodes from Model children-node collection, adding selected to PassedNodes hashtable
            </summary>
            <param name="nodes">The nodes collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.SelectNodes(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Select connected nodes, create graph and set as SelectedNode.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.IsConnectedToAnotherNode(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Enumerates through all edges ( leaving and entering ), seeking for connected nodes.
            If no connected node found -- no need to treat gnNode as graph.
            </summary>
            <param name="gnNode">node whose edges will be searched.</param>
            <returns>true, if connected to another node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.SearchEdgeCollection(System.Collections.ICollection,Syncfusion.Windows.Forms.Diagram.EdgeConnected)">
            <summary>
            Looks through edges collection till first connected node found.
            </summary>
            <param name="edgesToSearchThrough">Edges to search collection.</param>
            <param name="connectionDirection">Connected edges</param>
            <returns>true, when first node is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.SelectConnectedNodes(Syncfusion.Windows.Forms.Diagram.IGraphNode)">
            <summary>
            Selects connected nodes to CurrentGraph hashtable.
            </summary>
            <param name="nodeGraph">Graph node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.QuiteResetEditStyle(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Quites the reset move locking.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The hashtable.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.QuiteRestoreEditStyle(System.Collections.Hashtable)">
            <summary>
            Quites the restore move locking.
            </summary>
            <param name="table">The hashtable where key - node, value - editStyle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.DoGraphLayout">
            <summary>
            Applies a custom layout management strategy on the diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.VerticalSpacing">
            <summary>
            Gets or sets the vertical offset between adjacent nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal offset between adjacent nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.PassedNodes">
            <summary>
            Gets or sets the passed node collection where key is node fullname and value - node reference.
            </summary>
            <value>The passed nodes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.SelectedNode">
            <summary>
            Gets or sets the current selected node while generation node graph.
            </summary>
            <value>The selected node.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.ImprovePerformance">
            <summary>
            Gets or sets a value indicating whether performance can be improved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.PreferredLayout">
            <summary>
            Occurs before a node graph is positioned. 
            </summary>
            <remarks>
            Handling the PreferredLayout event provides users with the ability to examine the bounds used for 
            laying out the node graph and specify a different bounds if necessary.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.m_fRotationDegree">
            <summary>
            Graph Rotation degree.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotationDegree">The root to child orientation to be used for the tree.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.LayoutType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotationDegree">The root to child orientation to be used for the tree.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="layoutType">Specifies the layout type of tree</param>
            <param name="nTreeLevel">Specifies the tree level upto which the default layout has to be maintained</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.LayoutType,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotationDegree">The root to child orientation to be used for the tree.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="layoutType">Specifies the layout type of tree</param>
            <param name="nTreeLevel">Specifies the tree level upto which the default layout has to be maintained</param>
            <param name="bSingleChildLayout">Determines whether the layout needs to done on single child node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.DoGraphLayout">
            <summary>
            Applies the directed tree layout strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.MakeLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Performs the graph layout.
            </summary>
            <param name="graphSorting">The graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.ApplyRotation(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Rotates Graph.
            </summary>
            <param name="graphSorting">The graph to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.MakeGraphLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Applies Layout Manager logic to given graph.
            </summary>
            <param name="graphSorting">Affecting graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.ExtractSubGraph(Syncfusion.Windows.Forms.Diagram.GraphNode,System.Int32,Syncfusion.Windows.Forms.Diagram.Graph@)">
            <summary>
            Extracts subGraph from specified node.
            </summary>
            <param name="dtgnFrom">new graph TopNode.</param>
            <param name="nRank">current Rank.</param>
            <param name="graphToFill">Graph to extract to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.ExploreTree(Syncfusion.Windows.Forms.Diagram.GraphNode,Syncfusion.Windows.Forms.Diagram.Graph@,System.Int32)">
            <summary>
            Extracting subGraph routine. Enumerates through graphNode children changing relatives relations. Filling new graph.
            </summary>
            <param name="dtgnNode">The graph node.</param>
            <param name="graphToFill">The graph to fill.</param>
            <param name="nRank">The rank.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.NormalizeNodes(System.Collections.ArrayList,System.Int32)">
            <summary>
            Normalizes the nodes.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="nRank">The n rank.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.DoInitXLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Does the init X layout.
            </summary>
            <param name="graphToSort">The graph to sort.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.XCoordRoutine(Syncfusion.Windows.Forms.Diagram.IGBounds,System.Single@)">
            <summary>
            X coordinate routine.
            </summary>
            <param name="gnBounds">The bounds.</param>
            <param name="fX">The value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.MakeLayout(System.Collections.ArrayList,System.Int32,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Makes the layout.
            </summary>
            <param name="lstRank">The last rank.</param>
            <param name="nRank">The rank.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.WaterFallNodePosition(Syncfusion.Windows.Forms.Diagram.GraphNode)">
            <summary>
            Method that sets the location of nodes in Waterfall layout.
            </summary>
            <param name="currentNode">The node whose child has to be positioned,</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.CalcRankPositionVerticalLayout(System.Int32,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Calculates the rank position vertical layout.
            </summary>
            <param name="nRank">The rank.</param>
            <param name="graph">The graph.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.GetSubGraphDimension(System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.Dimension,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Gets the sub graph dimension.
            </summary>
            <param name="nFromRank">The rank from.</param>
            <param name="nToRank">The rank to.</param>
            <param name="dimension">The dimension.</param>
            <param name="graph">The graph.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.YCoordinateRoutine(System.Collections.ArrayList,System.Single)">
            <summary>
            Y coordinate routine.
            </summary>
            <param name="lstRank">The last rank.</param>
            <param name="fYRank">The rank.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager.RotationAngle">
            <summary>
            Gets or sets the rotation angle for graph.
            </summary>
            <value>The rotation angle.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Coordinate">
            <summary>
            Specifies coordinate to use.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Coordinate.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Coordinate.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Dimension">
            <summary>
            Specifies dimension to use.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Dimension.Width">
            <summary>
            Width of the layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Dimension.Height">
            <summary>
            Height of the layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EdgeConnected">
            <summary>
            Internal usage helper enum.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EdgeConnected.ToNode">
            <summary>
            The node to which the connector is to connect.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EdgeConnected.FromNode">
            <summary>
            The node from which the connector should start its connection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Relatives">
            <summary>
            Specifies node relatives.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Relatives.Parents">
            <summary>
            Node relatives are parents.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Relatives.Children">
            <summary>
            Node relatives are children.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodesCollection">
            <summary>
            Specifies collection of nodes to use.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodesCollection.Passed">
            <summary>
            The passed nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.NodesCollection.Selected">
            <summary>
            The selected nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GraphType">
            <summary>
            Specifies Graph type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphType.OneParentDirectedTree">
            <summary>
            Directed Graph in which nodes can contain one parent and several children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphType.MultiParentDirectedTree">
            <summary>
            Directed Graph in which nodes can contain several parents and several children.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphType.NonDirectedGraph">
            <summary>
            Non directed graph.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutType">
            <summary>
            Specifies Layout type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutType.Horizontal">
            <summary>
            Directed Graph in which nodes are laid out horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LayoutType.Waterfall">
            <summary>
            Directed Graph in which nodes after treelevel are laid out in waterfall model.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Graph">
            <summary>
            Graph is a collection of connected nodes ( basically SymbolBase derived objects linked connected with links ).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGBounds">
            <summary>
            Interface representing Graph Bounds
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Bounds">
            <summary>
            Gets position and size of the Graph.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Location">
            <summary>
            Gets or sets position of the Graph
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.X">
            <summary>
            Gets or sets X-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Y">
            <summary>
            Gets or sets Y-coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Size">
            <summary>
            Gets or sets the size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Width">
            <summary>
            Gets or sets width of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Height">
            <summary>
            Gets or sets the height of the object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IGBounds.Center">
            <summary>
            Gets or sets center position of the Graph.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IGTransform">
            <summary>
            Interface to Graph nodes that can translate and rotate.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGTransform.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGTransform.RotateAt(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="fDegree">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IGTransform.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="fDegree">Number of degrees to rotate.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_fLeftMargin">
            <summary>
            Contains the margin values for the Graph.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_improvePerformance">
            <summary>
            Determines whether the time consuming codes need to be blocked from executing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_bGraphTypeDetermined">
            <summary>
            Internal flag indicating that Graph Type has been already determined.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_bResizeNodes">
            <summary>
            Flag indicating whether graph nodes should resize when graph size changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_graphType">
            <summary>
            Graph Type. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_hashGraph">
            <summary>
            Hashtable containing nodes belonging to Graph.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_lstRankOrdered">
            <summary>
            ArrayList containing GraphNodes ordered considering GraphType.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_rectBounds">
            <summary>
            Graph bounding rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_lstRankBiggestDimensions">
            <summary>
            Ranked Graph dimensions arranged by ranks.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_lstFictitiousNodes">
            <summary>
            List of fictitious nodes what insert between ranks.
            Used in FictitiousNodes property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Graph.m_bBoundsChanged">
            <summary>
            Internal usage flag indicating whether graph bounds changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Graph"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.#ctor(System.Boolean,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Graph"/> class.
            </summary>
            <param name="improvePerformance">Determines whether performance needs to be improved.</param>
            <param name="leftMargin">The left margin of the graph.</param>
            <param name="topMargin">The top margin of the graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.AppendTransfomChanges">
            <summary>
            Append all position and size transformation to graph nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.AppendTransformChanges">
            <summary>
            Append all position and size transformation to graph nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.RecalculateBounds">
            <summary>
            Recalculates graph bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.Translate(System.Single,System.Single)">
            <summary>
            Moves the node by the given X and Y offsets.
            </summary>
            <param name="dx">Distance to move along X axis.</param>
            <param name="dy">Distance to move along Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.RotateAt(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">Fixed point about which to rotate.</param>
            <param name="fDegree">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees about its center point.
            </summary>
            <param name="fDegree">Number of degrees to rotate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.Scale(System.Single,System.Single)">
            <summary>
            Scales the specified f scale X.
            </summary>
            <param name="fScaleX">The X scale factor.</param>
            <param name="fScaleY">The Y scale factor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetGraphNodeRank(Syncfusion.Windows.Forms.Diagram.GraphNode,System.Int32@)">
            <summary>
            Gets the graph node rank for rank order list.
            </summary>
            <param name="gnNode">The graph node.</param>
            <param name="nIndex">The index.</param>
            <returns>The rank.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.CheckRankPosition(Syncfusion.Windows.Forms.Diagram.GraphNode,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Check if node rank can be changed.
            Checking by maximum parent rank.
            </summary>
            <param name="gnNode">Checking graphNode </param>
            <param name="nNodeRank">GraphNode rank in order list.</param>
            <param name="bParentChild">If <b>true</b> given graphNode checked to parents rank
            otherwise - to children rank. </param>
            <param name="nRank">The rank.</param>
            <returns>true, if node rank can be changed.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.IsCycleGraph">
            <summary>
            Determines whether graph has cycle.
            </summary>
            <returns>
            <c>true</c> if graph has cycle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.IsCycleConnections(Syncfusion.Windows.Forms.Diagram.GraphNode,Syncfusion.Windows.Forms.Diagram.GraphNode,System.Collections.ArrayList)">
            <summary>
            Determines whether node connected in cycle.
            </summary>
            <param name="gnNode">The graphNode.</param>
            <param name="gnParent">The parentNode.</param>
            <param name="lstChecked">The collection of checked nodes.</param>
            <returns>
            <c>true</c> if node conected in cycle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.AddNode(System.Object,System.Int32)">
            <summary>
            OneParentDirectedTree routine. Adds scecified node to specified Rank.
            </summary>
            <param name="gnNodeToAdd">Node to add.</param>
            <param name="nRank">Rank to insert node into.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetGraphFirstTopNode">
            <summary>
            Gets first GraphNode which contains no parents.
            </summary>
            <returns>Node found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.SortRankNodes">
            <summary>
            Sorts th nodes in rank order list by remove connector intersections.
            </summary>
            <remarks>
            Algorism:
            1. Sort nodes in list from biggest to smaller child count.
            2. Get parent position in his list by find percent
            3. Calc child position by multiply percent to child count
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.SortChildrenRankNodes(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Sorts the nodes in rank order list by remove connector intersections.
            </summary>
            <param name="lstParentsRankList">Parents rank list.</param>
            <param name="lstChildrenRankList">Children rank list.</param>
            <returns>The sorted nodes list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.SortParentRankNodes(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Sorts the nodes in rank order list by remove connector intersections.
            </summary>
            <param name="lstParentsRankList">Parents rank list.</param>
            <param name="lstChildrenRankList">Children rank list.</param>
            <returns>The sorted nodes list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.MoveNode(System.Collections.ArrayList,Syncfusion.Windows.Forms.Diagram.GraphNode,System.Int32)">
            <summary>
            Move node inside list to current index.
            </summary>
            <param name="list">ArrayList what contain node.</param>
            <param name="gnNode">Node what will moving.</param>
            <param name="nIndex">Index where node will moved.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.AddFictitiousNodes">
            <summary>
            Adds the fictitious nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetMinimumDimension(System.Collections.ArrayList)">
            <summary>
            Gets the minimum dimension in nodes list.
            </summary>
            <param name="lstRankNodes">The rank nodes list.</param>
            <returns>The dimension</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.RemoveFictitiousNodes">
            <summary>
            Removes the fictitious nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.RemoveInterceptions(Syncfusion.Windows.Forms.Diagram.Interception[])">
            <summary>
            Remove finded interception if can.
            </summary>
            <param name="interceptions">The interceptions.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.CheckRankDimensions">
            <summary>
            Checks the rank dimensions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.CheckDimensions(Syncfusion.Windows.Forms.Diagram.IGBounds,System.Int32)">
            <summary>
            Checks the dimensions.
            </summary>
            <param name="nodeToCompare">The node to compare.</param>
            <param name="nRank">The rank number.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetInterceptionCount">
            <summary>
            Gets the interception count into ranks.
            </summary>
            <returns>Count of links interception.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetAlwaysInterceptionCount">
            <summary>
            Gets the interception count what imposible to remove.
            </summary>
            <returns>The interception count.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.OptimizeGraph">
            <summary>
            Remove all possible interception.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.OptimizeTopRank">
            <summary>
            Remove interception in first rank list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetListOrderedClone">
            <summary>
            Gets list ordered clone.
            </summary>
            <returns>The cloned list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.MoveGraph(System.Drawing.PointF)">
            <summary>
            Moves Graph to new Location.
            </summary>
            <param name="ptNewLocation">Location to move to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.MoveGraph(System.Single,System.Single)">
            <summary>
            Enumerates through Graph nodes movig its specified coordinate by specified offset.
            </summary>
            <param name="fOffsetX">Offset to move across X axis.</param>
            <param name="fOffsetY">Offset to move across Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.CalcGraphBounds">
            <summary>
            Calculates Graph bounds.
            </summary>
            <returns>The graph bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.UpdateBoundaries(Syncfusion.Windows.Forms.Diagram.IGBounds,Syncfusion.Windows.Forms.Diagram.BoxSide)">
            <summary>
            Calculating graph bounds helper method.
            </summary>
            <param name="gBounds">The bounds.</param>
            <param name="side">The box side.</param>
            <returns>The graph bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.GetGraphType">
            <summary>
            Determines GraphType. Tries to make graph type ordered.
            </summary>
            <returns>The graph type.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Graph.Resize(System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.Dimension)">
            <summary>
            Resizes graph's specified dimension.
            </summary>
            <param name="fOldValue">Old dimension value.</param>
            <param name="fNewValue">New dimension value.</param>
            <param name="dimension">Dimension to change.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.ResizeNodes">
            <summary>
            Gets or sets a value indicating whether nodes should be resized when graph size changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.GraphNodes">
            <summary>
            Gets or sets hashtable containing graph nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.TypeOrdered">
            <summary>
            Gets graph presentation as rank ordered hashtable according to 
            graph type.<seealso cref="T:Syncfusion.Windows.Forms.Diagram.GraphType"/>
            If 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.BiggestDimensions">
            <summary>
            Gets list of biggest dimensions in every level.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.GraphType">
            <summary>
            Gets graph type. <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GraphType"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.LeftBoundingNode">
            <summary>
            Gets graph left bounding node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.RightBoundingNode">
            <summary>
            Gets graph right bounding node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.TopBoundingNode">
            <summary>
            Gets graph top bounding node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.BottomBoundingNode">
            <summary>
            Gets graph bottom bounding node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.FictitiousNodes">
            <summary>
            Gets fictitious nodes what insert between ranks.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Bounds">
            <summary>
            Gets Graph bounding rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.X">
            <summary>
            Gets or sets graph X coordinate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Y">
            <summary>
            Gets or sets graph Y coordinate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Location">
            <summary>
            Gets or sets graph location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Size">
            <summary>
            Gets or sets graph Size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Width">
            <summary>
            Gets or sets graph Width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Height">
            <summary>
            Gets or sets graph Height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Graph.Center">
            <summary>
            Gets or sets graph Center location.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Interception">
            <summary>
            Crossing links in graph.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Interception.XCrossCondition">
            <summary>
            If parent has child, who has a parent, who has a child, who has a parent 
            what equals start parent then we have a interception.
            </summary>
            <returns>true, if x cross condition.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GraphForceNode">
            <summary>
            Force node for symmetric layout manager.
            Used only in <ref>Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager</ref>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphForceNode.#ctor(Syncfusion.Windows.Forms.Diagram.GraphNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphForceNode"/> class.
            </summary>
            <param name="gnNode">The GraphNode container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphForceNode.ApplyChanges">
            <summary>
            Apply force position changes to graph position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphForceNode.GraphNode">
            <summary>
            Gets reference to graph node what contain this forcenode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphForceNode.Nodes">
            <summary>
            Gets all connected nodes to this node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphForceNode.Location">
            <summary>
            Gets or sets current force node location.
            </summary>
            <remarks>
            This location can be not equal to graphNode location.
            But after call public AppendChanges() methods this location
            append to graphNode location.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphForceNode.VelocityX">
            <summary>
            Gets or sets force velocity by x axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphForceNode.VelocityY">
            <summary>
            Gets or sets force velocity by y axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs">
            <summary>
            Event argument used for the <see cref="E:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.PreferredLayout"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs.#ctor(System.Boolean,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs"/> class.
            </summary>
            <param name="bIsGraphUnderlayout">Specifies whether the particular graph is under layout.</param>
            <param name="location">Specifies the node or graph location.</param>
            <param name="size">Specifies the node or graph size.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs.ResizeGraphNodes">
            <summary>
            Gets or sets a value indicating whether graph nodes will be resized.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs.Location">
            <summary>
            Gets or sets the preferred graph location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs.Size">
            <summary>
            Gets or sets the preferred graph size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventArgs.IsGraphUnderLayout">
            <summary>
            Gets a value indicating whether the graph is under layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PreferredLayoutEventHandler">
            <summary>
            Delegate used for the <see cref="E:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager.PreferredLayout"/> event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="evtArgs">The evtargs.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GraphNode">
            <summary>
            Graph node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GraphNodeBase">
            <summary>
            Base class for GraphNodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphNodeBase"/> class.
            </summary>
            <param name="node">The node. If set null node will mark as fictitious.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.m_strFullName">
            <summary>
            Name of node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.m_node">
            <summary>
            SymbolBase derived object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.m_bAdded">
            <summary>
            Internal usage flag.
            Indicates whether node has been already added to typeOrder hashtable in Graph.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.ApplyChanges">
            <summary>
            Append bounds and size changes to kept node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.InitializeProperties(Syncfusion.Windows.Forms.Diagram.IUnitIndependent)">
            <summary>
            Cache node position node size properties.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Translate(System.Single,System.Single)">
            <summary>
            Moves Graph node to a new location.
            </summary>
            <param name="dx">New location X coordinate.</param>
            <param name="dy">New location Y coordinate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.RotateAt(System.Drawing.PointF,System.Single)">
            <summary>
            Rotates the node a specified number of degrees about a given
            anchor point.
            </summary>
            <param name="ptAnchor">anchor point.</param>
            <param name="fDegree">rotation degree.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Rotate(System.Single)">
            <summary>
            Rotates the node a specified number of degrees.
            </summary>
            <param name="fDegree">Rotation degree.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.FullName">
            <summary>
            Gets the name of node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Node">
            <summary>
            Gets SymbolBase derived object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Added">
            <summary>
            Gets or sets a value indicating whether node has been already added to typeOrder hashtable in Graph.
            Internal usage flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Bounds">
            <summary>
            Gets node bounding rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Location">
            <summary>
            Gets or sets node location point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.X">
            <summary>
            Gets or sets location X coordinate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Y">
            <summary>
            Gets or sets location Y coordinate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Size">
            <summary>
            Gets or sets node size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Width">
            <summary>
            Gets or sets node width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Height">
            <summary>
            Gets or sets node height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNodeBase.Center">
            <summary>
            Gets or sets node center point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNode.m_tag">
            <summary>
            Tag for related parameters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNode.m_hashParents">
            <summary>
            Hashtable containing parents relations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GraphNode.m_hashChildren">
            <summary>
            Hashtable containing children relations.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNode.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphNode"/> class.
            </summary>
            <param name="nodeGraph">The node graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GraphNode.GetAllConnections">
            <summary>
            Gets all connection to other nodes.
            </summary>
            <returns>The node connections.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNode.Distance">
            <summary>
            Gets or sets the distance
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNode.Visited">
            <summary>
            Gets or sets whether the node has been traversed or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNode.Tag">
            <summary>
            Gets or sets tag field.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNode.Parents">
            <summary>
            Gets or sets this node's parents.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.GraphNode.Children">
            <summary>
            Gets or sets this node's children.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager">
            <summary>
            Inherits from GraphLayoutManager. Sort nodes by rank and place nodes to it parent/children relations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.m_fRotationDegree">
            <summary>
            Graph Rotation degree.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="fRotationDegree">The Rotation degree.</param>
            <param name="fVerticalOffset">The n vertical offset.</param>
            <param name="fHorizontalOffset">The n horizontal offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.DoGraphLayout">
            <summary>
            Applies a custom layout management strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.MakeLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Performs the graph layout.
            </summary>
            <param name="graphSorting">The graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.CompassHorizontalTree(Syncfusion.Windows.Forms.Diagram.IEndPointContainer@)">
            <summary>
            Sets the HeadingHead and HeadingTail for the connectors in Horizontal tree
            </summary>
            <param name="container">The container</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.CompassVerticalTree(Syncfusion.Windows.Forms.Diagram.IEndPointContainer@)">
            <summary>
            Sets the HeadingHead and HeadingTail for the connectors in vertical tree
            </summary>
            <param name="container">The container</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.ReplaceConnector(Syncfusion.Windows.Forms.Diagram.IEndPointContainer)">
            <summary>
            Replace the current connector to OrgLineconnector.
            </summary>
            <param name="container">The end point container.</param>
            <returns>Replaced orthogonal connector.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.ExtractSubGraph(Syncfusion.Windows.Forms.Diagram.GraphNode,System.Int32,Syncfusion.Windows.Forms.Diagram.Graph@)">
            <summary>
            Extracts subGraph from specified node.
            </summary>
            <param name="dtgnFrom">new graph TopNode.</param>
            <param name="nRank">current Rank.</param>
            <param name="graphToFill">Graph to extract to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.ExploreTree(Syncfusion.Windows.Forms.Diagram.GraphNode,Syncfusion.Windows.Forms.Diagram.Graph@,System.Int32)">
            <summary>
            Extracting subGraph routine. Enumerates through graphNode children changing relatives relations. Filling new graph.
            </summary>
            <param name="dtgnNode">The graph node.</param>
            <param name="graphToFill">The graph to fill.</param>
            <param name="nRank">The rank.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.PlaceRelativeToChildren(System.Collections.ICollection)">
            <summary>
            Places the parents to its children.
            </summary>
            <param name="lstRelatives">The relatives list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.PlaceRelativeToParent(System.Collections.ArrayList)">
            <summary>
            Places the children to its parents.
            </summary>
            <param name="lstParents">Array list of parents.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.DoInitXLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Does the init X layout.
            </summary>
            <param name="graphToSort">The graph to sort.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.XCoordRoutine(Syncfusion.Windows.Forms.Diagram.IGBounds,System.Single@,System.Int32,System.Boolean)">
            <summary>
            X coordinate
            </summary>
            <param name="gnBounds">The bounds.</param>
            <param name="fX">The X coordinate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.MakeLayout(System.Collections.ArrayList,System.Int32,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Makes the layout.
            </summary>
            <param name="lstRank">The LST rank.</param>
            <param name="nRank">The n rank.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.CalcRankPositionVerticalLayout(System.Int32,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Calcs the rank position vertical layout.
            </summary>
            <param name="nRank">The n rank.</param>
            <param name="graph">The graph.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.GetSubGraphDimension(System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.Dimension,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Gets the sub graph dimension.
            </summary>
            <param name="nFromRank">The n from rank.</param>
            <param name="nToRank">The n to rank.</param>
            <param name="dimension">The dimension.</param>
            <param name="graph">The graph.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.GetChainConnector(System.Collections.ArrayList)">
            <summary>
            Get endpoint container in generate list nodes chain.
            </summary>
            <param name="lstNodesChain">List nodes chain generated in GenerateFictitiousNodeChain() method</param>
            <returns>The end point container.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.CreateBrokenConnector(System.Collections.ArrayList,Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Create broken connector from source connector and nodes chain collection,
            where first and last node - nodes what must to be connected.
            </summary>
            <param name="lstNodesChain">Nodes chain collection. Can be generate in GenerateFictitiousNodeChain().</param>
            <param name="src">The source node what will broken.</param>
            <returns>Broken line connector.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.GenerateFictitiousNodeChain(Syncfusion.Windows.Forms.Diagram.GraphNode,System.Collections.ArrayList)">
            <summary>
            Get line nodes chain where between start and end nodes must be broken connector.
            </summary>
            <param name="gnStartFictitiousNode">The graph node.</param>
            <param name="lstNodesChain">Line nodes list.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.ParentPosition">
            <summary>
            Gets or sets the parent position.
            </summary>
            <value>The parent position.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.RotationAngle">
            <summary>
            Gets or sets the rotation angle for graph.
            </summary>
            <value>The rotation angle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HierarchicLayoutManager.RotateDirection">
            <summary>
            Gets or sets the rotate direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager">
            <summary>
            This layout manager is used to draw organizational layouts.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.RotateDirection,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="direction">The angular orientation of the tree.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.RotateDirection,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.LayoutType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="direction">The angular orientation of the tree.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="layoutType">Specifies the layout type of tree</param>
            <param name="nTreeLevel">Specifies the tree level upto which the default layout has to be maintained</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.RotateDirection,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.LayoutType,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="direction">The angular orientation of the tree.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="layoutType">Specifies the layout type of tree</param>
            <param name="nTreeLevel">Specifies the tree level upto which the default layout has to be maintained</param>
            <param name="bSingleChildLayout">Determines whether the layout needs to done on single child node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotation">The angular orientation of the tree.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.DoGraphLayout">
            <summary>
            Applies the directed tree layout strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.CompassHorizontalTree(Syncfusion.Windows.Forms.Diagram.IEndPointContainer@)">
            <summary>
            Sets the HeadingHead and HeadingTail for the connectors in Horizontal tree
            </summary>
            <param name="container">The container</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.CompassVerticalTree(Syncfusion.Windows.Forms.Diagram.IEndPointContainer@)">
            <summary>
            Sets the HeadingHead and HeadingTail for the connectors in vertical tree
            </summary>
            <param name="container">The container</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.ReplaceConnector(Syncfusion.Windows.Forms.Diagram.IEndPointContainer)">
            <summary>
            Replace the current connector to OrgLineconnector.
            </summary>
            <param name="container">The end point container.</param>
            <returns>Replaced orthogonal connector.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrgChartLayoutManager.RotateDirection">
            <summary>
            Gets or sets the rotate direction.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotateDirection">
            <summary>
            The four different rotation direction of the organization chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateDirection.BottomToTop">
            <summary>
            Layout from Bottom to Top.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateDirection.LeftToRight">
            <summary>
            Layout from Left to Right.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateDirection.RightToLeft">
            <summary>
            Layout from Right to Left.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotateDirection.TopToBottom">
            <summary>
            Layout from Top to Bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager">
            <summary>
            The RadialTreeLayoutManager is a specialization of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> 
            and employs a circular layout algorithm for laying out the diagram nodes. The <see cref="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager"/> 
            positions the root node at the center of the graph, and locates the child nodes in a circular fashion around the 
            root. Sub-trees formed by the branching of child nodes are located radially around the child nodes. This 
            arrangement results in an ever-expanding concentric arrangement with radial proximity to the root node indicating 
            the node level in the hierarchy.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotationDegree">The angular orientation of the tree.</param>
            <param name="fVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="fHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager.DoGraphLayout">
            <summary>
            Applies the radial directed tree layout strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager.GetSubGraphDimension(System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.Dimension)">
            <summary>
            Gets the sub graph dimension.
            </summary>
            <param name="nFromRank">The rank from.</param>
            <param name="nToRank">The rank to.</param>
            <param name="dimension">The dimension.</param>
            <returns>The dimension.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RadialTreeLayoutManager.GetTopNodeCenter(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Gets top node from th given graph.
            </summary>
            <param name="graphSorting">graph to search top node in.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SectorInfo">
            <summary>
            Helper class containing sector angle values
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager">
            <summary>
            The SubgraphTreeLayoutManager is a special type of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/> 
            that enables the sub nodes of a diagram layout tree to have an orientation that is distinct from the parent node. 
            The sub graph orientation is specified using a <see cref="E:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.SubgraphPreferredLayout"/> event 
            that the layout manager raises before positioning each set of sub nodes in the graph. 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.DirectedTreeLayoutManager"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fRotationDegree">The root to child orientation to be used for the tree.</param>
            <param name="nVerticalOffset">Specifies the vertical distance between adjacent nodes.</param>
            <param name="nHorizontalOffset">Specifies the horizontal distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.OnSubgraphPreferredLayout(Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs)">
            <summary>
            Fires the <see cref="E:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.SubgraphPreferredLayout"/> event.
            </summary>
            <param name="e">Preferred layout event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.DoGraphLayout">
            <summary>
            Applies the layout strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.MakeChangingDirectionLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Performs the graph layout.
            </summary>
            <param name="graphSorting">The graph on which the layout is being applied.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.MakeChangingDirectionGraphLayout(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Makes the changing direction graph layout.
            </summary>
            <param name="graphToLayout">The graph to layout.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.TransformTree(Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Transforms the tree.
            </summary>
            <param name="graphToLayout">The graph to layout.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.SubgraphPreferredLayout">
            <summary>
            Occurs before a sub node graph is positioned. 
            </summary>
            <remarks>
            Handling the SubgraphPreferredLayout event provides users with the ability to specify a distinct 
            orientation and bounds for the sub nodes.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventHandler">
            <summary>
            Delegate used for the <see cref="E:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.SubgraphPreferredLayout"/> event.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">Preferred layout event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs">
            <summary>
            Event argument used for the <see cref="E:Syncfusion.Windows.Forms.Diagram.SubgraphTreeLayoutManager.SubgraphPreferredLayout"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs.Node">
            <summary>
            Gets the diagram node associated with this graph node object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs.ResizeSubgraphNodes">
            <summary>
            Gets or sets a value indicating whether GraphNodes will be resized during the layout operation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs.SubgraphSize">
            <summary>
            Gets or sets the preferred sub graph size.
            If no values are specified the default size will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SubgraphPreferredLayoutEventArgs.RotationDegree">
            <summary>
            Gets or sets sub graph orientation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager">
            <summary>
            The SymmetricTreeLayoutManager is a specialization of the and employs a 
            force-directed layout algorithm for laying out the diagram nodes. 
            Where nodes positions by spring, angle and neighbour forces and moved to vector force sum.
            </summary>
            <remarks>
            This layout use special force node <see cref="T:Syncfusion.Windows.Forms.Diagram.GraphForceNode"/>
            what added to graphNode tag.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.c_dCOEF">
            <summary>
            Spring node constant;
            </summary>
            <remarks>
            Value generate by testing.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.m_fVertexDistance">
            <summary>
            Minimum distance between connected nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.m_nMaxIteraction">
            <summary>
            Max count of iteractions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager"/> class.
            </summary>
            <param name="model">The diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>.</param>
            <param name="fVerticalDistance">Specifies the distance between adjacent nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.DoGraphLayout">
            <summary>
            Applies the radial directed tree layout strategy on the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.PreLayoutNodes(System.Collections.ArrayList,System.Drawing.RectangleF)">
            <summary>
            Place nodes in circle.
            </summary>
            <param name="lstNodes">The nodes to move.</param>
            <param name="rcBounds">The nodes bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.MakeSymmetricLayout(System.Collections.ArrayList)">
            <summary>
            Applies the symmetric layout to given nodes.
            </summary>
            <param name="lstNodes">The nodes list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.AppendForces(System.Collections.ArrayList)">
            <summary>
            Offset nodes to its force vectors.
            </summary>
            <param name="lstNodes">The nodes list.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.ResetGraphPosition(System.Collections.ArrayList,Syncfusion.Windows.Forms.Diagram.Graph)">
            <summary>
            Place graph to 0,0 position by move graphNodes.
            </summary>
            <param name="lstNodes">The nodes list.</param>
            <param name="graph">The graph.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.ConvertGraphNodes(System.Collections.ICollection)">
            <summary>
            Convert the graph ordered list node one list with adding force parameter as tag..
            </summary>
            <param name="lstNodes">The rank order list nodes.</param>
            <returns>The graph ordered</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.GetForceNode(Syncfusion.Windows.Forms.Diagram.GraphNode)">
            <summary>
            Get force node from graphNode.
            </summary>
            <remarks>
            Force node contain parameter needed for this layout type.
            </remarks>
            <param name="gnNode">The graph node.</param>
            <returns>The force node</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.UpdateNeigbour(Syncfusion.Windows.Forms.Diagram.GraphForceNode,Syncfusion.Windows.Forms.Diagram.GraphForceNode)">
            <summary>
            Calc force for neigbours.
            </summary>
            <param name="vtSource">The source force node.</param>
            <param name="vtTarget">The target force node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.CalcRelatesForce(Syncfusion.Windows.Forms.Diagram.GraphForceNode,Syncfusion.Windows.Forms.Diagram.GraphForceNode,System.Double)">
            <summary>
            Calcs the relates force.
            </summary>
            <param name="vtSource">The source force node.</param>
            <param name="vtTarget">The target force node.</param>
            <param name="normalDistance">The minimum distance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.CalcNodesForce(Syncfusion.Windows.Forms.Diagram.GraphForceNode,Syncfusion.Windows.Forms.Diagram.GraphForceNode)">
            <summary>
            Calcs the spring force for nodes.
            </summary>
            <param name="vtSource">The source force node.</param>
            <param name="vtTarget">The target force node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.CalcForce(System.Double,System.Double,System.Double,Syncfusion.Windows.Forms.Diagram.GraphForceNode)">
            <summary>
            Calc force for node.
            </summary>
            <param name="distance">The distance.</param>
            <param name="minDist">The min distance.</param>
            <param name="angle">The angle between two edges.</param>
            <param name="vtTarget">The one of edge node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.SpringLength">
            <summary>
            Gets or sets the length of the spring.
            </summary>
            <value>The length of the spring.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.SpringFactor">
            <summary>
            Gets or sets the spring factor.
            </summary>
            <value>The spring factor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SymmetricLayoutManager.MaxIteraction">
            <summary>
            Gets or sets the max count of iteration.
            </summary>
            <value>The max iteration.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TableLayoutManager">
            <summary>
            The TableTreeLayoutManager is a laying out nodes to table style.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayoutManager"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.GraphLayoutManager"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.m_helperSelectedNode">
            <summary>
            The first node ion selection list what ignore layout.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TableLayoutManager"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TableLayoutManager"/> class.
            </summary>
            <param name="model">The model.</param>
            <param name="nMaxColumnCount">The max columns count.</param>
            <param name="nMaxRowsCount">The max rows count.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.UpdateLayout(System.Object)">
            <summary>
            Updates the layout of the nodes in the model.
            </summary>
            <param name="contextInfo">Provides context information to help with updating the layout.</param>
            <returns>
            True if changes were made; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.MakeTableLayout(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Makes the table layout.
            </summary>
            <param name="lstNodes">The nodes list.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.MeasurementUnits">
            <summary>
            Gets or sets unit of measure.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.VerticalSpacing">
            <summary>
            Gets or sets the vertical offset between adjacent nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.HorizontalSpacing">
            <summary>
            Gets or sets the horizontal offset between adjacent nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.MaxSize">
            <summary>
            Gets or sets the size of the cell.
            </summary>
            <value>The size of the cell.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.MaxColummnCount">
            <summary>
            Gets or sets the horizontal cell count in table.
            </summary>
            <value>The horizontal count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.MaxRowsCount">
            <summary>
            Gets or sets the vertical cell count in table.
            </summary>
            <value>The vertical count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.Orientation">
            <summary>
            Gets or sets the orientation way of lay out.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TableLayoutManager.CellSizeMode">
            <summary>
            Gets or sets the cell size mode.
            </summary>
            <value>The cell size mode.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CellSizeMode">
            <summary>
            Cell size mode for table layout <see cref="T:Syncfusion.Windows.Forms.Diagram.TableLayoutManager"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CellSizeMode.EqualToMaxNode">
            <summary>
            Equal to max node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CellSizeMode.MinimalTable">
            <summary>
            Minimal table.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CellSizeMode.Minimal">
            <summary>
            Minimal size.
            </summary>
        </member>
        <member name="T:Syncfusion.Diagram.Base.Localization.SR">
            <summary>
            SR provides localized access to string resources specific 
            from the assembly manifest Syncfusion.Diagram.Base.Localization.SR.resources
            </summary>
        </member>
        <member name="T:Syncfusion.Diagram.Base.Localization.SRCategoryAttribute">
            <summary>
            Specifies the category in which the property or event will be displayed in a visual designer.
            </summary>
            <remarks>
            This is a localized version of CategoryAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Diagram.Base.Localization.SR.resources
            </remarks>
        </member>
        <member name="T:Syncfusion.Diagram.Base.Localization.SRDescriptionAttribute">
            <summary>
            Specifies a description for a property or event.
            </summary>
            <remarks>
            This is a localized version of DescriptionAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Diagram.Base.Localization.SR.resources
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection">
            <summary>
            Helping class that allows to control the graphic handles.
            It controls numbering for such handles that are changing 
            during actions such as SelectObject, DeleteObject
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.StockFlag">
            <summary>
            Flag checking if object is system or created by user.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.StockModifFlag">
            <summary>
            Help flag for retrieving object from the stock.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.s_standartGraphicObjects">
            <summary>
            The collection of standard graphic objects that can be used currently.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.m_createdGraphicObjects">
            <summary>
            Holds the collection of created graphic objects that can be used currently
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.m_avaibleIndexes">
            <summary>
            Holds the list of avaible indexes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.AddObject(System.Object,System.Int32)">
            <summary>
            Adds the object under specified unique index
            </summary>
            <param name="value">object to be added</param>
            <param name="index">unique index for the object</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.AddObject(System.Object)">
            <summary>
            Adds the object under specified unique index
            </summary>
            <param name="value">object to be added</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.SelectObject(System.Int32)">
            <summary>
            Selects object by the unique index
            </summary>
            <param name="index">unique index for the object</param>
            <returns>selected object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.DeleteObject(System.Int32)">
            <summary>
            Deletes objects
            </summary>
            <param name="index">unique index for the object to be deleted</param>
            <returns>Deleted object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.Clear">
            <summary>
            Cleares collection of selected objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.IsStockObject(System.Object)">
            <summary>
            Checks if object is stock object.
            </summary>
            <param name="value">Object for checking.</param>
            <returns>True -if object is in stock, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.GetStockObject(Syncfusion.Windows.Forms.Diagram.STOCK)">
            <summary>
            Retrieves object from the stock.
            </summary>
            <param name="objId">ID of the object.</param>
            <returns>Object from the stock if found, Null otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.IsInStock(System.Int32)">
            <summary>
            Checks if object is in the stock or it's created by user.
            </summary>
            <param name="objId">ID of the object.</param>
            <returns>True - if object is in the stock, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.GetStockObjectMasked(System.Int32)">
            <summary>
            Retrieves object from the stock.
            </summary>
            <param name="objId">ID of the object.</param>
            <returns>Object from the stock if found, Null otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.CreatedGraphicObjects">
            <summary>
            Gets the collection of created graphic objects that can be used currently
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectCollection.AvaibleIndexes">
            <summary>
            Gets the list of avaible indexes
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EmfObjectData">
            <summary>
            Help data during EMF metafiles parsing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.UnitsInInch">
            <summary>
            Number of 0.01 millimeter per inch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_objects">
            <summary>
            Collection of created objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_handle">
            <summary>
            Unmanaged handle used by the most of the GDI WinApi functions.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_font">
            <summary>
            Font object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_brush">
            <summary>
            Font object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_pen">
            <summary>
            Pen object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_path">
            <summary>
            Current graphics path object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_image">
            <summary>
            Image resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_state">
            <summary>
            Graphic state of the graphics context.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_graphics">
            <summary>
            Graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_bOpenPath">
            <summary>
            Indicates if there is open graphics path object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_textAngle">
            <summary>
            Angle of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_contStack">
            <summary>
            Cointrex stack.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_bmp">
            <summary>
            Bitmap for getting graphics from it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfObjectData.m_defResolution">
            <summary>
            Resolution of the screen.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EmfObjectData"/> class.
            </summary>
            <param name="dpi">The dpi.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Dispose">
            <summary>
            Disposes object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.SelectObject(System.Object)">
            <summary>
            Recognizes selected object.
            </summary>
            <param name="obj">Selected object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.DeleteObject(System.Object)">
            <summary>
            Deletes object from the context.
            </summary>
            <param name="obj">Object to be deleted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Save">
            <summary>
            Saves state to context stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Restore(System.Int32)">
            <summary>
            Restores state from context stack.
            </summary>
            <param name="index">Index in the stack.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.CopyTo(Syncfusion.Windows.Forms.Diagram.EmfObjectData)">
            <summary>
            Copies data from current object to specified.
            </summary>
            <param name="data">Destination data object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfObjectData.DisposeSelectedObjects">
            <summary>
            Disposes selected objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.SelectedObjects">
            <summary>
            Gets collection of selected objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Handle">
            <summary>
            Gets unmanaged handle used by the most of the GDI WinApi functions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.GraphicsState">
            <summary>
            Gets or sets graphic state of the graphics context.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Font">
            <summary>
            Gets or sets current font object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Brush">
            <summary>
            Gets or sets current brush object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Pen">
            <summary>
            Gets or sets current pen object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Path">
            <summary>
            Gets or sets current graphics path.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Image">
            <summary>
            Gets or sets image object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Graphics">
            <summary>
            Gets graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.CurrentPoint">
            <summary>
            Gets or sets current point at DC.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.IsOpenPath">
            <summary>
            Gets or sets a value indicating whether Open graphics path object exists.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.ArcDirection">
            <summary>
            Gets or sets arc direction of current device context.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.TextAlign">
            <summary>
            Gets or sets text align.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.ForeColor">
            <summary>
            Gets or sets Text color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.BackColor">
            <summary>
            Gets or sets back color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.FillMode">
            <summary>
            Gets or sets polygon fill mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.Resolution">
            <summary>
            Gets default resolution of the screen.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.TextAngle">
            <summary>
            Gets or sets angle of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfObjectData.ContextStack">
            <summary>
            Gets context stack object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontEx">
            <summary>
            Class holding font and it's rotating angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FontEx.m_font">
            <summary>
            Font object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FontEx.m_structure">
            <summary>
            Structure describing font.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontEx.#ctor(System.Drawing.Font,Syncfusion.Windows.Forms.Diagram.LOGFONT)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FontEx"/> class.
            </summary>
            <param name="font">Font object.</param>
            <param name="structure">The LOGFONT structure.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontEx.Dispose">
            <summary>
            Disposes object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontEx.Font">
            <summary>
            Gets font object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontEx.Angle">
            <summary>
            Gets text rotating angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontEx.LogFont">
            <summary>
            Gets LOGFONT structure from which font was created.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EmfParser">
            <summary>
            Class implementing capabilities to parse EMF metafiles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.PointNumber">
            <summary>
            Number of numbers in the point type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.RectNumber">
            <summary>
            Number of numbers in the rectangle type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.IntSize">
            <summary>
            Size of Int32 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.ShortSize">
            <summary>
            Size of Short type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.FloatSize">
            <summary>
            Size of Single type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.m_enumerateHandler">
            <summary>
            Handler of function parsing metafile.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.m_renderer">
            <summary>
            Graphics context object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.m_context">
            <summary>
            Asociated with parser context object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.m_settings">
            <summary>
            Metafile settings.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileParser.m_metaFile">
            <summary>
            Parsing metafile object.
            </summary> 
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.#ctor(Syncfusion.Windows.Forms.Diagram.EmfRenderer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileParser"/> class.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.CheckResult(System.Boolean)">
            <summary>
            Check result of function. If function failed - writes debug message.
            </summary>
            <param name="result">Result of the function.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.CreateParsingHandler">
            <summary>
            Creates handler of parsing function.
            </summary>
            <returns>Handler of parsing function.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.InitializeSettings">
            <summary>
            Initialize internal metafile settings.
            (Records count, etc.).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.OnBeginParse(System.EventArgs)">
            <summary>
            Raises <see cref="E:Syncfusion.Windows.Forms.Diagram.MetafileParser.BeginParse"/> event.
            Called when the metafile is parsed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileParser.ReadNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads number from the array.
            </summary>
            <param name="data">Array of data.</param>
            <param name="index">Index in the array.</param>
            <param name="step">Size of the number.</param>
            <returns>Number form the array.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.ParsingHandler">
            <summary>
            Gets handler of parsing method.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.Renderer">
            <summary>
            Gets or sets Graphics context.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.Context">
            <summary>
            Gets or sets context of the parser.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.Settings">
            <summary>
            Gets or sets internal metafile settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.Metafile">
            <summary>
            Gets or sets the parsing metafile object.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.MetafileParser.BeginParse">
            <summary>
            Raises before the metafile parses.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileParser.Type">
            <summary>
            Gets type of metafile parser is able to parse.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetafileParser.ParseEventHandler">
            <summary>
            Delegate. Is used for raising events before metafile start parsing.
            </summary>
            <param name="sender">The object sender.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfParser.PointsPerInch">
            <summary>
            Pixels per inch amount
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfParser.DegreeCount">
            <summary>
            Number of degrees in one radian.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfParser.m_objects">
            <summary>
            Help objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfParser.m_type">
            <summary>
            Type of metafile.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.#ctor(System.Drawing.Imaging.MetafileType,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EmfParser"/> class.
            </summary>
            <param name="type">Type of metafile.</param>
            <param name="dpi">The dots per inch.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.#ctor(System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EmfParser"/> class.
            </summary>
            <param name="dpi">The dpi.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.#ctor(Syncfusion.Windows.Forms.Diagram.EmfRenderer)">
            <summary>
            Creates new object.
            </summary>
            <param name="renderer">The renderer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Dispose">
            <summary>
            Overloaded. Disposes resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.CreateParsingHandler">
            <summary>
            Overloaded. Creates handler of parsing function.
            </summary>
            <returns>Handler of parsing function.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.OnBeginParse(System.EventArgs)">
            <summary>
            Raises <see cref="E:Syncfusion.Windows.Forms.Diagram.EmfParser.BeginParse"/> event.
            Called when the metafile is parsed.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.InitializeSettings">
            <summary>
            Initialize internal metafile settings.
            (Records count, etc.).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.EnumerateMetafile(System.Drawing.Imaging.EmfPlusRecordType,System.Int32,System.Int32,System.IntPtr,System.Drawing.Imaging.PlayRecordCallback)">
            <summary>
            Enumerates metafile.
            </summary>
            <param name="recordType">Type of record.</param>
            <param name="flags">Help flags.</param>
            <param name="dataSize">Size of the data for the record.</param>
            <param name="ptrData">Pointer on the memory where data are located.</param>
            <param name="callbackData">Callback function.</param>
            <returns>True - to proceed enumeration, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Header(System.Byte[])">
            <summary>
            Starts enumeration.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.EndOfFile">
            <summary>
            Finishes enumeration.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SaveDC(System.Byte[])">
            <summary>
            Saves graphic state of the graphics context.
            </summary>
            <param name="data">Data for the record.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.RestoreDC(System.Byte[])">
            <summary>
            Restores device context to the previous state.
            </summary>
            <param name="data">Data for the record.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetMiterLimit(System.IntPtr)">
            <summary>
            Stores miter limit.
            </summary>
            <param name="ptr">Pointer to data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ModifyWorldTransform(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer on record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ExtCreatePen(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer on record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SelectObject(System.Byte[])">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DeleteObject(System.Byte[])">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.CreateBrushIndirect(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer on record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetPolyFillMode(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer on record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyPolygon(System.Byte[],System.Boolean)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Record data.</param>
            <param name="bIs32Bit">Indicates if it's 32 or 16 bit version.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetMapMode(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetWindowOrgEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetWindowExtEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetViewportOrgEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetViewportExtEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ScaleViewportExtEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ScaleWindowExtEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.BeginPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.MoveToEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LineTo(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.EndPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.AbortPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SelectClipPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Polygon16(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetIcmMode(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.AlphaBlend(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyBezier(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyBezier16(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Polygon(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Polyline(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Polyline16(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyBezierTo(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyBezierTo16(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyLineTo(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyLineTo16(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyPolyline(System.Byte[],System.Boolean)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Record data.</param>
            <param name="bIs32Bit">Indicates if it's 32 or 16 bit version.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.OffsetClipRgn(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ExcludeClipRect(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.IntersectClipRect(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PolyDraw(System.Byte[],System.Boolean)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Record data.</param>
            <param name="bIs32Bit">Indicates if it's 32 or 16 bit version.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetArcDirection(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.FlattenPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.WidenPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.FillRgn(System.Byte[],System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Datra of the record.</param>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.PaintRgn(System.Byte[],System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Datra of the record.</param>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ExtSelectClipRgn(System.Byte[],System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="data">Datra of the record.</param>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetBkMode(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetTextAlign(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetTextColor(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetBkColor(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetWorldTransform(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.CreatePen(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.AngleArc(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Ellipse(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.RectangleEx(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.RoundRect(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Chord(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.Pie(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ArcTo(System.IntPtr,System.Boolean)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
            <param name="bIsArcTo">if set to <c>true</c> is arc to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.CloseFigure(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.FillPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.StrokeAndFillPath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.StrokePath(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.StretchDIBits(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.BitBlt(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.StretchBlt(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.MaskBlt(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ExtCreateFontIndirect(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ExtTextOut(System.IntPtr,System.Boolean)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
            <param name="bIsUnicode">True - if string is unicode, False - otherwise.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.CreateDibPatternBrushPt(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetStretchBltMode(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetLayout(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetPixelV(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetMetaRgn(System.IntPtr)">
            <summary>
            Process record of metafile.
            </summary>
            <param name="ptr">Pointer to record data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.TrimFontName(System.String)">
            <summary>
            Trims the name of the font.
            </summary>
            <param name="fontName">Name of the font.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetStructure(System.IntPtr,System.Type)">
            <summary>
            Gets structure with data from Record data.
            </summary>
            <param name="ptr">The PTR.</param>
            <param name="type">The type.</param>
            <returns>Structure from the data.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetStructureEx(System.IntPtr,System.ValueType)">
            <summary>
            Gets structure with data from Record data.
            </summary>
            <param name="ptr">Record data.</param>
            <param name="structure">Sample structure object.</param>
            <returns>Structure with data from IntPtr.</returns>
            <remarks>This method marshals structures with arrays of unknown length.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDP(System.Drawing.PointF)">
            <summary>
            Converts logical point to device point.
            </summary>
            <param name="point">Logical point to be converted.</param>
            <returns>Converted point to device point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDP(System.Drawing.RectangleF)">
            <summary>
            Converts rectangle from logic units to device units.
            </summary>
            <param name="rc">System.Drawing.Rectangle object.</param>
            <returns>Converted rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDPX(System.Single)">
            <summary>
            Converts logical point to device point.
            </summary>
            <param name="x">Logical point to be converted.</param>
            <returns>Converted point to device point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDPY(System.Single)">
            <summary>
            Converts logical point to device point.
            </summary>
            <param name="y">Logical point to be converted.</param>
            <returns>Converted point to device point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDPWidth(System.Single)">
            <summary>
            Converts logic value to device value;
            </summary>
            <param name="logicValue">Value in logic coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.LPtoDPHeight(System.Single)">
            <summary>
            Converts logic value to device value;
            </summary>
            <param name="logicValue">Value in logic coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DPtoLP(System.Drawing.PointF)">
            <summary>
            Converts device point to logical point.
            </summary>
            <param name="point">Device point to be converted.</param>
            <returns>Converted point to logical point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DPtoLPWidth(System.Single)">
            <summary>
            Converts device value to logical value;
            </summary>
            <param name="deviceValue">Value in device coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DPtoLPHeight(System.Single)">
            <summary>
            Converts device value to logical value;
            </summary>
            <param name="deviceValue">Value in device coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DPtoLP(System.Drawing.RectangleF)">
            <summary>
            Converts device System.Drawing.Rectangle to logical value;
            </summary>
            <param name="rc">The rectangle.</param>
            <returns>Converted rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ReadRECT(System.Byte[],System.Int32@)">
            <summary>
            Reads RECT structure.
            </summary>
            <param name="data">Data array.</param>
            <param name="index">Current index.</param>
            <returns>RECT structure.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ReadInt32Array(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Reads array from the record.
            </summary>
            <param name="data">Record data.</param>
            <param name="dataSize">Size of the array.</param>
            <param name="index">Current index.</param>
            <returns>Array of data.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ReadPointArray(System.Byte[],System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Creates array of points.
            </summary>
            <param name="data">Record data.</param>
            <param name="dataSize">Size of the array.</param>
            <param name="index">Current index.</param>
            <param name="bIs32bit">If true - reads Int32 numbers, otherwise reads Short numbers.</param>
            <returns>Array of data.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ReadInteger(System.Byte[],System.Int32@,System.Boolean)">
            <summary>
            Reads number.
            </summary>
            <param name="data">Data array.</param>
            <param name="index">Current index.</param>
            <param name="bIs32">If true - reads Int32 numbers, otherwise reads Short numbers.</param>
            <returns>Number from the data.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.SetValidGraphicsMode">
            <summary>
            Sets proper graphics mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ConvertType(Syncfusion.Windows.Forms.Diagram.POINTS[])">
            <summary>
            Converts points from GDI poiont type to PointF.
            </summary>
            <param name="points">Array of points.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ConvertType(Syncfusion.Windows.Forms.Diagram.POINT[])">
            <summary>
            Converts points from GDI poiont type to PointF.
            </summary>
            <param name="points">Array of points.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ConvertTypeEx(Syncfusion.Windows.Forms.Diagram.POINTS[])">
            <summary>
            Converts points from GDI poiont type to PointF.
            </summary>
            <param name="points">Array of points.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.AddCurrentPointTo(System.Drawing.PointF[])">
            <summary>
            Adds current point to array of points.
            </summary>
            <param name="points">Array of points.</param>
            <returns>Array with current point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.ConvertMatrix(Syncfusion.Windows.Forms.Diagram.XFORM)">
            <summary>
            Converts XFORM structure to Matrix object.
            </summary>
            <param name="xMatrix">XFORM structure.</param>
            <returns>Matrix object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetAngle(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculates angle between two vectors.
            </summary>
            <param name="x0">x coordinate of start origin.</param>
            <param name="y0">y coordinate of start origin.</param>
            <param name="x1">x coordinate of vector.</param>
            <param name="y1">y coordinate of vector.</param>
            <returns>Angle between vector and x origin.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetStartPoint(System.Drawing.Rectangle,System.Drawing.Point)">
            <summary>
            Returns point on the ellipse bounded by rectangle intersecyet with radial point.
            </summary>
            <param name="bounds">Bounds structure.</param>
            <param name="radialPoint">Radial point.</param>
            <returns>Point of intersection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetBitmap(System.Int32,System.UInt32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Creates bitmap image.
            </summary>
            <param name="imageOffset">Offset to image data.</param>
            <param name="imgSize">Size of the image data.</param>
            <param name="ptr">Pointer to the data.</param>
            <param name="bitmapInfoPtr">Pointer to the BitmapInfo structure.</param>
            <param name="iUsageSrc">Usage of the pixels.</param>
            <returns>Bitmap image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetHBitmap(System.Int32,System.UInt32,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Creates bitmap image.
            </summary>
            <param name="imageOffset">Offset to image data.</param>
            <param name="imgSize">Size of the image data.</param>
            <param name="ptr">Pointer to the data.</param>
            <param name="bitmapInfoPtr">Pointer to the BitmapInfo structure.</param>
            <param name="iUsageSrc">Usage of the pixels.</param>
            <returns>Bitmap image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetFontSize(System.Single)">
            <summary>
            Converts logical height of the font to it's point's value.
            </summary>
            <param name="logHeight">Logical height of the font.</param>
            <returns>Size of the font.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetFontMetrix(System.Drawing.Font)">
            <summary>
            Returns metric of the font.
            </summary>
            <param name="font">Font object.</param>
            <returns>Metric of the font.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetStringFormat(System.String,Syncfusion.Windows.Forms.Diagram.OUTLINETEXTMETRIC,System.Drawing.PointF@)">
            <summary>
            Returns string format for the text.
            </summary>
            <returns>String format for the text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DrawText(System.String,System.Drawing.StringFormat,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.OUTLINETEXTMETRIC,System.Single[])">
            <summary>
            Draws text.
            </summary>
            <param name="text">Text to be printed.</param>
            <param name="format">String format object.</param>
            <param name="bounds">System.Drawing.Rectangle structure.</param>
            <param name="metric">Structure describing text settings.</param>
            <param name="widths">The widths.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetMapMode">
            <summary>
            Gets current map mode.
            </summary>
            <returns>Current map mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.GetData(System.IntPtr,System.Int32)">
            <summary>
            Retireves array of bytes from the unmanaged memory.
            </summary>
            <param name="ptrData">Pointer to the memory.</param>
            <param name="dataSize">Size of the data.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfParser.DrawImage(System.Int32,System.UInt32,System.IntPtr,System.IntPtr,System.Drawing.RectangleF,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.RASTER_CODE,System.Int32)">
            <summary>
            Implements the final stage of the 'Blt'-family functions.
            </summary>
            <param name="imageOffset">The image offset.</param>
            <param name="imgSize">Size of the image.</param>
            <param name="ptr">Pointer to record data.</param>
            <param name="bitmapInfoPtr">Bitmap record data.</param>
            <param name="destRect">The destination rectangle.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="dwRop">The rop.</param>
            <param name="iUsageSrc">The source usage.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfParser.Type">
            <summary>
            Overloaded. Gets MetafileType.Emf
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfParser.Objects">
            <summary>
            Gets help objects.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EmfParser.BeginParse">
            <summary>
            Raises before the metafile parses.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfRenderer.m_bounds">
            <summary>
            Matrix indicating bounds for the metafile output.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EmfRenderer.m_stateChanged">
            <summary>
            Shows if the graphics state was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.#ctor(System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EmfRenderer"/> class.
            </summary>
            <param name="graphics">Graphics to draw on.</param>
            <param name="szSize">Size of the work area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.BeginContainer">
            <summary>
            Begins a new virtual graphics container.
            </summary>
            <returns>A GraphicsContainer instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.BeginContainer(System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Begins a new virtual container.
            </summary>
            <param name="destRect">The destination rectangle.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="unit">The unit.</param>
            <returns>A GraphicsContainer instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Clear(System.Drawing.Color)">
            <summary>
            Fills the entire graphics with the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawArc(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws an arc.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle specifying the boundaries of the full circle,
            of which the arc is a part.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawBeziers(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws one or more Bezier curves.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawClosedCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Single,System.Drawing.Drawing2D.FillMode)">
            <summary>
            Draws a closed curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
            <param name="tension">The tension.</param>
            <param name="fillMode">The fill mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawCurve(System.Drawing.Pen,System.Drawing.PointF[],System.Drawing.PointF[],System.Int32,System.Int32,System.Single)">
            <summary>
            Draws a curve.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
            <param name="penPoints">Points to custom cap.</param>
            <param name="offset">The offset.</param>
            <param name="numSegments">The number of the segments.</param>
            <param name="tension">The tension.</param>
            <remarks>It isn't suppoted.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawEllipse(System.Drawing.Pen,System.Drawing.RectangleF)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle specifying the boundaries of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawImage(System.Drawing.Image,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="destRect">The destination rectangle.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="units">The units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawImage(System.Drawing.Image,System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.GraphicsUnit)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">The image.</param>
            <param name="points">The points.</param>
            <param name="srcRect">The source rectangle.</param>
            <param name="units">The units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawImage(System.Drawing.Image,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.RectangleF,System.UInt32)">
            <summary>
            Draws an image and/or brush.
            </summary>
            <param name="image">The image to draw.</param>
            <param name="brush">The brush to draw.</param>
            <param name="destRect">Where to draw.</param>
            <param name="srcRect">Where to draw from.</param>
            <param name="dwRop">Raster Operation Code.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws lines specified by vertices.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws a path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws polygon.
            </summary>
            <param name="pen">Pen object.</param>
            <param name="points">Array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawPie(System.Drawing.Pen,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws a pie.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rect">The rectangle specifying the boundaries of the complete circle,
            of which the pie is a part.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawRectangles(System.Drawing.Pen,System.Drawing.RectangleF[])">
            <summary>
            Draws a serie of rectangles.
            </summary>
            <param name="pen">The pen.</param>
            <param name="rects">An array of rectangles.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The boundaries of the text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat)">
            <summary>
            Draws a text string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="brush">The brush.</param>
            <param name="rect">The text boundaries.</param>
            <param name="format">The string format.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.EndContainer(System.Drawing.Drawing2D.GraphicsContainer)">
            <summary>
            Ends the specified graphics container.
            </summary>
            <param name="container">The container.</param>
            <remarks>Restores the graphics state saved 
            by the appropriate BeginContainer method.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillClosedCurve(System.Drawing.Brush,System.Drawing.PointF[],System.Drawing.Drawing2D.FillMode,System.Single)">
            <summary>
            Fills a closed curve.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points of the curve.</param>
            <param name="fillMode">The fill mode.</param>
            <param name="tension">The tension.</param>
            <remarks>It isn't supported.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillEllipse(System.Drawing.Brush,System.Drawing.RectangleF)">
            <summary>
            Fills an ellipse.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rect">The boundaries of the ellipse.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills a path.
            </summary>
            <param name="brush">The brush.</param>
            <param name="path">The path.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillPie(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills a pie.
            </summary>
            <param name="brush">The brush.</param>
            <param name="x">The x coordinate of the ellipse boundaries, which the pie is a part of.</param>
            <param name="y">The y coordinate of the ellipse boundaries, which the pie is a part of.</param>
            <param name="width">The width of the ellipse boundaries, which the pie is a part of.</param>
            <param name="height">The height of the ellipse boundaries, which the pie is a part of.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fills a polygon.
            </summary>
            <param name="brush">The brush.</param>
            <param name="points">The points of the poligon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillRectangles(System.Drawing.Brush,System.Drawing.RectangleF[])">
            <summary>
            Fills rectangles.
            </summary>
            <param name="brush">The brush.</param>
            <param name="rects">The rectangles.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.FillRegion(System.Drawing.Brush,System.Drawing.Region)">
            <summary>
            Fills a region.
            </summary>
            <param name="brush">The brush.</param>
            <param name="region">The region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Performs multiply transformations.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.TranslateClip(System.Single,System.Single)">
            <summary>
            Translates the current clip region.
            </summary>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ResetClip">
            <summary>
            Resets the current clip region to the infinite region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ResetTransform">
            <summary>
            Resets the transformantions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Performs the rotate transformations.
            </summary>
            <param name="angle">The angle.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Save">
            <summary>
            Saves the current graphics state.
            </summary>
            <returns>A GraphicsState instance that stores
            iformation about the current graphic state.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Restore(System.Drawing.Drawing2D.GraphicsState)">
            <summary>
            Restores the graphics state to the specified graphics state.
            </summary>
            <param name="gState">The saved graphics state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Performs scaling transformations.
            </summary>
            <param name="sx">The scaling facto by x coordinate.</param>
            <param name="sy">The scaling facto by y coordinate.</param>
            <param name="order">The order.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetClip(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Sets the current clip region.
            </summary>
            <param name="path">The path specifying the clip region.</param>
            <param name="mode">The combaining mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetClip(System.Drawing.RectangleF,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Sets the current clip region.
            </summary>
            <param name="rect">The rectangle cpecifying the new clip region.</param>
            <param name="mode">The combaining mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetClip(System.Drawing.Region,System.Drawing.Drawing2D.CombineMode)">
            <summary>
            Sets the current clip region.
            </summary>
            <param name="region">The region.</param>
            <param name="mode">The combining mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ExcludeClip(System.Drawing.Rectangle)">
            <summary>
            Updates the clip region of this Graphics object to exclude the area specified by a Rectangle structure.
            </summary>
            <param name="rect">Rectangle structure that specifies the rectangle to exclude from the clip region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ExcludeClip(System.Drawing.Region)">
            <summary>
            Updates the clip region of this Graphics object to exclude the area specified by a Region object.
            </summary>
            <param name="region">Region object that specifies the region to exclude from the clip region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.IntersectClip(System.Drawing.RectangleF)">
            <summary>
            Updates the clip region of this Graphics object to the intersection of the current clip region and the specified RectangleF structure.
            </summary>
            <param name="rect">RectangleF structure to intersect with the current clip region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.IntersectClip(System.Drawing.Region)">
            <summary>
            Updates the clip region of this Graphics object to the intersection of the current clip region and the specified Region object.
            </summary>
            <param name="region">Region object to intersect with the current region.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.TransformPoints(System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.Drawing2D.CoordinateSpace,System.Drawing.PointF[])">
            <summary>
            Transforms points.
            </summary>
            <param name="destSpace">Destination space.</param>
            <param name="srcSpace">Source space.</param>
            <param name="pts">Array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetRenderingOrigin(System.Drawing.Point)">
            <summary>
            Sets the current rendering origin.
            </summary>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetTransform(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Sets the specified transformation matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)">
            <summary>
            Performs translate transformation of the graphics.
            </summary>
            <param name="dx">The offset by the x coordinate.</param>
            <param name="dy">The offset by the y coordinate.</param>
            <param name="order">The order of the matrix operations.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.BeforeStart">
            <summary>
            Is called when the metafile parsing have been started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.BeforeEnd">
            <summary>
            Is called when the metafile is at the end.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.OnError(System.Exception)">
            <summary>
            Raises when error occured during metafile parsing.
            </summary>
            <param name="ex">The exception thrown on error.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetBounds(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Sets location or bounds for metafile object.
            </summary>
            <param name="location">Location of the metafile.</param>
            <param name="size">Size of the metafile.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.SetClip">
            <summary>
            Sets clip region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.OnDrawPrimitive">
            <summary>
            Called when we need to draw a primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.OnChangeState">
            <summary>
            Called when the graphics state was changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.DrawCap(System.Drawing.Drawing2D.LineCap,System.Drawing.PointF[],System.Int32,System.Int32,System.Single,System.Drawing.Brush)">
            <summary>
            Draws the cap.
            </summary>
            <param name="cap">The cap.</param>
            <param name="points">The points.</param>
            <param name="startPointIndex">The Start point index.</param>
            <param name="endPointIndex">The end point index.</param>
            <param name="width">The width.</param>
            <param name="brush">The brush.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EmfRenderer.IsLine(System.Drawing.PointF[])">
            <summary>
            Checks whether points is line or not. 
            </summary>
            <param name="points">Points to be check.</param>
            <returns>Is points line or not.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Size">
            <summary>
            Gets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Graphics">
            <summary>
            Gets the graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.ClipBounds">
            <summary>
            Gets the clip bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.Transform">
            <summary>
            Gets or sets transformation of graphics.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.PageScale">
            <summary>
            Gets or sets the scaling between world units and page units for this Graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EmfRenderer.PageUnit">
            <summary>
            Gets or sets the unit of measure used for page coordinates in this Graphics object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetafileSettings">
            <summary>
            Represent class with setting of metafile to parse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileSettings.m_records">
            <summary>
            Internal variable to store the list of the records within metafile.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetafileSettings.m_count">
            <summary>
            Internal variable to store the count of the records within metafile.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileSettings"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileSettings.Records">
            <summary>
            Gets the list of EMF and EMF+ records within metafile. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileSettings.Count">
            <summary>
            Gets or sets the count of records.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.PointNumber">
            <summary>
            Number of numbers in the point type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.RectNumber">
            <summary>
            Number of numbers in the rectangle type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.RegionFlag">
            <summary>
            Flag for recognizing type of region.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.ObjectFlag">
            <summary>
            Flag for objects recognizing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.PathFillWinding">
            <summary>
            Type of path filling.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.BrushTypeIndex">
            <summary>
            Index where type of the brush is located.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.IntSize">
            <summary>
            Size of Int32 type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.ShortSize">
            <summary>
            Size of Short type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.FloatSize">
            <summary>
            Size of Single type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.m_metaFile">
            <summary>
            Parsing metafile object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.m_parser">
            <summary>
            Parser of metafile. It depends on the metafile.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.m_renderer">
            <summary>
            Gets graphics context object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.m_bDisposed">
            <summary>
            Checks if object is already disposed or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.m_bImgWMF">
            <summary>
            Indicates whether image is WMF file and needs to be disposed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetaRecordParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetaRecordParser"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.#ctor(Syncfusion.Windows.Forms.Diagram.EmfRenderer,System.Drawing.Imaging.Metafile)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetaRecordParser"/> class.
            </summary>
            <param name="renderer">The renderer.</param>
            <param name="metaFile">Metafile for parsing.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.Enumerate">
            <summary>
            Enumerates a metafile.
            </summary>
            <returns>
            True - successful enumeration, False otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.SupportFormat(System.Drawing.Imaging.Metafile)">
            <summary>
            Check if the parser support current metafile format.
            </summary>
            <param name="metaFile">The metafile image.</param>
            <returns>The <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.AssignMetaFile(System.Drawing.Imaging.Metafile)">
            <summary>
            Assigns the metafile.
            </summary>
            <param name="metaFile">The metafile.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.SupportFormat(System.Drawing.Imaging.MetafileType)">
            <summary>
            Check if parser support the current metafile format.
            </summary>
            <param name="metaType">Type of the metafile image.</param>
            <returns><b>True</b> if parser support metafile type.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.RecognizeParser(System.Drawing.Imaging.MetafileHeader,System.Drawing.SizeF)">
            <summary>
            Recognizes which parser must be created according to metafile.
            </summary>
            <param name="header">Header of metafile.</param>
            <param name="dpi">The dpi.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.ConvertToEmf(System.Drawing.Imaging.Metafile)">
            <summary>
            Converts WMF metafile to EMF metafile.
            </summary>
            <param name="wmfImage">WMF metafile.</param>
            <returns>EMF metafile converted from WMF metafile.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.MetafileBeginParse(System.Object,System.EventArgs)">
            <summary>
             Raises when metafile is going to be parsed.
            </summary>
            <param name="sender">Sender of the event.</param>
            <param name="e">The args.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.Renderer">
            <summary>
            Gets or sets the renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.MetaFile">
            <summary>
            Gets or sets parsing metafile object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetaRecordParser.Parser">
            <summary>
            Gets parser object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GdiApi">
            <summary>
            WinAPi functions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.GdiApi"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.AddFontResource(System.String)">
            <summary>
            Adds the font resource from the specified file to the system font table.
            The font can subsequently be used for text output by any application.
            </summary>
            <param name="lpszFilename">String that contains a valid font file name.</param>
            <returns>If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.RemoveFontResource(System.String)">
            <summary>
            Removes the fonts in the specified file from the system font table.
            </summary>
            <param name="lpFileName">String that names a font resource file.</param>
            <returns>If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Selects an object into the specified device context (DC).
            The new object replaces the previous object of the same type.
            </summary>
            <param name="hdc">Handle to the DC. </param>
            <param name="hgdiobj">Handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds,
            the return value is a handle to the object being replaced.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.DeleteObject(System.IntPtr)">
            <summary>
            Deletes a logical pen, brush, font, bitmap, region, or palette,
            freeing all system resources associated with the object.
            After the object is deleted, the specified handle is no longer valid.
            </summary>
            <param name="hdc">Handle to a logical pen, brush, font,
            bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetFontData(System.IntPtr,System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
            <summary>
            Retrieves font metric data for a TrueType font.
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <param name="dwTable">Specifies the name of a font metric table 
            from which the font data is to be retrieved</param>
            <param name="dwOffset">Specifies the offset from the beginning of the font metric table
            to the location where the function should begin retrieving information.</param>   
            <param name="lpvBuffer">Pointer to a buffer that receives the font information.</param>
            <param name="cbData">Specifies the length in bytes of the information to be retrieved</param>
            <returns>If the function succeeds, the return value is the number of bytes returned.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetCharWidth(System.IntPtr,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Retrieves the widths, in logical coordinates,
            of consecutive characters in a specified range from the current font.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iFirstChar">Specifies the first character in
            the group of consecutive characters. </param>
            <param name="iLastChar">Specifies the last character in
            the group of consecutive characters,
            which must not precede the specified first character. </param>
            <param name="lpBuffer">Pointer to a buffer that receives
            the character widths, in logical coordinates.</param>   
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetTextExtentPoint(System.IntPtr,System.String,System.Int32,System.Drawing.Size@)">
            <summary>
            Computes the width and height of the specified string of text.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="lpString">Pointer to a buffer that specifies the text string.</param>
            <param name="cbString">Specifies the length of the lpString buffer.</param>
            <param name="lpSize">Pointer to a size structure that receives the dimensions of the string
            in logical units.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetCharABCWidths(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.ABC@)">
            <summary>
            Computes the width and height of the specified string of text.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="uFirstChar">Specifies the first character in the group of
            consecutive characters from the current font.</param>  
            <param name="uLastChar">Specifies the last character in the group of
            consecutive characters from the current font. </param>
            <param name="lpabc">Pointer to an array of ABC structures that receives
            the character widths, in logical units.</param>
            <returns>The function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetTextColor(System.IntPtr,System.Int32)">
            <summary>
            The SetTextColor function sets the text color for the specified
            device context to the specified color.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="crColor">Specifies the color of the text.</param>
            <returns>If the function succeeds, the return value is
            a color reference for the previous text color as a COLORREF value.</returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetTextAlign(System.IntPtr,System.Int32)">
            <summary>
            The SetTextAlign function sets the text-alignment flags for
            the specified device context.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="fMode">Specifies the text alignment by using a mask of values.</param>
            <returns>If the function succeeds, the return value is the previous
            text-alignment setting.</returns>       
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetBkColor(System.IntPtr,System.Int32)">
            <summary>
            The SetBkColor function sets the current background color to
            the specified color value or to the nearest physical color
            if the device cannot represent the specified color value.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="crColor">Specifies the new background color.</param>
            <returns>If the function succeeds, the return value specifies
            the previous background color as a COLORREF value. </returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SaveDC(System.IntPtr)">
            <summary>
            The SaveDC function saves the current state of the specified
            device context (DC)
            </summary>
            <param name="hdc">Handle to the DC whose state is to be saved.</param>
            <returns>If the function succeeds, the return value identifies
            the saved state. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetTextColor(System.IntPtr)">
            <summary>
            The GetTextColor function retrieves the current text color
            for the specified device context.
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <returns>If the function succeeds, the return value is
            the current text color as a COLORREF value.</returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetBkColor(System.IntPtr)">
            <summary>   
            The GetBkColor function returns the current background color
            for the specified device context.
            </summary>
            <param name="hdc">Handle to the device context whose
            background color is to be returned. </param>
            <returns>If the function succeeds, the return value is
            a COLORREF value for the current background color.</returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetTextAlign(System.IntPtr)">
            <summary>
            The GetTextAlign function retrieves the text-alignment
            setting for the specified device context.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>The function succeeds, the return value is the status of
            the text-alignment flags.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.RestoreDC(System.IntPtr,System.Int32)">
            <summary>
            The RestoreDC function restores a device context (DC) to the specified state
            </summary>
            <param name="hdc">Handle to the DC.</param>
            <param name="nSavedDC">Specifies the saved state to be restored.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.LPtoDP(System.IntPtr,Syncfusion.Windows.Forms.Diagram.POINT[],System.Int32)">
            <summary>
            The LPtoDP function converts logical coordinates into device coordinates.
            </summary>
            <param name="hdc">Handle to device context.</param>
            <param name="lpPoints">Pointer to an array of POINT structures.</param>
            <param name="nCount">Specifies the number of points in the array.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.DPtoLP(System.IntPtr,Syncfusion.Windows.Forms.Diagram.POINT[],System.Int32)">
            <summary>
            The LPtoDP function converts logical coordinates into logical coordinates.
            </summary>
            <param name="hdc">Handle to device context.</param>
            <param name="lpPoints">Pointer to an array of POINT structures.</param>
            <param name="nCount">Specifies the number of points in the array.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateIC(System.String,System.String,System.String,System.IntPtr)">
            <summary>
            The CreateIC function creates an information context for the specified device.
            </summary>
            <param name="lpszDriver">Driver name.</param>
            <param name="lpszDevice">Device name.</param>
            <param name="lpszOutput">Port or file name.</param>
            <param name="lpdvmInit">Optional initialization data.</param>
            <returns>If the function succeeds, the return value is
            the handle to an information context.</returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetWindowExtEx(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.SIZE@)">
            <summary>
            The SetWindowExtEx function sets the horizontal and vertical extents of
            the window for a device context by using the specified values.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="nXExtent">Specifies the window's horizontal extent in
            logical units.</param>
            <param name="nYExtent">Specifies the window's vertical extent in
            logical units.</param>
            <param name="lpSize">Pointer to a size structure that receives
            the previous window extents, in logical units.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetWindowOrgEx(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.POINT@)">
            <summary>
            The SetWindowOrgEx function specifies which window point maps
            to the viewport origin (0,0).
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <param name="X">Specifies the X coordinate in logical units
            of the new window origin.</param>   
            <param name="Y">Specifies the Y coordinate in logical units
            of the new window origin.</param>   
            <param name="lpPoint">Pointer to a point structure that receives
            the previous origin of the window, in logical units.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetViewportExtEx(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.SIZE@)">
            <summary>
            The SetViewportExtEx function sets the horizontal and vertical extents
            of the viewport for a device context by using the specified values.
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <param name="nXExtent">Specifies the horizontal extent
            in device units of the viewport.</param>
            <param name="nYExtent">Specifies the vertical extent
            in device units of the viewport.</param>   
            <param name="lpSize">Pointer to a size structure that
            receives the previous viewport extents in device units.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetViewportOrgEx(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.POINT@)">
            <summary>
            The SetViewportOrgEx function specifies which device point maps
            to the window origin (0,0).
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="X">Specifies the x-coordinate, in device units, 
            of the new viewport origin.</param>
            <param name="Y">Specifies the Y coordinate in device units
            of the new viewport origin.</param>   
            <param name="lpPoint">Pointer to a point structure that receives
            the previous viewport origin in device coordinates.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.ScaleWindowExtEx(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.SIZE@)">
            <summary>
            The ScaleWindowExtEx function modifies the window for a device context using
            the ratios formed by the specified multiplicands and divisors.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="Xnum">Specifies the amount by which to multiply
            the current horizontal extent.</param>
            <param name="Xdenom">Specifies the amount by which to divide
            the current horizontal extent.</param>
            <param name="Ynum">Specifies the amount by which to multiply
            the current vertical extent</param>
            <param name="Ydenom">Specifies the amount by which to divide
            the current vertical extent</param>
            <param name="lpSize">Pointer to a size structure that receives
            the previous window extents in logical units.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.ScaleViewportExtEx(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.SIZE@)">
            <summary>
            The ScaleViewportExtEx function modifies the viewport for a device context
            using the ratios formed by the specified multiplicands and divisors.
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <param name="Xnum">Specifies the amount by which to multiply
            the current horizontal extent.</param>
            <param name="Xdenom">Specifies the amount by which to divide
            the current horizontal extent.</param>
            <param name="Ynum">Specifies the amount by which to multiply
            the current vertical extent.</param>
            <param name="Ydenom">Specifies the amount by which to divide
            the current vertical extent.</param>
            <param name="lpSize">Pointer to a size structure that receives
            the previous viewport extents in device units.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetMapMode(System.IntPtr,System.Int32)">
            <summary>
            The SetMapMode function sets the mapping mode of the specified device context.
            </summary>
            <param name="hdc">Handle to device context.</param>
            <param name="fnMapMode">New mapping mode.</param>
            <returns>If the function succeeds, the return value identifies
            the previous mapping mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetGraphicsMode(System.IntPtr)">
            <summary>
            The GetGraphicsMode function retrieves the current graphics mode
            for the specified device context.
            </summary>
            <param name="hdc">Handle to device context.</param>
            <returns>If the function succeeds, the return value is the current graphics mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetDeviceCaps(System.IntPtr,System.Int32)">
            <summary>
            The GetDeviceCaps function retrieves device-specific information
            for the specified device.
            </summary>
            <param name="hdc">Handle to the DC.</param>
            <param name="nIndex">Specifies the item to return. </param>
            <returns>The return value specifies the value of the desired item. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetDC(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a display device context (DC)
            for the client area of a specified window or for the entire screen.
            </summary>
            <param name="hWnd">Handle to the window whose DC is to be retrieved</param>
            <returns>If the function succeeds, the return value is a handle to the DC
            for the specified window's client area.</returns>   
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateDC(System.String,System.String,System.String,System.IntPtr)">
            <summary>
            The CreateDC function creates a device context (DC) for a device using the specified name.
            </summary>
            <param name="lpszDriver">Driver name.</param>
            <param name="lpszDevice">Device name.</param>
            <param name="lpszOutput">Not used; should be NULL.</param>
            <param name="lpInitData">Optional printer data.</param>
            <returns>If the function succeeds, the return value is the handle to a DC for the specified device.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.DeleteDC(System.IntPtr)">
            <summary>
            The DeleteDC function deletes the specified device context (DC). 
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.ModifyWorldTransform(System.IntPtr,Syncfusion.Windows.Forms.Diagram.XFORM@,System.Int32)">
            <summary>
            The ModifyWorldTransform function changes the world transformation for a device context using the specified mode.
            </summary>
            <param name="hdc">handle to device context.</param>
            <param name="lpXform">transformation data.</param>
            <param name="iMode">The modification mode.</param>
            <returns>modification mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetWorldTransform(System.IntPtr,Syncfusion.Windows.Forms.Diagram.XFORM@)">
            <summary>
            The SetWorldTransform function sets the world transformation for a device context using the specified mode.
            </summary>
            <param name="hdc">handle to device context.</param>
            <param name="lpXform">transformation data.</param>
            <returns>modification mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetMapMode(System.IntPtr)">
            <summary>
            The GetMapMode function retrieves the current mapping mode.
            </summary>
            <param name="hdc">handle to device context.</param>
            <returns>If the function succeeds, the return value specifies the mapping mode.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetMiterLimit(System.IntPtr,System.Single,System.Single@)">
            <summary>
            The SetMiterLimit function sets the limit for the length of miter joins for the specified device context.
            </summary>
            <param name="hdc">handle to DC</param>
            <param name="eNewLimit">new miter limit</param>
            <param name="peOldLimit">previous miter limit</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetMiterLimit(System.IntPtr,System.Single@)">
            <summary>
            The GetMiterLimit function retrieves the miter limit for the specified device context.
            </summary>
            <param name="hdc">handle to DC</param>
            <param name="peLimit">miter limit</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetPolyFillMode(System.IntPtr,System.Int32)">
            <summary>
            The SetPolyFillMode function sets the polygon fill mode for functions that fill polygons.
            </summary>
            <param name="hdc">handle to DC</param>
            <param name="iPolyFillMode">polygon fill mode</param>
            <returns>The return value specifies the previous filling mode. If an error occurs, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetPolyFillMode(System.IntPtr)">
            <summary>
            The GetPolyFillMode function retrieves the current polygon fill mode.
            </summary>
            <param name="hdc">handle to DC</param>
            <returns>The return value specifies the filling mode. If an error occurs, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetGraphicsMode(System.IntPtr,System.Int32)">
            <summary>
            The SetGraphicsMode function sets the graphics mode for the specified device context.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="iMode">Specifies the graphics mode.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.BeginPath(System.IntPtr)">
            <summary>
            The BeginPath function opens a path bracket in the specified device context.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.MoveToEx(System.IntPtr,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.POINT@)">
            <summary>
            The MoveToEx function updates the current position to the specified point and optionally returns the previous position.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="X">Specifies the x-coordinate, in logical units, of the new position, in logical units.</param>
            <param name="Y">Specifies the y-coordinate, in logical units, of the new position, in logical units.</param>
            <param name="lpPoint">Pointer to a POINT structure that receives the previous current position.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.LineTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The LineTo function draws a line from the current position up to, but not including, the specified point.
            </summary>
            <param name="hdc"> Handle to a device context. </param>
            <param name="nXEnd">Specifies the x-coordinate, in logical units, of the line's ending point.</param>
            <param name="nYEnd">Specifies the y-coordinate, in logical units, of the line's ending point.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.EndPath(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.AbortPath(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SelectClipPath(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetICMMode(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetMetaFileBitsEx(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetEnhMetaFileBits(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetMetaFileBitsEx(System.UInt32,System.Byte[])">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetWinMetaFileBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CopyMetaFile(System.IntPtr,System.String)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetWinMetaFileBits(System.Int32,System.Byte[],System.IntPtr,Syncfusion.Windows.Forms.Diagram.METAFILEPICT@)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.DeleteEnhMetaFile(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetClientRect(System.IntPtr,Syncfusion.Windows.Forms.Diagram.RECT@)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetArcDirection(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetArcDirection(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetBkMode(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.AngleArc(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.Chord(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.ArcTo(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.Arc(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CloseFigure(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.FillPath(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.StrokeAndFillPath(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.StrokePath(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.StretchDIBits(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],Syncfusion.Windows.Forms.Diagram.BITMAPINFO@,System.Int32,System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetDCBrushColor(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetDCPenColor(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetOutlineTextMetricsEx(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Retrieves text metrics for TrueType fonts.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="cbData">Specifies the size in bytes of the array
            that receives the text metrics.</param>
            <param name="lpOTM">Pointer to an array of OUTLINETEXTMETRIC structures.</param>
            <returns>If the function succeeds, the return value is nonzero
            or the size of the required buffer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetOutlineTextMetrics(System.IntPtr,System.Int32,Syncfusion.Windows.Forms.Diagram.OUTLINETEXTMETRIC@)">
            <summary>
            Retrieves text metrics for TrueType fonts.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="cbData">Specifies the size in bytes of the array
            that receives the text metrics.</param>
            <param name="lpOTM">Pointer to an array of OUTLINETEXTMETRIC structures.</param>
            <returns>If the function succeeds, the return value is nonzero
            or the size of the required buffer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.GetTextExtentPoint32(System.IntPtr,System.String,System.Int32,Syncfusion.Windows.Forms.Diagram.SIZE@)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.PolyBezierTo(System.IntPtr,Syncfusion.Windows.Forms.Diagram.POINT[],System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.PolylineTo(System.IntPtr,Syncfusion.Windows.Forms.Diagram.POINT[],System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateFontIndirect(Syncfusion.Windows.Forms.Diagram.LOGFONT@)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetStretchBltMode(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateBitmapIndirect(Syncfusion.Windows.Forms.Diagram.BITMAP@)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateDIBitmap(System.IntPtr,Syncfusion.Windows.Forms.Diagram.BITMAPINFOHEADER@,System.UInt32,System.Byte[],Syncfusion.Windows.Forms.Diagram.BITMAPINFO@,System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.CreateDIBitmap(System.IntPtr,System.IntPtr,System.UInt32,System.Byte[],System.IntPtr,System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.ExtTextOut(System.IntPtr,System.Int32,System.Int32,System.Int32,Syncfusion.Windows.Forms.Diagram.RECT@,System.String,System.Int32,System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.MaskBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetLayout(System.IntPtr,System.Int32)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GdiApi.SetMetaRgn(System.IntPtr)">
            <summary>
            Exported function from Windows GDI. For more details see Windows GDI reference.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.KernelApi">
            <summary>
            WinAPi functions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.KernelApi.#ctor">
            <summary>
            To prevent construction of a class, we make a private constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.KernelApi.GetLastError">
            <summary>
            The GetLastError function retrieves the calling thread's last-error code value.
            </summary>
            <returns>The return value is the calling thread's last-error code value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.KernelApi.GetStringTypeExW(System.UInt32,Syncfusion.Windows.Forms.Diagram.StringInfoType,System.String,System.Int32,System.UInt16[])">
            <summary>
            Retrieves character-type information for the characters in the specified source string.
            </summary>
            <param name="Locale">Value that specifies the locale identifier.</param>
            <param name="dwInfoType">Value that specifies the type of character information the user wants to retrieve.</param>
            <param name="lpSrcStr">Pointer to the string for which character types are requested.</param>
            <param name="cchSrc">Size, in characters, of the string pointed to by the lpSrcStr parameter.</param>
            <param name="lpCharType">Pointer to an array of 16-bit values.</param>
            <returns>Boolean result, indicates success of WinAPI call</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.StringInfoType">
            <summary>
            Specifies the type of character information the user wants to retrieve.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.StringInfoType.CT_TYPE1">
            <summary>
            Retrieves character type info
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.StringInfoType.CT_TYPE2">
            <summary>
            Retrieves bi-directional layout info
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.StringInfoType.CT_TYPE3">
            <summary>
            Retrieves text processing info
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags">
            <summary>
            Native enum.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.AllocateBuffer">
            <summary>
            Allocate buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.IgnoreInserts">
            <summary>
            Ignore inserts.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.FromString">
            <summary>
            From string.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.FromHmodule">
            <summary>
            From Hmodule.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.FromSystem">
            <summary>
            From system.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FormatMessageFlags.ArgumentArray">
            <summary>
            Arugement array.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETMITERLIMIT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EMR_SETMITERLIMIT.eMiterLimit">
            <summary>
            New miter limit.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_MODIFYWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.XFORM">
            <summary>
            The XFORM structure specifies a world-space to page-space transformation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eM11">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eM12">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eM21">
            <summary>
            Specified shear/rotation
            </summary>   
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eM22">
            <summary>
            Specifies scaling/rotation/reflection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eDx">
            <summary>
            Specifies the horizontal translation component, in logical units.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.XFORM.eDy">
            <summary>
            Specifies the vertical translation component, in logical units.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_EXTCREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.POINT.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.POINT"/> struct.
            </summary>
            <param name="lParam">lParam's data for initialing point structure.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LOGBRUSH32">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_CREATEBRUSHINDIRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SELECTCLIPPATH">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ABC">
            <summary>
            ABC structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ColorDataEx">
            <summary>
            Structure for 32 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorDataEx.Blue">
            <summary>
            Value of Blue channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorDataEx.Green">
            <summary>
            Value of Green channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorDataEx.Red">
            <summary>
            Value of Red channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorDataEx.Alpha">
            <summary>
            Value of Alpha channel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ColorData">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData.Blue">
            <summary>
            Value of Blue channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData.Green">
            <summary>
            Value of Green channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData.Red">
            <summary>
            Value of Red channel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ColorData16">
            <summary>
            Structure for 24 bit images saving.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData16.Blue">
            <summary>
            Value of Blue channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData16.Green">
            <summary>
            Value of Green channel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ColorData16.Red">
            <summary>
            Value of Red channel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_POLYPOLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_POLYPOLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETVIEWPORTORGEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SCALEVIEWPORTEXTEX">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_LINETO">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_POLYLINE16">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_POLYLINE">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_ALPHABLEND">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_OFFSETCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_EXCLUDECLIPRECT">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETARCDIRECTION">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_FILLRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RGNDATA">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RGNDATAHEADER">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_INVERTRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_EXTSELECTCLIPRGN">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETTEXTCOLOR">
            <summary>
            Windows structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETWORLDTRANSFORM">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_CREATEPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LOGPEN">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_ANGLEARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_RECTANGLE">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_ROUNDRECT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_ARC">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_FILLPATH">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BITMAPINFOHEADER">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BITMAPINFO">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BITMAP">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_STRETCHDIBITS">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_BITBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_STRETCHBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_MASKBLT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LOGFONT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_EXTCREATEFONTINDIRECTW">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_EXTTEXTOUTA">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_TEXT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_CREATEDIBPATTERNBRUSHPT">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EMR_SETPIXELV">
            <summary>
            Record of Emf metafile.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OUTLINETEXTMETRIC">
            <summary>
            Structure for information about font.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.WinGdiConst">
            <summary>
            Class with simple constants.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ETO">
            <summary>
            ExtTextOut options constants.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.OPAQUE">
            <summary>
            The current background color should be used to fill the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.CLIPPED">
            <summary>
            The text will be clipped to the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.GLYPH_INDEX">
            <summary>
            Windows 95 and Windows NT 4.0 and later:
            The lpString array refers to an array returned from 
            GetCharacterPlacement and should be parsed directly by GDI
            as no further language-specific processing is required.
            Glyph indexing only applies to TrueType fonts, but the flag
            can be used for bitmap and vector fonts to indicate that no further
            language processing is necessary and GDI should process the string
            directly.
            
            Note that all glyph indexes are 16-bit values even though the string is
            assumed to be an array of 8-bit values for raster fonts. 
            
            For ExtTextOutW, the glyph indexes are saved to a metafile.
            However, to display the correct characters the metafile must be
            played back using the same font. For ExtTextOutA, the glyph indexes are not saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.NUMERICSLATIN">
            <summary>
            Windows 95 and Windows NT 4.0 and later: To display numbers, use European digits.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.NUMERICSLOCAL">
            <summary>
            Windows 95 and Windows NT 4.0 and later: To display numbers, use digits appropriate to the locale.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.RTLREADING">
            <summary>
            Windows 95 and Windows NT 4.0 and later for Middle East
            language edition of Windows: If this value is specified
            and a Hebrew or Arabic font is selected into the device
            context, the string is output using right-to-left reading
            order. If this value is not specified, the string is output
            in left-to-right order. The same effect can be achieved
            by setting the TA_RTLREADING value in SetTextAlign. This
            value is preserved for backward compatibility. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.IGNORELANGUAGE">
            <summary>
            Windows NT 4.0 and later: Reserved for system use.
            If an application sets this flag, it loses international scripting
            support and in some cases it may display no text at all. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ETO.PDY">
            <summary>
            Windows 2000/XP: When this is set, the array pointed to by lpDx
            contains pairs of values. The first value of each pair is,
            as usual, the distance between origins of adjacent character cells,
            but the second value is the displacement along the vertical direction of the font.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MWT_DATA">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PS_PEN_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PS_PEN_CAP_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PS_PEN_JOIN_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PS_PEN_TYPE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BS_BRUSH_STYLE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GM_GraphicsMode">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MAPPING_MODE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PT_POINT_TYPE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AD_ANGLEDIRECTION">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TA_TEXT_ALIGN">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RASTER_CODE">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FW_FONT_WEIGHT">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.STOCK">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.COMBINE_RGN">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DIB_COMPRESSION">
            <summary>
            Constants from WinGdi.h file.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ObjectType">
            <summary>
            Type of the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Invalid">
            <summary>
            Invalid object type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Brush">
            <summary>
            Brush object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Pen">
            <summary>
            Pen object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Path">
            <summary>
            Path object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Region">
            <summary>
            Region object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Image">
            <summary>
            Image object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.Font">
            <summary>
            Font object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.StringFormat">
            <summary>
            String format object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.ImageAttributes">
            <summary>
            Image attributes object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectType.CustomLineCap">
            <summary>
            Custom line cap object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BrushType">
            <summary>
            Type of the brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BrushType.SolidBrush">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BrushType.HatchBrush">
            <summary>
            Hatch brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BrushType.TextureBrush">
            <summary>
            Texture brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BrushType.PathGradientBrush">
            <summary>
            Path gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BrushType.LienarGradientBrush">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags">
            <summary>
            Flags for a linear gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.Default">
            <summary>
            Minimal data are present.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.Matrix">
            <summary>
            The brush applies a transformation matrix to the source image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.ColorBlend">
            <summary>
            The brush contains a ColorBlend object for use with its InterpolationColors property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.Blend">
            <summary>
            The brush contains a Blend object for use with its Blend property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.FocusScales">
            <summary>
            The brush has a non-default value for the FocusScales property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GradientBrushFlags.GammaCorrection">
            <summary>
            The brush uses gamma correction.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PenFlags">
            <summary>
            Represents pen flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.Default">
            <summary>
            Pen just with color set.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.Transform">
            <summary>
            Transformation set. (20-... - float )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.StartCap">
            <summary>
            StartCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.EndCap">
            <summary>
            EndCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.LineJoin">
            <summary>
            LineJoin set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.MiterLimit">
            <summary>
            MiterLimit set. ( 20 - float )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.DashStyle">
            <summary>
            Pen has DashStyle defined.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.DashCap">
            <summary>
            DashCap set. ( 20 - int )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.DashOffset">
            <summary>
            DashOffset is defined. (20 - float)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.DashPattern">
            <summary>
            DashPattern is defined. (20 - int: numArray; 24-... - float: DashPattern )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.Alignment">
            <summary>
            Alignment set. (20 - int )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.CompoundArray">
            <summary>
            CompoundArray set. (20 - int: numArray; 24-... - float: compoundArray )
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.CustomStartCap">
            <summary>
            The pen uses a custom start cap.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PenFlags.CustomEndCap">
            <summary>
            The pen uses a custom end cap.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ObjectImageFormat">
            <summary>
            Indicates types of the images in the Object record.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectImageFormat.Unknown">
            <summary>
            Unknown format.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectImageFormat.Bitmap">
            <summary>
            Bitmap image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectImageFormat.Metafile">
            <summary>
            Metafile image.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ObjectRegionInitState">
            <summary>
            Initial state of the region.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectRegionInitState.Rectangle">
            <summary>
            Region is from rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectRegionInitState.GraphpicsPath">
            <summary>
            Region is from graphics path.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectRegionInitState.Empty">
            <summary>
            Region is empty.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ObjectRegionInitState.Infinity">
            <summary>
            Region is infinity.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Controller">
            <summary>
            Processes input events and translates them into actions on the diagram.
            </summary>
            <remarks>
            <para>
            The controller is an object that is responsible for handling input in the
            model-view-controller architecture. The controller receives input events
            and translates them into commands that affect the model and view.
            </para>
            <para>
            This class is an abstract base class from which concrete controller
            classes are derived. This class does not does not register any tools.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_constraints">
            <summary>
            class member of the constraints
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_document">
            <summary>
            Document attached to controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_viewer">
            <summary>
            View attached to this controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_view">
            <summary>
            View attached to this controller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_bUndoOrRedo">
            <summary>
            Indicates whether Undo/Redo operation is pending.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_nodesHelper">
            <summary>
            Helper collection used while Undo/Redo operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_nUpdateRequests">
            <summary>
            Stores number of requests to update viewer.
            </summary>
            <remarks>
            As we can have subrequests, viewer will be updated only
            when requests count is 0.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_szOriginOffset">
            <summary>
            Origin offset by update model to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Controller.m_bSizeToContentUpdating">
            <summary>
            Indicate that UpdateSizeToContent() method in process.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Group">
            <summary>
            Groups the currently selected nodes in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UnGroup">
            <summary>
            Ungroups currently selected group in a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Delete">
            <summary>
            Deletes the selected nodes from the diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringIntoView(System.Drawing.RectangleF)">
            <summary>
            BringIntoView selected bounds
            </summary>
            <param name="boundingRect">boundingRect of selected bounds area</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringToCenter(System.Drawing.RectangleF)">
            <summary>
            BringToCenter selected bounds
            </summary>
            <param name="boundingRect">boundingRect of selected bounds area</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringToFront">
            <summary>
            Brings the selected nodes to the front of the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SendToBack">
            <summary>
            Sends the selected nodes to the back of the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.BringForward">
            <summary>
            Brings the selected nodes forward in the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SendBackward">
            <summary>
            Sends the selected nodes backward in the Z-order.
            </summary>
            <returns>True if successful; otherwise False.</returns>
            <remarks>
            This method creates and executes a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/> command.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderCmd"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SelectAll">
            <summary>
            Adds all nodes in the model to the SelectionList.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.Point)">
            <summary>
            Converts to model coordinates.
            </summary>
            <param name="ptClientLocation">The pt client location.</param>
            <returns>Point in model coordinate.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.PointF)">
            <summary>
            Converts to model coordinates.
            </summary>
            <param name="ptClientLocation">The pt client location.</param>
            <returns>Points in model coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.Size)">
            <summary>
            Convert size to model coordinate.
            </summary>
            <param name="size">The size.</param>
            <returns>Size to model coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.SizeF)">
            <summary>
            Convert size to model coordinate.
            </summary>
            <param name="size">The size.</param>
            <returns>Size in model coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.Rectangle)">
            <summary>
            Converts to model coordinates.
            </summary>
            <param name="rectClientLocation">The rect client location.</param>
            <returns>Rect in model coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertToModelCoordinates(System.Drawing.RectangleF)">
            <summary>
            Converts to model coordinates.
            </summary>
            <param name="rectClientLocation">The rect client location.</param>
            <returns>Rect in model coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.Point)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="ptModelLocation">The pt model location.</param>
            <returns>Point from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.PointF)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="ptModelLocation">The pt model location.</param>
            <returns>Point from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.Size)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="size">The size.</param>
            <returns>Size from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.SizeF)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="size">The size.</param>
            <returns>Size from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.Rectangle)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="rectModel">The rect model.</param>
            <returns>Rect from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ConvertFromModelToClientCoordinates(System.Drawing.RectangleF)">
            <summary>
            Converts from model to client coordinates.
            </summary>
            <param name="rectModel">The rect model.</param>
            <returns>Rect from model to client coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SaveConnections(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Boolean)">
            <summary>
            Saves the connections.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="bSkipTopNodes">if set to <c>true</c> given nodes 
            except it chidlren wouldn't saved to result list.</param>
            <returns>Save connections.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.RestoreConnections(System.Collections.ArrayList)">
            <summary>
            Restores the connections.
            </summary>
            <param name="portConnections">The port connections.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Provides the service reference.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.CanAPIUpdate">
            <summary>
            Has flag of the Constraints as APIUpdate
            </summary>
            <returns>return true/false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.CanUserInteraction">
            <summary>
            Has flag of the Constraints as UserInteraction
            </summary>
            <returns>return true/false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HasFlag(Syncfusion.Windows.Forms.Diagram.Constraints,Syncfusion.Windows.Forms.Diagram.Constraints)">
            <summary>
            Check to see if a flags enumeration has a specific flag set.
            </summary>
            <param name="variable">Flags enumeration to check</param>
            <param name="value">Flag to check for</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.GetBoundingRect(System.Collections.ICollection,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the bounding rectangle from node collections.
            </summary>
            <param name="nodes">The nodes.</param>
            <param name="units">The units.</param>
            <returns>Nodes bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.DeselectNodes(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Remove unvisible nodes and layers from selection list.
            </summary>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.RemoveChildren(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Removes the children from it parent.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.RestoreAllowDeleteValue(Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Quites set AllowDelete value without record in history and calling sink events.
            </summary>
            <param name="node">Node to restore AllowDelete property value of.</param>
            <param name="bPrevValue">AlloeDelete property value to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.SuppressAllowDeleteFlag(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Quites set AllowDelete value without record in history and calling sink events.
            </summary>
            <param name="node">Node to suppress flag of.</param>
            <returns>true, if suppress allow delete value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.QuiteBoundarySet(System.Boolean)">
            <summary>
            Quites set boundary value without record in history and calling sink events.
            </summary>
            <param name="bBoundaryConstraintsEnabled">if set to <c>true</c> boundary constraints enabled.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.UpdateSizeToContent">
            <summary>
            Update model size to nodes bounds and minimum model size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.TranslateNodes(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Single,System.Single)">
            <summary>
            Translate the nodes collection to offset.
            </summary>
            <param name="nodesToMove">The nodes to move.</param>
            <param name="fX">The offset by X axis.</param>
            <param name="fY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Document_PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs)">
            <summary>
            Raises when property is changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Document_NodeCollectionChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Documents the node collection changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.EventSink_CancelCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Cancels the node collection changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Document_NodeCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Documents the node collection changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Viewer_NodeDeselected(Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs)">
            <summary>
            Raises when node deselected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.Viewer_SelectionListChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises when selection list changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HistoryManager_CommandStarted(System.Object,System.EventArgs)">
            <summary>
            Handles the CommandStarted event of the HistoryManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HistoryManager_CommandRequest(System.Object,System.EventArgs)">
            <summary>
            Handles the CommandRequest event of the HistoryManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.HistoryManager_CommandRequestComplete(System.Object,System.EventArgs)">
            <summary>
            Handles the CommandRequestComplete event of the HistoryManager control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.View_OriginChanged(Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs)">
            <summary>
            Handles the view origin changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Controller.EventSink_PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs)">
            <summary>
            Events the sink property changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Constraint">
            <summary>
            Get or set the constraints value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.CanUpdateView">
            <summary>
            Gets a value indicating whether this instance can update view.
            </summary>
            <value>
            <c>true</c> if this instance can update view; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.UpdateInfo">
            <summary>
            Gets the update info.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Viewer">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> object
            attached to this controller.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Model">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> object
            attached to this controller.
            </summary>
            <remarks>
            The Model object is attached to the controller indirectly through
            the View object. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList">
            <summary>
            Gets list of nodes that are currently selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Controller.Provider">
            <summary>
            Gets the provider.
            </summary>
            <value>The provider.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IViewer">
            <summary>
            Implement default view properties of MVC architecture.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IViewer.UpdateView">
            <summary>
            Updates the view area.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IViewer.UpdateView(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Updates the view with the node bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.ShowRulers">
            <summary>
            Gets or sets a value indicating whether view show horizontal and vertical rulers.
            </summary>
            <value><c>true</c> if show rulers; otherwise, <c>false</c>.</value>
            DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.RulersHeight">
            <summary>
            Gets the height of the rulers.
            </summary>
            <value>The height of the rulers.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.EventSink">
            <summary>
            Gets the reference to viewer event sink.
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.Origin">
            <summary>
            Gets the view origin.
            </summary>
            <value>The origin.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.Magnification">
            <summary>
            Gets the magnification percent.
            </summary>
            <value>The magnification percent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.Cursor">
            <summary>
            Gets or sets the view mouse cursor.
            </summary>
            <value>The mouse cursor.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IViewer.Model">
            <summary>
            Gets the reference to diagram model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Model">
            <summary>
            A model is a collection of nodes that are rendered onto a view and
            manipulated by a controller.
            </summary>
            <remarks>
            <para>
            A model is the data portion of a diagram. It is the root node in a hierarchy
            that is rendered onto a view. This class implements the
            <see cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/> interface,
            provides methods for accessing, adding, and removing child nodes. This
            includes the following methods:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.ChildCount"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.GetChild(System.Int32)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.Node)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.InsertChild(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)"/>,
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(System.Int32)"/>. Child
            nodes in the model can also be accessed through the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Nodes"/> property.
            </para>
            <para>
            A model maintains a collection of layers in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            property. A <see cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/> is a
            collection of nodes that share a common set of default properties and the
            same Z-order relative to other layers. A model always contains at least one
            layer. Each node in the model belongs to one and only one layer. The model
            renders itself onto the view by iterating through the layers and rendering
            each one. Each layer is responsible for rendering the nodes belonging to
            it. The
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyContainer"/>
            of the <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            collection is a reference back to the model, which allows the layers to
            inherit properties from the model.
            </para>
            <para>
            A model contains document-level settings such as:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPrint"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode">
            <summary>
            A composite node is a node that contains children.
            </summary>
            <remarks>
            <para>
            This interface has methods for adding and removing child
            nodes.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.INode"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.UpdateCompositeBounds">
            <summary>
            Update bounds size to content size.
            </summary>
            <remarks>
            Used to update composite node bounds 
            if children position or size changed.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildIndex(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.AppendChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Appends the given node to the collection of child nodes.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.AppendChildren(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.InsertChild(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Insert the given node into the collection of child nodes at a
            specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <returns>True if the node was successfully removed; otherwise False.</returns>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.RemoveChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <returns>True if the node was successfully removed; otherwise False.</returns>
            <param name="child">Node to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptModel">Point to test.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ICompositeNode.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICompositeNode.CanUngroup">
            <summary>
            Gets or sets a value indicating whether composite node can be ungrouped.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ICompositeNode.ChildCount">
            <summary>
            Gets the number of child nodes contained by this node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IZOrderContainer">
            <summary>
            Z Order Container.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.GetZOrder(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SetZOrder(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>The z-order.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.BringForward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SendBackward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.BringToFront(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.SendToBack(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.IZOrderContainer.ZOrderDepth">
            <summary>
            Gets number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ILayerContainer">
            <summary>
            Interface to objects that contain a collection of layers.
            </summary>
            <remarks>
            <para>
            This interface provides methods for managing nodes across a collection
            of layers.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILayerContainer.Layers">
            <summary>
            Gets typed collection of layers.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ILayerContainer.ActiveLayers">
            <summary>
            Gets collection of active layers.
            </summary>
            <remark>
            Adding new node to ILayerContainer would add it to all layers 
            contained in this collection
            </remark>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_padding">
            <summary>
            member of the class to padding
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bridgeStyle">
            <summary>
            Store bridge style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_ModelZOrder">
            <summary>
            member of the class to change zorder value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bEnableSelectionListSubstitute">
            <summary>
            Indicates whether selection list will be replaced
            with pseudo group to enhance selection list rendering speed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_modelsMinSize">
            <summary>
            Defult minimum size. Used for checking size to content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bSizeToContent">
            <summary>
            Flag indication autoresizing model size 
            on out nodes bounds on model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_BackgroundImageLayout">
            <summary>
            The background image layout for this component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_BackgroundImage">
            <summary>
            The background image for this component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_strName">
            <summary>
            Name of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_nodesChildren">
            <summary>
            Collection of child nodes belonging to the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_layers">
            <summary>
            Collection of layers in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_layersActive">
            <summary>
            Active Layers collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_tableName">
            <summary>
            Maps node names to node objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_styleFill">
            <summary>
            Properties for drawing document interior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_styleLine">
            <summary>
            Properties for drawing lines in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_styleShadow">
            <summary>
            Properties for shadows in the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_styleRendering">
            <summary>
            Properties for document RenderingStyle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_unitMeasure">
            <summary>
            Unit of measure used for world coordinates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bModified">
            <summary>
            Flag to indicate if the model has been modified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_boundaryConstraintsEnabled">
            <summary>
            Indicates whether or not boundary constraints are enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bInUpdate">
            <summary>
            Temporarily freezes redrawing of the model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.disposed">
            <summary>
            Indicates if the Dispose() method has been called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_headerFooter">
            <summary>
            Reference to the HeaderFooterData class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_lineRouter">
            <summary>
            Reference to line router.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Model.m_bNodeAdd">
            <summary>
            Indicate that node append to model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> class.
            </summary>
            <param name="src">Source model to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RegenerateUniqueNames">
            <summary>
            Special method for proper rendering DiagramWebControl Nodes. Don't use this method!
            </summary>
            <returns>true, if regnerate unique names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Dispose(System.Boolean)">
            <summary>
            Called to release resources held by the model.
            </summary>
            <param name="disposing">
            Indicates if this method is being called explicitly by a call to Dispose()
            or by the destructor through the garbage collector.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Draw(System.Drawing.Graphics)">
            <summary>
            Renders the model onto the given System.Drawing.Graphics object.
            </summary>
            <param name="grfx">Graphics context object to render onto.</param>
            <remarks>
            <para>
            The model initializes the given System.Drawing.Graphics object with
            the its:
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>, and
            Then it iterates through each layer in its
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.Layers"/>
            collections and draws each one.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CheckUseBitmap(Syncfusion.Windows.Forms.Diagram.ICompositeNode,System.Collections.Hashtable)">
            <summary>
            Checks the to cache group bitmap.
            </summary>
            <param name="group">The group.</param>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.UnCheckUseBitmap(Syncfusion.Windows.Forms.Diagram.ICompositeNode,System.Collections.Hashtable)">
            <summary>
            Uncheck the use bitmap cache.
            </summary>
            <param name="group">The group.</param>
            <param name="hash">The hashtable with flags.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the specified area of the model to a graphics context.
            </summary>
            <param name="grfx">Graphics context to render onto.</param>
            <param name="rcArea">Area to render.</param>
            <remarks>
            Only objects that intersect the specified rectangular area are rendered.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate">
            <summary>
            Disables any redrawing of the Model.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate">
            <summary>
            Enables the redrawing of the Model.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CheckBoundaryConstrains(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CreateHeaderFooter">
            <summary>
            Creates a <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/> instance for the model. 
            </summary>
            <returns>The HeaderFooterData object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ShouldSerializeSize">
            <summary>
            Should serialize the size of the model.
            </summary>
            <returns>true, if serialize size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ShouldSerializeMinimumSize">
            <summary>
            Should serialize the minimum size of the model.
            </summary>
            <returns>true if serialize minimum size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnZOrderChanging(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Called when Z order changing.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The new Z order value.</param>
            <returns>true, if Z order changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Called when Z order changed.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The new Z order value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            <para>
            The following services are supported:
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IDispatchNodeEvents"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>,
            <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/>
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">The type handle.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called when model property changing.
            </summary>
            <param name="strPropertyFullPath">The property full path.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="oldValue">The old value.</param>
            <returns>true, if property changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when model property changed.
            </summary>
            <param name="strPropertyFullPath">The property full path.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnSizeChanged(System.Single,System.Single)">
            <summary>
            Called when model size changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the name of the property container by.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The container object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanging(System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property is changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.OnPropertyChanged(System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RecordPropertyChanged(System.String)">
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RecordZOrderChanged(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate)">
            <summary>
            Records the Z order changed.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Clear">
            <summary>
            Removes all nodes from the model and resets its state values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CheckLineNodeChanged(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Compare the state of a line node with the last known state for the same object and return true if
            the state has changed
            </summary>
            <param name="lineNode">The line node.</param>
            <returns>true, if line node changed.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CompareZOrder(Syncfusion.Windows.Forms.Diagram.INode,Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Compares the Z-order of the two given nodes.
            </summary>
            <param name="node1">First node to compare</param>
            <param name="node2">Second node to compare</param>
            <returns>
            <para>-1 if the node1 is lower in the Z-order than node2</para>
            <para>1 if the node1 is higher in the Z-order than node2</para>
            <para>0 if the node1 and node2 are equal in Z-order</para>
            </returns>
            <remarks>
            <para>
            The nodes must belong to the same layer in order to compare their Z-order. An
            ArgumentException is thrown if the nodes do not belong to the same layer.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetBoundingRect">
            <summary>
            Gets Model bounding rectangle.
            </summary>
            <returns>bounding Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ContainsPoints(System.Drawing.PointF[])">
            <summary>
            Tests to see if the model contains all of the points in the
            given array.
            </summary>
            <param name="pts">Array of points to test.</param>
            <returns>
            true if all of the points fall within the bounds of the model;
            otherwise false
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Tests to see if the given point lies within the bounds
            of the model.
            </summary>
            <param name="ptTesting">Point to test.</param>
            <returns>
            true if the model contains the point; otherwise false
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Merge(Syncfusion.Windows.Forms.Diagram.Model,System.Boolean)">
            <summary>
            Copy document properties to current model container.
            </summary>
            <param name="document">The source document.</param>
            <param name="bCollectionOnly">merge the collection only, if set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>Child node at the given position or NULL if the index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildByFullName(Syncfusion.Windows.Forms.Diagram.ICompositeNode,System.String)">
            <summary>
            Returns the child node matching the given full name.
            </summary>
            <param name="composite">The composite node.</param>
            <param name="childFullName">Full name of the child.</param>
            <returns>Node matching the given full name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildIndex(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>Zero-based index into the collection of child nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Appends the given node to the model.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AppendChildren(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">
            Zero-based index at which the first node was added to the collection of child nodes.
            </param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.InsertChild(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Insert the given node into the model at a specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>True if the node was successfully removed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveRange(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Removes the range nodes.
            </summary>
            <param name="nodesToRemove">The nodes to remove.</param>
            <returns>true, if remove the nodes.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes specified child node.
            </summary>
            <param name="nodeToRemove">The node to remove.</param>
            <returns>
            True if the node was successfully removed; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="ptModel">Point to test.</param>
            <returns>The number of child nodes that intersect the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children hit by the given point.
            </param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>The number of child nodes that intersect the given rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">
            Collection in which to add the children inside the specified rectangle.
            </param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>The number of child nodes added to the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.UpdateCompositeBounds">
            <summary>
            Update bounds size to content size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.ConvertLogicalUnits(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts the logical values contained by the object from one unit of
            measure to another.
            </summary>
            <param name="fromUnits">Units to convert from.</param>
            <param name="toUnits">Units to convert to.</param>
            <remarks>
            <para>
            This method converts all logical unit values contained by the object from
            one unit of measure to another.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GetZOrder(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SetZOrder(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BringForward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SendBackward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BringToFront(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SendToBack(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SwapZOrder(System.Int32,System.Int32)">
            <summary>
            Swappin the ZOrder 
            </summary>
            <param name="prevIndex"> current index the of the current node </param>
            <param name="newIndex"> new index of the current node </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SetToNewZOrder(System.Int32,System.Int32)">
            <summary>
            Swappin the ZOrder 
            </summary>
            <param name="curIndex"> current index the of the current node </param>
            <param name="newZorder"> new index of the current node </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Children_ChangeComplete(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Called when children collection change complete.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Children_PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Called when children property is changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.Children_PropertyChanging(Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs)">
            <summary>
            Called when children property is changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GenerateUniqueName(Syncfusion.Windows.Forms.Diagram.Node,System.Text.RegularExpressions.Regex)">
            <summary>
            Generate the unique name for node.
            </summary>
            <param name="curNode">The current node.</param>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.GenerateUniqueNodeName(Syncfusion.Windows.Forms.Diagram.Node,System.String@,System.Text.RegularExpressions.Regex)">
            <summary>
            Called to generate a unique name when inserting a new node.
            </summary>
            <param name="obj">Node to generate unique name for.</param>
            <param name="nodeName">Node name generated.</param>
            <param name="regex">Regex used to split node name.</param>
            <returns>
            True if a new name was generated; False if the name is already unique.
            </returns>
            <remarks>
            <para>
            The implementation of this method first checks to see if the name is
            already unique. If it is, then it returns False to the caller and
            the nodeName parameter contains the original name. If the node's name
            is not unique within the model, then this method adds a numeric suffix
            to the name and continues to increment it in a loop until the name
            is unique. If the nodeName output parameter contains a value other
            than the original node name, then this method returns True.
            </para>
            <para>
            This method can be overriden in derived classes in order to customize or
            replace the algorithm for generating unique names.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.UpdateBridges(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Update bridges given node connectors.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RemoveFromContainingLayers(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes from containing layers.
            </summary>
            <param name="nodeRemoving">The node removing.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AddToActiveLayers(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Adds given mode to active layers.
            </summary>
            <param name="nodeToAdd">The node to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.AddToActiveLayers(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Adds given node collection to active layers.
            </summary>
            <param name="nodesToAdd">The nodes to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.RecordConnectionChanges(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Used for manually record connection changes for nodes what already removed from model.
            </summary>
            <param name="node">Node to check connections changes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.SubscribeForChildrenEvents">
            <summary>
            Sign for children property and collection changes.
            </summary>
            <remarks>
            Calling when model component is initializing.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Model.UpdateLayerCollectionOwner(Syncfusion.Windows.Forms.Diagram.LayerCollection)">
            <summary>
            Used to update the layer collections owner
            </summary>
            <param name="layerCollection">Layer collection to update.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Padding">
            <summary>
            Get/Set the Diagram Padding
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Bounds">
            <summary>
            Gets the model bounds.
            </summary>
            <remarks>
            Location  always equal PointF.Empty.
            </remarks>
            <value>The bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BottomMargin">
            <summary>
            Gets and Sets the Bottom Margin for the Model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.RightMargin">
            <summary>
            Gets and Sets the Right Margin for the Model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Nodes">
            <summary>
            Gets the model node collection.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultDocumentSize">
            <summary>
            Gets the default document size.
            </summary>
            <value>The size of the default document.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DefaultMinimumSize">
            <summary>
            Gets the default minimum size.
            </summary>
            <value>The minimum size of the default.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Size">
            <summary>
            Gets or sets the Document size.
            </summary>
            <remarks>
            Specified in current measure units.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Layers">
            <summary>
            Gets collection of layers in the model.
            </summary>
            <value>The layer collection.</value>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayerCollection"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Layer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ActiveLayers">
            <summary>
            Gets collection of active layers.
            </summary>
            <value></value>
            <remark>
            Adding new node to ILayerContainer would add it to all layers
            contained in this collection
            </remark>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.HeaderFooterData">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/> instance containing the header and footer settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.EventSink">
            <summary>
            Gets the reference to event sink .
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.HistoryManager">
            <summary>
            Gets the reference to history manager.
            </summary>
            <value>The history manager.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LinkManager">
            <summary>
            Gets the reference to link manager.
            </summary>
            <value>The link manager.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BridgeManager">
            <summary>
            Gets the reference to bridge manager.
            </summary>
            <value>The bridge manager.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Modified">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> is modified.
            </summary>
            <value><c>true</c> if modified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.EnableSelectionListSubstitute">
            <summary>
            Gets or sets a value indicating whether line routing is enabled for the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BridgeStyle">
            <summary>
            Gets or sets bridge style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineRoutingEnabled">
            <summary>
            Gets or sets a value indicating whether line routing is enabled for the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.OptimizeLineBridging">
            <summary>
            Gets or sets a value indicating whether the performance will be improved while dragging nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineBridgingEnabled">
            <summary>
            Gets or sets a value indicating whether line bridging is enabled for the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineBridgeSize">
            <summary>
            Gets or sets the size of bridges added to the line to jump over
            other lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineRouter">
            <summary>
            Gets or sets the line router manager.
            </summary>
            <value>The line router.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.MinimumSize">
            <summary>
            Gets or sets minimum model auto size for content.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.SizeToContent">
            <summary>
            Gets or sets a value indicating whether autoresizing model size 
            when nodes go out of bounds on model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundImageLayout">
            <summary>
            Gets or sets the Background Image Layout for this model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundImage">
            <summary>
            Gets or sets the background image for this model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.InUpdate">
            <summary>
            Gets a value indicating whether the model redrawing is enabled.
            <see cref="M:Syncfusion.Windows.Forms.Diagram.Model.BeginUpdate"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.Model.EndUpdate"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BoundaryConstraintsEnabled">
            <summary>
            Gets or sets a value indicating whether boundary constraints are enabled or not.
            </summary>
            <remarks>
            <para>
            This property is True by default. If this property is True, then all nodes
            in the model are constrained to the bounds of the model. In other words,
            child nodes cannot move, resize, or rotate to a position that leaves the
            bounds of the model.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits">
            <summary>
            Gets or sets unit of measure used for world coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DocumentScale">
            <summary>
            Gets or sets the document scale.
            </summary>
            <value>The document scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.DocumentSize">
            <summary>
            Gets or sets the size of the document.
            </summary>
            <value>The size of the document.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LogicalSize">
            <summary>
            Gets or sets the logical model size in current measurement units.
            </summary>
            <value>The logical size in current measurement units.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.RenderingStyle">
            <summary>
            Gets the diagram rendering style.
            </summary>
            <remarks>
            The rendering style is used to configure graphics.
            </remarks>
            <value>The rendering style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.BackgroundStyle">
            <summary>
            Gets or sets properties used to fill the interior of document.
            </summary>
            <remarks>
            <para>
            The fill style is used to create brushes for painting interior of document.
            </para>
            <para>
            The fill style properties in the model are inherited by child nodes. If a
            child node does not have a value assigned to a given fill style property,
            then the value assigned to the model is used.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Model.LineStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.LineStyle">
            <summary>
            Gets properties used for document border.
            </summary>
            <remarks>
            <para>
            The line style is used to create pen for document border.
            </para>
            <para>
            The line style properties in the model are inherited by child nodes. If a
            child node does not have a value assigned to a given line style property,
            then the value assigned to the model is used.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.IPropertyContainer"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ShadowStyle">
            <summary>
            Gets or sets properties used to draw document shadow.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Children">
            <summary>
            Gets the children to model children collection.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.NameTable">
            <summary>
            Gets names hash where key - node name, value - available node index.
            Using for generate unique name with indexing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.CanUngroup">
            <summary>
            Gets or sets a value indicating whether composite node can be ungrouped.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Name">
            <summary>
            Gets or sets name of the node.
            </summary>
            <value></value>
            <remarks>
            Must be unique within the scope of the parent node.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Parent">
            <summary>
            Gets or sets reference to the composite node this node is a child of.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.FullName">
            <summary>
            Gets or sets fully qualified name of the node.
            </summary>
            <value></value>
            <remarks>
            The full name is the name of the node concatenated with the names
            of all parent nodes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.Root">
            <summary>
            Gets the root node in the node hierarchy.
            </summary>
            <value></value>
            <remarks>
            The root node is found by following the chain of parent nodes until
            a node is found that has a NULL parent.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ChildCount">
            <summary>
            Gets the number of child nodes contained by this model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Model.ZOrderDepth">
            <summary>
            Gets number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.View">
            <summary>
            A view encapsulates a rectangular area inside of a control and renders
            a <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> onto it.
            </summary>
            <remarks>
            <para>
            A view is responsible for rendering the diagram onto a control surface
            (i.e. window). It contains a reference to a
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> which contains the
            data portion of the diagram. The view renders the model onto a
            System.Drawing.Graphics context object belonging to the control that
            the view is hosted in. The view also renders other visual cues and decorations
            that are not persisted in the model, such as selection handles.
            </para>
            <para>
            The view is responsible for conversions between world, view, and device
            coordinates. The model belongs to the world coordinate space. The view
            maps world coordinates onto view coordinates by applying its
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            and
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            settings, which are used to implement zooming and scrolling. In other
            words, world coordinates are mapped to view coordinates by applying
            a transformation that translates to the origin and scales by a
            magnification percentage. Both world and view coordinates are stored
            as floating point numbers. View coordinates are mapped to device
            coordinates based on the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.MeasurementUnits"/>
            settings in the model and the resolution (DPI) of the output device.
            The default PageUnit setting is pixel and the default PageScale setting
            is 1, which results in a 1-1 mapping from view to device coordinates.
            If the PageUnit is set to Inch, the PageScale is 0.5, and the resolution
            is 96 dpi then 1 logical unit in view coordinates will equal
            (1 * 96) * 0.5 = 48 pixels.
            </para>
            <para>
            The view provides methods for performing hit testing nodes, selection
            handles, vertices, and ports. The hit testing methods take points
            in device coordinates and perform the necessary conversion to world
            coordinates.
            </para>
            <para>
            The view also provides methods for drawing tracking objects. A tracking
            object is an outline of a rectangle or shape that is moved or tracked
            across the screen in response to mouse movements. The view has methods
            for drawing tracking outlines of rectangles, lines, polygons, curves,
            and System.Drawing.GraphicsPath objects.
            </para>
            <para>
            The view contains public methods that can be called to render and
            repaint onto the host control. The view uses a technique called back
            buffering, which divides rendering into two stages. First, the view
            renders onto a memory-based bitmap image (the back buffer). The back
            buffer is then painted onto the host control. This technique eliminates
            flicker and has the added benefit of leaving the view with an in-memory
            representation of the last frame it rendered.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.IPrint">
            <summary>
            This interface is implemented by classes that can print.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPrint.PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Called in response to the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event.
            </summary>
            <remarks>
            This method is called when the output to print for the current page is needed.
            </remarks>
            <param name="evtArgs">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.IPrint.QueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Called immediately before each <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage"/> event.
            </summary>
            <param name="evtArgs">A <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> class.
            </summary>
            <param name="parentControl">Parent control (i.e. window) hosting the view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> class.
            </summary>
            <param name="parentControl">Parent control (i.e. window) to host the view.</param>
            <param name="top">Top of view bounds.</param>
            <param name="left">Left of view bounds.</param>
            <param name="width">Width of view bounds.</param>
            <param name="height">Height of view bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetViewInfo">
            <summary>
            Creates a ViewInfo object and initializes it with the View data.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/> object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SetViewInfo(Syncfusion.Windows.Forms.Diagram.ViewInfo)">
            <summary>
            Initializes the View with data from the ViewInfo object.
            </summary>
            <param name="vwinfo">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/> object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Dispose(System.Boolean)">
            <summary>
            Called to release resources held by the view.
            </summary>
            <param name="disposing">
            Indicates if this method is being called explicitly by a call to Dispose()
            or by the destructor through the garbage collector.
            </param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_nodesSelected">
            <summary>
            List of selected nodes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.parentControl">
            <summary>
            Reference to the parent control (control hosting the view).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_document">
            <summary>
            Reference to the model attached to the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.rcBounds">
            <summary>
            Bounds of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.backgroundColor">
            <summary>
            Color to clear the background with.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_grid">
            <summary>
            Object that renders grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_styleHandles">
            <summary>
            Handles style.
            </summary>
            <remarks> Made static in order 
            to allow Node access ControlPointStyle
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.topMarginBuffer">
            <summary>
            Back buffer used to elimate flicker during mouse tracking in the top margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.leftMarginBuffer">
            <summary>
            Back buffer used to elimate flicker during mouse tracking in the bottom margin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_ptOrigin">
            <summary>
            View origin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_fMagnification">
            <summary>
            Magnification value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_iZoomIncrement">
            <summary>
            Zoom increment value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_cursor">
            <summary>
            Currently active cursor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.dpiX">
            <summary>
            Horizontal resolution of the device.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.dpiY">
            <summary>
            Vertical resolution of the device.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleSize">
            <summary>
            Size to draw selection handles (in device units).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleColor">
            <summary>
            Color to draw selection handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleOutlineColor">
            <summary>
            Color to draw selection handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleAnchorColor">
            <summary>
            Color to draw selection handles for anchor node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_customHandleRenderer">
            <summary>
            Instance of user defined handle renderer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.handleDisabledColor">
            <summary>
            Color to draw selection handles when disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_pageSize">
            <summary>
            Page size of the default printer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_pageSizeKnown">
            <summary>
            Flag indicating if the page size is a known value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.disposed">
            <summary>
            Indicates if the Dispose() method has been called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.nCurrentPage">
            <summary>
            Keeps track of the current print page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.pgSettings">
            <summary>
            Page settings used for printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.prtZoom">
            <summary>
             Print zooming or fit to page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_stylePageBorder">
            <summary>
             Page border style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_bTrackingEnabled">
            <summary>
            Indicates whether Mouse Tracking is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_nPasteOffsetX">
            <summary>
            Defines X direction offset when nodes are pasted into the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_nPasteOffsetY">
            <summary>
            Defines Y direction offset when nodes are pasted into the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_rcVirtualBounds">
            <summary>
            Horizontal and vertical spaces to model bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.boundingRect">
            <summary>
            Bounding rectangle of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_handleRenderer">
            <summary>
            View Handle renderer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.origin">
            <summary>
            Origin of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.View.m_zoomType">
            <summary>
            Type of the zooming action to be performed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Initialize(System.Windows.Forms.Control)">
            <summary>
            Attaches the view to a given parent control.
            </summary>
            <param name="parentControl">Parent control hosting the view.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the name of the property container by.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnPropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called when property changing.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ZoomIn">
            <summary>
            Zoom in the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ZoomOut">
            <summary>
            Zoom out the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ZoomToActual">
            <summary>
            Zoom the document to the actual.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ZoomToSelection(System.Drawing.RectangleF)">
            <summary>
            Zoom the document to the selection
            </summary>
            <param name="rectSelection">The selection rectangle in client coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.FitDocument">
            <summary>
            Fit the document on control field.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.RefreshPageSettings">
            <summary>
            Refreshes the view's page size with the new bounds obtained from the <see cref="P:Syncfusion.Windows.Forms.Diagram.View.PageSettings"/> property.
            </summary>
            <remarks>
            Call this method when the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/>'s page settings have undergone a change.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetViewTransform">
            <summary>
            Returns a transformation matrix that maps world coordinates to view
            coordinates.
            </summary>
            <returns>Transformation matrix.</returns>
            <remarks>
            <para>
            The view transformation maps world coordinates to view coordinates.
            It is calculated by translating by the offset specified in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            property and scaling by the value in the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            property.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Magnification"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetViewTransform(System.Drawing.PointF)">
            <summary>
            Returns transform matrix based on the given origin.
            </summary>
            <param name="origin">origin to tranform</param>
            <returns>Transformation matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollBy(System.Single,System.Single)">
            <summary>
            Scrolls the view origin by a given X and Y offset.
            </summary>
            <param name="dx">X offset.</param>
            <param name="dy">Y offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollToNode(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Scrolls to the node to bring it into view.
            </summary>
            <param name="node">The node to bring into view</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollToInvisibleNode(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Positions)">
            <summary>
            Scrolls to the invisible node to bring it into view.
            </summary>
            <param name="node">The node to bring into view</param>        
            <param name="position">The position to place the node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollToInvisibleNode(System.String,Syncfusion.Windows.Forms.Diagram.Positions)">
            <summary>
            Scrolls to the invisible node to bring it into view.
            </summary>
            <param name="nodeName">The node name</param>        
            <param name="position">The position to place the node</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ScrollToNode(System.String)">
            <summary>
            Scrolls to the node to bring it into view.
            </summary>
            <param name="nodeName">The node name</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SnapPointToGrid(System.Drawing.PointF)">
            <summary>
            Takes a device point and returns the nearest grid point.
            </summary>
            <param name="ptDevIn">Point to snap.</param>
            <returns>Point on the grid nearest the input point.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Grid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.SnapPointToGrid(System.Single,System.Single)">
            <summary>
            Takes a device point and returns the nearest grid point.
            </summary>
            <param name="x">X coordinate of point to snap.</param>
            <param name="y">Y coordinate of point to snap.</param>
            <returns>Point on the grid nearest the input point.</returns>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Grid"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ConvertPageMargins(System.Boolean)">
            <summary>
            Called during PageSetup dialog initialization to workaround a measurement units conversion bug in the PageSetupDialog.
            </summary>
            <param name="beforePageSetup">TRUE for pre-PageSetup invocation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="grfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Renders the view onto a System.Drawing.Graphics context object.
            </summary>
            <param name="grfx">Graphics context object to render to.</param>
            <param name="rectClip">Specifies document's area which will be rendered.</param>
            <remarks>
            <para>
            This method first renders the view onto the back buffer. It fills
            the buffer with the view's background color, draws the grid and
            page bounds, and then draws the model. Then paints the back
            buffer onto the graphics context.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawDocumentBackground(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws the document background.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rectDocument">The document bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawPadding(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Calculating the bounds area of the padding 
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rectDocument">Model Bounds</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawPadAroundModel(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draw the padding around the model
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rcBounds">bounds of the padding</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawMarginIntersection(System.Drawing.Graphics)">
            <summary>
            Draws the upper-left hand corner of the margin where the left and top
            margins intersect.
            </summary>
            <param name="grfx">Graphics context to render to.</param>
            <remarks>
            <para>
            The default implementation fills the rectangular area with the
            ruler fill color.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramAsImage(System.Boolean)">
            <summary>
            Exports a representation of the diagram as a bitmap image.
            </summary>
            <param name="bClipModelBounds">if set to <c>true</c> [b clip model bounds].</param>        
            <returns>
            A <see cref="T:System.Drawing.Bitmap"/> value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramAsImage(System.Boolean,System.Drawing.Imaging.PixelFormat)">
            <summary>
            Exports a representation of the diagram as a bitmap image.
            </summary>
            <param name="bClipModelBounds">if set to <c>true</c> [b clip model bounds].</param>
            <param name="pixelFormat"> given pixel format</param>
            <returns>
            A <see cref="T:System.Drawing.Bitmap"/> value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramToGraphics(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draw the diagram to specified graphics.
            </summary>
            <param name="grfx">Graphics to draw on.</param>
            <param name="rcDrawArea">The drawing area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramToGraphics(System.Drawing.Graphics)">
            <summary>
            Renders a representation of the diagram onto the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="grfx">The graphics.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ExportDiagramToGraphics(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Renders a representation of the diagram onto the provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <param name="grfx">The graphics.</param>
            <param name="bClipModelBounds">if set to <c>true</c> clip model bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawPageBounds(System.Drawing.Graphics)">
            <summary>
            Draws lines on the view that indicate where page boundaries exist.
            </summary>
            <param name="grfx">Graphics context object on which to draw.</param>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.PageSettings"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawPageBorders(System.Drawing.Graphics)">
            <summary>
            Draws a border around the page.
            </summary>
            <param name="grfx">Graphics context object on which to draw.</param>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.PageBorderStyle"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Returns the specified type of service object to the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnDeserialization(System.Object)">
            <summary>
            Called when deserialization is complete.
            </summary>
            <param name="sender">Object performing the deserialization.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.CreateGrid">
            <summary>
            Creates the layout grid that is rendered in the view.
            </summary>
            <returns>Layout grid to attach to grid.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetService(System.Type)">
            <summary>
            Returns the specified type of service object the caller.
            </summary>
            <param name="svcType">Type of service requested.</param>
            <returns>
            The object matching the service type requested or NULL if the
            service is not supported.
            </returns>
            <remarks>
            <para>
            This method is similar to COM's IUnknown::QueryInterface method,
            although more generic. Instead of just returning interfaces,
            this method can return any type of object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Syncfusion#Windows#Forms#Diagram#IPrint#PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints a page to the specified output device.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.PrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Prints a page to the specified output device.
            </summary>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.Syncfusion#Windows#Forms#Diagram#IPrint#QueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Appends margins to printed page.
            </summary>
            <param name="evtArgs">QueryPageSettings arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.QueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Appends margins to printed page.
            </summary>
            <param name="evtArgs">QueryPageSettings arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnOriginChanged(Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs)">
            <summary>
            Called when the origin of the view changes.
            </summary>
            <param name="evtArgs">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.OnMagnificationChanged(Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs)">
            <summary>
            Called when the origin of the view changes.
            </summary>
            <param name="evtArgs">A <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.DrawHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Draws the handles.
            </summary>
            <param name="grfx">Graphics to draw on.</param>
            <param name="nodesSelected">The nodes selected.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.GetParentsTransform(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the parents transform.
            </summary>
            <param name="node">The node.</param>
            <returns>The matrix</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.View.ProvideServiceReference(System.RuntimeTypeHandle)">
            <summary>
            Get the service reference from provider.
            </summary>
            <param name="typeHandle">Type handle</param>
            <returns>The object.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ClientRectangle">
            <summary>
            Gets or sets the view's ClientRectangle.
            </summary>          
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Controller">
            <summary>
            Gets or sets the view's controller.
            </summary>          
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.SelectionListSubstitute">
            <summary>
            Gets the selection list substitute.
            </summary>
            <value>The selection list substitute.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.EventSink">
            <summary>
            Gets the reference to viewer event sink.
            </summary>
            <value>The event sink.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Model">
            <summary>
            Gets or sets the model attached to this view.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Origin">
            <summary>
            Gets or sets logical origin of the view in world coordinates.
            </summary>
            <remarks>
            <para>
            This property moves the view relative to the world
            coordinate space. The value specifies a point in the world
            coordinate space that corresponds to the top left corner
            of the view.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.VirtualSize">
            <summary>
            Gets the size of the scrollable area in device coordinates.
            </summary>
            <remarks>
            <para>
            The value returned is the width and height of the model converted to
            device coordinates. If there is no model attached to the view at
            the time of the call, then the size of the view is returned instead.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ZoomIncrement">
            <summary>
            Gets or sets the zoom increment value applied to view attached document.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Magnification">
            <summary>
            Gets or sets the X and Y magnification (zoom) values on a scale of 1 to n.
            </summary>
            <remarks>
            <para>
            This value is used to zoom the view in and out. The X and Y axes can
            be scaled independently. Normally, the X and Y axes will have the
            same magnification value.
            </para>
            <para>
            The value of this property along with the
            <see cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/> are used to
            create the view transform, which is used to map world coordinates onto
            view coordinates.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.View.GetViewTransform"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.Origin"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.LeftMargin">
            <summary>
            Gets width of left margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.LeftMarginBounds">
            <summary>
            Gets bounding rectangle of left margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.TopMargin">
            <summary>
            Gets height of top margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.TopMarginBounds">
            <summary>
            Gets bounding rectangle of top margin in device units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.WorkArea">
            <summary>
            Gets bounding rectangle of view excluding the margins.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.SelectionList">
            <summary>
            Gets list of currently selected nodes.
            </summary>
            <remarks>
            Provides access to the controller's selection list.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.Controller.SelectionList"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.SelectionAnchorNode">
            <summary>
            Gets node in the selection list that acts as the anchor.
            </summary>
            <remarks>
            <para>
            The anchor node is always the last node in the selection list.
            </para>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.SelectionList"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.BackgroundColor">
            <summary>
            Gets or sets the color used to clear the view before rendering the diagram.
            </summary>
            <remarks>
            <para>
            The background of the view is the region outside of the visible
            diagram.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleSize">
            <summary>
            Gets or sets size of selection handles specified in device coordinates.
            OBSOLETE - property is not needed and was never implemented before.
            Should be removed in next version
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleColor">
            <summary>
            Gets or sets color used to draw selection handles.
            OBSOLETE - property will be no more supported since next version. Use HandleRenderer.HandleColor instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleRenderer">
            <summary>
            Gets or sets view handle renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.CustomHandleRenderer">
            <summary>
            Gets or sets view custom handle renderer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleOutlineColor">
            <summary>
            Gets or sets color used to draw selection handle outline.
            OBSOLETE - property will be no more supported since next version. Use HandleRenderer.HandleOutlineColor instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleAnchorColor">
            <summary>
            Gets or sets color used for handles of anchor node. 
            OBSOLETE - property is not needed and was never implemented before
            should be removed in next version
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleDisabledColor">
            <summary>
            Gets or sets color used for handles when disabled.
            OBSOLETE - property will be no more supported since next version. Use HandleRenderer.HandleDisabledColor instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Grid">
            <summary>
            Gets grid of evenly spaced points that provide a visual guide to the
            user.
            </summary>
            <remarks>
            <para>
            Draws a matrix of evenly spaced points in the view and provides
            snap to grid calculations.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.LayoutGrid"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PageBorderStyle">
            <summary>
            Gets or sets properties used to draw the page border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.MouseTrackingEnabled">
            <summary>
            Gets or sets a value indicating whether mouse movements are tracked in the margins of the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Cursor">
            <summary>
            Gets or sets cursor currently used in the view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PasteOffsetX">
            <summary>
            Gets or sets number of device units to offset nodes in the X direction when they are
            pasted into a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PasteOffsetY">
            <summary>
            Gets or sets number of device units to offset nodes in the Y direction when they are
            pasted into a diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PageSettings">
            <summary>
            Gets or sets page settings to use when creating a print document for the model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PrintZoom">
            <summary>
            Gets or sets the diagram printing zoom value.
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PrintZoom"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ScrollVirtualBounds">
            <summary>
            Gets or sets the bounds of scrollable area. Can be set only positive values.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.PageSizeKnown">
            <summary>
            Gets or sets a value indicating whether page size can be used.
            </summary>
            <value><c>true</c> if page size can be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.ZoomType">
            <summary>
            Gets or sets a value indicating that which type of zooming action to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.HandleStyles">
            <summary>
            Gets the handle styles collection.
            </summary>
            <value>The handle styles.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Location">
            <summary>
            Gets location of the view in the parent control specified in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Size">
            <summary>
            Gets or sets size of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.X">
            <summary>
            Gets X coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Y">
            <summary>
            Gets Y coordinate of the location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Width">
            <summary>
            Gets width of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Height">
            <summary>
            Gets height of the view in device coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.View.Bounds">
            <summary>
            Gets bounds of the view in the parent control specified in device coordinates.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZoomType">
            <summary>
            Specifies zooming action type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZoomType.Center">
            <summary>
            Center based zooming
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ZoomType.TopLeft">
            <summary>
            TopLeft based zooming
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode">
            <summary>
            Node that gets rendered as closed curve.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode"/> class.
            </summary>
            <param name="pts">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.#ctor(Syncfusion.Windows.Forms.Diagram.ClosedCurveNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode"/> class.
            </summary>
            <param name="src">The closed curved node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.CanEditControlPoint">
            <summary>
            Determines whether this instance can edit control point.
            </summary>
            <returns>
            <c>true</c> if this instance can edit control point ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.CanDrawControlPoints">
            <summary>
            Determines whether this instance can draw control points.
            </summary>
            <returns>
            <c>true</c> if this instance can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.GetPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns>Array of points in local coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.GetPathPoints">
            <summary>
            Gets the control points.
            </summary>
            <returns>The control points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.GetNewPathBounds(System.Drawing.PointF[])">
            <summary>
            Gets the new path points bounds.
            </summary>
            <param name="pathPoints">The path points.</param>
            <returns>
            The <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ClosedCurveNode.InitializeCurve(System.Drawing.PointF[])">
            <summary>
            Initializes the curve.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Polygon">
            <summary>
            Implementation of polygon shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/> class.
            </summary>
            <param name="pts">Points to add to polygon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(Syncfusion.Windows.Forms.Diagram.Polygon)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Polygon"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path.
            </summary>
            <param name="pts">The new path points array.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Polygon.InitializePolygon(System.Drawing.PointF[])">
            <summary>
            Initializes the polygon.
            </summary>
            <param name="pts">The points.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Group">
            <summary>
            A group is a node that acts as a transparent container for other nodes.
            </summary>
            <remarks>
            <para>
            A group is a composite node that controls a set of child nodes. The
            bounding rectangle of a group is the union of the bounds of its
            children. The group renders itself by iterating through its children
            and rendering them.
            </para>
            <para>
            Members of the group are added and removed through the ICompositeNode
            interface.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ICompositeNode"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_GroupZOrder">
            <summary>
            member of the class to change zorder value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_nodesChildren">
            <summary>
            Collection of children nodes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_bInitialize">
            <summary>
            Indicated whether   group is empty( without children ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_bmpCache">
            <summary>
            Cached Group visual representation
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_styleRender">
            <summary>
            Helper field.
            Used when node representation is rendered as bitmap.
            Used to check whether node's bitmap representation must be regenerated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Group.m_tableName">
            <summary>
            Maps node names to node objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Group"/> class.
            </summary>
            <param name="nodesChildren">The nodes children.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor(Syncfusion.Windows.Forms.Diagram.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Group"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Group"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.ContainsPoint(System.Drawing.PointF)">
            <summary>
            Performs given point hit test.
            </summary>
            <param name="ptTest">Point to test</param>
            <returns>true, if contains the point.</returns>
            <remarks>
            Point must be in pixel units.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateHelperRegion">
            <summary>
            Creates region used for hit testing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SaveConnections(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Saves the connections.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>Connections list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RestoreConnections(System.Collections.ArrayList)">
            <summary>
            Restores the connections.
            </summary>
            <param name="portConnections">The port connections.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation.
            on given graphics
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RenderChildren(System.Drawing.Graphics)">
            <summary>
            Renders the children.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnParentChanged">
            <summary>
            Called when parent changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RenderContiguousData(System.Drawing.Graphics)">
            <summary>
            methods used to draw contiguous date. Such as labels or ports
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnDeserialized">
            <summary>
            Called when node deserialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rect.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetRectBounds(System.Boolean,System.Boolean)">
            <summary>
            Return the path bounds of the node 
            </summary>
            <param name="excludeLabel">if true, include the label bounds, otherwise exclude</param>
            <param name="excludePort">if true, include the Port bounds, otherwise exclude</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetPathBounds">
            <summary>
            Methods used to get node's GraphicsPath
            </summary>
            <returns>node's GraphicsPath</returns>
            <remarks>
            Used primarily for Group node to get
            all children paths union with transformations.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.EventSink_PropertyChanged(Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs)">
            <summary>
            Raise when group property changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateChildrenParents">
            <summary>
            Updates the children parents.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetBoundingRect(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the bounding rect in local coordinates.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The bounding rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateChildBoundsInfo(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Updates the child bounds info.
            </summary>
            <param name="nodeCur">The node cur.</param>
            <param name="mtxScale">The matrix scale.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdatePinAndSize(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Updates the size and pin position.
            </summary>
            <param name="nodeCur">Node to change PinPoint and Size to.</param>
            <param name="ptPinPoint">The pin point.</param>
            <param name="szSize">The node size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateGroupInfo">
            <summary>
            Update group pin position and size to children,
            without visual transformation and history recording.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Update group pin position, pin offset and size.
            </summary>
            <param name="rcBounds">Nodes bounds in group coordinates,</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.QuiteResetEditStyle(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Quites the reset move locking.
            </summary>
            <param name="node">The node.</param>
            <returns>The edit style.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.QuiteRestoreEditStyle(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.EditStyle)">
            <summary>
            Quites the restore move locking.
            </summary>
            <param name="node">The node.</param>
            <param name="editStyle">The edit style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.CanAppendChild(Syncfusion.Windows.Forms.Diagram.ICompositeNode,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines whether this instance can append child the specified parent.
            </summary>
            <param name="parent">The parent.</param>
            <param name="nodeAppending">The node appending.</param>
            <returns>
            <c>true</c> if this instance can append child the specified parent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RenderCachedImage(System.Drawing.Graphics)">
            <summary>
            Renders the cached image.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.ResetRenderCache">
            <summary>
            Resets the render cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.TryEnhanceRendering(System.Drawing.Graphics)">
            <summary>
            If there are more than 7 nodes to render during MoveTool rendering
            render moveing nodes to bitmap in order to enhance MoveTool rendering
            </summary>
            <param name="gfx">The graphics.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnZOrderChanging(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Called when Z order changing.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The new Z order.</param>
            <returns>true, if Z order is changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.OnZOrderChanged(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Called when Z order changed.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The n new Z order.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RecordZOrderChanged(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate)">
            <summary>
            Records the Z order changed.
            </summary>
            <param name="node">The node.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateBridges(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Update bridges given node connectors.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.EventSink_NodeCollectionChanging(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise when node collection changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.EventSink_NodeCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raise when node collection changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GenerateChildrenUniqueNames">
            <summary>
            Generate unique names for all children.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GenerateUniqueName(Syncfusion.Windows.Forms.Diagram.Node,System.Text.RegularExpressions.Regex)">
            <summary>
            Generate the unique name for node.
            </summary>
            <param name="curNode">The current node.</param>
            <param name="regex">The regular expression.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChild(System.Int32)">
            <summary>
            Returns the child node at the given index position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>
            Child node at the given position or NULL if the index is out of range.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildByName(System.String)">
            <summary>
            Returns the child node matching the given name.
            </summary>
            <param name="childName">Name of node to return.</param>
            <returns>Node matching the given name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildIndex(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the index position of the given child node.
            </summary>
            <param name="child">Child node to query.</param>
            <returns>
            Zero-based index into the collection of child nodes.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.AppendChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Appends the given node to the collection of child nodes.
            </summary>
            <param name="child">Node to append.</param>
            <returns>
            Zero-based index at which the node was added to the collection or -1 for failure.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.AppendChildren(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Int32@)">
            <summary>
            Appends the given collection of nodes as child nodes.
            </summary>
            <param name="children">Nodes to append.</param>
            <param name="startIdx">Zero-based index at which the first node was added to the collection of child nodes.</param>
            <returns>Number of child nodes appended.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.InsertChild(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Insert the given node in local coordinates into the collection of child nodes at a
            specific position.
            </summary>
            <param name="child">Node to insert.</param>
            <param name="childIndex">Zero-based index at which to insert the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveChild(System.Int32)">
            <summary>
            Removes the child node at the given position.
            </summary>
            <param name="childIndex">Zero-based index into the collection of child nodes.</param>
            <returns>
            True if the node was successfully removed; otherwise False.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveChild(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Removes the child.
            </summary>
            <param name="nodeToRemove">The node to remove.</param>
            <returns>true, if remove child.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.RemoveAllChildren">
            <summary>
            Removes all child nodes from the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.CheckConstrainingRegion(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Tests to see if the given node falls within the constraining region
            of the composite node.
            </summary>
            <param name="node">Node to test.</param>
            <returns>
            True if node falls within the constraining region; False if it does
            not.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
            Returns all children that are intersected by the given point.
            </summary>
            <param name="childNodes">Collection in which to add the children hit by the given point.</param>
            <param name="ptModel">Point to test.</param>
            <returns>
            The number of child nodes that intersect the given point.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children that intersect the given rectangle.
            </summary>
            <param name="childNodes">Collection in which to add the children hit by the given point.</param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>
            The number of child nodes that intersect the given rectangle.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetChildrenContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
            Returns all children inside the given rectangle.
            </summary>
            <param name="childNodes">Collection in which to add the children inside the specified rectangle.</param>
            <param name="rcModel">Rectangle to test.</param>
            <returns>
            The number of child nodes added to the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.UpdateCompositeBounds">
            <summary>
            Update bounds size to content size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.GetZOrder(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Returns the Z-order value of the given node.
            </summary>
            <param name="node">Node to get Z-order for.</param>
            <returns>
            Zero-based Z-order value of the node or -1 if the node
            does not exist.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SetZOrder(Syncfusion.Windows.Forms.Diagram.Node,System.Int32)">
            <summary>
            Sets the Z-order of the given node.
            </summary>
            <param name="node">Node to set Z-order for.</param>
            <param name="zOrder">Zero-based Z-order value.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.BringForward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Moves the specified node forward in the Z-order.
            </summary>
            <param name="node">Node to move forward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SendBackward(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node back in the Z-order.
            </summary>
            <param name="node">Node to move backward.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.BringToFront(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Brings the specified node to the front of the Z-order.
            </summary>
            <param name="node">Node to bring to the front.</param>
            <returns>Previous Z-order position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SendToBack(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Sends the specified node to the back of the Z-order.
            </summary>
            <param name="node">Node to send to the back.</param>
            <returns>
            Previous Z-order position.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SwapZOrder(System.Int32,System.Int32)">
            <summary>
            Swappin the ZOrder 
            </summary>
            <param name="prevIndex"> current index the of the current node </param>
            <param name="newIndex"> new index of the current node </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Group.SetToNewZOrder(System.Int32,System.Int32)">
            <summary>
            Swappin the ZOrder 
            </summary>
            <param name="curIndex"> current index the of the current node </param>
            <param name="newZorder"> new index of the current node </param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.GroupNodePosition">
            <summary>
            Gets or sets the child nodes position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Labels">
            <summary>
            Gets the collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> items.
            </summary>
            <value>
            The collection of <see cref="T:Syncfusion.Windows.Forms.Diagram.Label"/> items.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Visible">
            <summary>
            Gets or sets node's visibility.
            </summary>
            <value>
            Set to <c>true</c> to draw node and handles, otherwise - <c>false</c>.
            </value>
            <remarks>
            This flag can be changed to True only is one of its owner layer are visible.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.LogicalGraphicsPath">
            <summary>
            Get's node logical GraphicsPath without scale transformations.
            </summary>
            <value>The logical graphics path.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.DrawPorts">
            <summary>
            Gets or sets a value indicating whether ports is drawed.
            </summary>
            <value><c>true</c> if ports is draw; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.ChildCount">
            <summary>
            Gets the number of child nodes contained by this group.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.CanUngroup">
            <summary>
            Gets or sets a value indicating whether composite node can be ungrouped.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.LockUpdate">
            <summary>
            Gets or sets a value indicating whether update is locked.
            </summary>
            <value><c>true</c> if update is locked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.Nodes">
            <summary>
            Gets the group children collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.NameTable">
            <summary>
            Gets names hash where key - node name, value - available node index.
            Using for generate unique name with indexing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Group.ZOrderDepth">
            <summary>
            Gets number of items in the Z-order for this container.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BezierCurve">
            <summary>
            Line node shape with two additional controlPoints to change line flexure.
            Can be used as connector.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.#ctor(Syncfusion.Windows.Forms.Diagram.BezierCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BezierCurve"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BezierCurve"/> class.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BezierCurve"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BezierCurve"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptCtrStart">The first control point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="ptCtrlEnd">The second control point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BezierCurve"/> class.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.GetPathPoints">
            <summary>
            Gets the path points.
            </summary>
            <returns>The path points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CanEditSegment">
            <summary>
            Determines whether this node can edit segment.
            </summary>
            <returns>
            <c>true</c> if this node can edit segment; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex point.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CanDrawControlPoints">
            <summary>
            Determines whether this instance can draw control points.
            </summary>
            <returns>
            <c>true</c> if this instance can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.DrawControlPoints(System.Drawing.Graphics)">
            <summary>
            Draws the control points.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path form points.
            </summary>
            <param name="pts">The points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Create the logical graphics path.
            </summary>
            <param name="pts">The path points.</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the Pin position, pin offset and size from new bounds rectangle.
            </summary>
            <param name="rcBounds">New bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.InitializeBezier(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes the bezier.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.InitializeBezier(System.Drawing.PointF[])">
            <summary>
            Initializes the bezier.
            </summary>
            <param name="pts">The points collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BezierCurve.SetContolPoints(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Sets the control points.
            </summary>
            <param name="ptFirstPoint">The first point.</param>
            <param name="ptSecondPoint">The second point.</param>
            <param name="startIndex">Index starting at which ControlPoints will be inserted.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector">
            <summary>
            Connector that draws as a poly line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector"/> class.
            </summary>
            <param name="ptStart">The pt start.</param>
            <param name="ptEnd">The pt end.</param>
            <param name="measureUnits">The measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector"/> class.
            </summary>
            <param name="pts">The points collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.#ctor(Syncfusion.Windows.Forms.Diagram.PolyLineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PolyLineConnector"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.ShowResizeHandles">
            <summary>
            Indicate that selection and resize handles will draw on diagram canvas.
            </summary>
            <returns>
            <c>True</c> if node can be resized, otherwise - <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.UpdateBoundsInfo(System.Drawing.RectangleF)">
            <summary>
            Updates the Pin position, pin offset and size from new bounds rectangle.
            </summary>
            <param name="rcBounds">The bounds rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.MoveConnectedSegments">
            <summary>
            Gets or sets a value indicating whether connected segments are movable.
            </summary>       
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PolyLineConnector.CurveRadius">
            <summary>
            Gets or sets the radius of the curve.
            </summary>       
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector">
            <summary>
            OrgLine connector is used to create Org chart diagram connector.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.m_UpdateVertDistRelated">
            <summary>
            To prevent the unneccessary update while changing the vertical distance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.m_VerticalDistChanged">
            <summary>
            Switch ON/OFF while changing vertical distance value 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="units">The units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
            <param name="edge">true if the edge should be round; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Boolean,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="ptStart">The tail end point location.</param>
            <param name="ptEnd">The head end point location.</param>
            <param name="edge">true if the edge should be round; otherwise, false.</param>
            <param name="curveRadius">Radius of the curve.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(Syncfusion.Windows.Forms.Diagram.OrgLineConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OrgLineConnector"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.Clone">
            <summary>
            Clones this OrgLineConnector instance
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.CanMoveHandle(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.PointF)">
            <summary>
            Determines whether this node allow move it handle.
            </summary>
            <param name="handle">The handle to move.</param>
            <param name="ptNewLocation">The new endpoint location to check.</param>
            <returns>
            <c>true</c> if this node allow move it handle; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">The old size.</param>
            <param name="szNewSize">The new size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs pin offset related actions.
            </summary>
            <param name="szOldPinOffset">Old pin offset</param>
            <param name="szNewPinOffset">New pin offset</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.DoHandleMoveRelated(Syncfusion.Windows.Forms.Diagram.IHandle,System.Drawing.SizeF)">
            <summary>
            Does the handle move related. It will calculate path points between tail and head endpoint
            </summary>
            <param name="handleMoved">The handle moved.</param>
            <param name="szOffset">The size offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.IsTailConnected">
            <summary>
            Determines whether TailEndPoints is connected
            </summary>
            <returns>
            true - if TailEndPoints is connected otherwise - false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.IsHeadConnected">
            <summary>
            Determines whether HeadEndPoints is connected
            </summary>
            <returns>
            true - if HeadEndPoints is connected otherwise - false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Set only to the created path points.
            </summary>
            <param name="ptsPath">No of path points</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Add the values to the serialization.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.UpdateSegments">
            <summary>
            Updates connector's segments.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If handles count less that pathPoints count.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.ValidateOffset(System.Int32,System.Drawing.SizeF@)">
            <summary>
            Validates the offset.
            </summary>
            <param name="lineSegmentIndex">Index of the line segment.</param>
            <param name="szOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.FinishSetPoints">
            <summary>
            Finishes the set points operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.SyncEndPointsWithPort">
            <summary>
            Synchronize head and tail end points with port if need.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.MergeControlPoints">
            <summary>
            Merges the control points placed in line.
            </summary>
            <remarks>
            Used with handle moving.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.MergeControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Merges the control points placed in line.
            </summary>
            <param name="ptsNew">New points</param>
            <remarks>
            Used with line segment move.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.InitializeOrgLine(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes the orthogonal.
            </summary>
            <param name="ptStart">The start point location.</param>
            <param name="ptEnd">The end point location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.SyncEndPointSegments">
            <summary>
            Synchronize end point segments.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.SyncSegments(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            Synchronized realted sement with moved handle.
            </summary>
            <param name="handleMoved">Moved handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.UpdateConnector(Syncfusion.Windows.Forms.Diagram.IHandle)">
            <summary>
            updates the connector's control points
            </summary>
            <param name="handleMoved">Handle moved</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.CanMergeControlPoints(System.Int32,System.Int32,System.Drawing.PointF[])">
            <summary>
            Determines whether connector can merge control points by specified position.
            </summary>
            <param name="nIndex">Index of the path point.</param>
            <param name="nLength">Length of the path points.</param>
            <param name="ptsPath">The array of points.</param>
            <returns>
            <c>true</c> if this connector can merge control points by specified position; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.FilterControlPoints(System.Drawing.PointF[]@)">
            <summary>
            Filters the unwanted control points
            </summary>
            <param name="ptsPath">path points</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.GetValidCtrlPtsID(System.Int32)">
            <summary>
            Gets the ids of the valid control points
            </summary>
            <param name="nNewPathPtsCount">Path point length</param>
            <returns>Array of ids of the control point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.GetOrientationOffset(System.Drawing.SizeF,System.Int32)">
            <summary>
            Gets the orientation offset.
            </summary>
            <param name="szOffset">The offset size.</param>
            <param name="segIndex">Index of the segment.</param>
            <returns>Offset size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.MergeSegements">
            <summary>
            Updates the looping segments of the connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.MergeSegments">
            <summary>
            Updates the looping segments of the connector 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.GetFirstSegmentOrientation(System.Drawing.PointF[])">
            <summary>
            Get the first segment orientation in points array.
            </summary>
            <param name="ptsPoints">The array of points.</param>
            <returns>Orientation of first segment in points array.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.InitControlPoints(System.Drawing.PointF[])">
            <summary>
            Updates the control points.
            </summary>
            <param name="ptsPoints">The array of points.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.VerticalDistance">
            <summary>
            Gets or sets the vertical distance of this connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.VerticalDistanceEnabled">
            <summary>
            Gets or sets a value indicating whether the user to set heading distance of the connector.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.OrgRotationEnabled">
            <summary>
            Gets or sets a value indicating whether the organization chart rotation property enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OrgLineConnector.CurveRadius">
            <summary>
            Gets or sets the radius of the curve.
            </summary>       
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ConnectorState">
            <summary>
            Flags that indicates state of connection.
            </summary>
            <remarks>
            Primarily used by tools to indicate whether cloned orthogonal node
            can merge its control points and whether its endPoints are connected.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorState.Default">
            <summary>
            Indicates the default behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorState.MergeControlPoints">
            <summary>
            Indicates whether control points will be merged if they can.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorState.HeadEndPointConnected">
            <summary>
            Indicates whether HeadEndPoint is connected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ConnectorState.TailEndPointConnected">
            <summary>
            Indicates whether TailEndPoint is connected.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BridgeStyle">
            <summary>
            Bridge styles to render.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Arc">
            <summary>
            Draw arc.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Gap">
            <summary>
            Not render.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Square">
            <summary>
            Draw square.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides2">
            <summary>
            Draw two lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides3">
            <summary>
            Draw tree lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides4">
            <summary>
            Draw four lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides5">
            <summary>
            Draw five lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides6">
            <summary>
            Draw six lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BridgeStyle.Sides7">
            <summary>
            Draw seven lines.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CurveNode">
            <summary>
            Node that is rendered as a curve.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.#ctor(Syncfusion.Windows.Forms.Diagram.CurveNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CurveNode"/> class.
            </summary>
            <param name="src">The curve node source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CurveNode"/> class.
            </summary>
            <param name="pts">The points collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CurveNode"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.ShowResizeHandles">
            <summary>
            Indicate that selection and resize handles will draw on diagram canvas.
            </summary>
            <returns><c>True</c> if node can be resized, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.CanEditSegment">
            <summary>
            Determines whether this node can edit segments.
            </summary>
            <returns>
            <c>true</c> if this node can edit segments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.CanEditVertexPoint">
            <summary>
            Determines whether this node can edit vertex points.
            </summary>
            <returns>
            <c>true</c> if this node can edit vertex point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.CanEditControlPoint">
            <summary>
            Determines whether this node can edit control points.
            </summary>
            <returns>
            <c>true</c> if this node can edit control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.CanDrawControlPoints">
            <summary>
            Determines whether this instance can draw control points.
            </summary>
            <returns>
            <c>true</c> if this instance can draw control points; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.GetPoints">
            <summary>
            Returns an array containing all vertices belonging to this shape.
            </summary>
            <returns>Array of points in local coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.GetNewPathBounds(System.Drawing.PointF[])">
            <summary>
            Gets the new path points bounds.
            </summary>
            <param name="pathPoints">The path points.</param>
            <returns>
            The <see cref="T:System.Drawing.RectangleF"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.GetPathPoints">
            <summary>
            Retrieves array of points needed to construct node's GraphicsPath.
            </summary>
            <returns>The path points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.UpdateGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Updates the graphics path.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.SetPointsInternal(System.Drawing.PointF[])">
            <summary>
            Sets the points internal.
            </summary>
            <param name="ptsPath">The new path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CurveNode.InitializeCurve(System.Drawing.PointF[])">
            <summary>
            Initializes the curve.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureLine">
            <summary>
            Implement base line node object with display distance between two endpoint.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureLine"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureLine"/> class.
            </summary>
            <param name="pts">The array of points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureLine"/> class.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.#ctor(Syncfusion.Windows.Forms.Diagram.MeasureLine)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureLine"/> class.
            </summary>
            <param name="src">The LineNode instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureLine"/> class.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rect.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.DrawPath(System.Drawing.Graphics)">
            <summary>
            Draws the path to specified graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization Info.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureLine.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureLine.MeasureUnits">
            <summary>
            Gets or sets the measure units.
            </summary>
            <value>The measure units.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PseudoGroup">
            <summary>
            PseudoGroup is a logical container for selection list nodes,
            its children are not positioned relative to it.
            It is used to improve selection list handles render speed.
            To enable this feature You should set View.EnableSelectionListSubstitute flag to true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PseudoGroup.m_szOldPinOffset">
            <summary>
            Pervious PinOffset value.
            Used to calc correct child nodes position after Pin relocation.
            OldPinOffset updated on resize is not valid!
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.#ctor(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PseudoGroup"/> class.
            </summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.#ctor(Syncfusion.Windows.Forms.Diagram.PseudoGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PseudoGroup"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.UpdateChildrenParents">
            <summary>
            Updates the children parents.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.DoPinOffsetRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on pin offset value changed.
            </summary>
            <param name="szOldPinOffset">The old pin offset value.</param>
            <param name="szNewPinOffset">The new pin offset value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.RenderCachedImage(System.Drawing.Graphics)">
            <summary>
            Renders the cached image.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.ChangeRotationBy(System.Single)">
            <summary>
            Called after change the rotation by give angle.
            </summary>
            <param name="fRotationChange">The rotation angle offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.PrepareGraphics(System.Drawing.Graphics)">
            <summary>
            Prepares the graphics to draw.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.DoMoveRelatedActions(System.Single,System.Single)">
            <summary>
            Performs additional changes on pin position changed.
            </summary>
            <param name="fX">The pin offset by x axis.</param>
            <param name="fY">The pin offset by y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.SetPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Set the pin point position.
            </summary>
            <param name="ptValue">The pin position.</param>
            <param name="unit">The measure unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Used to update child nodes sizes.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.UpdateBoundingRectangle">
            <summary>
            Updates the bounding rectangle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.ChangeFlipX(System.Boolean)">
            <summary>
            Called after changing the flipX value.
            </summary>
            <param name="value">New flip x value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.ChangeFlipY(System.Boolean)">
            <summary>
            Called after changing the flipY value.
            </summary>
            <param name="value">New flip y value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.RenderChildren(System.Drawing.Graphics)">
            <summary>
            Renders the children.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.GetBoundingRect(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the bounding rect in local coordinates.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The bounding rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.UpdateRefreshRect">
            <summary>
            Updates node's refresh rect
            </summary>
            <remarks>
            Uncludes all contiguous data like ports, labels etc.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.Refresh">
            <summary>
            Refresh the instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.NeedFlipRotateAngle(System.Boolean,System.Boolean)">
            <summary>
            Check if rotation angle must be invert.
            </summary>
            <param name="bFlipX">FlipX value container.</param>
            <param name="bFlipY">FlipY value container.</param>
            <returns>If <b>true</b> - rotation angle must be negative value, elsewere - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PseudoGroup.UpdateNodeLocation(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Updates the node location.
            </summary>
            <param name="nodeCur">The node cur.</param>
            <param name="composite">The node composite.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlNode">
            <summary>
            This node can be used to host any .NET control inside it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_ctrlSnapshot">
            <summary>
            Snapshot of hosting control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_styleActivate">
            <summary>
            Node activate styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_ctrlHosting">
            <summary>
            Control Host.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_ctrlHCParent">
            <summary>
            Hosting control parent.Needed when Hosting control is activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_bActive">
            <summary>
            Indicates whether Node is activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ControlNode.m_hashHCP">
            <summary>
            Hash for helper properties.
            Hosting Control Properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Windows.Forms.Control,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
            <param name="ctrlHosting">The CTRL hosting.</param>
            <param name="rectBounds">The rect bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Windows.Forms.Control,System.Drawing.RectangleF,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
            <param name="ctrlHosting">The CTRL hosting.</param>
            <param name="rectBounds">The rect bounds.</param>
            <param name="bKeepControlSize">Keep the control size as control's image size.</param>
            <param name="bExcludeOptimizeContentWithOverlay">Exclude the rendering of the control node from the background when OptimizeContentWithOverlay is true.</param>
            <Remarks> The param bExcludeOptimizeContentWithOverlay is only applicable for DiagramWebControl. </Remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Windows.Forms.Control,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
            <param name="ctrlHosting">The CTRL hosting.</param>
            <param name="rectBounds">The rect bounds.</param>
            <param name="measureUnits">The measure units.</param>
            <param name="bKeepControlSize">Keep the control size as control's image size.</param>
            <param name="bExcludeOptimizeContentWithOverlay">Exclude the rendering of the control node from the background when OptimizeContentWithOverlay is true.</param>
            <Remarks> The param bExcludeOptimizeContentWithOverlay is only applicable for DiagramWebControl. </Remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(Syncfusion.Windows.Forms.Diagram.ControlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Activate(System.Drawing.PointF)">
            <summary>
            Activate ControlNode.
            </summary>
            <param name="ptHCLocation">Hosting control location in client coordinates.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Deactivate">
            <summary>
            Deactivates control node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.UpdateControlSnapshot">
            <summary>
            Updates the HostingControl's snapshot.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.SerializeNode">
            <summary>
            Serialize the node
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.DeSerializeNode">
            <summary>
            Deserializes the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.DoSizeRelatedActions(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Performs additional changes on size value changed.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation.
            on given graphics
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlNode.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when property changed.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.KeepControlSize">
            <summary>
            Gets a value indicating whether control size is used to print the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ExcludeOptimizeContentWithOverlay">
            <summary>
            Gets a value indicating whether the rendering of control node is excluded from the background when OptimizedContentWithOverlay is true.
            <Remarks> The ExcludeOptimizeContentWithOverlay is only applicable for DiagramWebControl. </Remarks>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.HCP">
            <summary>
            Gets hashtable for custom controls properties.
            Used during serialization.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Activated">
            <summary>
            Gets a value indicating whether Node is activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.HCParent">
            <summary>
            Gets or sets the host control parent.
            </summary>
            <value>The host control parent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.HostingControl">
            <summary>
            Gets or sets the hosting control.
            </summary>
            <value>The hosting control.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.Snapshot">
            <summary>
            Gets the hosting control snapshot.
            </summary>
            <value>The snapshot.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.ActivateStyle">
            <summary>
            Gets or sets the activate style.
            </summary>
            <value>The activate style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ControlNode.HasSerializedData">
            <summary>
            Check whether the node has serialized data
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Ellipse">
            <summary>
            Implements an ellipse shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="rcBounds">Bounds of ellipse to create.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.PointF[],Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="pts">Control points used to create the ellipse.</param>
            <param name="measureUnits">Specifies points measure units.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="rcBounds">Bounds of ellipse to create.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="pts">Control points used to create the ellipse.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(Syncfusion.Windows.Forms.Diagram.Ellipse)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Ellipse"/> class.
            </summary>
            <param name="info">Deserialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.DrawShading(System.Drawing.Graphics)">
            <summary>
            Draw the shading over node.
            </summary>
            <param name="gfx">The Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Ellipse.InitializeEllipse(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes the ellipse.
            </summary>
            <param name="rectBounds">The rect bounds.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SemiCircle">
            <summary>
            Implements a semi-circle shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.SemiCircle.m_type">
            <summary>
            Semi-cirlce type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="rcBounds">Bounds of semi-circle to create.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Drawing.PointF[],Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="pts">Control points used to create the semi-circle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="rcBounds">Bounds of ellipse to create.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="pts">Control points used to create the semi-circle.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(Syncfusion.Windows.Forms.Diagram.SemiCircle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SemiCircle"/> class.
            </summary>
            <param name="info">Deserialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.DrawShading(System.Drawing.Graphics)">
            <summary>
            Draw the shading over node.
            </summary>
            <param name="gfx">The Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SemiCircle.InitializeSemiCircle(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes the semi-circle.
            </summary>
            <param name="rectBounds">The rect bounds.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.SemiCircle.Type">
            <summary>
            Gets or sets a value to specifies the semi-circle type.
            </summary>        
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BitmapNode">
            <summary>
            Stores and renders a bitmap image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapNode.m_labels">
            <summary>
            Bitmap class member of label collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BitmapNode.m_bitmap">
            <summary>
            Bitmap image reference.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="stream">IO stream containing the bitmap.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="filename">Name of file to load bitmap from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="srcbitmap">The bitmap for the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Drawing.Bitmap,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="src">The bitmap for the node.</param>
            <param name="rcBounds">The node bounds.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Drawing.Bitmap,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="src">The bitmap for the node.</param>
            <param name="rcBounds">The node bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(Syncfusion.Windows.Forms.Diagram.BitmapNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BitmapNode"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.Render(System.Drawing.Graphics)">
            <summary>
            Renders the shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.RenderContiguousData(System.Drawing.Graphics)">
            <summary>
            The methods used to draw contiguous date. Such as labels or ports.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.AccumulateRefreshRect(System.Drawing.RectangleF@)">
            <summary>
            Accumulates the refresh rectangle.
            </summary>
            <param name="rcRefresh">The refresh rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.CloneImage(System.Drawing.Bitmap)">
            <summary>
            Clones the image.
            </summary>
            <param name="src">The original image.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the image border.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.DrawInterior(System.Drawing.Graphics)">
            <summary>
            Draws node's interior on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BitmapNode.InitializeBitmapNode(System.Drawing.Bitmap,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes the bitmap node from bitmap and bounds.
            </summary>
            <param name="bitmap">The bitmap image.</param>
            <param name="rectBounds">The bounds rectangle.</param>
            <param name="measureUnits">The bounds rectangle measure units.</param>
            <exception cref="T:System.ArgumentNullException">When bitmap parameter is null.</exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BitmapNode.Image">
            <summary>
            Gets or sets the <see cref="T:System.Drawing.Image"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CircularArc">
            <summary>
            Implements a circular arc shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CircularArc.m_type">
            <summary>
            Circular arc type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="rcBounds">Bounds of circular arc to create.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="rcBounds">Bounds of circular arc to create.</param>
            <param name="startAngle">Specifies the start angle of the arc</param>
            <param name="sweepAngle">Specifies the sweep angle of the arc</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Drawing.RectangleF,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="rcBounds">Bounds of circular arc to create.</param>
            <param name="startAngle">Specifies the start angle of the arc</param>
            <param name="sweepAngle">Specifies the sweep angle of the arc</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
            <param name="startAngle">Specifies the start angle of the arc</param>
            <param name="sweepAngle">Specifies the sweep angle of the arc</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="x">X-coordinate of bounding rectangle.</param>
            <param name="y">Y-coordinate of bounding rectangle.</param>
            <param name="width">Width of bounding rectangle.</param>
            <param name="height">Height of bounding rectangle.</param>
            <param name="startAngle">Specifies the start angle of the arc</param>
            <param name="sweepAngle">Specifies the sweep angle of the arc</param>
            <param name="measureUnits">Specifies points measure units.</param>        
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(Syncfusion.Windows.Forms.Diagram.CircularArc)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.CircularArc"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Arc"/> class.
            </summary>
            <param name="info">Deserialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.DrawShading(System.Drawing.Graphics)">
            <summary>
            Draw the shading over node.
            </summary>
            <param name="gfx">The Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.Render(System.Drawing.Graphics)">
            <summary>
            Render a circular arc
            </summary>
            <param name="gfx">The Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.CircularArc.InitializeArc(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a circular arc.
            </summary>
            <param name="rectBounds">The rect bounds.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CircularArc.Type">
            <summary>
            Gets or sets a value to specifies the circular arc type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CircularArc.StartAngle">
            <summary>
            Gets or sets a value to circular arc start angle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.CircularArc.SweepAngle">
            <summary>
            Gets or sets a value to circular arc sweep angle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MetafileNode">
            <summary>
            Stores and renders an enhanced metafile image.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="stream">IO stream containing the Metafile.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="filename">Name of file to load Metafile from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Drawing.Imaging.Metafile)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="srcMetafile">Metafile for the node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="src">Metafile for the node.</param>
            <param name="rcBounds">The node bounds.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="src">Metafile for the node.</param>
            <param name="rcBounds">The node bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(Syncfusion.Windows.Forms.Diagram.MetafileNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MetafileNode"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to
            serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the image border.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.DrawInterior(System.Drawing.Graphics)">
            <summary>
            Draws node's interior on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.InitializeMetafileNode(System.Drawing.Imaging.Metafile,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes the metafile node from metafile image and bounds.
            </summary>
            <param name="metafile">The metafile image.</param>
            <param name="rectBounds">The bounds rectangle.</param>
            <param name="measureUnits">The bounds rectangle measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MetafileNode.GetAsByteArray(System.Drawing.Imaging.Metafile)">
            <summary>
            Serialize metafile image to byte array.
            </summary>
            <param name="meta">The metafile image.</param>
            <returns>Metafile byte array.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MetafileNode.Image">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.Metafile"/>.
            </summary>
            <value>The image.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Rectangle">
            <summary>
            Implementation of rectangle shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.PointF[],Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="pts">Points to add to rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="pts">Points to add to rectangle.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(Syncfusion.Windows.Forms.Diagram.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Rectangle"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Rectangle.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RoundRect">
            <summary>
            Implementation of rounded rectangle shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoundRect.c_fCURVE_RADIUS">
            <summary>
            Default value of curve radius.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RoundRect.m_fCurveRadius">
            <summary>
            Curve radius.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Single,System.Single,System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="x">X-coordinate of rectangle.</param>
            <param name="y">Y-coordinate of rectangle.</param>
            <param name="width">Width of rectangle.</param>
            <param name="height">Height of rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.RectangleF,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <param name="measureUnits">Specifies rcBounds measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="rcBounds">The rc bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.RectangleF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="rcBounds">Rectangle containing position and size.</param>
            <param name="fCurveRadius">The curve radius.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="pts">Points specifying rectangle.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.PointF[],Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="pts">Points specifying rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Drawing.PointF[],System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="pts">Points specifying rectangle.</param>
            <param name="fCurveRadius">The curve radius.</param>
            <param name="measureUnits">Specifies points measure units.</param>
            <remarks>
            The array passed in must contain two points that specify a rectangle.
            The first point in the array is the upper-left corner of the rectangle
            and the second point is the lower-right corner of the rectangle.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(Syncfusion.Windows.Forms.Diagram.RoundRect)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="src">Object to copy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RoundRect"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.InitializeRoundRectangle(System.Drawing.RectangleF,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes the round rectangle.
            </summary>
            <param name="rectBounds">The round rectangle bounds .</param>
            <param name="fCurveRadius">The curve radius.</param>
            <param name="measureUnits">Bounding rectangle's measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.CheckValueRadius(System.Single)">
            <summary>
            Checks the value radius.
            </summary>
            <param name="value">The value.</param>
            <returns>true, of value radius check.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>Copy of the object this method is invoked against.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.DrawShading(System.Drawing.Graphics)">
            <summary>
            Draw the shading over node.
            </summary>
            <param name="gfx">The Graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.UpdateGraphicsPath(System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Updates the graphics path and region.
            </summary>
            <param name="szOldSize">Old size value.</param>
            <param name="szNewSize">New size value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RoundRect.CreateLogicalGraphicsPath(System.Drawing.PointF[])">
            <summary>
            Creates node's path with given array of points.
            </summary>
            <param name="pts">Points to create path from.</param>
            <returns>Created GraphicsPath, otherwise null.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RoundRect.CurveRadius">
            <summary>
            Gets or sets percentage of the width and height of the rectangle that is included in the curves.
            </summary>
            <value>The curve radius.</value>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RoundRect.CurveRadiusMode">
            <summary>
            Gets or sets CurverRadiusMode value to update the curveradius of the roundrectangle.
            </summary>
            <value>curve radius updating based the curve radius mode.</value>
            <remarks></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CurveRadiusMode">
            <summary>
            CurveRadius Mode for updating the curve of the RoundRectangle
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RichTextNode">
            <summary>
            Node that renders rich text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(System.String,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/> class.
            </summary>
            <param name="strRTFText">Text value including RTF codes.</param>
            <param name="rectBounds">RichTextNode bounding rectangle.</param>
            <param name="measureUnits">Specifies points measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/> class.
            </summary>
            <param name="strRTFText">The STR RTF text.</param>
            <param name="rectBounds">The rect bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(Syncfusion.Windows.Forms.Diagram.RichTextNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/> class.
            </summary>
            <param name="src">Source object to copy from.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextNode"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.DrawInterior(System.Drawing.Graphics)">
            <summary>
            Draws node's interior on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextNode.RenderRTFToMetafile(System.Drawing.Rectangle)">
            <summary>
            Draw formated text to metafile.
            </summary>
            <param name="rectBmpBounds">Metafile size.</param>
            <returns>RTF To Metafile image.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.Text">
            <summary>
            Gets or sets the value contained by the text object.
            </summary>
            <remarks>
            <para>
            Derived classes override this property in order to supply the
            text value in an implementation specific way.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.RichText">
            <summary>
            Gets or sets rich text include all RTF codes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.TextCase">
            <summary>
            Gets or sets case of text in the RichTextNode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the text object is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.BackgroundColor">
            <summary>
            Gets or sets color used to fill the background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RichTextNode.UseBitmap">
            <summary>
            Gets or sets a value indicating whether to determine rendering mode.
            By default RichTextNode is rendered as EMF.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.anInch">
            <summary>
            Convert the unit used by the .NET framework (1/100 inch) 
            and the unit used by Win32 API calls (twips 1/1440 inch)
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing"/> class.
            </summary>
            <param name="bTransparent">if set to <c>true</c> [b transparent].</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw formatted text to specific graphics.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rcRect">Draw area.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.CHARRANGE.cpMin">
            <summary>
            First character of range (0 for start of doc)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.CHARRANGE.cpMax">
            <summary>
            Last character of range (-1 for end of doc)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.FORMATRANGE.hdc">
            <summary>
            Actual DC to draw on
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.FORMATRANGE.hdcTarget">
            <summary>
            Target DC for determining text formattings
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.FORMATRANGE.rc">
            <summary>
            Region of the DC to draw to (in twips)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.FORMATRANGE.rcPage">
            <summary>
            Region of the whole DC (page size) (in twips)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RichTextBoxDrawing.FORMATRANGE.chrg">
            <summary>
            Range of text to draw (see earlier declaration)
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextNode">
            <summary>
            Base class for text nodes and labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.c_DEFAULT_SIZE">
            <summary>
            Determines the default size of the TextNode when the text is empty.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.m_styleFont">
            <summary>
            Font properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.m_styleFill">
            <summary>
            Fill style used to draw Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextNode.m_styleBackground">
            <summary>
            Fill style used to draw Text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> class.
            </summary>
            <param name="strText">The text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.String,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> class.
            </summary>
            <param name="strText">The text.</param>
            <param name="rectBounds">The rect bounds.</param>
            <param name="measureUnits">The measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.String,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> class.
            </summary>
            <param name="strText">The text.</param>
            <param name="rectBounds">The rect bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(Syncfusion.Windows.Forms.Diagram.TextNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> class.
            </summary>
            <param name="src">The text node source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.TextNode"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.Render(System.Drawing.Graphics)">
            <summary>
            Renders shapes visual representation on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border.
            </summary>
            <param name="gfx">The graphics to draw on.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.DrawInterior(System.Drawing.Graphics)">
            <summary>
            Draws node's interior on given graphics.
            </summary>
            <param name="gfx">Graphics to draw on</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetPropertyContainer(System.String)">
            <summary>
            Gets the property container.
            </summary>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <returns>Property container.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.UpdateReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetStringFormat">
            <summary>
            Creates a StringFormat object that encapsulates the properties of
            the text object.
            </summary>
            <returns>System.Drawing.StringFormat object.</returns>
            <remarks>
            <para>
            The System.Drawing.StringFormat object returned by this method is
            used to draw the text using the System.Drawing.Graphics.DrawString
            method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.SizeToText(System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Adjusts the size of the bounding box to fit the text.
            </summary>
            <param name="grfx">Graphics context used to measure the text.</param>
            <param name="layoutArea">Maximum layout size of the string.</param>
            <returns>New size of the bounding box.</returns>
            <remarks>
            <para>
            Uses the System.Drawing.Graphics.MeasureString method to calculate the
            size of the bounding box based on the font and text value.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.TextNode.SizeToText(System.Drawing.SizeF)">
            <summary>
            Adjusts the size of the bounding box to fit the text.
            </summary>
            <param name="layoutArea">Maximum layout size of the string.</param>
            <returns>New size of the bounding box.</returns>
            <remarks>
            <para>
            Uses the System.Drawing.Graphics.MeasureString method to calculate the
            size of the bounding box based on the font and text value.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.Text">
            <summary>
            Gets or sets the value contained by the text object.
            </summary>
            <remarks>
            <para>
            Derived classes override this property in order to supply the
            text value in an implementation-specific way.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.TextCase">
            <summary>
            Gets or sets case of text in the RichTextNode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.FontColorStyle">
            <summary>
            Gets font color style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.BackgroundStyle">
            <summary>
            Gets text background style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.FontStyle">
            <summary>
            Gets the font used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the text object is Read-only or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
            <remarks>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object. This property
            corresponds to the Alignment property in the System.Drawing.StringFormat
            class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
            <remarks>
            This property is used by the
            <see cref="M:Syncfusion.Windows.Forms.Diagram.TextNode.GetStringFormat"/>
            method to generate a System.Drawing.StringFormat object.  This property
            corresponds to the LineAlignment property in the System.Drawing.StringFormat
            class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.FormatFlags">
            <summary>
            Gets flags used to format the text.
            </summary>
            <remarks>
            <para>
            See System.Drawing.StringFormatFlags for more details.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.WrapText">
            <summary>
            Gets or sets a value indicating whether text should be wrapped when it exceeds the width of
            the bounding box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.DirectionRightToLeft">
            <summary>
            Gets or sets a value indicating whether the text is right to left.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.DirectionVertical">
            <summary>
            Gets or sets a value indicating whether the text is vertical.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.FitBlackBox">
            <summary>
            Gets or sets a value indicating whether no part of any glyph overhangs the bounding rectangle.
            </summary>
            <remarks>
            <para>
            By default some glyphs overhang the rectangle slightly where necessary to
            appear at the edge visually. For example when an italic lowercase letter
            f in a font such as Garamond is aligned at the far left of a rectangle,
            the lower part of the f will reach slightly further left than the left
            edge of the rectangle. Setting this flag will ensure no painting outside
            the rectangle but will cause the aligned edges of adjacent lines of text
            to appear uneven.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.LineLimit">
            <summary>
            Gets or sets a value indicating whether only entire lines are laid out in the formatting rectangle.
            </summary>
            <remarks>
            <para>
            By default, layout continues until the end of the text, or until no
            more lines are visible as a result of clipping, whichever comes first.
            Note that the default settings allow the last line to be partially
            obscured by a formatting rectangle that is not a whole multiple of
            the line height. To ensure that only whole lines are seen, specify
            this value and be careful to provide a formatting rectangle at least
            as tall as the height of one line.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.MeasureTrailingSpaces">
            <summary>
            Gets or sets a value indicating whether space at the end of each line in calculations that measure
            the size of the text.
            </summary>
            <remarks>
            <para>
            By default, the boundary rectangle returned by the MeasureString
            method excludes the space at the end of each line. Set this flag
            to include that space in measurement.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.TextNode.NoClip">
            <summary>
            Gets or sets a value indicating whether overhanging parts of glyphs and unwrapped text reaching outside the
            formatting rectangle are allowed to show.
            </summary>
            <remarks>
            <para>
            By default, all text and glyph parts reaching outside the formatting
            rectangle are clipped.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ActivateStyle">
            <summary>
            Specifies an activation style for the <see cref="T:Syncfusion.Windows.Forms.Diagram.ControlNode"/> node type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.None">
            <summary>
            Specifies that the Control will not be activated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.Click">
            <summary>
            Specifies that clicking a ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.SelectedClick">
            <summary>
            Specifies that clicking a selected ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.DoubleClick">
            <summary>
            Specifies that double clicking a ControlNode will activate the Control hosted in it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ActivateStyle.ClickPassThrough">
            <summary>
            Specifies that clicking a ControlNode will activate the child Control and pass the click event to it. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PrintZoom">
            <summary>
            The PrintZoom class encapsulates the zoom settings used by the diagram for print and print preview.
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.View.PrintZoom"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PrintZoom.m_bUsePrintZoom">
            <summary>
             Print zooming or fit to page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PrintZoom.m_nSheetsAcross">
            <summary>
            Number of sheets to fit across.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PrintZoom.m_nSheetsDown">
            <summary>
            Number of sheets to fit down.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PrintZoom.m_nPrintZooming">
            <summary>
            Print zooming.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PrintZoom.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PrintZoom.UsePrintingZoom">
            <summary>
            Gets or sets a value indicating whether zoom should be enabled for print and printpreview. Default is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PrintZoom.PrintingZoom">
            <summary>
            Gets or sets a value indicating the zoom ratio. Values range from 0 to 100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PrintZoom.SheetsAcross">
            <summary>
            Gets or sets the number of horizontal pages to fit the print data into.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PrintZoom.SheetsDown">
            <summary>
            Gets or sets the number of vertical pages to fit the print data into.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument">
            <summary>
            Print document object for a diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.#ctor(Syncfusion.Windows.Forms.Diagram.IPrint)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument"/> class.
            </summary>
            <param name="printObj">An object implementing the <see cref="T:Syncfusion.Windows.Forms.Diagram.IPrint"/> interface. This is usually the diagram's model component.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)"/>.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)"/>.
            </summary>
            <param name="evtArgs">The <see cref="T:System.Drawing.Printing.PrintPageEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnQueryPageSettings(System.Drawing.Printing.QueryPageSettingsEventArgs)"/>.
            </summary>
            <param name="evtArgs">The <see cref="T:System.Drawing.Printing.QueryPageSettingsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramPrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Drawing.Printing.PrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)"/>.
            </summary>
            <param name="evtArgs">The <see cref="T:System.Drawing.Printing.PrintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ImageLayout">
            <summary>
            Specifies the layout used for drawing the header/footer image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageLayout.Tile">
            <summary>
            Specifies that the image will be tiled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageLayout.Center">
            <summary>
            Specifies that the image will be centered.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageLayout.Stretch">
            <summary>
            Specifies that the image will be stretched.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageLayout.AlignLeft">
            <summary>
            Specifies that the image will be aligned along the left edge.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ImageLayout.AlignRight">
            <summary>
            Specifies that the image will be aligned along the right edge.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooter">
            <summary>
            Specifies the alignment used for drawing the header/footer text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooter.Left">
            <summary>
            Specifies that the text will be aligned along the left edge.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooter.Center">
            <summary>
            Specifies that the text will be centered.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooter.Right">
            <summary>
            Specifies that the text will be aligned along the right edge.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontInfo">
            <summary>
            Serializable class for working around Font serialization bug with SoapFormatter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FontInfo.family">
            <summary>
            Font family
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FontInfo.size">
            <summary>
            Size of the font.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FontInfo.style">
            <summary>
            Style of the font.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontInfo.#ctor(System.String,System.Single,System.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FontInfo"/> class.
            </summary>
            <param name="family">The family.</param>
            <param name="size">The font size.</param>
            <param name="style">The font style.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HFPosition">
            <summary>
            The HFPosition class is used by the Essential Diagram printing system to specify the bounds used for 
            drawing the header/footer.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase"/>
            <seealso cref="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Bounds"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HFPosition"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HFPosition"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.ShouldSerializeWidth">
            <summary>
            Check if should to serialize the width.
            </summary>
            <returns>true, if serialize width.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.ResetWidth">
            <summary>
            Resets the width.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPosition.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.PageWidth">
            <summary>
            Gets or sets the width of the page.
            </summary>
            <value>The width of the page.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.RealWidth">
            <summary>
            Gets or sets the width of the real.
            </summary>
            <value>The width of the real.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.RealHeight">
            <summary>
            Gets or sets the height of the real.
            </summary>
            <value>The height of the real.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.Height">
            <summary>
            Gets or sets the header/footer height(In Hundreds of Inches).
            </summary>
            <remarks>
            Applies only when the <see cref="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.AutoBounds"/> property is False.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.Width">
            <summary>
            Gets or sets the header or footer width(In Hundreds of Inches).
            </summary>
            <remarks>
            Applies only when the <see cref="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.AutoBounds"/> property is False.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.XLocation">
            <summary>
            Gets or sets the X location.
            </summary>
            <value>The X location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.YLocation">
            <summary>
            Gets or sets the Y location.
            </summary>
            <value>The Y location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.LeftMargin">
            <summary>
            Gets or sets the left margin.
            </summary>
            <value>The left margin.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HFPosition.RightMargin">
            <summary>
            Gets or sets the right margin.
            </summary>
            <value>The right margin.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase">
            <summary>
            The HeaderFooterBase class implements the base functionality for the header and footer classes used by 
            the Essential Diagram printing system.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Header"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Footer"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase"/> class.
            </summary>
            <param name="info">Serialization state information.</param>
            <param name="context">Streaming context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.SafelyGetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>
            Get value from serialization info without exceptions.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="name">The string.</param>
            <param name="type">The type.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeImagePath">
            <summary>
            Serialize the image path.
            </summary>
            <returns>true, if serialize image path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetImagePath">
            <summary>
            Resets the image path.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeLeft">
            <summary>
            Check if should the serialize left header or footer descriptor.
            </summary>
            <returns>true, if serialize left</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetLeft">
            <summary>
            Reset the left header/footer descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeCenter">
            <summary>
            Check if should the serialize center header or footer descriptor.
            </summary>
            <returns>true, if serialize center.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetCenter">
            <summary>
            Reset the center header or footer descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeRight">
            <summary>
            Serialize the right header and footer descriptor.
            </summary>
            <returns>true, if serialize right.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetRight">
            <summary>
            Resets the right header/footer descriptor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeFont">
            <summary>
            Serialize the description font.
            </summary>
            <returns>true, if serialize font.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetFont">
            <summary>
            Resets the descriptionfont.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeForeColor">
            <summary>
            Check if should serialize the description fore color.
            </summary>
            <returns>true, if serialize forecolor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetForeColor">
            <summary>
            Resets the description fore color .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ShouldSerializeBorderStyle">
            <summary>
            Check if should to serialize border style.
            </summary>
            <returns>true, if serialize border style.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ResetBorderStyle">
            <summary>
            Reset the border style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.GetHeight(System.Drawing.Graphics,System.Single,System.Single,System.Drawing.RectangleF)">
            <summary>
            Gets the height.
            </summary>
            <param name="g">The graphics.</param>
            <param name="pagewidth">The pagewidth.</param>
            <param name="pageheight">The pageheight.</param>
            <param name="marginBounds">The margin bounds.</param>
            <returns>The height.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.MeasureString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Single,System.Single@)">
            <summary>
            Measures the string.
            </summary>
            <param name="g">The g.</param>
            <param name="str">The STR.</param>
            <param name="font">The font.</param>
            <param name="width">The width.</param>
            <param name="highest">The highest.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.GetDefaultValue(System.String)">
            <summary>
            Gets the default value.
            </summary>
            <param name="name">The name.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ImagePath">
            <summary>
            Gets or sets the file path of the background image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Image">
            <summary>
            Gets or sets the image to set as background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ImageLayout">
            <summary>
            Gets or sets a <see cref="T:Syncfusion.Windows.Forms.Diagram.ImageLayout"/> value describing the image layout.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.AutoBounds">
            <summary>
            Gets or sets a value indicating whether auto layout calculation is enabled for the header and footer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ComposedLeft">
            <summary>
            Gets the header/footer left output text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ComposedCenter">
            <summary>
            Gets the header/footer center output text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ComposedRight">
            <summary>
            Gets the header/footer right output text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Left">
            <summary>
            Gets or sets text describing the left header or footer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Center">
            <summary>
            Gets or sets text describing the center header/footer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Right">
            <summary>
            Gets or sets text describing the right header or footer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Font">
            <summary>
            Gets or sets the font used to draw the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.ForeColor">
            <summary>
            Gets or sets the color value used for the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Visible">
            <summary>
            Gets or sets a value indicating whether the header or footer is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Culture">
            <summary>
            Gets or sets the description culture.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.BorderStyle">
            <summary>
            Gets style options for drawing the header/footer border.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.CurrentPage">
            <summary>
            Gets or sets the current page number. Used during printing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.TotalPages">
            <summary>
            Gets or sets the total number of pages. Used during printing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.MarginLeft">
            <summary>
            Gets or sets the position of the left margin.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.MarginRight">
            <summary>
            Gets or sets the position of the right margin.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase.Bounds">
            <summary>
            Gets a <see cref="T:Syncfusion.Windows.Forms.Diagram.HFPosition"/> value describing the header or footer bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Header">
            <summary>
            Implements the header class used by the Essential Diagram printing system.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Footer"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Header.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Header"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Header.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Header"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Header.GetHeight(System.Drawing.Graphics,System.Single,System.Single,System.Drawing.RectangleF)">
            <summary>
            Gets the height.
            </summary>
            <param name="g">The graphics.</param>
            <param name="pagewidth">The pagewidth.</param>
            <param name="pageheight">The pageheight.</param>
            <param name="marginBounds">The margin bounds.</param>
            <returns>The height.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Footer">
            <summary>
            Implements the footer class used by the Essential Diagram printing system.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBase"/>
            <see cref="T:Syncfusion.Windows.Forms.Diagram.Header"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Footer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Footer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Footer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Footer"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Footer.GetHeight(System.Drawing.Graphics,System.Single,System.Single,System.Drawing.RectangleF)">
            <summary>
            Gets the height.
            </summary>
            <param name="g">The graphics to draw.</param>
            <param name="pagewidth">The pagewidth.</param>
            <param name="pageheight">The pageheight.</param>
            <param name="marginBounds">The margin bounds.</param>
            <returns>The height.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder">
            <summary>
            Encapsulates the header/footer border properties.
            </summary>
            <remarks>
            Contains properties needed to specify the border drawing for the diagram headers and footers.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Empty">
            <summary>
            An empty <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.#ctor(System.Drawing.Drawing2D.DashStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> class.
            </summary>
            <param name="style">The line style to be be applied to the border.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.#ctor(System.Drawing.Drawing2D.DashStyle,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> class.
            </summary>
            <param name="style">A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> to be be applied to the specific border.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> specifying the color of the border.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.#ctor(System.Drawing.Drawing2D.DashStyle,System.Drawing.Color,Syncfusion.Windows.Forms.Diagram.BorderWeight)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> class.
            </summary>
            <param name="style">A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> to be be applied to the specific border.</param>
            <param name="color">A <see cref="T:System.Drawing.Color"/> specifying the color of the border.</param>
            <param name="weight">A <see cref="T:Syncfusion.Windows.Forms.Diagram.BorderWeight"/> specifying the thickness of the border.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/>.
            </summary>
            <param name="info">A SerializationInfo object containing the information required to serialize the object.</param>
            <param name="context">A StreamingContext object containing the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Equals(System.Object)">
            <summary>
            Equals the specified object.
            </summary>
            <param name="o">The object.</param>
            <returns>true, if equal.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.op_Equality(Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder,Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The first header.</param>
            <param name="rhs">The second header.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.op_Inequality(Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder,Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The first header.</param>
            <param name="rhs">The right header.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Compare(Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder,Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder)">
            <summary>
            Compares the specified two instance HeaderFooter borders.
            </summary>
            <param name="lhs">The first header.</param>
            <param name="rhs">The second header.</param>
            <returns>true, if equal.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.MakeBlackAndWhite">
            <summary>
            Returns a copy of this border object replacing the color with <see cref="P:System.Drawing.Color.Black"/>.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> with black color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.CreatePen">
            <summary>
            Creates the pen used for drawing the border.
            </summary>
            <returns>System.Drawing.Pen object matching the border style.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Clone">
            <summary>
            Creates a shallow copy of the HeeaderFooterBorder object.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Style">
            <summary>
            Gets or sets the type of line used for drawing the border. 
            </summary>
            <value>
            A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Weight">
            <summary>
            Gets or sets the thickness of the line used for drawing the border.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Diagram.BorderWeight"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Width">
            <summary>
            Gets the width in pixels for the border line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.Color">
            <summary>
            Gets or sets the color of the line used for drawing the border.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder.ShowBorder">
            <summary>
            Gets or sets a value indicating whether the border will be displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData">
            <summary>
            The HeaderFooterData class encapsulates the header and footer settings for the diagram. Used by the <see cref="T:Syncfusion.Windows.Forms.Diagram.Model"/> class 
            for configuring the header and footer when printing the diagram.
            <see cref="P:Syncfusion.Windows.Forms.Diagram.Model.HeaderFooterData"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.m_header">
            <summary>
            Header class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.m_footer">
            <summary>
            Footer class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.m_culture">
            <summary>
            Culture info for header and footer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.#ctor(Syncfusion.Windows.Forms.Diagram.HeaderFooterData)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/> class.
            </summary>
            <param name="dpd">The source <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterData"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.ShouldSerializeCulture">
            <summary>
            Check if should to serialize culture.
            </summary>
            <returns>true, if serialize culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.ResetCulture">
            <summary>
            Resets the culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.InitializeHeaderFooterBounds(System.Drawing.Printing.PaperSize,System.Drawing.Printing.Margins)">
            <summary>
            Initializes the header and footer layout using the specified paper size and page margins.
            </summary>
            <param name="papersize">A <see cref="T:System.Drawing.Printing.PaperSize"/> value.</param>
            <param name="pagemargins">A <see cref="T:System.Drawing.Printing.Margins"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.InitializeHeaderFooterBounds(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes the header and footer using the paper size and margins specified by the PageSettings value.
            </summary>
            <param name="pagesettings">A <see cref="T:System.Drawing.Printing.PageSettings"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.Header">
            <summary>
            Gets or sets the diagram <see cref="T:Syncfusion.Windows.Forms.Diagram.Header"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.Footer">
            <summary>
            Gets or sets the diagram print <see cref="T:Syncfusion.Windows.Forms.Diagram.Footer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.Culture">
            <summary>
            Gets or sets the culture information for the header and footer data.
            </summary>
            <value>The culture.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HeaderFooterData.DefaultPaperSize">
            <summary>
            Gets the size of the default paper.
            </summary>
            <value>The size of the default paper.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources">
            <summary>
            Provides access to Essential Diagram resources.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings">
            <summary>
            Provides access to resource strings.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.PropertyNames">
            <summary>
            Provides access to PropertyNames strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.PropertyNames.Get(System.String)">
            <summary>
            Gets the specified property name ID.
            </summary>
            <param name="propertyNameID">The property name ID.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Toolnames">
            <summary>
            Provides access to Toolname strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Toolnames.Get(System.String)">
            <summary>
            Returns a toolname based on a resource ID.
            </summary>
            <param name="toolResID">Resource ID of the tool</param>
            <returns>Toolname string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.ObjectName">
            <summary>
            Provides access to object name strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.ObjectName.Get(System.String)">
            <summary>
            Returns an object name string based on a resource ID.
            </summary>
            <param name="objNameResID">Resource ID of the object name</param>
            <returns>Object name string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.CommandDescriptions">
            <summary>
            Provides access to command description strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.CommandDescriptions.Get(System.String)">
            <summary>
            Returns a command description given the name of a command.
            </summary>
            <param name="cmdName">Name of the command to return description for</param>
            <returns>String description of a command</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Messages">
            <summary>
            Provides access to message strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Messages.Get(System.String)">
            <summary>
            Returns a message given an ID.
            </summary>
            <param name="msgID">ID of the message to return</param>
            <returns>Message string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Captions">
            <summary>
            Provides access to caption strings in the resource file.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Strings.Captions.Get(System.String)">
            <summary>
            Returns a caption given an ID.
            </summary>
            <param name="captionID">ID of the caption to return</param>
            <returns>Message string</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Cursors">
            <summary>
            Provides access to cursors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.cursorNS">
            <summary>
            Path to assembly resources.
            </summary>
            <remarks>
            Can't be set as [ThreadStaticAttribute]. Please refer to MSDN
            "ThreadStaticAttribute Class" page at Remarks->Note.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.GetCursor(System.String)">
            <summary>
            Returns the cursor matching the name passed in.
            </summary>
            <param name="cursorName">Name of cursor to return</param>
            <returns>Cursor object</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.PanReady">
            <summary>
            Returns the Pan ready cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Panning">
            <summary>
            Returns the Panning cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Zoom">
            <summary>
            Returns the Zoom cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Port">
            <summary>
            Returns the Port cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Connect">
            <summary>
            Returns the Connect cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.RotateReady">
            <summary>
            Returns the RotateReady cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Rotate">
            <summary>
            Returns the Rotate cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.InsertVertex">
            <summary>
            Returns the InsertVertex cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.EditVertex">
            <summary>
            Returns the EditVertex cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.DeleteVertex">
            <summary>
            Returns the DeleteVertex cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Cursors.Pencil">
            <summary>
            Returns the Pencil Cursor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Resources.Textures">
            <summary>
            Provides access to fill textures.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Resources.Textures.CheckerBoard">
            <summary>
            Returns the CheckerBoard texture.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DiagramDocument">
            <summary>
            The DiagramDocument class implements a serializable document type that encapsulates the model and view data 
            for the diagram.
            </summary>
            <remarks>
            This document class is used by the Essential Diagram DiagramControl 
            and DiagramWebControl controls for persisting their state information.
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Model"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.m_bdgmpropertiesserialized">
            <summary>
            to find the diagram properties are serialized or not in old files
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.m_diagramProperties">
            <summary>
            To access the Diagram properties 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.dgmModel">
            <summary>
            The model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.dgmView">
            <summary>
            The view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.dgmViewInfo">
            <summary>
            The view info.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DiagramDocument.m_dgmModelComponent">
            <summary>
            The diagram model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDocument.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.ViewInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DiagramDocument"/> class.
            </summary>
            <param name="dgmModel">The diagram model.</param>
            <param name="dgmViewInfo">The diagram ViewInfo.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDocument.#ctor(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DiagramDocument"/> class.
            </summary>
            <param name="dgmModel">The diagram model.</param>
            <param name="dgmView">The diagram view.</param>
            <remarks>
            This method is retained only for backward compatibility and should not be used.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DiagramDocument"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramDocument.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.DiagramProperties">
            <summary>
            Get/set the Diagram Properties values
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.Model">
            <summary>
            Gets the diagram model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.View">
            <summary>
            Gets the diagram view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.ViewInfo">
            <summary>
            Gets the ViewInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramDocument.ModelComponent">
            <summary>
            Gets or sets the reference to the existing component in designer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OldToNewDeserializationBinder">
            <summary>
            Allows user to control old type diagram/palette loading.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewInfo">
            <summary>
            Serializable class used for persisting the <see cref="T:Syncfusion.Windows.Forms.Diagram.View"/> data. 
            </summary>
            <remarks>
            When using a custom View for the diagram control that contains its own persistence data, use a 
            subclass of the ViewInfo type for serializing the new View data.
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.View.GetViewInfo"/>
            <seealso cref="M:Syncfusion.Windows.Forms.Diagram.View.SetViewInfo(Syncfusion.Windows.Forms.Diagram.ViewInfo)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewInfo.#ctor(Syncfusion.Windows.Forms.Diagram.View)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/> class.
            </summary>
            <param name="srcview">The view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewInfo"/> class.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">SerializationInfo object to populate.</param>
            <param name="context">Destination streaming context.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.rcBounds">
            <summary>
            The bounding rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.ptOrigin">
            <summary>
            Origin of the view.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.backgroundColor">
            <summary>
            Background color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.handleSize">
            <summary>
            Size of the handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.handleColor">
            <summary>
            Color of the handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.handleOutlineColor">
            <summary>
            Outline color of the handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.handleAnchorColor">
            <summary>
            Color of the handle anchor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.handleDisabledColor">
            <summary>
            Color of the disabled color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ViewInfo.szMagnification">
            <summary>
            Size of the magnification.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramProperties.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DiagramProperties.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
            <param name="info">serialization info</param>
            <param name="context">streaming context</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.AllowDrop">
            <summary>
            Gets or sets a value indicating whether the control accept data that user drags and drops onto it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.BackgoundImageLayout">
            <summary>
            Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout"></see> enumeration.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.DefaultContextMenuEnabled">
            <summary>
            Gets or sets a value indicating whether view default context menu.
            </summary>
            <value><c>true</c> if show default context menu; otherwise, <c>false</c>.</value>       
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.FocusOnNodeTab">
            <summary>
            Gets or sets the Tab behavior needed for diagram control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.ShowRulers">
            <summary>
            Gets or sets a value indicating whether view show horizontal and vertical rulers.
            </summary>
            <value><c>true</c> if show rulers; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.RulersHeight">
            <summary>
            Gets or sets the height of the rulers.
            </summary>
            <value>The height of the rulers.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.HorizontalRuler">
            <summary>
            Gets or sets the horizontal ruler.
            </summary>
            <value>The horizontal ruler.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DiagramProperties.VerticalRuler">
            <summary>
            Gets or sets the vertical ruler.
            </summary>
            <value>The vertical ruler.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BridgeManager">
            <summary>
            Bridge Manager that use to generate segment bridges 
            for intersected nodes in model.
            </summary>
            <remarks>
            Collect the nodes and recreate segment bridges to it new intersection.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Service">
            <summary>
            Service class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.Start">
            <summary>
            Starts this service.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.Stop">
            <summary>
            Stops this service.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.Resume">
            <summary>
            Resumes this service.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.Pause">
            <summary>
            Pauses this service.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.OnStop">
            <summary>
            Called when service is stoped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.OnStart">
            <summary>
            Called when service is started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.OnResume">
            <summary>
            Called when service is resumed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Service.OnPause">
            <summary>
            Called when service is paused.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Service.ServiceStatus">
            <summary>
            Gets the service status state.
            </summary>
            <value>The service status.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Service.Stopped">
            <summary>
            Occurs when service is stopped.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Service.Started">
            <summary>
            Occurs when service is started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Service.Paused">
            <summary>
            Occurs when service is paused.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.Service.Resumed">
            <summary>
            Occurs when service is resumed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BridgeManager"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.AddToIntersectCollection(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Manually checks connectors intersection.
            </summary>
            <param name="connectorBase">The connector base.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.BeginUpdateIntersection">
            <summary>
            Start of batch operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.EndUpdateIntersection">
            <summary>
            End of batch operation..
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.OnStop">
            <summary>
            Called when service is stoped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.OnBridgeGenerationStarted">
            <summary>
            Called when bridge generation is started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.OnBridgeGenerationCompleted">
            <summary>
            Called when bridge generation is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.GenerateBridges">
            <summary>
            Generates the bridges. Work only is Model.LineBridgingEnabled is enable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.UpdateConnectorsIntersecting(Syncfusion.Windows.Forms.Diagram.ConnectorBase,Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Update the connector intersecting.
            </summary>
            <param name="connector">The connector.</param>
            <param name="nodes">The present connectors in model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BridgeManager.GetAllConnectors(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Gets all connectors from composite nodes.
            </summary>
            <param name="composite">The composite.</param>
            <returns>The connectors from composite node.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.BridgeManager.BridgeGenerationStarted">
            <summary>
            Occurs when bridge generation is started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.BridgeManager.BridgeGenerationCompleted">
            <summary>
            Occurs when bridge generation is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BridgeManager.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BridgeManager.Connectors">
            <summary>
            Gets the connectors.
            </summary>
            <value>The connectors.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BridgeManager.Generating">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.BridgeManager"/> is generating.
            </summary>
            <value><c>true</c> if generating; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DocumentEventSink">
            <summary>
            Inherits from EventSink and contains additional node and primitives transformation events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EventSink">
            <summary>
            Even sink service.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EventSink"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EventSink"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RaiseNodesChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the nodes changing event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise nodes changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RaiseNodesChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the nodes changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RaiseCancelCollectionChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the cancel collection changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RaisePropertyChangingEvent(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.Object)">
            <summary>
            Raises the property changing event.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
            <returns>true, raise property changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RaisePropertyChangedEvent(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="nodeAffected">The node affected.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.AddHandler(Syncfusion.Windows.Forms.Diagram.EventKey,System.Delegate)">
            <summary>
            Adds the handler.
            </summary>
            <param name="key">The key.</param>
            <param name="dNewHandler">The delegate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RemoveHandler(Syncfusion.Windows.Forms.Diagram.EventKey,System.Delegate)">
            <summary>
            Removes the handler.
            </summary>
            <param name="key">The key.</param>
            <param name="dHandler">The delegate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.AddHandler(System.Collections.Hashtable,Syncfusion.Windows.Forms.Diagram.EventKey,System.Delegate)">
            <summary>
            Adds the handler.
            </summary>
            <param name="hashHandlers">The hash handlers.</param>
            <param name="key">The key.</param>
            <param name="dNewHandler">The new delegate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.RemoveHandler(System.Collections.Hashtable,Syncfusion.Windows.Forms.Diagram.EventKey,System.Delegate)">
            <summary>
            Removes the handler.
            </summary>
            <param name="hashHandlers">The hash handlers.</param>
            <param name="key">The key.</param>
            <param name="dHandler">The delegate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.IsHighPriorityHandler(System.Delegate)">
            <summary>
            Determines whether it is high priority handler.
            </summary>
            <param name="dlgtHandler">The delegate.</param>
            <returns>
            <c>true</c> if it is high priority handler; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventSink.IsHighPriorityHandler(Syncfusion.Windows.Forms.Diagram.EventKey,System.Delegate)">
            <summary>
            Determines whether it is high priority handler.
            </summary>
            <param name="key">The key.</param>
            <param name="dNewHandler">The delegate.</param>
            <returns>
            <c>true</c> if it is high priority handler; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EventSink.Handlers">
            <summary>
            Gets the handlers.
            </summary>
            <value>The handlers.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EventSink.HighPriorityHandlers">
            <summary>
            Gets the high priority handlers.
            </summary>
            <value>The high priority handlers.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EventSink.PropertyChanging">
            <summary>
            Occurs when property changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EventSink.PropertyChanged">
            <summary>
            Occurs when property changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EventSink.NodeCollectionChanging">
            <summary>
            Occurs when node collection changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EventSink.NodeCollectionChanged">
            <summary>
            Occurs when node collection changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.EventSink.CancelCollectionChanged">
            <summary>
            Occurs when cancel the eventsink.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DocumentEventSink"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaisePinPointChanging(Syncfusion.Windows.Forms.Diagram.PinPointChangingEventArgs)">
            <summary>
            Raises the pin point changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PinPointChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise pin point changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaisePinPointChanged(Syncfusion.Windows.Forms.Diagram.PinPointChangedEventArgs)">
            <summary>
            Raises the pin point changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PinPointChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaisePinOffsetChanging(Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventArgs)">
            <summary>
            Raises the pin offset changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise pin point offset changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaisePinOffsetChanged(Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventArgs)">
            <summary>
            Raises the pin offset changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseSizeChanging(Syncfusion.Windows.Forms.Diagram.SizeChangingEventArgs)">
            <summary>
            Raises the size changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.SizeChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise size changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseSizeChanged(Syncfusion.Windows.Forms.Diagram.SizeChangedEventArgs)">
            <summary>
            Raises the size changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.SizeChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseRotationChanging(Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs)">
            <summary>
            Raises the rotation changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise rotation changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseRotationChanged(Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs)">
            <summary>
            Raises the rotation changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseFlipChanging(Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs)">
            <summary>
            Raises the flip changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise flip changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseFlipChanged(Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs)">
            <summary>
            Raises the flip changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseDocumentEndUpdate">
            <summary>
            Raises the document end update.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseDocumentBeginUpdate">
            <summary>
            Raises the document begin update.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseVertexChanging(Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs)">
            <summary>
            Raises the vertex changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise vertex changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseVertexChanged(Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs)">
            <summary>
            Raises the vertex changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseZOrderChanging(Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs)">
            <summary>
            Raises the Z order changing.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise Z order changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseZOrderChanged(Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs)">
            <summary>
            Raises the Z order changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseConnectionsChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the connections changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseConnectionsChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the connections changing event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaisePortsChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the ports changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseEndPointChangingEvent(Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs)">
            <summary>
            Raise the Source changing event while establishing the connection
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseLabelsChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the labels changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RaiseLayersChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the layers changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.PinPointChanging">
            <summary>
            Occurs when pin point changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.PinPointChanged">
            <summary>
            Occurs when pin point changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.PinOffsetChanging">
            <summary>
            Occurs when pin offset changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.PinOffsetChanged">
            <summary>
            Occurs when pin offset changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.SizeChanged">
            <summary>
            Occurs when size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.SizeChanging">
            <summary>
            Occurs when size changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RotationChanged">
            <summary>
            Occurs when rotation angle changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.RotationChanging">
            <summary>
            Occurs when rotation angle changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.FlipChanged">
            <summary>
            Occurs when flip flag changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.FlipChanging">
            <summary>
            Occurs when flip flag changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.DocumentBeginUpdate">
            <summary>
            Occurs when document begin update.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.DocumentEndUpdate">
            <summary>
            Occurs when document end update.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.VertexChanged">
            <summary>
            Occurs when vertex changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.VertexChanging">
            <summary>
            Occurs when vertex changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ZOrderChanged">
            <summary>
            Occurs when Z order changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ZOrderChanging">
            <summary>
            Occurs when Z order changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.PortsChanged">
            <summary>
            Occurs when ports collections changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.LabelsChanged">
            <summary>
            Occurs when labels collections changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.LayersChanged">
            <summary>
            Occurs when layers collections changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ConnectionsChanged">
            <summary>
            Occurs when connections collections changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ConnectionsChanging">
            <summary>
            Occurs when connections collections changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ConnectorSourceChanging">
            <summary>
            Occurs when Source connections changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.DocumentEventSink.ConnectorTargetChanging">
            <summary>
            Occurs when Target connections changing.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EventKey">
            <summary>
            Event key.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HistoryEntry">
            <summary>
            HistoryEntry consists of Command to execute and reference to proceeding and preceeding history entries. 
            </summary>
            <remarks>
            Used in HistoryList class.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryEntry.Command">
            <summary>
            Gets history entry.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryEntry.Next">
            <summary>
            Gets or sets next history node.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryEntry.Previous">
            <summary>
            Gets or sets previous history node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HistoryList">
            <summary>
            HistoryList is LinearLinkedList containing HistoryEntries. Each HistoryEntry contains Command to execute
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryList.GetRedoCmd">
            <summary>
            Fetches for HistoryEntry to Redo.
            </summary>
            <returns>The command.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryList.GetUndoCmd">
            <summary>
            Fetches HistoryEntry to Undo.
            </summary>
            <returns>The command.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryList.ClearHistory">
            <summary>
            Clears HistoryList.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryList.AddEntry(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Adds new HistoryEntry to Historylist.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryList.CanUndo">
            <summary>
            Gets a value indicating whether there is HistoryEntry to Undo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryList.CanRedo">
            <summary>
            Gets a value indicating whether there is HistoryEntry to Redo.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HistoryManager">
            <summary>
            Manager used to record all user actions to return to primary document.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HistoryManager"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.ClearHistory">
            <summary>
            Clear all the history records.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.GetRedoDescriptions(System.Int32,System.String[]@)">
            <summary>
            Gets HistoryEntries Descriptions.
            </summary>
            <param name="nDepth">Depth proceed.</param>
            <param name="strCmdDescriptions">string array which holds descriptions</param>
            <returns>Number of returned descriptions.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.GetUndoDescriptions(System.Int32,System.String[]@)">
            <summary>
            Gets HistoryEntries Descriptions.
            </summary>
            <param name="nDepth">Depth proceed.</param>
            <param name="strCmdDescriptions">string array which holds descriptions</param>
            <returns>Number of returned descriptions.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.CanMerge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Determines whether this instance can merge the specified command.
            </summary>
            <param name="cmd">The command.</param>
            <returns>
            <c>true</c> if this instance can merge the specified command to one; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.Merge(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Merges the specified command to one.
            </summary>
            <param name="cmdToMerge">The command to merge.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.Undo">
            <summary>
            Backup last user operation.
            </summary>
            <returns>true, if undo.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.Redo">
            <summary>
            Step forward to operation history records.
            </summary>
            <returns>true, if redo.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.StartAtomicAction(System.String)">
            <summary>
            Start record any changes to history command.
            </summary>
            <param name="strDescription">The short command description.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.EndAtomicAction">
            <summary>
            Stop recording changes and save command to history.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnStop">
            <summary>
            Called when history are stopped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordMovePinPoint(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.String,System.Drawing.SizeF)">
            <summary>
            Record the move pin point action.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyContainerName">Name of the container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="szMoveOffset">The pin point move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordPropertyChanged(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.String)">
            <summary>
            Record the property changed action.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyContainerName">Name of the property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordCollectionChanged(Syncfusion.Windows.Forms.Diagram.CollectionExChangeType,Syncfusion.Windows.Forms.Diagram.CollectionEx,System.Collections.ICollection,System.Int32)">
            <summary>
            Record the collection changed action.
            </summary>
            <param name="changeType">Type of the change.</param>
            <param name="collection">The changed collection.</param>
            <param name="elements">The elements of collection.</param>
            <param name="nIndex">The elements insert index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordVertexChanged(Syncfusion.Windows.Forms.Diagram.PathNode,Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Record the vertex changed.
            </summary>
            <param name="nodeVertexContainer">The node vertex container.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nVertexIdx">The vertex index in path points array.</param>
            <param name="ptNewLocation">The new vertex location.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordZorderChanged(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate)">
            <summary>
            Record the zOrder changed value.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="changeType">Type of the change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordSetPoints(Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Record the set points action.
            </summary>
            <param name="nodePath">The path points owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordSetGraphicsPath(Syncfusion.Windows.Forms.Diagram.PathNode,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Record the set graphics path action.
            </summary>
            <param name="nodePath">The graphics path owner.</param>
            <param name="pathCurrent">The path current.</param>
            <param name="pathToCombineWith">The path to combine with.</param>
            <param name="bConnect">if set to <c>true</c> path end points need to connect.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordMoveHandle(Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Record the handler move action.
            </summary>
            <param name="pathNode">The handler container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnUndoCommandStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:UndoCommandStarted"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnRedoCommandStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RedoCommandStarted"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnUndoCommandCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:UndoCommandCompleted"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnRedoCommandCompleted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RedoCommandCompleted"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnRecordRequest(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RecordRequest"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.OnRecordComplete(System.EventArgs)">
            <summary>
            Raises the <see cref="E:RecordComplete"/> event.
            </summary>
            <param name="evtArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HistoryManager.AddHistoryEntry(Syncfusion.Windows.Forms.Diagram.ICommand)">
            <summary>
            Adding new entry into the history entry list
            </summary>
            <param name="cmdNewEntry">The new command</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryManager.CanUndo">
            <summary>
            Gets a value indicating whether this instance can undo last operation.
            </summary>
            <value><c>true</c> if this instance can undo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryManager.CanRedo">
            <summary>
            Gets a value indicating whether this instance can redo last backup user operation.
            </summary>
            <value><c>true</c> if this instance can redo; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HistoryManager.Enabled">
            <summary>
            Gets or sets a value indicating whether the history services is enabled or disabled.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.UndoCommandStarted">
            <summary>
            Occurs when undo command started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.RedoCommandStarted">
            <summary>
            Occurs when redo command started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.UndoCommandCompleted">
            <summary>
            Occurs when undo command completed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.RedoCommandCompleted">
            <summary>
            Occurs when redo command completed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordRequest">
            <summary>
            Occurs when record request.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.HistoryManager.RecordComplete">
            <summary>
            Occurs when record complete.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LinkManager">
            <summary>
            Link Manager service that use for update connector endpoints
            to it connected connection points.
            </summary>
            <remarks>
            Collection end point changes and synchronize it on model updating.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LinkManager.c_DEF_HEADING_POINT_COUNT">
            <summary>
            Determine minimum path point count for handle synchronization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LinkManager.m_model">
            <summary>
             reference to diagram model.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LinkManager.m_synchronizationList">
            <summary>
            End point synchronization list.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.LinkManager.m_bSynhronizing">
            <summary>
            Determne is manager is synhroniza end point from synchronize list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.#ctor(Syncfusion.Windows.Forms.Diagram.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LinkManager"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.SynchronizeNodeConnections(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Adds node connections to synchronization list.
            </summary>
            <remarks>
            If Service is Stopped the method would not do anything.
            </remarks>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.SynchronizeEndPoint(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Adds endpoint to synchronization list.
            </summary>
            <remarks>
            If Service is Stopped the method would not do anything.
            </remarks>
            <param name="endPoint">The end point.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.BeginSynchronization">
            <summary>
            Start of batch operation .
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.EndSynchronization">
            <summary>
            End of batch operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.OnStop">
            <summary>
            Called when service is stoped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.OnSynchronizeStarted">
            <summary>
            Called when endpoint synchronizing started.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.OnSynchronizeCompleted">
            <summary>
            Called when endpoint synchronizing completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.Synchronize(System.Collections.ICollection)">
            <summary>
            Synchronizes the specified endpoint collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.ConnectionPoint,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Gets the end point location.
            </summary>
            <param name="port">The port.</param>
            <param name="endPoint">The end point.</param>
            <returns>The end point location.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.UpdateConnector(Syncfusion.Windows.Forms.Diagram.ConnectorBase)">
            <summary>
            Updates the line segments of the orthogonal/polyline connector.
            <param name="connector"> Connector.</param>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.GetDockPoint(Syncfusion.Windows.Forms.Diagram.EndPoint,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the graphics path dock point.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="nodePortContainer">The node port container.</param>
            <returns>The dock point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.GetConnectorDockPoint(Syncfusion.Windows.Forms.Diagram.EndPoint,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the OrgLineConnector's dock point
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="nodePortContainer">The node port container</param>
            <returns>The dock point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.GetIntersectSegment(Syncfusion.Windows.Forms.Diagram.EndPoint,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the intersect segment.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="nodePortContainer">The node port container.</param>
            <returns>The intersect segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LinkManager.SyncWithHeading(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Synchronize the endpoint with heading.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>true, if sync with headpoint.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LinkManager.SynhronizeStarted">
            <summary>
            Occurs when EndPoints synchronizing is started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LinkManager.SynchronizeStarted">
            <summary>
            Occurs when EndPoints synchronizing is started.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LinkManager.SynhronizeCompleted">
            <summary>
            Occurs when EndPoints synchronizing is completed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.LinkManager.SynchronizeCompleted">
            <summary>
            Occurs when EndPoints synchronizing is completed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkManager.SynchronizationList">
            <summary>
            Gets the end point synchronization list.
            </summary>
            <value>The synchronization list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkManager.Model">
            <summary>
            Gets the reference to diagram model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LinkManager.IsSynchronizing">
            <summary>
            Gets a value indicating whether end point synchronization is process.
            </summary>
            <value>
            <c>true</c> if end points synchronizing in process; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewerEventSink">
            <summary>
            Event sink for diagram view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewerEventSink"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseOriginChanged(Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs)">
            <summary>
            Raises the origin changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodesChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the node collection changing event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
            <returns>true, if raise nodes changing event.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodesChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the node collection changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseMagnificationChanged(Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs)">
            <summary>
            Raises the magnification changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseScrollVirtualBoundsChanged(Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs)">
            <summary>
            Raises the scroll virtual bounds changed.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeSelected(Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs)">
            <summary>
            Raises the node selected.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseSelectionChangingEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the selection list changing event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseSelectionChangedEvent(Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs)">
            <summary>
            Raises the selection list changed event.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeDeselected(Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs)">
            <summary>
            Raises the node deselected.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Raises the node click.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeDoubleClick(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Raises the node double click.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeMouseLeave(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Raises the node mouse leave.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeMouseEnter(Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Raises the node mouse enter.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeDragEnter(Syncfusion.Windows.Forms.Diagram.DragEnterEventArgs)">
            <summary>
            Raises the node enter into the diagram.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.DragEnterEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeDragLeave(Syncfusion.Windows.Forms.Diagram.DragLeaveEventArgs)">
            <summary>
            Raises the node leaving from the diagram.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.DragLeaveEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeDragOver(Syncfusion.Windows.Forms.Diagram.DragOverEventArgs)">
            <summary>
            Raises the node drag overing into the diagram.
            </summary>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.DragOverEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseNodeMouse(Syncfusion.Windows.Forms.Diagram.EventKey,Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs)">
            <summary>
            Raise the node mouse event.
            </summary>
            <param name="key">The event key.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseDeSerialize(Syncfusion.Windows.Forms.Diagram.SerializationEventsArgs)">
            <summary>
            Raises the diagram DeSerialize event while loading the diagram file.
            </summary>
            <param name="key">The event key.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.SerializationEventsArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.RaiseSerialize(Syncfusion.Windows.Forms.Diagram.SerializationEventsArgs)">
            <summary>
             Raises the diagram Serialize event while saving the diagram file.
            </summary>
            <param name="key">The event key.</param>
            <param name="evtArgs">The <see cref="T:Syncfusion.Windows.Forms.Diagram.SerializationEventsArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.CanRaiseEvent">
            <summary>
            Determines whether the event can be raised.
            </summary>
            <returns>
            <c>true</c> if event can be raised; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeCollectionChanging">
            <summary>
            Occurs when node collection changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeCollectionChanged">
            <summary>
            Occurs when node collection changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.OriginChanged">
            <summary>
            Occurs when view origin changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.MagnificationChanged">
            <summary>
            Occurs when view magnification changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.ScrollVirtualBoundsChanged">
            <summary>
            Occurs when scroll virtual bounds changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeSelected">
            <summary>
            Occurs when view node selected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeDeselected">
            <summary>
            Occurs when view node deselected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeClick">
            <summary>
            Occurs when click on node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeDoubleClick">
            <summary>
            Occurs when double click on node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeMouseEnter">
            <summary>
            Occurs when mouse enter inside node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeMouseLeave">
            <summary>
            Occurs when mouse leave node.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.Deserialized">
             <summary>
            Occurs While loading the Diagram file
            </summary> 
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.Serialized">
             <summary>
            Occurs While Saving the Diagram file
            </summary> 
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.SelectionListChanging">
            <summary>
            Occurs when selection list changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.SelectionListChanged">
            <summary>
            Occurs when selection list changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeDragEnter">
            <summary>
            Occurs when Node Entered into the Diagram.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeDragOver">
            <summary>
            Occurs when Node Dragging over into the Diagram.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Diagram.ViewerEventSink.NodeDragLeave">
            <summary>
            Occurs when Node leaving from the Diagram.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EventHandlerPriorityAttribute">
            <summary>
            A custom attribute to allow a target methods( event handler ) execute event 
            handlers event if DocumentEventSink is stopped.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EventHandlerPriorityAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EventHandlerPriorityAttribute"/> class.
            </summary>
            <param name="bExecuteAnyway">if set to <c>true</c> to execute anyway.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EventHandlerPriorityAttribute.ExecuteRegardlessOfServiceState">
            <summary>
            Gets or sets a value indicating whether [execute regardless of service state].
            </summary>
            <value>
            <c>true</c> if need to execute regardless of service state; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CancelCollectionChangedEventHandler">
            <summary>
            Delegate declaration for cancel eventsink events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CollectionExEventHandler">
            <summary>
            Delegate declaration for collection change events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexChangedEventHandler">
            <summary>
            Delegate declaration for vertex changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexChangingEventHandler">
            <summary>
            Delegate declaration for vertex changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventHandler">
            <summary>
            Delegate declaration for ZOrder changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventHandler">
            <summary>
            Delegate declaration for ZOrder changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventHandler">
            <summary>
            Delegate declaration for property changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventHandler">
            <summary>
            Delegate declaration for property changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinPointChangedEventHandler">
            <summary>
            Delegate declaration for pinpoint changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinPointChangingEventHandler">
            <summary>
            Delegate declaration for pinpoint changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventHandler">
            <summary>
            Delegate declaration for pinoffset changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventHandler">
            <summary>
            Delegate declaration for pinoffset changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeChangedEventHandler">
            <summary>
            Delegate declaration for size changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeChangingEventHandler">
            <summary>
            Delegate declaration for size changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotationChangedEventHandler">
            <summary>
            Delegate declaration for rotation changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotationChangingEventHandler">
            <summary>
            Delegate declaration for rotation changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FlipChangedEventHandler">
            <summary>
            Delegate declaration for flip changed event.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FlipChangingEventHandler">
            <summary>
            Delegate declaration for flip changing events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventHandler">
            <summary>
            Delegate declaration for view origin change events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventHandler">
            <summary>
            Delegate declaration for view magnification change events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventHandler">
            <summary>
            Delegate declaration for view scroll virtual bounds change events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventHandler">
            <summary>
            Delegate declaration for node selected change events.
            </summary>
            <param name="evtArgs">Node selected Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventHandler">
            <summary>
            Delegate declaration for node mouse action change events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DeserializeEventHandler">
            <summary>
            Delegate declaration for Deserialization events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SerializeEventHandler">
            <summary>
            Delegate declaration for Serialization events.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventHandler">
            <summary>
            Delegate declaration for Overview control viewport changing event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangedEventHandler">
            <summary>
            Delegate declaration for Overview control viewport changed event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventHandler">
            <summary>
            Delegate declaration for Source/Target connection changing event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeDragEnterEventHandler">
            <summary>
            Delegate declaration for drag enter event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeDragOverEventHandler">
            <summary>
            Delegate declaration for drag over event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeDragLeaveEventHandler">
            <summary>
            Delegate declaration for drag leave event handler.
            </summary>
            <param name="evtArgs">Event args.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OffsetChangingEventArgs">
            <summary>
            Class containing offset changing event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs">
            <summary>
            Class containing offset changed event args.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs.m_szOffset">
            <summary>
            In pixels.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OffsetChangedEventArgs.Offset">
            <summary>
            Gets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.OffsetChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.OffsetChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.OffsetChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.OffsetChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs">
            <summary>
            Class containing property changing event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> class.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs.PropertyContainer">
            <summary>
            Gets the property container.
            </summary>
            <value>The property container.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs">
            <summary>
            Property changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.IPropertyContainer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs"/> class.
            </summary>
            <param name="propertyContainer">The property container.</param>
            <param name="strPropertyName">Name of the property.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs">
            <summary>
            Class containing vertex changing event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs">
            <summary>
            Class containing Vertex changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs"/> class.
            </summary>
            <param name="nodeVertexContainer">The node vertex container.</param>
            <param name="changeType">Type of the vertex change.</param>
            <param name="nVertexIdx">The vertex index.</param>
            <param name="ptVertexLocation">The vertex location.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs.VertexIndex">
            <summary>
            Gets the index of the vertex.
            </summary>
            <value>The index of the vertex.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs.VertexLocation">
            <summary>
            Gets the vertex location.
            </summary>
            <value>The vertex location.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexChangedEventArgs.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.PathNode,Syncfusion.Windows.Forms.Diagram.VertexChangeType,System.Int32,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs"/> class.
            </summary>
            <param name="nodeVertexContainer">The node vertex container.</param>
            <param name="changeType">Type of the vertex change.</param>
            <param name="nVertexIdx">The vertex index.</param>
            <param name="ptVertexLocation">The vertex location.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.VertexChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs">
            <summary>
            Class containing Z order changing event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs">
            <summary>
            Class containing Z order changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The new Z order value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The type of the change.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderChangedEventArgs.ZOrder">
            <summary>
            Gets the Z order.
            </summary>
            <value>The Z order.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.ZOrderUpdate,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="changeType">Type of the change.</param>
            <param name="nNewZOrder">The new Z order value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.ZOrderChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeChangingEventArgs">
            <summary>
            Class containing size changing event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SizeChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeChangedEventArgs">
            <summary>
            Class containing size changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.INode,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SizeChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinPointChangingEventArgs">
            <summary>
            Class containing pinpoint changing event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PinPointChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PinPointChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinPointChangedEventArgs">
            <summary>
            Class containing pinpoint changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PinPointChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PinPointChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The sz offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.AlignmentChangedEventArgs">
            <summary>
            Class containing Alignment changed event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventArgs">
            <summary>
            Class containing pin offset changing event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventArgs">
            <summary>
            Class containing pin offset changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.SizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PinOffsetChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="szOffset">The sz offset.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs">
            <summary>
            Class containing rotation changing changed event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs">
            <summary>
            Class containing rotation changed event args.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs.m_fRotationOffset">
            <summary>
            In pixels.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="fRotationOffset">The f rotation offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotationChangedEventArgs.RotationOffset">
            <summary>
            Gets the rotation offset.
            </summary>
            <value>The rotation offset.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="fRotationOffset">The f rotation offset.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs">
            <summary>
            Class containing flip changing event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs">
            <summary>
            Class containing flip changed event args.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs.m_flipAxis">
            <summary>
            Indicates whether node is flipped relative to X or Y axis.
            True - Y axis, False - X axis
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.FlipAxis,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="flipAxis">The flip axis.</param>
            <param name="bFlipValue">if set to <c>true</c> [b flip value].</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs.NodeAffected">
            <summary>
            Gets the node affected.
            </summary>
            <value>The node affected.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs.FlipValue">
            <summary>
            Gets a value indicating whether value is flipped.
            </summary>
            <value><c>true</c> if value is flipped; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FlipChangedEventArgs.FlipAxis">
            <summary>
            Gets the flip axis.
            </summary>
            <value>The flip axis.</value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs.m_bCancel">
            <summary>
            Flag to cancel the flipping.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.FlipAxis,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs"/> class.
            </summary>
            <param name="nodeChanged">The node changed.</param>
            <param name="flipAxis">The flip axis.</param>
            <param name="bFlipValue">if set to <c>true</c> [b flip value].</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Diagram.FlipChangingEventArgs"/> is cancel.
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs">
            <summary>
            Encapsulates arguments for the origin change event of a view.
            </summary>
            <remarks>
            <para>
            The origin of a view is the point in world space that maps to the upper-left
            hand corner of the view.
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs"/> class.
            </summary>
            <param name="ptOrig">Original origin.</param>
            <param name="ptNew">New origin.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.OriginalOrigin">
            <summary>
            Gets origin value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.NewOrigin">
            <summary>
            Gets origin value after the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewOriginEventArgs.Offset">
            <summary>
            Gets difference between the new origin and the original origin.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs">
            <summary>
            Encapsulates arguments for the Magnification change event of a view.
            </summary>
            <remarks>
            <para>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs"/> class.
            </summary>
            <param name="mgOrig">Original origin.</param>
            <param name="mgNew">New origin.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.OriginalMagnification">
            <summary>
            Gets magnification value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewMagnificationEventArgs.NewMagnification">
            <summary>
            Gets magnification value after the event occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs">
            <summary>
            Encapsulates arguments for the Scroll Virtual Bounds change event of a view.
            </summary>
            <remarks>
            <para>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.View"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs.#ctor(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs"/> class.
            </summary>
            <param name="rcOldBounds">The old bounds.</param>
            <param name="rcNewBounds">The new bounds.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs.OldBounds">
            <summary>
            Gets scroll Bounds value before the event occurred.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewScrollVirtualBoundsEventArgs.NewBounds">
            <summary>
            Gets scroll Bounds value after the event occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs">
            <summary>
            Encapsulates arguments for the SelectionList change event of a controller.
            </summary>
            <remarks>
            <para>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeSelectedEventArgs.Node">
            <summary>
            Gets the node instance.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs">
            <summary>
            Encapsulates arguments for the mouse actions events of a diagram.
            </summary>
            <remarks>
            <para>
            </para>
            <seealso cref="T:Syncfusion.Windows.Forms.Diagram.Controller"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.NodeMouseEventArgs.Node">
            <summary>
            Gets the node instance.
            </summary>
            <value>The node.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangedEventArgs">
            <summary>
            Class containing viewport changed changed event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangedEventArgs.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangedEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangedEventArgs.ViewPortBounds">
            <summary>
            Gets the ViewPortBounds
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs">
            <summary>
            Class containing view port bounds changing event args.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs.#ctor(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="oldBounds">The old bounds.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs.NewViewPortBounds">
            <summary>
            Gets the new ViewPortBounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs.OldViewPortBounds">
            <summary>
            Gets the Old ViewPortBounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ViewPortBoundsChangingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this is cancel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DragLeaveEventArgs">
            <summary>
            Class containing Drag Enter/Leave event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DragEnterEventArgs">
            <summary>
            Class containing Drag Enter/Leave event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DragOverEventArgs">
            <summary>
            Class containing Drag Over event args.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs">
            <summary>
            Class containing Connection changing event args
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.#ctor(Syncfusion.Windows.Forms.Diagram.EndPoint,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.ConnectionPoint,Syncfusion.Windows.Forms.Diagram.DragState)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs"/> class.
            </summary>
            <param name="element">The EndPoint</param>
            <param name="point">Current point</param>
            <param name="currentport">The port</param>
            <param name="dragstate">Drag status</param>
            <param name="cancel"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.Element">
            <summary>
            Get or Set the endpoint of the connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.Point">
            <summary>
            Get or Set the current point of the endpoint
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.CurrentPort">
            <summary>
            Get or Set the port for establishing the connection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.DragState">
            <summary>
            Get or Set the Drag status of the endpoint of the connectors
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EndPointChangingEventArgs.Cancel">
            <summary>
             Gets or sets a value indicating whether this is cancel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ServiceStatus">
            <summary>
            Service status enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ServiceStatus.Stopped">
            <summary>
            Indicates that service is stopped
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ServiceStatus.Started">
            <summary>
            Indicates that service is running
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ServiceStatus.Paused">
            <summary>
            Indicates that service is paused
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ServiceStatus.Resumed">
            <summary>
            Indicates that service is resumed
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FlipAxis">
            <summary>
            Flip axis enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FlipAxis.AxisX">
            <summary>
            X Axis 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FlipAxis.AxisY">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException">
            <summary>
            Thrown when trying to add a node with a duplicate name into the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException"/> class.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <remarks>
            A node's name must be unique within the scope of its parent. This
            exception is thrown by the model only if it cannot auto-generate
            a unique name by appending numeric suffixes to the name.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.NodeName">
            <summary>
            Gets node name that is duplicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateNodeNameException.Message">
            <summary>
            Returns the error message for this exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException">
            <summary>
            Thrown when trying to add a layer with a duplicate name into the model.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException"/> class.
            </summary>
            <param name="layerName">Name of the layer.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.LayerName">
            <summary>
            Gets layer name that is duplicate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DuplicateLayerNameException.Message">
            <summary>
            Returns the error message for this exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SlopeUndefinedException">
            <summary>
            Indicates that the X vector in a slope calculation is 0.
            </summary>
            <remarks>
            <para>
            Slope is undefined for vertical lines. This exception is thrown when attempting
            to calculate the slope of a vertical line.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SlopeUndefinedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.SlopeUndefinedException"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException">
            <summary>
            Thrown when an invalid layer name is referenced.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException"/> class.
            </summary>
            <param name="layerName">Layer name that is invalid.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerNotFoundException.Message">
            <summary>
            Returns a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayerDisabledException">
            <summary>
            Thrown when attempting to perform an operation on a disabled layer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.#ctor(Syncfusion.Windows.Forms.Diagram.Layer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LayerDisabledException"/> class.
            </summary>
            <param name="layer">Layer that is disabled.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.Layer">
            <summary>
            Gets disabled layer involved in the attempted operation.
            </summary>
            <value>The layer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LayerDisabledException.Message">
            <summary>
            Returns a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException">
            <summary>
            Thrown when an invalid label name is referenced.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException"/> class.
            </summary>
            <param name="labelName">Label name that is invalid.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LabelNotFoundException.Message">
            <summary>
            Returns a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException">
            <summary>
            Thrown when a node is moved or sized to a location that violates its
            boundary constraints.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.#ctor(Syncfusion.Windows.Forms.Diagram.INode)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException"/> class.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.Node">
            <summary>
            Gets node that violated its boundary constraints.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundaryConstraintException.Message">
            <summary>
            Returns a message describing the exception.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler">
            <summary>
            Provides a default handler for ThreadExceptions.
            </summary>
            <remarks>
            <para>
            A thread exception is generated when unhandled exceptions occur on a thread.
            This is a last resort exception handler that allows your application to
            gracefully deal with unhandled exceptions.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.Singleton">
            <summary>
            Singleton instance of the DefaultExceptionHandler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.OnThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Called when a thread exception occurs.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="evtArgs">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.ShowUserErrorDialog(System.Exception)">
            <summary>
            Shows a model dialog that displays a user error message.
            </summary>
            <param name="ex">Exception thrown by the error.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefaultExceptionHandler.ShowApplicationErrorDialog(System.Exception)">
            <summary>
            Shows the application error dialog.
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/>.</param>
            <returns>true, if show application error dialog.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException">
            <summary>
            Class for script file not found exception.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.DEF_MESSAGE">
            <summary>
            Default message.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException"/> class.
            </summary>
            <param name="innerExc">The inner exception.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ScriptFileNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerExc">The inner exception.</param>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.LocaleInfo">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.LocaleInfo.LOCALE_USER_DEFAULT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.LocaleInfo.LOCALE_IMEASURE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.LocaleInfo.GetLocaleInfo(System.UInt32,System.UInt32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Gets the locale info.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods">
            <summary>
            Summary description for NativeMethods.
            </summary>
            <exclude/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.SetWindowThemeInternal(System.IntPtr,System.String,System.String)">
            <summary>
            Sets the window theme internal.
            </summary>
            <param name="hWnd">The h WND.</param>
            <param name="pszSubAppName">Name of the sub app.</param>
            <param name="pszSubIdList">The sub id list.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
            Sets the window theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_PLAINTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_RICHTEXT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_SINGLELEVELUNDO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_MULTILEVELUNDO">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_SINGLECODEPAGE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.TextMode.TM_MULTICODEPAGE">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat">
            <summary>
            CHARFORMAT and CHARFORMAT2 masks
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_BOLD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_ITALIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_UNDERLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_STRIKEOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_PROTECTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_LINK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_SIZE">
            <summary>
            The yHeight member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_COLOR">
            <summary>
            The crTextColor member is valid unless the CFE_AUTOCOLOR flag
            is set in the dwEffects member.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_FACE">
            <summary>
            The szFaceName member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_OFFSET">
            <summary>
            The yOffset member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_CHARSET">
            <summary>
            The bCharSet member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_SMALLCAPS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_ALLCAPS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_HIDDEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_OUTLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_SHADOW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_EMBOSS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_IMPRINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_DISABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_REVISED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_BACKCOLOR">
            <summary>
            The crBackColor member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_LCID">
            <summary>
            The lcid member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_UNDERLINETYPE">
            <summary>
            The bUnderlineType member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_WEIGHT">
            <summary>
            The wWeight member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_SPACING">
            <summary>
            The sSpacing member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_KERNING">
            <summary>
            The wKerning member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_STYLE">
            <summary>
            The sStyle member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_ANIMATION">
            <summary>
            The bAnimation member is valid.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditFormat.CFM_REVAUTHOR">
            <summary>
            The bRevAuthor member is valid.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_BOLD">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_ITALIC">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_UNDERLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_STRIKEOUT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_PROTECTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_LINK">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_AUTOCOLOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_SUBSCRIPT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_SUPERSCRIPT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_SMALLCAPS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_ALLCAPS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_HIDDEN">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_OUTLINE">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_SHADOW">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_EMBOSS">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_IMPRINT">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_DISABLED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.WinAPI.RichTextNativeMethods.RichEditEffects.CFE_REVISED">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.CallBack">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.BrowserFolderCallback">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.HIWORD(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.LOWORD(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.LOWORD(System.IntPtr)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.HIWORD(System.IntPtr)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.MAKELONG(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.MAKELPARAM(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.RGBToCOLORREF(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.COLORREFToRGB(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetRValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetGValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.WinAPI.Macros.GetBValue(System.Int32)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.Window.HookProc">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.Window.DrawStateProc">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.WinAPI.NameSpaceDoc">
            <summary>
            This provides control in diagram to customize rich text editor properties.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle">
            <summary>
            Imitate from FillStyle type that used by TextNode node.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyle">
            <summary>
            A FillStyle is a collection of properties that define a brush used for
            fill operations during rendering.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.#ctor(Syncfusion.Windows.Forms.Diagram.FillStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.CreateBrush(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Creates a new brush based on the properties contained by
            the FillStyle object.
            </summary>
            <param name="grfx">Graphics context the brush will be used in.</param>
            <param name="fillBounds">Bounds of the object to be filled (needed for gradient
            brushes only).</param>
            <returns>A GDI+ brush object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.ShouldSerializeColor">
            <summary>
            Shows whether Color will be serializable.
            </summary>
            <returns>true, if serialize color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.ResetColor">
            <summary>
            Resets the color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.ShouldSerializeForeColor">
            <summary>
            Shows whether ForeColor will be serializable.
            </summary>
            <returns>true, if serialize forecolor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Color">
            <summary>
            Gets or sets color to use for the brush.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the ending color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.ColorAlphaFactor">
            <summary>
            Gets or sets alpha blending factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.ForeColorAlphaFactor">
            <summary>
            Gets or sets alpha blending factor for the ForeColor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.ForeColor">
            <summary>
            Gets or sets the foreground color used for the fill style.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the starting color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Texture">
            <summary>
            Gets or sets image to use for texture fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.TextureWrapMode">
            <summary>
            Gets or sets the mode how the texture is wrapped if fill type is set to texture.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.GradientAngle">
            <summary>
            Gets or sets angle used for gradient fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.GradientCenter">
            <summary>
            Gets or sets a value from 0 through 1 that specifies the center of the gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type">
            <summary>
            Gets or sets type of brush to create for filled regions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.HatchBrushStyle">
            <summary>
            Gets or sets hatch brush style to create for filled regions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.PathBrushStyle">
            <summary>
            Gets or sets the path brush style.
            </summary>
            <value>The path brush style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether [inherit container measure units].
            </summary>
            <value>
            <c>true</c> if need to inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyle.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.#ctor(Syncfusion.Windows.Forms.Diagram.BackgroundStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/> class.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyle"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>The property container name.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EditStyle">
            <summary>
            Encapsulates the edit properties of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.#ctor(Syncfusion.Windows.Forms.Diagram.EditStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/> class.
            </summary>
            <param name="src">The edit style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.EditStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.IsEnabled(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node is enabled or disabled.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if enabled; False if disabled.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanDelete(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node can be deleted from its container or not.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node can be deleted; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanSelect(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node can be selected or not.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node can be selected; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanMoveX(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node can be moved by X axis.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node can be moved; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanMoveY(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node can be moved or not.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node can be moved; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanChangeWidth(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node's width can be changed.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node's Width can be changed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanChangeHeight(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines if the given node's width can be changed.
            </summary>
            <param name="node">Node to test.</param>
            <returns>True if node's Width can be changed; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.CanRotate(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines whether given node can be rotated.
            </summary>
            <param name="node">Node to test</param>
            <returns>True if node can be moved; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.DefaultInitialize">
            <summary>
            Defaults values in initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.ChangeValue(System.String,System.Object)">
            <summary>
            Changes the value.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.AssignNewValue(System.String,System.Boolean)">
            <summary>
            Assigns the new value.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="newValue">new value, if set to <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowResize">
            <summary>
            Gets or sets a value indicating whether node can be resized.
            Property is obsolete.
            Use <see cref="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowChangeHeight"/> and <see cref="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowChangeWidth"/> properties instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMove">
            <summary>
            Gets or sets a value indicating whether node can be moved.
            Property is obsolete.
            Use <see cref="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMoveX"/> and <see cref="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMoveY"/> properties instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowDelete">
            <summary>
            Gets or sets a value indicating whether object can be deleted.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowSelect">
            <summary>
            Gets or sets a value indicating whether the object can be selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowVertexEdit">
            <summary>
            Gets or sets a value indicating whether object's vertices can be edited.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMoveX">
            <summary>
            Gets or sets a value indicating whether the object can be moved in X direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowMoveY">
            <summary>
            Gets or sets a value indicating whether the object can be moved in Y axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowRotate">
            <summary>
            Gets or sets a value indicating whether the object can be rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowChangeHeight">
            <summary>
            Gets or sets a value indicating whether the object's Height can be changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AllowChangeWidth">
            <summary>
            Gets or sets a value indicating whether the object's Width can be changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.AspectRatio">
            <summary>
            Gets or sets a value indicating whether node will be resized proportionally.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.HideRotationHandle">
            <summary>
            Gets or sets a value indicating whether node will display rotation handle in diagram.
            </summary>
            <value><c>true</c> if need to hide rotation handle; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.HidePinPoint">
            <summary>
            Gets or sets a value indicating whether node will display pin point in diagram.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.DefaultHandleEditMode">
            <summary>
            Gets or sets default mode for editing the object using selection handles.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.Enabled">
            <summary>
            Gets or sets a value indicating whether the object is enabled or disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            <c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.EditStyle.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle">
            <summary>
            Flag enum used to store EditStyle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_SELECT">
            <summary>
            Flag indicating whether node can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_DELETE">
            <summary>
            Flag indicating whether node can be selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_VERTEX_EDIT">
            <summary>
            Flag indicating whether node's vertexes can be edited.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_MOVE_BY_X_AXIS">
            <summary>
            Flag indicating whether node can be moved by X axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_MOVE_BY_Y_AXIS">
            <summary>
            Flag indicating whether node can be moved by Y axis.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_ROTATE">
            <summary>
            Flag indicating whether node can be rotated.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_CHANGE_WIDTH">
            <summary>
            Flag indicating whether node's width can be changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ALLOW_CHANGE_HEIGHT">
            <summary>
            Flag indicating whether node's height can be changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ASPECT_RATIO_RESIZE">
            <summary>
            Flag indicating whether node's height can be changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.ENABLED">
            <summary>
            Flag indicating whether node is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.HIDE_ROTATION_HANDLE">
            <summary>
            Flag indication whether rotation handle is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.EditStyle.InternalEditStyle.HIDE_PIN_POINT">
            <summary>
            Flag indication whether pin point is visible.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleValueEditor">
            <summary>
            Property Editor for FillStyle type.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleValueEditor.SetEditorProps(Syncfusion.Windows.Forms.Diagram.FillStyle,Syncfusion.Windows.Forms.Diagram.FillStyleDialog)">
            <summary>
            Sets the editor properties.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleValueEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleValueEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontStyle">
            <summary>
            Encapsulates the font properties of an object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.#ctor(Syncfusion.Windows.Forms.Diagram.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/> class.
            </summary>
            <param name="src">The font style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.CreateFont">
            <summary>
            Creates a font object matching the properties of this FontStyle.
            </summary>
            <returns>Font object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.SetStyle(System.Drawing.FontStyle@,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            Set the font style flag.
            </summary>
            <param name="style">The font style.</param>
            <param name="flag">The style flag.</param>
            <param name="bValue">Then flag value].</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>The property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.CanSetStyle(System.String,System.Drawing.FontStyle)">
            <summary>
            Determines whether font style can be changed.
            </summary>
            <param name="strFamilyName">The family name.</param>
            <param name="style">The font style.</param>
            <returns>
            <c>true</c> if font style can be changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Family">
            <summary>
            Gets or sets Font family name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Name">
            <summary>
            Gets or sets Name of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Style">
            <summary>
            Gets or sets Style of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Size">
            <summary>
            Gets or sets Size of font in logical units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.PointSize">
            <summary>
            Gets or sets Size of font in points.
            </summary>
            <remarks>
            <para>
            Performs conversion if FontStyle.Unit is not point.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Unit">
            <summary>
            Gets or sets Unit of measure for font size (default is points).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Bold">
            <summary>
            Gets or sets a value indicating whether the font has the Bold style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Italic">
            <summary>
            Gets or sets a value indicating whether the font has the Italic style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Underline">
            <summary>
            Gets or sets a value indicating whether the font has the Underline style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.Strikeout">
            <summary>
            Gets or sets a value indicating whether the font has the Strikeout style set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FontStyle.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            <c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleStyle">
            <summary>
            A FillStyle is a collection of properties that define a brush used for
            fill operations during rendering.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HandleStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.#ctor(Syncfusion.Windows.Forms.Diagram.HandleStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HandleStyle"/> class.
            </summary>
            <param name="src">The handle style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HandleStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.ShouldSerializeColor">
            <summary>
            Shows whether OutlineColor will be serializable.
            </summary>
            <returns>true, if serialize color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.ShouldSerializeForeColor">
            <summary>
            Shows whether FillColor will be serializable.
            </summary>
            <returns>rue, if serialize forecolor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.FillColor">
            <summary>
            Gets or sets Color to use for the brush.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the ending color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.FillColorAlphaFactor">
            <summary>
            Gets or sets Alpha blending factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.OutlineColorAlphaFactor">
            <summary>
            Gets or sets Alpha blending factor for the ForeColor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.OutlineColor">
            <summary>
            Gets or sets the foreground color used for the fill style.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the starting color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.Type">
            <summary>
            Gets or sets Handle Type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleStyle.HandleSize">
            <summary>
            Gets or sets Hatch brush style to create for filled regions.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RotationHandleStyle">
            <summary>
            Rotation handle style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RotationHandleStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RotationHandleStyle"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ResizeHandlesStyle">
            <summary>
            Resize handle style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinPointStyle">
            <summary>
            Pin point style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlPointStyle">
            <summary>
            Control point style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleStyles">
            <summary>
            Handle styles
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyles.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HandleStyles"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyles.RotationHandleStyle">
            <summary>
            Rotation handle styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyles.ResizeHandlesStyle">
            <summary>
            Resize handles styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyles.PinPointStyle">
            <summary>
            Pin point style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyles.ControlPointStyle">
            <summary>
            Control point style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleStyles.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleStyleType">
            <summary>
            Handle style type enumeration
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyleType.Square">
            <summary>
            Square style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyleType.Circle">
            <summary>
            Circle style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleStyleType.Rhomb">
            <summary>
            Rhombus style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleSize">
            <summary>
            Handle size enumeration
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleSize.Small">
            <summary>
            Small size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleSize.Medium">
            <summary>
            Medium style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleSize.Big">
            <summary>
            Bug style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleSize.Giant">
            <summary>
            Giant style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineStyle">
            <summary>
            Encapsulates the line properties of an object.
            </summary>
            <remarks>
            <para>
            This style is used to create pens for drawing lines. The
            creates a pen from the properties contained in the line style object.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.#ctor(Syncfusion.Windows.Forms.Diagram.LineStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/> class.
            </summary>
            <param name="src">The line style..</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.LineStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.CreatePen">
            <summary>
            Creates a Pen object using the properties contained by the line style.
            </summary>
            <returns>System.Drawing.Pen object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.CreatePen(System.Single)">
            <summary>
            Creates a Pen object using the properties contained by the line style.
            </summary>
            <param name="padding">Padding to add to width of the pen</param>
            <returns>System.Drawing.Pen object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyle.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measure units changing.
            </summary>
            <param name="from">The old value.</param>
            <param name="to">The new value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineColor">
            <summary>
            Gets or sets Color used to draw lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineWidth">
            <summary>
            Gets or sets Width of the pen in logical units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.EndCap">
            <summary>
            Gets or sets type of end cap used to draw lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.LineJoin">
            <summary>
            Gets or sets  how lines are joined at corners.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.MiterLimit">
            <summary>
            Gets or sets Miter limit value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashStyle">
            <summary>
            Gets or sets style to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashCap">
            <summary>
            Gets or sets type of cap to use for dashed lines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashOffset">
            <summary>
            Gets or sets Offset of dashes in dashed lines in logical units.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.LineStyle.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding">
            <summary>
            Specifies a rounding value for arc-ing page border corners. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.None">
            <summary>
            No rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Smallest">
            <summary>
            Smallest rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Smaller">
            <summary>
            Smaller rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Small">
            <summary>
            Small rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Medium">
            <summary>
            Medium rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Big">
            <summary>
            Big rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Bigger">
            <summary>
            Bigger rounding.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderStyleCornerRounding.Biggest">
            <summary>
            Biggest rounding.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BorderWeight">
            <summary>
            Specifies the weight of the line used for drawing the border. This enum is used by the 
            <see cref="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle"/> and <see cref="T:Syncfusion.Windows.Forms.Diagram.HeaderFooterBorder"/> 
            classes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderWeight.Thin">
            <summary>
            A thin line that is 1 pixel wide.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderWeight.Medium">
            <summary>
            A thin line that is 2 pixels wide.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BorderWeight.Thick">
            <summary>
            A thick line that is 4 pixels wide.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle">
            <summary>
            Encapsulates the properties of a page border.
            </summary>
            <remarks>
            <para>
            Contains properties needed to create a pen for drawing the border
            of an page. The
            <see cref="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.CreatePen"/>
            method returns a pen to draw the border.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.#ctor(Syncfusion.Windows.Forms.Diagram.PageBorderStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle"/> class.
            </summary>
            <param name="src">The page border style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.CreatePen">
            <summary>
            Creates a pen to draw the border.
            </summary>
            <returns>System.Drawing.Pen object matching the border style.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.Clone">
            <summary>
            Creates a shallow copy of the PageBorderStyle object.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.ShowBorder">
            <summary>
            Gets or sets a value indicating whether the border is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.BorderColor">
            <summary>
            Gets or sets the color of the pen used for drawing the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.BorderWeight">
            <summary>
            Gets or sets the thickness of the line used for drawing the border.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Diagram.BorderWeight"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.BorderWidth">
            <summary>
            Gets the width in pixels for the border line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.BorderDashStyle">
            <summary>
            Gets or sets the type of line used for drawing the border. 
            </summary>
            <value>
            A <see cref="T:System.Drawing.Drawing2D.DashStyle"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.AlphaFactor">
            <summary>
            Gets or sets Transparency of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageBorderStyle.BorderCornerRounding">
            <summary>
            Gets or sets Rounding of the border corners.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle">
            <summary>
            Encapsulates the rendering properties of an object.
            </summary>
            <remarks>
            <para>
            This style is used to set rendering properties for System.Drawing.Graphics
            during rendering.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RenderingStyle.m_smoothingMode">
            <summary>
            Specifies whether smoothing (antialiasing) is applied to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RenderingStyle.m_textRenderingHint">
            <summary>
            Specifies text rendering mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.RenderingStyle.m_interpolationMode">
            <summary>
            Specifies how data is interpolated between endpoints.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.#ctor(Syncfusion.Windows.Forms.Diagram.RenderingStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.RenderingStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.ApplySettings(System.Drawing.Graphics)">
            <summary>
            Applies the rendering style to a Graphics context object.
            </summary>
            <param name="grfx">Graphics context object to apply rendering style to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.SmoothingMode">
            <summary>
            Gets or sets smoothing (antialiasing) to lines and curves
            and the edges of filled areas.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.TextRenderingHint">
            <summary>
            Gets or sets text rendering mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.InterpolationMode">
            <summary>
            Gets or sets how data is interpolated between endpoints.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            <c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.RenderingStyle.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle">
            <summary>
            A ShadowStyle is a collection of properties that define how shadows
            are displayed for a filled shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.#ctor(Syncfusion.Windows.Forms.Diagram.ShadowStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyle"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.CreateBrush(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Creates a brush for filling the shadow.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="fillrect">The fill rect.</param>
            <returns>Brush matching the Shadow style.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.ShouldSerializeColor">
            <summary>
            Serialize the color.
            </summary>
            <returns>true, if serialize color.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.OnMeasureUnitsChanging(Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Called when measure units changing.
            </summary>
            <param name="from">The old value.</param>
            <param name="to">The new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyle.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Color">
            <summary>
            Gets or sets the shadow color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.ColorAlphaFactor">
            <summary>
            Gets or sets alpha blending factor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.ForeColorAlphaFactor">
            <summary>
            Gets or sets alpha blending factor for the ForeColor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.ForeColor">
            <summary>
            Gets or sets foreground color used for the fill style.
            </summary>
            <remarks>
            NOTE: If <see cref="P:Syncfusion.Windows.Forms.Diagram.FillStyle.Type"/> is
            set to FillType.LinearGradient, then this is the starting color for the
            gradient.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Texture">
            <summary>
            Gets or sets image to use for texture fill.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.TextureWrapMode">
            <summary>
            Gets or sets the mode how the texture is wrapped if fill type is set to texture.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.PathBrushStyle">
            <summary>
            Gets or sets the path brush style.
            </summary>
            <value>The path brush style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.InheritContainerMeasureUnits">
            <summary>
            Gets or sets a value indicating whether current instance inherit container measure units.
            </summary>
            <value>
            <c>true</c> if current instance inherit container measure units; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.MeasureUnit">
            <summary>
            Gets or sets the measure unit.
            </summary>
            <value>The measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.Visible">
            <summary>
            Gets or sets a value indicating whether the shadow is visible or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.OffsetX">
            <summary>
            Gets or sets the distance of the shadow offset from the shape along
            the X axis.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyle.OffsetY">
            <summary>
            Gets or sets the distance of the shadow offset from the shape along
            the Y axis.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyleValueEditor">
            <summary>
            Class for shadow style value editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleValueEditor.SetEditorProps(Syncfusion.Windows.Forms.Diagram.ShadowStyle,Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog)">
            <summary>
            Sets the editor properties.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleValueEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleValueEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Guides">
            <summary>
            Class for drawing guides
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Guides"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.#ctor(Syncfusion.Windows.Forms.Diagram.Guides)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Guides"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.Guides"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Property container name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Guides.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Guides.Enable">
            <summary>
            Gets or sets a value indicating whether to show guides or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Guides.Margin">
            <summary>
            Gets or sets the margin between nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Guides.Type">
            <summary>
            Gets or sets the type of guide to be shown for nodes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.Guides.LineStyle">
            <summary>
            Gets or sets the linestyle for guides
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleEditMode">
            <summary>
            Modes for interactively editing objects with selection handles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.None">
            <summary>
            No edit mode allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.Resize">
            <summary>
            Resize the object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandleEditMode.Vertex">
            <summary>
            Edit the object's vertices.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleType">
            <summary>
            Types of brushes that can be created by a FillStyle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.Solid">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.Texture">
            <summary>
            Text brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.LinearGradient">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.Hatch">
            <summary>
            Hatch brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleType.PathGradient">
            <summary>
            Path gradient brush. Reserved for internal use.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle">
            <summary>
            Path gradient brush style enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.RectangleCenter">
            <summary>
            Path gradient brush style will be applied in center.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.RectangleLeftTop">
            <summary>
            Path gradient brush style will be applied in left top.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.RectangleLeftBottom">
            <summary>
            Path gradient brush style will be applied in left bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.RectangleRightTop">
            <summary>
            Path gradient brush style will be applied in right top.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.RectangleRightBottom">
            <summary>
            Path gradient brush style will be applied in right bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.CircleCenter">
            <summary>
            Path gradient brush style will be applied in circle center.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.CircleLeftTop">
            <summary>
            Path gradient brush style will be applied in circle left top.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.CircleLeftBottom">
            <summary>
            Path gradient brush style will be applied in circle left bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.CircleRightTop">
            <summary>
            Path gradient brush style will be applied in circle right top.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PathGradientBrushStyle.CircleRightBottom">
            <summary>
            Path gradient brush style will be applied in circle right bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GuideTypes">
            <summary>
            Guides enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GuideTypes.Center">
            <summary>
            Shows the guides for pinpoint of a node.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GuideTypes.Boundary">
            <summary>
            Shows the guides for boundary of a node. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GuideTypes.Margin">
            <summary>
            Shows the Margin line to align shapes. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.GuideTypes.All">
            <summary>
            Shows all the guides
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.GraphProxyEventArgs">
            <summary>
            Graph proxy event args.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.GraphProxyEventArgs.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.GraphProxyEventArgs"/> class.
            </summary>
            <param name="properties">The properties.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.GraphProxyEventArgs.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.GraphProxyEventHandler">
            <summary>
            Graph proxy event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">graph proxy event args.</param>
        </member>
        <member name="T:Syncfusion.SVG.IO.GraphProxy">
            <summary>
            Graph Proxy.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.GraphProxy.#ctor(System.Drawing.Graphics)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.GraphProxy"/> class.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.GraphProxy.Create(System.IntPtr,Syncfusion.SVG.IO.GraphProxy@)">
            <summary>
            Creates the specified handle.
            </summary>
            <param name="handle">The handle.</param>
            <param name="proxy">The proxy.</param>
            <returns>The graphics.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.GraphProxy.Create(System.Drawing.Image,Syncfusion.SVG.IO.GraphProxy@)">
            <summary>
            Creates the specified image.
            </summary>
            <param name="img">The image.</param>
            <param name="proxy">The proxy.</param>
            <returns>The graphics</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.GraphProxy.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>
            When overridden in a derived class, invokes the method that is specified in the provided <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> on the remote object that is represented by the current instance.
            </summary>
            <param name="msg">A <see cref="T:System.Runtime.Remoting.Messaging.IMessage"/> that contains a <see cref="T:System.Collections.IDictionary"/> of information about the method call.</param>
            <returns>
            The message returned by the invoked method, containing the return value and any out or ref parameters.
            </returns>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="Infrastructure"/>
            </PermissionSet>
        </member>
        <member name="E:Syncfusion.SVG.IO.GraphProxy.GraphInvoke">
            <summary>
            Occurs when graph invokes.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.Data">
            <summary>
            Class containing the Data.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Data.#ctor(System.Drawing.Drawing2D.PathData)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Data"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Data.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Data"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Data.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Data.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.Data.PathData">
            <summary>
            Gets the path data.
            </summary>
            <value>The path data.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Data.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Data.DataRegex">
            <summary>
            Gets the data regex.
            </summary>
            <value>The data regex.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EClipRule">
            <summary>
            Class for EFontStyle.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EClipRule"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.op_Equality(Syncfusion.SVG.IO.EClipRule,Syncfusion.SVG.IO.EClipRule)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.op_Inequality(Syncfusion.SVG.IO.EClipRule,Syncfusion.SVG.IO.EClipRule)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EClipRule.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EClipRule.Nonzero">
            <summary>
            Gets the nonzero.
            </summary>
            <value>The nonzero.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EClipRule.Evenodd">
            <summary>
            Gets the evenodd.
            </summary>
            <value>The evenodd.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EFontStretch">
            <summary>
            Class for EFontStretch.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStretch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EFontStretch"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStretch.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStretch.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="str">The STR.</param>
            <returns>The font</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStretch.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStretch.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.Wider">
            <summary>
            Gets the wider.
            </summary>
            <value>The wider.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.Narrower">
            <summary>
            Gets the narrower.
            </summary>
            <value>The narrower.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.UltraCondensed">
            <summary>
            Gets the ultra condensed.
            </summary>
            <value>The ultra condensed.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.ExtraCondensed">
            <summary>
            Gets the extra condensed.
            </summary>
            <value>The extra condensed.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.Condensed">
            <summary>
            Gets the condensed.
            </summary>
            <value>The condensed.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.SemiCondensed">
            <summary>
            Gets the semi condensed.
            </summary>
            <value>The semi condensed.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.SemiExpanded">
            <summary>
            Gets the semi expanded.
            </summary>
            <value>The semi expanded.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.Expanded">
            <summary>
            Gets the expanded.
            </summary>
            <value>The expanded.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.ExtraExpanded">
            <summary>
            Gets the extra expanded.
            </summary>
            <value>The extra expanded.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStretch.UltraExpanded">
            <summary>
            Gets the ultra expanded.
            </summary>
            <value>The ultra expanded.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EFontStyle">
            <summary>
            Class for EFontStyle.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EFontStyle"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.op_Equality(Syncfusion.SVG.IO.EFontStyle,Syncfusion.SVG.IO.EFontStyle)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.op_Inequality(Syncfusion.SVG.IO.EFontStyle,Syncfusion.SVG.IO.EFontStyle)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontStyle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStyle.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStyle.Italic">
            <summary>
            Gets the italic.
            </summary>
            <value>The italic.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontStyle.Oblique">
            <summary>
            Gets the oblique.
            </summary>
            <value>The oblique.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EFontVariant">
            <summary>
            Class for EFontVariant.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontVariant.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EFontVariant"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontVariant.Normal">
            <summary>
            Gets the normal.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontVariant.SmallCaps">
            <summary>
            Gets the small caps.
            </summary>
            <value>The small caps.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EFontWeight">
            <summary>
            Class for EFontWeight.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EFontWeight"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.op_Equality(Syncfusion.SVG.IO.EFontWeight,Syncfusion.SVG.IO.EFontWeight)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.op_Inequality(Syncfusion.SVG.IO.EFontWeight,Syncfusion.SVG.IO.EFontWeight)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EFontWeight.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Normal">
            <summary>
            Gets the normal font.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Bold">
            <summary>
            Gets the bold font weight.
            </summary>
            <value>The bold.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Bolder">
            <summary>
            Gets the bolder font.
            </summary>
            <value>The bolder.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Lighter">
            <summary>
            Gets the lighter font weight.
            </summary>
            <value>The lighter.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value100">
            <summary>
            Gets the value100.
            </summary>
            <value>The value100.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value200">
            <summary>
            Gets the value200.
            </summary>
            <value>The value200.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value300">
            <summary>
            Gets the value300.
            </summary>
            <value>The value300.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value400">
            <summary>
            Gets the value400.
            </summary>
            <value>The value400.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value500">
            <summary>
            Gets the value500.
            </summary>
            <value>The value500.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value600">
            <summary>
            Gets the value600.
            </summary>
            <value>The value600.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value700">
            <summary>
            Gets the value700.
            </summary>
            <value>The value700.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value800">
            <summary>
            Gets the value800.
            </summary>
            <value>The value800.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EFontWeight.Value900">
            <summary>
            Gets the value900.
            </summary>
            <value>The value900.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.ELengthAdjust">
            <summary>
            ELengthAdjust class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ELengthAdjust.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.ELengthAdjust"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.ELengthAdjust.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.ELengthAdjust.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="str">The string.</param>
            <returns>The length</returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.ELengthAdjust.Spacing">
            <summary>
            Gets the spacing.
            </summary>
            <value>The spacing.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.ELengthAdjust.SpacingAndGlyphs">
            <summary>
            Gets the spacing and glyphs.
            </summary>
            <value>The spacing and glyphs.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SpreadMethod">
            <summary>
            SpreadMethod enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.SpreadMethod.pad">
            <summary>
            Pad Spread method
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.SpreadMethod.reflect">
            <summary>
            Reflect Spread method
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.SpreadMethod.repeat">
            <summary>
            Repeat Spread method
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.LengthType">
            <summary>
            Length type enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.Unknown">
            <summary>
            Unknown length method
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.Number">
            <summary>
            Length in number
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.Percentage">
            <summary>
            Length in percentage
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.EMS">
            <summary>
            Length in EMS
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.EXS">
            <summary>
            Length in EXS
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.PX">
            <summary>
            Length in PX
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.CM">
            <summary>
            Length in CM
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.MM">
            <summary>
            Length in MM
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.IN">
            <summary>
            Length in IN
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.PT">
            <summary>
            Length in PT
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.LengthType.PC">
            <summary>
            Length in PC
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.AngleType">
            <summary>
            Angle type enumeration.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.AngleType.UNKNOWN">
            <summary>
            Unknown angle.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.AngleType.UNSPECIFIED">
            <summary>
            Unspecified angle.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.AngleType.DEG">
            <summary>
            Angle in Degree
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.AngleType.RAD">
            <summary>
            Angle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.SVG.IO.AngleType.GRAD">
            <summary>
            Angle in grad.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.EStrokeLinecap">
            <summary>
            EStrokeLinecap class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EStrokeLinecap"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="str">The string.</param>
            <returns>The stroke line.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.op_Equality(Syncfusion.SVG.IO.EStrokeLinecap,Syncfusion.SVG.IO.EStrokeLinecap)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.op_Inequality(Syncfusion.SVG.IO.EStrokeLinecap,Syncfusion.SVG.IO.EStrokeLinecap)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinecap.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinecap.Butt">
            <summary>
            Gets the stroke line cap.
            </summary>
            <value>The stroke line cap.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinecap.Round">
            <summary>
            Gets the round.
            </summary>
            <value>The round.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinecap.Square">
            <summary>
            Gets the square.
            </summary>
            <value>The square.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EStrokeLinejoin">
            <summary>
            EStrokeLinejoin class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EStrokeLinejoin"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="str">The string.</param>
            <returns>The stroke line join.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.op_Equality(Syncfusion.SVG.IO.EStrokeLinejoin,Syncfusion.SVG.IO.EStrokeLinejoin)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.op_Inequality(Syncfusion.SVG.IO.EStrokeLinejoin,Syncfusion.SVG.IO.EStrokeLinejoin)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EStrokeLinejoin.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinejoin.Miter">
            <summary>
            Gets the miter.
            </summary>
            <value>The miter.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinejoin.Round">
            <summary>
            Gets the round.
            </summary>
            <value>The round.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EStrokeLinejoin.Bevel">
            <summary>
            Gets the bevel.
            </summary>
            <value>The bevel.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.EUnits">
            <summary>
            EUnits class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EUnits"/> struct.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.Parse(System.String)">
            <summary>
            Parses the specified string.
            </summary>
            <param name="str">The string.</param>
            <returns>The units</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.op_Equality(Syncfusion.SVG.IO.EUnits,Syncfusion.SVG.IO.EUnits)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.op_Inequality(Syncfusion.SVG.IO.EUnits,Syncfusion.SVG.IO.EUnits)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EUnits.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.EUnits.UserSpaceOnUse">
            <summary>
            Gets the user space on use.
            </summary>
            <value>The user space on use.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EUnits.ObjectBoundingBox">
            <summary>
            Gets the object bounding box.
            </summary>
            <value>The object bounding box.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.FloatArray">
            <summary>
            Class for Number List.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.FloatArray.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.FloatArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.FloatArray.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.FloatArray"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.FloatArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.FloatArray"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.FloatArray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.FloatArray.op_Implicit(System.Single[])~Syncfusion.SVG.IO.FloatArray">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single[]"/> to <see cref="T:Syncfusion.SVG.IO.FloatArray"/>.
            </summary>
            <param name="array">The array.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.FloatArray.Array">
            <summary>
            Gets the array.
            </summary>
            <value>The array.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.FloatArray.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Single"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The value at the index.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Length">
            <summary>
            Class for Length.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Length"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.#ctor(System.Single,Syncfusion.SVG.IO.LengthType)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Length"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Length"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The length.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.op_Implicit(System.String)~Syncfusion.SVG.IO.Length">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Syncfusion.SVG.IO.Length"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.op_Implicit(System.Int32)~Syncfusion.SVG.IO.Length">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Syncfusion.SVG.IO.Length"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.op_Implicit(System.Single)~Syncfusion.SVG.IO.Length">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Syncfusion.SVG.IO.Length"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.op_Explicit(Syncfusion.SVG.IO.Length)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Syncfusion.SVG.IO.Length"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="length">The length.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.GetValue(System.Single)">
            <summary>
            Gets the value.
            </summary>
            <param name="max">The max.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Length.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.Primary">
            <summary>
            Gets the primary.
            </summary>
            <value>The primary.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Length.LengthRegex">
            <summary>
            Gets the length regex.
            </summary>
            <value>The length regex.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.LengthRect">
            <summary>
            Class for ViewBox.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.LengthRect.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.LengthRect"/> struct.
            </summary>
            <param name="rect">The rect.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.LengthRect.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.LengthRect"/> struct.
            </summary>
            <param name="primary">The primary.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.LengthRect.#ctor(Syncfusion.SVG.IO.Length,Syncfusion.SVG.IO.Length,Syncfusion.SVG.IO.Length,Syncfusion.SVG.IO.Length)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.LengthRect"/> struct.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.LengthRect.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The length rect</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.LengthRect.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.X">
            <summary>
            Gets the X.
            </summary>
            <value>The X.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.Y">
            <summary>
            Gets the Y.
            </summary>
            <value>The Y.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.Width">
            <summary>
            Gets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.Height">
            <summary>
            Gets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LengthRect.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.NoneColor">
            <summary>
            Class for Color.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.NoneColor"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.NoneColor"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.op_Implicit(System.Drawing.Color)~Syncfusion.SVG.IO.NoneColor">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Drawing.Color"/> to <see cref="T:Syncfusion.SVG.IO.NoneColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.op_Implicit(System.String)~Syncfusion.SVG.IO.NoneColor">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Syncfusion.SVG.IO.NoneColor"/>.
            </summary>
            <param name="color">The color.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.NoneColor.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.Color">
            <summary>
            Gets the color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.ColorRegex">
            <summary>
            Gets the color regex.
            </summary>
            <value>The color regex.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.ColorRegexPercent">
            <summary>
            Gets the color regex percent.
            </summary>
            <value>The color regex percent.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.Hex6ColorRegex">
            <summary>
            Gets the hex6 color regex.
            </summary>
            <value>The hex6 color regex.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.Hex3ColorRegex">
            <summary>
            Gets the hex3 color regex.
            </summary>
            <value>The hex3 color regex.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.IsNone">
            <summary>
            Gets a value indicating whether this instance is none.
            </summary>
            <value><c>true</c> if this instance is none; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.NoneColor.Primaty">
            <summary>
            Gets the primaty.
            </summary>
            <value>The primaty.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Number">
            <summary>
            Number struct
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Number"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Number"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The number.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.op_Implicit(System.String)~Syncfusion.SVG.IO.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Syncfusion.SVG.IO.Number"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.op_Implicit(System.Int32)~Syncfusion.SVG.IO.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Syncfusion.SVG.IO.Number"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.op_Implicit(System.Single)~Syncfusion.SVG.IO.Number">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Syncfusion.SVG.IO.Number"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Number.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.Number.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Number.Primary">
            <summary>
            Gets the primary.
            </summary>
            <value>The primary.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Number.Empty">
            <summary>
            Gets the empty.
            </summary>
            <value>The empty.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Opacity">
            <summary>
            Opacity struct.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Opacity"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Opacity"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Opacity"/> struct.
            </summary>
            <param name="alpha">The alpha.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Opacity"/> struct.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.op_Implicit(System.Single)~Syncfusion.SVG.IO.Opacity">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Syncfusion.SVG.IO.Opacity"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.op_Implicit(System.Byte)~Syncfusion.SVG.IO.Opacity">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Syncfusion.SVG.IO.Opacity"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Opacity.Parse(System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns>The opacity.</returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.Opacity.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Opacity.Alpha">
            <summary>
            Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.PointsArray">
            <summary>
            Class for PointsList.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PointsArray.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PointsArray"/> class.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PointsArray.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PointsArray"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PointsArray.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PointsArray"/> class.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.PointsArray.Points">
            <summary>
            Gets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SFont">
            <summary>
            Class for SFont.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SFont"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.Style">
            <summary>
            Class for Style.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.IFillAttributes">
            <summary>
            Fill attributes interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFillAttributes.Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFillAttributes.FillOpacity">
            <summary>
            Gets or sets the fill opacity.
            </summary>
            <value>The fill opacity.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.IStrokeAttributes">
            <summary>
            Stroke attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeLinecap">
            <summary>
            Gets or sets the stroke linecap.
            </summary>
            <value>The stroke linecap.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeLinejoin">
            <summary>
            Gets or sets the stroke linejoin.
            </summary>
            <value>The stroke linejoin.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeMiterlimit">
            <summary>
            Gets or sets the stroke miterlimit.
            </summary>
            <value>The stroke miterlimit.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeDasharray">
            <summary>
            Gets or sets the stroke dasharray.
            </summary>
            <value>The stroke dasharray.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeDashoffset">
            <summary>
            Gets or sets the stroke dashoffset.
            </summary>
            <value>The stroke dashoffset.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStrokeAttributes.StrokeOpacity">
            <summary>
            Gets or sets the stroke opacity.
            </summary>
            <value>The stroke opacity.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.ITransformAttribute">
            <summary>
            Transform attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.ITransformAttribute.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.IOpacityAttribute">
            <summary>
            Opacity attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IOpacityAttribute.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Style"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Style"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.Add(System.String,System.Object)">
            <summary>
            Adds the specified attr.
            </summary>
            <param name="attr">The attr.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.GetAttribute(System.Object,System.Object)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="defValue">The def value.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Style.SetAttribute(System.Object,System.Object,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="defValue">The def value.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Divisor">
            <summary>
            Gets the divisor.
            </summary>
            <value>The divisor.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeLinecap">
            <summary>
            Gets or sets the stroke linecap.
            </summary>
            <value>The stroke linecap.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeLinejoin">
            <summary>
            Gets or sets the stroke linejoin.
            </summary>
            <value>The stroke linejoin.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeMiterlimit">
            <summary>
            Gets or sets the stroke miterlimit.
            </summary>
            <value>The stroke miterlimit.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeDasharray">
            <summary>
            Gets or sets the stroke dasharray.
            </summary>
            <value>The stroke dasharray.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeDashoffset">
            <summary>
            Gets or sets the stroke dashoffset.
            </summary>
            <value>The stroke dashoffset.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IStrokeAttributes#StrokeOpacity">
            <summary>
            Gets or sets the stroke opacity.
            </summary>
            <value>The stroke opacity.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IFillAttributes#Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IFillAttributes#FillOpacity">
            <summary>
            Gets or sets the fill opacity.
            </summary>
            <value>The fill opacity.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#ITransformAttribute#Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Style.Syncfusion#SVG#IO#IOpacityAttribute#Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SVG">
            <summary>
            Class for SVG.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.NameSpaceDoc">
            <summary>
            This provides control to export the diagram as svg document.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.TransformList">
            <summary>
            Class for TransformList.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.TransformList.#ctor(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.TransformList"/> class.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.TransformList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.TransformList"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.TransformList.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.TransformList.ParseString(System.String)">
            <summary>
            Parses the string.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.TransformList.Matrix">
            <summary>
            Gets the matrix.
            </summary>
            <value>The matrix.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Utility">
            <summary>
            Class for Utility.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetFloat(System.String)">
            <summary>
            Gets the float.
            </summary>
            <param name="value">The value.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetFloat(System.Single)">
            <summary>
            Gets the float.
            </summary>
            <param name="value">The value.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetNumber(System.String)">
            <summary>
            Gets the number.
            </summary>
            <param name="value">The value.</param>
            <returns>The float value.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetNumbers(System.String)">
            <summary>
            Gets the numbers.
            </summary>
            <param name="value">The value.</param>
            <returns>The float.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetGDIPen(Syncfusion.SVG.IO.IStrokeAttributes)">
            <summary>
            Gets the GDI pen.
            </summary>
            <param name="elem">The element.</param>
            <returns>The pen</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.SetGDIPen(Syncfusion.SVG.IO.IStrokeAttributes,System.Drawing.Pen)">
            <summary>
            Sets the GDI pen.
            </summary>
            <param name="elem">The stroke attributes.</param>
            <param name="pen">The pen.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetGDIBrush(Syncfusion.SVG.IO.IFillAttributes,Syncfusion.SVG.IO.SvgDocument)">
            <summary>
            Gets the GDI brush.
            </summary>
            <param name="elem">The fill attributes.</param>
            <param name="doc">The doc.</param>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.SetGDIBrush(Syncfusion.SVG.IO.IFillAttributes,System.Drawing.Brush)">
            <summary>
            Sets the GDI brush.
            </summary>
            <param name="elem">The fill attribute.</param>
            <param name="br">The brush.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetGDIFont(Syncfusion.SVG.IO.IFontAttributes)">
            <summary>
            Gets the GDI font.
            </summary>
            <param name="elem">The font attribute.</param>
            <returns>The font</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.SetGDIFont(Syncfusion.SVG.IO.IFontAttributes,System.Drawing.Font)">
            <summary>
            Sets the GDI font.
            </summary>
            <param name="elem">The font attribute.</param>
            <param name="font">The font.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetIdFromUrl(System.String)">
            <summary>
            Gets the id from URL.
            </summary>
            <param name="url">The URL.</param>
            <returns>The ID</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetUrlFromId(System.String)">
            <summary>
            Gets the URL from id.
            </summary>
            <param name="id">The id.</param>
            <returns>The url</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetSpecialBrush(Syncfusion.SVG.IO.Element)">
            <summary>
            Gets the special brush.
            </summary>
            <param name="elem">The element.</param>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetGDIBrush(Syncfusion.SVG.IO.SuperElement)">
            <summary>
            Gets the GDI brush.
            </summary>
            <param name="elem">The element.</param>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Utility.GetGDIPen(Syncfusion.SVG.IO.SuperElement)">
            <summary>
            Gets the GDI pen.
            </summary>
            <param name="elem">The element.</param>
            <returns>The pen</returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.Utility.FloatFormat">
            <summary>
            Gets the float format.
            </summary>
            <value>The float format.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Utility.NumberChars">
            <summary>
            Gets the number chars.
            </summary>
            <value>The number chars.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Utility.NumberRegex">
            <summary>
            Gets the number regex.
            </summary>
            <value>The number regex.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Utility.UrlRegex">
            <summary>
            Gets the URL regex.
            </summary>
            <value>The URL regex.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Element">
            <summary>
            Element class.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.IElement">
            <summary>
            Element interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IElement.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IElement.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IElement.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IElement.OwnerDocument">
            <summary>
            Gets the owner document.
            </summary>
            <value>The owner document.</value>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Element"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.AddChild(Syncfusion.SVG.IO.Element)">
            <summary>
            Adds the child.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.SetDocument(Syncfusion.SVG.IO.SvgDocument)">
            <summary>
            Sets the document.
            </summary>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.GetAttribute(System.Object,System.Object)">
            <summary>
            Gets the attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="defValue">The def value.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.SetAttribute(System.Object,System.Object,System.Object)">
            <summary>
            Sets the attribute.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="defValue">The def value.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.CanAddChild(Syncfusion.SVG.IO.Element)">
            <summary>
            Determines whether this instance [can add child] the specified elem.
            </summary>
            <param name="elem">The elem.</param>
            <returns>
            <c>true</c> if this instance [can add child] the specified elem; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Children">
            <summary>
            Gets the children.
            </summary>
            <value>The children.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Attributes">
            <summary>
            Gets the attributes.
            </summary>
            <value>The attributes.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Parent">
            <summary>
            Gets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.OwnerDocument">
            <summary>
            Gets the owner document.
            </summary>
            <value>The owner document.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.Element.ElementsList">
            <summary>
            Elements list class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.ElementsList.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.Element.ElementsList"/> class.
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.Element.ElementsList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.ElementsList.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Syncfusion.SVG.IO.Element"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <value>The element</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.Element.ElementsList.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SuperElement">
            <summary>
            SuperElement class.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.IStyleAttribute">
            <summary>
            Style attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IStyleAttribute.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.IFontAttributes">
            <summary>
            Font attributes interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
            <value>The font style.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontVariant">
            <summary>
            Gets or sets the font variant.
            </summary>
            <value>The font variant.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <value>The font weight.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
            <value>The stretched font.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.FontSizeAdjust">
            <summary>
            Gets or sets the font size adjust.
            </summary>
            <value>The adjusted font size.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IFontAttributes.Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.IViewBoxAttribute">
            <summary>
            ViewBox attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IViewBoxAttribute.ViewBox">
            <summary>
            Gets or sets the view box.
            </summary>
            <value>The view box.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.IClipingAttribute">
            <summary>
            Clipping attribute interface.
            </summary>
        </member>
        <member name="P:Syncfusion.SVG.IO.IClipingAttribute.ClipRule">
            <summary>
            Gets or sets the clip rule.
            </summary>
            <value>The clip rule.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.IClipingAttribute.ClipPath">
            <summary>
            Gets or sets the clip path.
            </summary>
            <value>The clip path.</value>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SuperElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.SetXmlAttribute(System.Xml.XmlAttribute)">
            <summary>
            Sets the XML attribute.
            </summary>
            <param name="attr">The attributes.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.PushGraphics(System.Drawing.Graphics)">
            <summary>
            Pushes the graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.PopGraphics(System.Drawing.Graphics)">
            <summary>
            Pops the graphics.
            </summary>
            <param name="g">The g.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.PrepeareDraw(System.Drawing.Graphics)">
            <summary>
            Prepares the drawing.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SuperElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#Stroke">
            <summary>
            Gets or sets the stroke.
            </summary>
            <value>The stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeWidth">
            <summary>
            Gets or sets the width of the stroke.
            </summary>
            <value>The width of the stroke.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeLinecap">
            <summary>
            Gets or sets the stroke linecap.
            </summary>
            <value>The stroke linecap.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeLinejoin">
            <summary>
            Gets or sets the stroke linejoin.
            </summary>
            <value>The stroke linejoin.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeMiterlimit">
            <summary>
            Gets or sets the stroke miterlimit.
            </summary>
            <value>The stroke miterlimit.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeDasharray">
            <summary>
            Gets or sets the stroke dasharray.
            </summary>
            <value>The stroke dasharray.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeDashoffset">
            <summary>
            Gets or sets the stroke dashoffset.
            </summary>
            <value>The stroke dashoffset.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IStrokeAttributes#StrokeOpacity">
            <summary>
            Gets or sets the stroke opacity.
            </summary>
            <value>The stroke opacity.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFillAttributes#Fill">
            <summary>
            Gets or sets the fill.
            </summary>
            <value>The fill.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFillAttributes#FillOpacity">
            <summary>
            Gets or sets the fill opacity.
            </summary>
            <value>The fill opacity.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#ITransformAttribute#Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Style">
            <summary>
            Gets or sets the style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontFamily">
            <summary>
            Gets or sets the font family.
            </summary>
            <value>The font family.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontStyle">
            <summary>
            Gets or sets the font style.
            </summary>
            <value>The font style.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontVariant">
            <summary>
            Gets or sets the font variant.
            </summary>
            <value>The font variant.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontWeight">
            <summary>
            Gets or sets the font weight.
            </summary>
            <value>The font weight.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontStretch">
            <summary>
            Gets or sets the font stretch.
            </summary>
            <value>The stretched font.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontSize">
            <summary>
            Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#FontSizeAdjust">
            <summary>
            Gets or sets the font size adjust.
            </summary>
            <value>The adjusted font size.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IFontAttributes#Font">
            <summary>
            Gets or sets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IViewBoxAttribute#ViewBox">
            <summary>
            Gets or sets the view box.
            </summary>
            <value>The view box.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IOpacityAttribute#Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IClipingAttribute#ClipRule">
            <summary>
            Gets or sets the clip rule.
            </summary>
            <value>The clip rule.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SuperElement.Syncfusion#SVG#IO#IClipingAttribute#ClipPath">
            <summary>
            Gets or sets the clip path.
            </summary>
            <value>The clip path.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.CircleElement">
            <summary>
            CircleElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.CircleElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.CircleElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.CircleElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.CircleElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.CircleElement.R">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.CircleElement.CX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.CircleElement.CY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.ClipPathElement">
            <summary>
            ClipPathElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ClipPathElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.ClipPathElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ClipPathElement.GetResultPath">
            <summary>
            Gets the result path.
            </summary>
            <returns>The graphics path</returns>
        </member>
        <member name="T:Syncfusion.SVG.IO.DefsElement">
            <summary>
            DefsElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.DefsElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.DefsElement"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.EllipseElement">
            <summary>
            EllipseElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EllipseElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.EllipseElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.EllipseElement.FromRectangleF(System.Drawing.RectangleF)">
            <summary>
            Ellipse from the rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Ellipse element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EllipseElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.EllipseElement.FromCoordinates(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Froms the coordinates.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>Ellipse element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.EllipseElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.EllipseElement.RX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EllipseElement.RY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EllipseElement.CX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.EllipseElement.CY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.GElement">
            <summary>
            GElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.GElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.GElement"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.SVG.IO.ImageElement">
            <summary>
            ImageElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ImageElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.ImageElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ImageElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.ImageElement.FromImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Froms the image.
            </summary>
            <param name="img">The img.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns>Image element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.ImageElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.ImageElement.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.ImageElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.ImageElement.X">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.ImageElement.Y">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.ImageElement.HRef">
            <summary>
            Gets or sets the H ref.
            </summary>
            <value>The H ref.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.LinearGradientElement">
            <summary>
            LinearGradientElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.LinearGradientElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.LinearGradientElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.LinearGradientElement.GetGDIBrush">
            <summary>
            Gets the GDI brush.
            </summary>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.LinearGradientElement.FromBrush(System.Drawing.Drawing2D.LinearGradientBrush)">
            <summary>
            Froms the brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.LinearGradientElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.LinearGradientElement.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.X1">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.Y1">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.X2">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.Y2">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.GradientTransform">
            <summary>
            Gets or sets the gradient transform.
            </summary>
            <value>The gradient transform.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.GradientUnits">
            <summary>
            Gets or sets the gradient units.
            </summary>
            <value>The gradient units.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.SpreadMethod">
            <summary>
            Gets or sets the spread method.
            </summary>
            <value>The spread method.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LinearGradientElement.HRef">
            <summary>
            Gets or sets the H ref.
            </summary>
            <value>The H ref.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.LineElement">
            <summary>
            LineElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.LineElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.LineElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.LineElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.LineElement.FromPoints(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates the <see cref="T:Syncfusion.SVG.IO.LineElement"/> from its coords.
            </summary>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <returns>
            Created <see cref="T:Syncfusion.SVG.IO.LineElement"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.LineElement.FromCoordinates(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the <see cref="T:Syncfusion.SVG.IO.LineElement"/> from its coords.
            </summary>
            <param name="x1">The x-location of the first point.</param>
            <param name="y1">The y-location of the first point.</param>
            <param name="x2">The x-location of the second point.</param>
            <param name="y2">The y-location of the second point.</param>
            <returns>Created <see cref="T:Syncfusion.SVG.IO.LineElement"/>.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.LineElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.LineElement.X1">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LineElement.Y1">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LineElement.X2">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.LineElement.Y2">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.PathElement">
            <summary>
            PathElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PathElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PathElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PathElement.GetPath">
            <summary>
            Gets the path.
            </summary>
            <returns>The graphics path</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.PathElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PathElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.PathElement.D">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.PatternElement">
            <summary>
            PatternElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PatternElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.FormTextureBrush(System.Drawing.TextureBrush)">
            <summary>
            Forms the texture brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>Pattern element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.FormHatchBrush(System.Drawing.Drawing2D.HatchBrush)">
            <summary>
            Forms the hatch brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>The pattern element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.GetGDIBrush">
            <summary>
            Gets the GDI brush.
            </summary>
            <returns>The GDI brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.PatternElement.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.X">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.Y">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The lengthY.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.HRef">
            <summary>
            Gets or sets the H ref.
            </summary>
            <value>The H ref.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.PatternTransform">
            <summary>
            Gets or sets the pattern transform.
            </summary>
            <value>The pattern transform.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.PatternContentUnits">
            <summary>
            Gets or sets the pattern content units.
            </summary>
            <value>The pattern content units.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.PatternElement.PatternUnits">
            <summary>
            Gets or sets the pattern units.
            </summary>
            <value>The pattern units.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.PolygonElement">
            <summary>
            Class for Polygon.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolygonElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PolygonElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolygonElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolygonElement.FromPoints(System.Drawing.PointF[])">
            <summary>
            Froms the points.
            </summary>
            <param name="points">The points.</param>
            <returns>Polygon element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolygonElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.PolygonElement.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.PolylineElement">
            <summary>
            Poly line class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolylineElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.PolylineElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolylineElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.PolylineElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.PolylineElement.Points">
            <summary>
            Gets or sets the points.
            </summary>
            <value>The points.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.RadialGradientElement">
            <summary>
            RadialGradientElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.RadialGradientElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.RadialGradientElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.RadialGradientElement.GetGDIBrush">
            <summary>
            Gets the GDI brush.
            </summary>
            <returns>The brush</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.RadialGradientElement.FromBrush(System.Drawing.Drawing2D.PathGradientBrush)">
            <summary>
            Froms the brush.
            </summary>
            <param name="brush">The brush.</param>
            <returns>Radial gradient element.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.RadialGradientElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.RadialGradientElement.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.CX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.CY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.FX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.FY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.R">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.GradientTransform">
            <summary>
            Gets or sets the gradient transform.
            </summary>
            <value>The gradient transform.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.GradientUnits">
            <summary>
            Gets or sets the gradient units.
            </summary>
            <value>The gradient units.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.SpreadMethod">
            <summary>
            Gets or sets the spread method.
            </summary>
            <value>The spread method.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RadialGradientElement.HRef">
            <summary>
            Gets or sets the H ref.
            </summary>
            <value>The H ref.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.RectElement">
            <summary>
            RectElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.RectElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.RectElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.RectElement.FromRectangleF(System.Drawing.RectangleF)">
            <summary>
            Rect from the rectangle.
            </summary>
            <param name="rect">The rect.</param>
            <returns>Rect element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.RectElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.RectElement.FromCoordinates(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates the <see cref="T:Syncfusion.SVG.IO.RectElement"/> from given coords.
            </summary>
            <param name="x">The x-location of the element.</param>
            <param name="y">The y-location of the element.</param>
            <param name="width">The width of the element.</param>
            <param name="height">The height of the element.</param>
            <returns>Rect element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.RectElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.X">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.Y">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.RX">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.RectElement.RY">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.StopElement">
            <summary>
            StopElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.StopElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.StopElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.StopElement.FromColor(System.Drawing.Color,Syncfusion.SVG.IO.Length)">
            <summary>
            The stop element color.
            </summary>
            <param name="color">The color.</param>
            <param name="offset">The offset.</param>
            <returns>Stop element</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.StopElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.StopElement.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.StopElement.StopColor">
            <summary>
            Gets or sets the color of the stop.
            </summary>
            <value>The color of the stop.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.StopElement.StopOpacity">
            <summary>
            Gets or sets the stop opacity.
            </summary>
            <value>The stop opacity.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SvgElement">
            <summary>
            SvgElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SvgElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgElement.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the specified graphics.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgElement.SetClip(System.Drawing.Graphics)">
            <summary>
            Sets the clip.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgElement.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgElement.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgElement.X">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgElement.Y">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.TextElement">
            <summary>
            TextElement class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.TextElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.TextElement"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.TextElement.DrawSelf(System.Drawing.Graphics)">
            <summary>
            Draws self.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.TextElement.ParseXml(System.Xml.XmlNode)">
            <summary>
            Parses the XML.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.X">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.Y">
            <summary>
            Gets or sets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.DX">
            <summary>
            Gets or sets the DX length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.DY">
            <summary>
            Gets or sets the DY length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.TextLength">
            <summary>
            Gets or sets the length of the text.
            </summary>
            <value>The length of the text.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.Rotate">
            <summary>
            Gets or sets the rotate.
            </summary>
            <value>The rotate.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.TextElement.LengthAdjust">
            <summary>
            Gets or sets the length adjust.
            </summary>
            <value>The length adjust.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SvgDocument">
            <summary>
            Class containing SVG Document.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SvgDocument"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.FindElement(System.String)">
            <summary>
            Finds the element.
            </summary>
            <param name="id">The id.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.Save(System.String)">
            <summary>
            Saves the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.Load(System.String)">
            <summary>
            Loads the specified filename.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.FindElement(System.String,Syncfusion.SVG.IO.Element)">
            <summary>
            Finds the element.
            </summary>
            <param name="id">The id.</param>
            <param name="elem">The elem.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.SaveElement(Syncfusion.SVG.IO.Element,System.Xml.XmlNode,System.Xml.XmlDocument)">
            <summary>
            Saves the element.
            </summary>
            <param name="elem">The element.</param>
            <param name="parent">The parent.</param>
            <param name="doc">The doc.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.LoadElements(System.Xml.XmlNode,Syncfusion.SVG.IO.Element)">
            <summary>
            Loads the elements.
            </summary>
            <param name="elem">The xml element.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgDocument.CanAddChild(Syncfusion.SVG.IO.Element)">
            <summary>
            Adds child element.
            </summary>
            <param name="elem">The element.</param>
            <returns>true, if can add child.</returns>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgDocument.CurrentId">
            <summary>
            Gets or sets the current id.
            </summary>
            <value>The current id.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgDocument.Svg">
            <summary>
            Gets the SVG.
            </summary>
            <value>The SVG.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgDocument.Defs">
            <summary>
            Gets the defs.
            </summary>
            <value>The defs.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.SvgGraph">
            <summary>
            Class containing Svg Graph.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SvgGraph"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.SvgGraph"/> class.
            </summary>
            <param name="generateDefault">if set to <c>true</c> [generate default].</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawDocument(System.Drawing.Graphics)">
            <summary>
            Draws the document.
            </summary>
            <param name="g">The graphics.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.SaveDocument(System.String)">
            <summary>
            Saves the document.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.LoadDocument(System.String)">
            <summary>
            Loads the document.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawRectangle(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the rectangle.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawEllipse(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the ellipse.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawPath(System.Drawing.Pen,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the path.
            </summary>
            <param name="pen">The pen.</param>
            <param name="gp">The graphics path.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawString(System.String,System.Drawing.Font,System.Drawing.Brush,System.Single,System.Single)">
            <summary>
            Draws the string.
            </summary>
            <param name="text">The text.</param>
            <param name="font">The font.</param>
            <param name="br">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.CheckDirRightToLeft">
            <summary>
            Check the DirectionRighttoLeft
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.CreateTSPAN(System.String,System.Single,System.Single)">
            <summary>
            creating the TSPAN element 
            </summary>
            <param name="text"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawVerticalString(System.String,System.Single,System.Char[],System.Int32@,System.Single,System.Single,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Draw the Vertical text
            </summary>
            <param name="tempLetter"></param>
            <param name="textWidth"></param>
            <param name="letters"></param>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="textremove"></param>
            <param name="temptext"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawHorizontalString(System.String,System.Single,System.Char[],System.Int32@,System.Single,System.Single,System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Draw the Horizontal text
            </summary>
            <param name="tempLetter"></param>
            <param name="textWidth"></param>
            <param name="letters"></param>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="textremove"></param>
            <param name="temptext"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.ToCheckSpaceChar(System.Single,System.Single,System.Char[],System.Int32@,System.Single,System.Single,System.Text.StringBuilder,System.Text.StringBuilder@)">
            <summary>
            Checking the space/newline between the string
            </summary>
            <param name="textWidth"></param>
            <param name="labelsize"></param>
            <param name="letters"></param>
            <param name="i"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="textremove"></param>
            <param name="temptext"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawLine(System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the line.
            </summary>
            <param name="pen">The pen.</param>
            <param name="x1">The x1.</param>
            <param name="y1">The y1.</param>
            <param name="x2">The x2.</param>
            <param name="y2">The y2.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawPolygon(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws the polygon.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawLines(System.Drawing.Pen,System.Drawing.PointF[])">
            <summary>
            Draws the lines.
            </summary>
            <param name="pen">The pen.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.DrawImage(System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws the image.
            </summary>
            <param name="img">The img.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.FillPath(System.Drawing.Brush,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills the path.
            </summary>
            <param name="br">The brush.</param>
            <param name="gp">The graphics path.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.FillRectangle(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the rectangle.
            </summary>
            <param name="br">The br.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.FillEllipse(System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Fills the ellipse.
            </summary>
            <param name="br">The brush.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.FillPolygon(System.Drawing.Brush,System.Drawing.PointF[])">
            <summary>
            Fills the polygon.
            </summary>
            <param name="br">The brush.</param>
            <param name="points">The points.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.TranslateTransform(System.Single,System.Single)">
            <summary>
            Translates the transform.
            </summary>
            <param name="dx">The dx.</param>
            <param name="dy">The dy.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.Clear(System.Drawing.Color)">
            <summary>
            Clears the specified color.
            </summary>
            <param name="color">The color.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.SetClip(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Sets the clip.
            </summary>
            <param name="gp">The graphics path.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.ResetClip">
            <summary>
            Resets the clip.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.SvgGraph.SetClip(Syncfusion.SVG.IO.IClipingAttribute)">
            <summary>
            Sets the clip.
            </summary>
            <param name="elem">The element.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgGraph.Document">
            <summary>
            Gets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Syncfusion.SVG.IO.SvgGraph.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
            <value>The transform.</value>
        </member>
        <member name="T:Syncfusion.SVG.IO.ToSvg">
            <summary>
            Convert the diagram to SVG format.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.SVG.IO.ToSvg"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.GetRealGraphics(System.Drawing.Size)">
            <summary>
            Gets the real graphics.
            </summary>
            <param name="size">The size.</param>
            <returns>The graphics.</returns>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.Save(System.String)">
            <summary>
            Saves the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.CallBackMethod(System.Object,Syncfusion.SVG.IO.GraphProxyEventArgs)">
            <summary>
            Calls the back method.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Syncfusion.SVG.IO.GraphProxyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.PRXDrawPath(System.Object[])">
            <summary>
            The draw path.
            </summary>
            <param name="prms">The objects.</param>
        </member>
        <member name="M:Syncfusion.SVG.IO.ToSvg.PRXFillPath(System.Object[])">
            <summary>
            The fill path.
            </summary>
            <param name="prms">The objects.</param>
        </member>
        <member name="P:Syncfusion.SVG.IO.ToSvg.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter">
            <summary>
            Class containing Background Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BackgroundStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter">
            <summary>
            BorderStyle type converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BorderStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControllerConverter">
            <summary>
            Class containing Controller Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControllerConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog">
            <summary>
            Class for defining new property dialog
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.propertyBag">
            <summary>
            Dynamic property data
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.AddProperty">
            <summary>
            Adds the new property to the dynamic property collection data.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.ShowError(System.String)">
            <summary>
            Throws error when wrong value entered for a property
            </summary>
            <param name="errorMsg">Error message</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DefinePropertyDialog.PropertyBag">
            <summary>
            Gets or sets the dynamic property data
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EditStyleConverter">
            <summary>
            Class containing Edit Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EditStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleConverter">
            <summary>
            Summary description for FillStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FillStyleDialog">
            <summary>
            Class for Fill Style Dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.FillStyleDialog"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.SetUp">
            <summary>
            Setting up bindings and filling comboBoxes with values
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.OpenColorDialog(System.Drawing.Color)">
            <summary>
            Common Color dialog
            </summary>
            <param name="initialColor">The initial color.</param>
            <returns>The fill color.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.FillStyleDialog.FillStyle">
            <summary>
            Gets FillStyle property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter">
            <summary>
            Provides a way to show list of font family names in subproperties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object
            supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            <see langword="true"/> if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> should be
            called to find a common set of values the object supports; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from
            <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exclusive
            list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            <see langword="true "/>if the
            <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/>
            returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"/> is an exhaustive list of
            possible values; <see langword="false "/>if other values are possible.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a
            format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be <see langword="null"/> .</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> that holds a standard set
            of valid values, or <see langword="null"/> if the data type does not support a
            standard set of values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>
            Returns whether the given value object is valid for this type and for the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">The <see cref="T:System.Object"/> to test for validity.</param>
            <returns>
            <see langword="true "/>if the specified value is valid
            for this object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontFamilyConverter.GetAvailableFontFamilies(Syncfusion.Windows.Forms.Diagram.FontStyle)">
            <summary>
            Get the available font families for current font style.
            </summary>
            <param name="fontStyle">The font style <see cref="T:Syncfusion.Windows.Forms.Diagram.FontStyle"/>.</param>
            <returns>Collection of available font familie names.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FontStyleConverter">
            <summary>
            Class containing Font Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FontStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.FooterConverter">
            <summary>
            Class containing Footer Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FooterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FooterConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.FooterConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HeaderConverter">
            <summary>
            Class containing Header Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HeaderConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter">
            <summary>
            Class containing Label Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LabelStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter">
            <summary>
            Class containing Layout Grid Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LayoutGridConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter">
            <summary>
            Class containing EndPoint Decorator Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.EndPointDecoratorConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineRouterConverter">
            <summary>
            Class containing Fill Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouterConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouterConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineRouterConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.LineStyleConverter">
            <summary>
            Summary description for LineStyleConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.LineStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HFPositionConverter">
            <summary>
            Class containing HFPositionConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPositionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPositionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFPositionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HFBorderStyleConverter">
            <summary>
            Class containing border style converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFBorderStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFBorderStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HFBorderStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageBorderStyleConverter">
            <summary>
            Class containing page border style converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageBorderStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureSizeConverter">
            <summary>
            Measure size converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ModelConverter">
            <summary>
            Class containing ModelConverter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ModelConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageScaleConverter">
            <summary>
            Page Scale converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageScaleDialog">
            <summary>
            Editor to modify page scale.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScaleDialog"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.PageScale">
            <summary>
            Gets or sets the page scale.
            </summary>
            <value>The page scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScaleDialog.MeasureUnits">
            <summary>
            Gets or sets the measure units.
            </summary>
            <value>The measure units.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageSizeConverter">
            <summary>
            Page size converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageSizeDialog">
            <summary>
            Class containing Page size dialog
            </summary>
            <summary>
            Page size dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSizeDialog"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.PrinterSettings">
            <summary>
            Gets or sets the printer settings.
            </summary>
            <value>The printer settings.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSizeDialog.ModelContentSize">
            <summary>
            Gets or sets the size of the model content.
            </summary>
            <value>The size of the model content.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PointFConverter">
            <summary>
            PointF Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog">
            <summary>
            Class for PropertyBag dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.propertyBag">
            <summary>
            Dynamic property data
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog"/> class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PropertyBagDialog.PropertyBag">
            <summary>
            Gets or sets the dynamic property data
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor">
            <summary>
            Property value Editor for Propertybag type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor.c_strProperties">
            <summary>
            Dynamic property data 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor.UpdateReturnValue(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Windows.Forms.Diagram.PropertyBagDialog)">
            <summary>
            Updates the value  of the property
            </summary>
            <param name="editingInstance">The editing instance</param>
            <param name="editor">The editor</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor.SetEditorProps(System.Collections.Generic.Dictionary{System.String,System.Object},Syncfusion.Windows.Forms.Diagram.PropertyBagDialog)">
            <summary>
            Sets the editor properties.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PropertyBagEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter">
            <summary>
            Instance for dynamic custom type information for an object
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the DictionaryPropertyGridAdapter class.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>The name of the object, or null if the object does not have a name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>An System.ComponentModel.EventDescriptor that represents the default event for this object, or null if this object does not have events.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>The class name of the object, or null if the class does not have a name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>An System.ComponentModel.EventDescriptorCollection that represents the filtered events for this component instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>An System.ComponentModel.EventDescriptorCollection that represents the events for this component instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>A System.ComponentModel.TypeConverter that is the converter for this object, or null if there is no System.ComponentModel.TypeConverter for this object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd"> A System.ComponentModel.PropertyDescriptor that represents the property whose owner is to be found.</param>
            <returns>An System.Object that represents the owner of the specified property.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>An System.ComponentModel.AttributeCollection containing the attributes for this object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A System.Type that represents the editor for this object.</param>
            <returns>An System.Object of the specified type that is the editor for this object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>A System.ComponentModel.PropertyDescriptor that represents the default property  for this object, or null if this object does not have properties.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>A System.ComponentModel.PropertyDescriptorCollection that represents the properties for this component instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyGridAdapter.GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes"> An array of type System.Attribute that is used as a filter.</param>
            <returns>A System.ComponentModel.PropertyDescriptorCollection that represents the filtered properties for this component instance.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor">
            <summary>
            PropertyDescriptor instance for user defined property collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.#ctor(System.Collections.IDictionary,System.Object)">
            <summary>
            Initializes a new instance of the System.ComponentModel.DictionaryPropertyDescriptor class with the name and attributes in the specified System.ComponentModel.MemberDescriptor.
            </summary>
            <param name="dictionary">The Dictionary object</param>
            <param name="key">key</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
            <param name="value">The new value</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the current value of the property on a component.
            </summary>
            <param name="component">The component with the property for which to retrieve the value.</param>
            <returns>The value of a property for a given component.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns whether resetting an object changes its value.
            </summary>
            <param name="component">The component to test for reset capability.</param>
            <returns>true if resetting the component changes its value; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">The component with the property to be examined for persistence.</param>
            <returns>true if the property should be persisted; otherwise, false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating whether this property is read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.DictionaryPropertyDescriptor.ComponentType">
            <summary>
            Gets the type of the component this property is bound to.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter">
            <summary>
            Rendering Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RulerConverter">
            <summary>
            Ruler Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RulerConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ScriptConverter">
            <summary>
            Script Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ScriptConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ScriptConverter"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter">
            <summary>
            Shadow Style Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for this data type, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog">
            <summary>
            Class containing Shadow Style Dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.SetUp">
            <summary>
            Setting up bindings and filling comboBoxes with values
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.OpenColorDialog(System.Drawing.Color)">
            <summary>
            Common Color dialog
            </summary>
            <param name="initialColor">The initial color.</param>
            <returns>The shadow color.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.ShadowStyleDialog.ShadowStyle">
            <summary>
            Gets FillStyle property
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeFConverter">
            <summary>
            SizeF Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object
            to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object. If <see langword="null"/> is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents
            the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is <see langword="null"/>.</exception>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents
            the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion could not be performed.</exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the
            specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            <see langword="true "/>if <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties
            of this object; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for
            the type of array specified by the value parameter, using the specified context and
            attributes.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of array for which to get properties.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for
            this data type, or <see langword="null "/>if there are no properties.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns
            whether this converter can convert an object of the given type to the type of this converter, using
            the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            <see langword="true "/>if this converter can perform the conversion; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ViewConverter">
            <summary>
            View Converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ViewConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.GuidesConverter">
            <summary>
            Class for guides converter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GuidesConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GuidesConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets a value indicating whether this object supports properties using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <returns>
            true because <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)"/> should be called to find the properties of this object. This method never returns false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.GuidesConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Gets a collection of properties for the type of object specified by the value parameter.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="value">An <see cref="T:System.Object"/> that specifies the type of object to get the properties for.</param>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that will be used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> with the properties that are exposed for the component, or null if there are no properties.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo">
            <summary>
            A BoundsInfo is a collection of properties that define a Node transformation in current measure units.
            </summary>
            <remarks>
            Used by <see cref="T:Syncfusion.Windows.Forms.Diagram.Node"/> to save pin point position, pin point offset, size, scale and measure units.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.#ctor(Syncfusion.Windows.Forms.Diagram.BoundsInfo,Syncfusion.Windows.Forms.Diagram.MoveCallback,Syncfusion.Windows.Forms.Diagram.PinOffsetCallback,Syncfusion.Windows.Forms.Diagram.SizeCallback,Syncfusion.Windows.Forms.Diagram.PageScale)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo"/> class from source instance.
            </summary>
            <param name="src">The source instance.</param>
            <param name="pinMoveCallback">The pin point move callback.</param>
            <param name="pinOffsetCallback">The pin point offset callback.</param>
            <param name="szSizeCallback">The size callback.</param>
            <param name="nodeScale">The node scale value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.#ctor(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MoveCallback,System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.PinOffsetCallback,System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.SizeCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo"/> class from 
            known pin point position, size and pin point offset values.
            </summary>
            <param name="ptPinPoint">The pin point position.</param>
            <param name="pinMoveCallback">The pin point move callback.</param>
            <param name="szPinOffset">The pin point offset.</param>
            <param name="pinOffsetCallback">The pin point offset callback.</param>
            <param name="szSize">Size of the node.</param>
            <param name="szSizeCallback">The size callback.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.#ctor(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.SizeF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo"/> class from known 
            pin point position, size and pin point offset.
            </summary>
            <param name="ptPinPoint">The pin point position.</param>
            <param name="szPinOffset">The pin point offset.</param>
            <param name="szSize">Size of the node.</param>
            <param name="fHitTestPadding">The hit test padding.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.#ctor(Syncfusion.Windows.Forms.Diagram.BoundsInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo"/> class from source instance.
            </summary>
            <param name="src">The source instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.BoundsInfo"/> class.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references. Update reference to document eventSink and nodeScale.
            </summary>
            <remarks>
            Update m_eventSink member reference and update nodeScale object references.
            </remarks>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetPropertyContainerName">
            <summary>
            Gets the name of the property container.
            </summary>
            <returns>Name of Bounds info.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The serialization info.</param>
            <param name="context">The serialization context.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetUpperLeftPoint(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the upper left point in given units that calculated from PinPoint Position and PinOffset.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetHitTestPadding(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the hit test padding in given units.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The hit test padding value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetPinPoint(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the pin point position in given units.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The pin point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetSize(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the size in given units.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.GetPinOffset(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the pin offset in given units.
            </summary>
            <param name="unit">The measure unit of return value.</param>
            <returns>The pin offset.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.SetHitTestPadding(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the new hit test padding value.
            </summary>
            <param name="fValue">The new value to set.</param>
            <param name="unit">The measure unit of new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.SetPinPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the new pin point position.
            </summary>
            <param name="ptValue">The new point point position.</param>
            <param name="unit">The measure unit of new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.SetSize(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the new size.
            </summary>
            <param name="szValue">The new size value.</param>
            <param name="unit">The measure unit of new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.SetPinOffset(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the new pin point offset.
            </summary>
            <param name="szValue">The new pin point offset.</param>
            <param name="unit">The measure unit of new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.ScaleValue(System.Drawing.SizeF@,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean,System.Boolean)">
            <summary>
            Scales the value to current scale factor.
            </summary>
            <param name="szToScale">The size to scale.</param>
            <param name="units">The current measure units.</param>
            <param name="bSubtract">if set to <c>true</c> to subtract scale.</param>
            <param name="bParentOnly">if set to <c>true</c> to append parents scale only.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.ScaleValue(System.Drawing.PointF@,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean,System.Boolean)">
            <summary>
            Scales the value to current scale factor.
            </summary>
            <param name="ptToScale">The point to scale.</param>
            <param name="units">The current measure units.</param>
            <param name="bSubtract">if set to <c>true</c> to subtract scale.</param>
            <param name="bParentOnly">if set to <c>true</c> to append parents scale only].</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.ScaleValue(System.Single@,System.Single@,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean,System.Boolean)">
            <summary>
            Scales the value to current scale factor.
            </summary>
            <param name="x">The X point position.</param>
            <param name="y">The Y point position.</param>
            <param name="units">The current measure units.</param>
            <param name="bSubtract">if set to <c>true</c> to subtract scale.</param>
            <param name="bParentOnly">if set to <c>true</c> to append parents scale only.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.RecordMove(System.String,System.Drawing.SizeF)">
            <summary>
            Records the move operation to history.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <param name="szMoveOffset">The move offset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnPinPointChanging(System.Single,System.Single)">
            <summary>
            Called when pin point posiytion changing.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
            <returns><b>True</b> if new PinPoint position can be set, otherwise  - <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnPinPointChanged(System.Single,System.Single)">
            <summary>
            Called when pin point position is changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnPinOffsetChanging(System.Single,System.Single)">
            <summary>
            Called when pin point offset changing.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
            <returns><b>True</b> if new PointPointOffset value can be set, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnPinOffsetChanged(System.Single,System.Single)">
            <summary>
            Called when pin point offset is changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnSizeChanging(System.Single,System.Single)">
            <summary>
            Called when size changing.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
            <returns><b>True</b> if new size value can be set, otherwise - <b>false</b>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.OnSizeChanged(System.Single,System.Single)">
            <summary>
            Called when size is changed.
            </summary>
            <param name="fOffsetX">The offset by X axis.</param>
            <param name="fOffsetY">The offset by Y axis.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.BoundsInfo.UpdatePinOffset(System.Drawing.SizeF,System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Updates the pin point offset to size changes.
            </summary>
            <param name="szOldSize">Old Size value.</param>
            <param name="szNewSize">New Size value.</param>
            <param name="unit">The size measure unit.</param>
            <remarks>
            Update pin point offset using size change factor to resize node in all directions.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.IsResizing">
            <summary>
            Gets or sets a value indicating whether node size is changing.
            </summary>
            <value><c>true</c> if node size is changing ; otherwise, <c>false</c>.</value>
            <remarks>
            SizeChanged/PinPointChanged/PinOffsetChanged events will not be raised if it is true
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.IsSegmentChanging">
            <summary>
            Gets or sets a value indicating whether the connector's segment is changing.
            </summary>
            <value><c>true</c> if connector's segment is changing ; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.NodeScale">
            <summary>
            Gets or sets the node scale.
            </summary>
            <value>The node scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.Unit">
            <summary>
            Gets or sets the measure units that transformation parameters are saved in.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.PinPoint">
            <summary>
            Gets or sets the pin point position.
            </summary>
            <value>The pin point.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.PinOffset">
            <summary>
            Gets or sets the pin point offset.
            </summary>
            <value>The pin point offset.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.BoundsInfo.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value>The size.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CommonUsedValues">
            <summary>
            Common values used across the diagram.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ALLOWED_ROTATE_ANGLE">
            <summary>
             Allowed angle offset when node rotation is locked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ALLOWED_BOX_POSTIONS_NUMBER">
            <summary>
            Count allows box position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ALLOWED_BOX_POSTIONS_NUMBER_FLIPPED_X">
            <summary>
            Max number change by flipped by X.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ALLOWED_BOX_POSTIONS_NUMBER_FLIPPED_Y">
            <summary>
            Max numeric change by flipped by Y.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.fDEF_ANGLE_CURSOR_CHANGE">
            <summary>
            Indicated angle when mouse cursor change it cursor to next;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_ROUTE_DISTANCE">
            <summary>
            Default distance from route path points to obstacle bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_CONTROL_POINT_SIZE">
            <summary>
            Default control point size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_MIN_DECORATOR_SIZE">
            <summary>
            Default minimum size of the decorator.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_MIN_RESIZE_SIZE">
            <summary>
            Default minimum decorator size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_RIGHT_ANGLE">
            <summary>
            Default right angle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ROTATION_HANDLE_OFFSET">
            <summary>
            Rotation handle offset value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ROTATION_HANDLE_SIZE">
            <summary>
            Rotation handle size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.END_POINT_HANDLE_SIZE">
            <summary>
            End point handle size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.PIN_POINT_SIZE">
            <summary>
            Size of the pinpoint.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.RESIZE_HANDLE_SIZE">
            <summary>
            Resize the size of the handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.VERTEX_HANDLE_SIZE">
            <summary>
            Size of the vertex handle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.MAX_IMAGE_SIZE">
            <summary>
            Maximum image size than .NET Framework 2.0 can display.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.MAX_REGION_SUBPATH">
            <summary>
            Maximum subpath count to create region for hit testing by decrease processor usage.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ROTATION_HANDLE_TOUCH_OFFSET">
            <summary>
            Rotation handle offset value for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.ROTATION_HANDLE_TOUCH_SIZE">
            <summary>
            Rotation handle size for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.END_POINT_HANDLE_TOUCH_SIZE">
            <summary>
            End point handle size for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.PIN_POINT_TOUCH_SIZE">
            <summary>
            Size of the pinpoint for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.RESIZE_HANDLE_TOUCH_SIZE">
            <summary>
            Resize the size of the handle for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.VERTEX_HANDLE_TOUCH_SIZE">
            <summary>
            Size of the vertex handle for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.DEF_CONTROL_POINT_TOUCH_SIZE">
            <summary>
            Default control point size for touch.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CommonUsedValues.TOUCH__HIT_TEST_PADDING">
            <summary>
            Default line hit test padding for touch.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ControlSnapshot">
            <summary>
            Control Snap shot.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ControlSnapshot.PrintControl(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Captures the contents of a Windows Forms control using the WM_PRINTCLIENT or WM_PRINT message.
            </summary>
            <param name="control">The control to be captured.</param>
            <param name="size">The size of the window.</param>
            <returns>A Metafile with the display contents of the Windows Forms control.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.ImageCursor">
            <summary>
            Class containing custom cursor implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageCursor.CreateCursor(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            Create a custom cursor with the given bitmap
            </summary>
            <param name="bmp">Bitmap for the cursor.</param>
            <param name="xHotSpot">x hot spot to the cursor.</param>
            <param name="yHotSpot">y hot spot to the cursor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.ImageCursor.Destroy">
            <summary>
            Destroy the custom cursor      
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Geometry">
            <summary>
            Contains static declarations for functions and constants used for
            performing calculations on points, lines, and rectangles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant1">
            <summary>
            Angle of quadrant 1 for a unit circle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant2">
            <summary>
            Angle of quadrant 2 for a unit circle in radians.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant3">
            <summary>
            Angle of quadrant 3 for a unit circle in radians.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RotatePointAt(System.Single,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Rotate given point around anchor point.
            </summary>
            <param name="angle">The angle to rotate.</param>
            <param name="ptAnchor">The anchor point.</param>
            <param name="ptPoint">The point to rotate.</param>
            <remarks>
            This rotate method used only double numbers to get a tru-running.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Geometry.RadiansQuadrant4">
            <summary>
            Angle of quadrant 4 for a unit circle in radians.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertToFullCircle(System.Single)">
            <summary>
            Converts from angle range [-180 ; 180 ] , to angle range [0; 360].
            </summary>
            <param name="angle">The angle.</param>
            <returns>The angle value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertToPartCircle(System.Single)">
            <summary>
            Converts from angle range [0 ; 360 ] , to angle range [-180; 180].
            </summary>
            <param name="angle">The angle.</param>
            <returns>The angle value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRhomb(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Creates the rhomb shape.
            </summary>
            <param name="ptCenter">The center point.</param>
            <param name="szBoundingRect">The bounding rectangle.</param>
            <returns>The points</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Create a rectangle from two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
            <returns>The Rectangle</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Create right rectangle with converting negative size to offset location.
            </summary>
            <param name="ptCenter">Rectangle's center point.</param>
            <param name="szRect">Size for current rectangle. Can be negative. Later it was converted.</param>
            <returns>Right rectangle without negative size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Creates the <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The second point.</param>
            <returns>The rect</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.RectangleF)">
            <summary>
            Calculate centre point in rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>The center point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.Rectangle)">
            <summary>
            Calculate center point in rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>The center point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculate centre point between start and end points.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <returns>Centre point between start and end point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CenterPoint(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate centre point between start and end points.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <returns>Centre point between start and end point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetAnchorPoint(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            Gets the anchor point.
            </summary>
            <param name="rect">The rect.</param>
            <param name="anchor">The anchor.</param>
            <returns>The anchor point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoxAnchors(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Gets the box anchors.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="right">The right.</param>
            <param name="bottom">The bottom.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetAnchorPoint(System.Single[],Syncfusion.Windows.Forms.Diagram.BoxPosition)">
            <summary>
            Gets the anchor point.
            </summary>
            <param name="boxAnchors">The box anchors.</param>
            <param name="anchor">The anchor.</param>
            <returns>The anchor point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.PointF[])">
            <summary>
            Creates the <see cref="T:System.Drawing.RectangleF"/> from points array.
            </summary>
            <param name="pts">The points.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRect(System.Drawing.Point[])">
            <summary>
            Creates the <see cref="T:System.Drawing.RectangleF"/> from points array.
            </summary>
            <param name="pts">The point array.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ArcFromPoints(System.Drawing.Point,System.Drawing.Point,System.Drawing.Rectangle@,System.Single@,System.Single@)">
            <summary>
            Creates an arc given two points.
            </summary>
            <param name="pt1">First point.</param>
            <param name="pt2">Second point.</param>
            <param name="rcBounds">Output parameter to receive the bounds of the arc created.</param>
            <param name="startAngle">Output parameter to receive the start angle of the arc created.</param>
            <param name="sweepAngle">Output parameter to receive the end angle of the arc created.</param>
            <remarks>
            <para>
            The two points passed in are used to calculate the bounds of the arc and the
            start and end angle.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ArcFromPoints(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF@,System.Single@,System.Single@)">
            <summary>
            Create arc from given points.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <param name="rcBounds">The bound rectangle.</param>
            <param name="startAngle">The start angle.</param>
            <param name="sweepAngle">The sweep angle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.PointDistance(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate distance between two points.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <returns>Distance between the points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetPointByOffset(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Gets the point by offset.
            </summary>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <param name="fOffsetFromEnd">The offset from end to calculate new point.</param>
            <returns>Point that contain line.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineSlope(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calculate line slope.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <returns>The line slope.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineSlope(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Calculate line slope.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <returns>The line slope.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.HitTestLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Hit test line with slop.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <param name="ptTest">The point to test.</param>
            <param name="slop">The slop value.</param>
            <returns>If line contain test point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetLineIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF,System.Drawing.PointF[]@)">
            <summary>
            Gets the all line intersect points.
            </summary>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <param name="rect">The bounding rectangle.</param>
            <param name="ptsIntersect">The intersect points.</param>
            <returns>Line intersect count.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CounterClockwise(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets counters the clockwise.
            </summary>
            <param name="pt0">The first point.</param>
            <param name="pt1">The second point.</param>
            <param name="pt2">The third point.</param>
            <returns>The counter value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LinesIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Check for intersecting between two lines.
            </summary>
            <param name="pt0">The first start point.</param>
            <param name="pt1">The first end point.</param>
            <param name="pt2">The second start point.</param>
            <param name="pt3">The second end point.</param>
            <returns>true, if line intersect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LinesIntersect(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Intersect lines.
            </summary>
            <param name="gfxNodePath">The graphics node path.</param>
            <param name="ptStart">The start point.</param>
            <param name="ptEnd">The end point.</param>
            <returns>true, if lines intersect</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineSegmentIntersect(Syncfusion.Windows.Forms.Diagram.LineSegment,Syncfusion.Windows.Forms.Diagram.LineSegment,System.Drawing.PointF@)">
            <summary>
            Calcs the line segment intersect.
            </summary>
            <param name="seg1">The first segment.</param>
            <param name="seg2">The second segment.</param>
            <param name="ptIntersect">The intersect point.</param>
            <returns>true, if line segment intersect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineSegmentIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Calcs the line segment intersect.
            </summary>
            <param name="ptStart1">The first start point.</param>
            <param name="ptEnd1">The first end point.</param>
            <param name="ptStart2">The second start point.</param>
            <param name="ptEnd2">The second end point.</param>
            <param name="ptIntersect">The intersect point.</param>
            <returns>true, line segment intersect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineSegmentIntersect(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Calcs the line segment intersect.
            </summary>
            <param name="x0">The first x.</param>
            <param name="y0">The first y.</param>
            <param name="x1">The second x.</param>
            <param name="y1">The second y.</param>
            <param name="x2">The third x.</param>
            <param name="y2">The third y.</param>
            <param name="x3">The four x.</param>
            <param name="y3">The four y.</param>
            <param name="xi">The intersection x.</param>
            <param name="yi">The intersection y.</param>
            <returns>true, if line segment intersect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcVerticalIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single@)">
            <summary>
            Calcs the vertical intercept.
            </summary>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <returns>true, if calculate vertical intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcHorizontalIntercept(System.Drawing.PointF,System.Drawing.PointF,System.Single,System.Single@)">
            <summary>
            Calcs the horizontal intercept.
            </summary>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <param name="y">The y position.</param>
            <param name="x">The x position.</param>
            <returns>true, if calculate horizontal intercept</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Gets the intersecting point of two orthogonal line segments.
            </summary>
            <param name="pt1">First point in first line segment</param>
            <param name="pt2">Second point in first line segment</param>
            <param name="pt3">First point in second line segment</param>
            <param name="pt4">Second point in second line segment</param>
            <param name="ptIntersect">Point at which the orthogonal line segments intersect</param>
            <returns>true if an intersection exists; otherwise false</returns>
            <remarks>
            <para>
            This method only returns an intersection point if one of the line
            segments is horizontal and the other is vertical. It does not
            calculate the intersection of lines that are not orthogonal to
            each other and parallel with the X and Y axes.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TestOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Test two orthogonal line segments to determine if they intersect.
            </summary>
            <param name="pt1">First point in first line segment</param>
            <param name="pt2">Second point in first line segment</param>
            <param name="pt3">First point in second line segment</param>
            <param name="pt4">Second point in second line segment</param>
            <returns>true if an intersection exists; otherwise false</returns>
            <remarks>
            <para>
            This method only returns true if one of the line
            segments is horizontal and the other is vertical and
            the two line segments cross.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TestOrthogonalIntersect(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF)">
            <summary>
            Tests the given orthogonal line segment to see if it intersects the given
            rectangle.
            </summary>
            <param name="pt1">First point on the line segment</param>
            <param name="pt2">Second point on the line segment</param>
            <param name="rect">Rectangle to test</param>
            <returns>true if they intersect, otherwise false</returns>
            <remarks>
            <para>
            This method only works if the line segment is either horizontal
            or vertical. In other words, the line segment must be parallel to
            either the X or Y axis.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RectIntersectsWithLineSegment(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Check if line segment intersects with rectangle.
            </summary>
            <param name="rect">The rectangle to check.</param>
            <param name="pt1">The first point in line segment.</param>
            <param name="pt2">The second point in line segment.</param>
            <returns>true, if intersect with line segment.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets angle between two points.
            </summary>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets angle between two points.
            </summary>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Gets angle between three points.
            </summary>
            <param name="ptA">The point A.</param>
            <param name="ptO">The origin point.</param>
            <param name="ptB">The point B.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.LineAngle(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets angle between three points.
            </summary>
            <param name="ptA">The point A.</param>
            <param name="ptO">The origin point.</param>
            <param name="ptB">The point B.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRegionFromGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Creates a regions from given a graphics path.
            </summary>
            <param name="gfxPath">Graphics path to create region from</param>
            <returns>Region the graphics path occupies</returns>
            <remarks>
            <para>
            This version of CreateRegionFromGraphicsPath does no conversion between
            logical units and pixels. It assumes that the caller has already
            performed any necessary conversion.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CreateRegionFromGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Creates a region given a graphics path and measurement units.
            </summary>
            <param name="grfxPath">Graphics path to create region from.</param>
            <param name="units">GraphicsPath's PathPoints measure units.</param>
            <returns>Region the graphics path occupies</returns>
            <remarks>
            <para>
            This method generates a region given a graphics path. The region
            created is always in pixel units. If the incoming graphics path
            is not in pixel units, the points in the graphics path are
            converted before generating the region.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoxSide(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Gets the box side of endpoint to start point.
            </summary>
            <param name="ptStartPoint">The start point.</param>
            <param name="ptEndPoint">The end point.</param>
            <returns>The box side.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.WidenPoint(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.BoxSide,System.Single)">
            <summary>
            Widens the point.
            </summary>
            <param name="ptPoint">The given point.</param>
            <param name="side">The box side.</param>
            <param name="width">The widen width.</param>
            <returns>The widen point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.WidenRect(System.Drawing.RectangleF,System.Single)">
            <summary>
            Scale rectangle to given width.
            </summary>
            <param name="rcRect">The given rectangle.</param>
            <param name="fWidth">The widen width .</param>
            <returns>The widen rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            The Region class internally rounds off floating point values to the nearest integer. This causes problems when using GraphicsUnit.Inches.
            Using Pixel units for calculating the region bounds helps avoid this round off error.
            </summary>
            <param name="grfxPath">The node graphics path to intercept..</param>
            <param name="units">The units.</param>
            <param name="pt1">The first point.</param>
            <param name="pt2">The second point.</param>
            <param name="ptIntercept">The given point.</param>
            <returns>true, if boundary intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.BoxSide,System.Drawing.PointF@)">
            <summary>
            Gets the boundary intercept.
            </summary>
            <param name="grfxPath">The node to intercept.</param>
            <param name="ptCentralPoint">Central point.</param>
            <param name="side">The side of box.</param>
            <param name="ptIntercept">The intercept point.</param>
            <returns>true, if boundary intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Drawing.PointF@)">
            <summary>
            Gets the boundary intercept.
            </summary>
            <param name="grphPath">The grphPath to intercept.</param>
            <param name="units">The units.</param>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="heading">The heading.</param>
            <param name="ptIntsct">The given point.</param>
            <returns>true, if boundary intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.Region,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Gets the boundary intercepting.
            </summary>
            <param name="rgn">The shape region.</param>
            <param name="pt1">The start point.</param>
            <param name="pt2">The end point.</param>
            <param name="ptIntercept">The intercept point.</param>
            <returns>true, if boundary intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.RectangleF[],System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF@)">
            <summary>
            Gets the boundary intercepting.
            </summary>
            <param name="rcScans">The region scans.</param>
            <param name="ptInside">The inside point.</param>
            <param name="ptOutside">The outside point.</param>
            <param name="ptIntercept">The intercept point.</param>
            <returns>true, if boundary intercept.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercepts(System.Drawing.Region,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary>
            Returns the four points that intersect the given region along the X and Y
            axis extending from the given point.
            </summary>
            <param name="rgn">Region to find intercepts for</param>
            <param name="ptTarget">Point inside the region from which the X and Y axes extend</param>
            <param name="ptIntercepts">Array to receive values</param>
            <remarks>
            This method is used to determine where to dock orthogonal lines at the boundaries of shapes. The
            points are returned in the following order: north, south, east, west.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.IntToCompassHeading(System.Int32)">
            <summary>
            Convert integer value to compass heading enum.
            </summary>
            <param name="val">The val.</param>
            <returns>Compass heading.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercepts(System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Drawing.PointF,System.Drawing.PointF[])">
            <summary>
            Returns the four points that intersect the given region along the X and Y
            axis extending from the given point.
            </summary>
            <param name="grfxPath">The GRFX path.</param>
            <param name="units">The units.</param>
            <param name="ptTarget">Point inside the region from which the X and Y axes extend</param>
            <param name="ptIntercepts">Array to receive values</param>
            <remarks>
            This method is used to determine where to dock orthogonal lines at the boundaries of shapes. The
            points are returned in the following order: north, east, south, west, northeast, northwest, southeast, southwest.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercept(System.Drawing.RectangleF[],System.Drawing.RectangleF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Gets the boundary intercept.
            </summary>
            <param name="rcScans">The region scans.</param>
            <param name="rcBounds">The bounds rectangle.</param>
            <param name="ptTarget">The target point.</param>
            <param name="compassHeading">The compass heading.</param>
            <returns>The point where it intercepts.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryIntercepts(System.Drawing.RectangleF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Gets the boundary intercepts.
            </summary>
            <param name="rcBounds">The rectangle for interception check.</param>
            <param name="ptLocation">The end point what contains in rectangle.</param>
            <param name="heading">endpoint container commpassHeading.</param>
            <returns>Array of interception points. Array contains eight points of eight commpasHeadng directions.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.Union(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Unions the specified rectangle.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.Union(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Unions the specified rectangle.
            </summary>
            <param name="rect1">The first rectangle.</param>
            <param name="rect2">The second rectangle.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.Union(System.Drawing.RectangleF[])">
            <summary>
            Unions the specified rectangles.
            </summary>
            <param name="rects">The rectangle array.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetAggregateBounds(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the aggregate bounds.
            </summary>
            <param name="nodes">The node collection.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcLineLength(System.Drawing.PointF[])">
            <summary>
            Calcs the length of the line.
            </summary>
            <param name="pts">The point array.</param>
            <returns>The line length</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CompassHeadingToVector(Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Compasses the heading to vector.
            </summary>
            <param name="heading">The heading.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.IsOrthogonalLine(System.Drawing.PointF[])">
            <summary>
            Determines whether points array creates orthogonal line.
            </summary>
            <param name="pts">The points.</param>
            <returns>
            <c>true</c> if the points array creates orthogonal line; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcOrthogonalPoints(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Calculate the orthogonal points.
            </summary>
            <param name="ptEnd1">The tail end point position.</param>
            <param name="endPt1Heading">The tail end heading.</param>
            <param name="ptEnd2">The head end point position.</param>
            <param name="endPt2Heading">The head end point heading.</param>
            <param name="padLeft">The pad left.</param>
            <param name="padRight">The pad right.</param>
            <param name="padTop">The pad top.</param>
            <param name="padBottom">The pad bottom.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CalcEndpointDirections(System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading@,Syncfusion.Windows.Forms.Diagram.CompassHeading@)">
            <summary>
            Calculate the optimal directions for the two specified points.
            </summary>
            <param name="pt1">First point in the line.</param>
            <param name="pt2">Second point in the line.</param>
            <param name="pt1Heading">Heading calculated for the first point.</param>
            <param name="pt2Heading">Heading calculated for the second point.</param>
            <remarks>
            This method is used for orthogonal lines. Given two points, this method
            determines the compass headings for the two points. The compass heading
            for each point determines which direction the line will attach to the
            point.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MergePointsInLine(System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Merges the points in line.
            </summary>
            <param name="ptsPath">The array of PointF.</param>
            <param name="nIndex">Start index of the range.</param>
            <param name="nLength">Range length .</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MergePointsInLine(System.Drawing.PointF[])">
            <summary>
            Merges the points in line.
            </summary>
            <param name="pts">The array of PointF.</param>
            <returns>The points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.UpdatePointsOfPolyLine(System.Drawing.PointF[])">
            <summary>
            Updates the path points of the polyline connector.
            </summary>
            <param name="pts">Path points of the polyline connector.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CheckPointOnLine(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Checks the point on line.
            </summary>
            <param name="ptStart">The first point.</param>
            <param name="ptEnd">The second point.</param>
            <param name="nDigits">The point number to be routed.</param>
            <returns>true, if point is on the line.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MergeDuplicateLineSegments(System.Collections.ArrayList,System.Int32)">
            <summary>
            Merge the duplicate line segments.
            </summary>
            <param name="pts">The array of Point.</param>
            <param name="mergeThreshold">The merge threshold.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MergeDuplicateLineSegmentsF(System.Collections.ArrayList,System.Single)">
            <summary>
            Merge the duplicate line segments.
            </summary>
            <param name="pts">The array of PointF.</param>
            <param name="mergeThreshold">The merge threshold.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MoveLineSegment(System.Drawing.PointF[],System.Int32,System.Single,System.Single)">
            <summary>
            Moves the line segment.
            </summary>
            <param name="pts">The points.</param>
            <param name="segIdx">The segment index.</param>
            <param name="distance">The distance.</param>
            <param name="mergeThreshold">The merge threshold.</param>
            <returns>The line segments.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.MoveLineSegment(System.Drawing.Point[],System.Int32,System.Int32)">
            <summary>
            Moves the line segment.
            </summary>
            <param name="pts">The point array.</param>
            <param name="segIdx">The segment idx.</param>
            <param name="distance">The distance.</param>
            <returns>The line segments.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.UpdateRectWith(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Updates given rect with another.
            </summary>
            <param name="rcUpdating">Updating rectangle.</param>
            <param name="rcToUpdateWith">Rectangle to update with.</param>
            <returns>The rect</returns>
            <remarks>
            If updating rectangle is empty it is replaced with rectangle to update with.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.UpdateRectWith(System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Updates given rect with another.
            </summary>
            <param name="rcUpdating">Updating rectangle.</param>
            <param name="rcToUpdateWith">Rectangle to update with.</param>
            <returns>The rect.</returns>
            <remarks>
            If updating rectangle is empty it is replaced with rectangle to update with.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CheckOrthogonalLine(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Checks whether point to test lies on line
            formed with start and end points.
            </summary>
            <param name="ptStart">Start point.</param>
            <param name="ptEnd">End point.</param>
            <param name="ptTest">Point to test.</param>
            <returns>true, if point is on the line.</returns>
            <remarks>Used with orthogonal lines
            to reduce the overhead of graphics path and region creation.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.CheckOrthogonalLine(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Checks whether point to test lies on line 
            formed with start and end points.
            </summary>
            <param name="ptStart">Start point.</param>
            <param name="ptEnd">End point.</param>
            <param name="ptTest">Point to test.</param>
            <returns>The line.</returns>
            <remarks>Used with orthogonal lines
            to reduce the overhead of graphics path and region creation.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetEndPointIndex(Syncfusion.Windows.Forms.Diagram.EndPoint,System.Int32,System.Int32)">
            <summary>
            Gets the endPoint index in given path points.
            </summary>
            <param name="endPoint">The end point.</param>
            <param name="nPathLength">Length of the points path in PathNode.</param>
            <param name="nDepthOffset">The offset to inside points range..</param>
            <returns>The end point index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetProjection(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Get point projection to line.
            </summary>
            <param name="ptPoint">Point to projection.</param>
            <param name="ptLineStart">Line start point.</param>
            <param name="ptLineEnd">Line end point.</param>
            <returns>Projection point that place in line.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TranslateToGridOrigin(System.Drawing.PointF[])">
            <summary>
            Translates points to grid origin (0,0)
            </summary>
            <param name="pts">points to move.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.TranslateToOrigin(System.Drawing.PointF[],System.Drawing.PointF)">
            <summary>
            Translates points to given origin.
            </summary>
            <param name="pts">Points to move.</param>
            <param name="ptOrigin">Origin to move points to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertPoint(System.Drawing.PointF)">
            <summary>
            Convert the <c>System.Drawing.Point</c> to <c>System.Drawing.PointF</c>
            </summary>
            <param name="ptPoint">The given point.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertPoints(System.Drawing.Point[])">
            <summary>
            Converts the points.
            </summary>
            <param name="pts">The point array.</param>
            <returns>The converted points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertPoints(System.Drawing.PointF[])">
            <summary>
            Converts the points.
            </summary>
            <param name="pts">The point array.</param>
            <returns>The converted points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertSize(System.Drawing.SizeF)">
            <summary>
            Converts the size.
            </summary>
            <param name="szSize">The size.</param>
            <returns>The converted size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.ConvertRectangle(System.Drawing.RectangleF)">
            <summary>
            Converts the rectangle.
            </summary>
            <param name="rcRect">The rectangle.</param>
            <returns>The converted rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.AppendMatrix(System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Appends the matrix to rectangle.
            </summary>
            <param name="rcRect">The rectangle.</param>
            <param name="mtxTransform">The matrix transform.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.AppendMatrix(System.Drawing.PointF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Appends the matrix to point.
            </summary>
            <param name="ptPoint">The point.</param>
            <param name="mtxTransform">The matrix transform.</param>
            <returns>The matrix point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.EqualPoints(System.Drawing.PointF,System.Drawing.PointF,System.Int32)">
            <summary>
            Equals the two points.
            </summary>
            <param name="ptFirst">The first point.</param>
            <param name="ptSecond">The second point.</param>
            <param name="nDigits">The digits count to be rounded.</param>
            <returns>true, if points are equal.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RouteEndPointToHeading(System.Drawing.PointF[]@,Syncfusion.Windows.Forms.Diagram.EndPoint,System.Single)">
            <summary>
            Route the head end point to current heading.
            </summary>
            <param name="ptsPath">The last path points.</param>
            <param name="endPoint">The end point.</param>
            <param name="fRouteDistance">The route distance.</param>
            <returns>true, if head end point is routed to current heading.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetBoundaryPoint(System.Drawing.RectangleF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Gets the boundary point by compass heading checking only horizontal and vertical direction.
            </summary>
            <param name="rcBounds">The bounds to intersect.</param>
            <param name="ptInnerPoint">The point inside bounds.</param>
            <param name="heading">The intersect direction.</param>
            <returns>Boundary side point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetRouteBounds(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Gets the route container bounds by connection point.
            </summary>
            <param name="port">The port.</param>
            <returns>Route bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RouteOrthogonal(System.Drawing.RectangleF,System.Drawing.PointF,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.CompassHeading,System.Single)">
            <summary>
            Route the orthogonal from given outsidePoint to port.
            </summary>
            <param name="rcBounds">The route bounds.</param>
            <param name="ptOutside">The end point position.</param>
            <param name="ptPortPosition">The port position.</param>
            <param name="outHeading">The out heading.</param>
            <param name="fDistance">The route distance.</param>
            <returns>
            Orthogonal path routed from outside point to given port.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetCompassHeading(Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Gets the compass heading.
            </summary>
            <param name="endPoint">The end point.</param>
            <returns>Compass heading.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetCompassHeading(System.Drawing.RectangleF,System.Drawing.PointF)">
            <summary>
            Gets the compass heading direction.
            Return only North, West, South, East or None value.
            </summary>
            <param name="rcBounds">The round area.</param>
            <param name="ptPoint">The outside point.</param>
            <returns>Heading direction.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.GetRectSegmentIndex(Syncfusion.Windows.Forms.Diagram.CompassHeading)">
            <summary>
            Gets rectangle segment index by compass heading.
            </summary>
            <param name="heading">The compass heading.</param>
            <returns>The rect segment index.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.Geometry.RouteAroudRect(System.Drawing.RectangleF,System.Int32,System.Int32)">
            <summary>
            Route orthogonal line the aroud rectangle from start to end segment.
            </summary>
            <param name="rcBounds">The rectangle.</param>
            <param name="nStart">Index of the start side.</param>
            <param name="nEnd">Index of the end side.</param>
            <returns>The points.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandleRenderer">
            <summary>
            Renderer used to render the handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.HandleRenderer"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Outlines the bounding rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Outlines the bounding rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
            <param name="bWithoutRotation">if set to <c>true</c> to draw outline bounds without rotation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Outlines the bounding rectangle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rcBoundingRectangle">The bounding rectangle.</param>
            <param name="mtxTransfrom">Matrix transformations.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.OutlineSegmentsLine(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Outlines the segments line.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the selection handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Draws the selection handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="bWithoutRotation">if set to <c>true</c> handles will draw on outline.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Boolean)">
            <summary>
            Renders selection/resize handles.
            Override this method to change appearance and positioning of selection/resize handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="rcBoundary">Rectangle which has all node elements (ports, labels, etc).</param>
            <param name="mtxTransform">Transformation matrix</param>
            <param name="bWithoutRotation">if set to <c>true</c> to skip rotation transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawRotationHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the rotation handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawRotationHandle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the rotation handle.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawPinPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the pin point.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawEndPoints(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the end points.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="endPointContainer">The end point container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawEndPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.EndPoint,System.Drawing.PointF)">
            <summary>
            Draw endPoint handle in specific position.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="endPoint">EndPoint handle.</param>
            <param name="ptPosition">EndPoint position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawVertexHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Draws the vertex handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.GetHandlePosition(Syncfusion.Windows.Forms.Diagram.BoxPosition,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the handle position.
            </summary>
            <param name="handle">The handle.</param>
            <param name="node">The node.</param>
            <returns>The point</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.GetHandlePosition(Syncfusion.Windows.Forms.Diagram.BoxPosition,System.Drawing.RectangleF)">
            <summary>
            Gets the handle position.
            </summary>
            <param name="handle">The handle.</param>
            <param name="nodeBounds">The node bounds.</param>
            <returns>The handle position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.GetBoundingRect(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the bounding rect.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The bounding rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.CreateParentMatrix(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Creates the parent matrix.
            </summary>
            <param name="node">The node.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.UpdateBounds(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Rectangle@)">
            <summary>
            Updates the bounds.
            </summary>
            <param name="node">The node.</param>
            <param name="rectUpdating">The rect updating.</param>
            <summary>
            Create matrix with append parent's
            transformations on given graphics - WITHOUT ROTATIONS        
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.Render(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.HandleEditMode,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            General rendering method.
            Override this method to fully change handles rendering.
            </summary>
            <param name="grfx">Graphics to draw on.</param>
            <param name="handleEditMode">The handle edit mode.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawVertexHandle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Pen,System.Drawing.PointF)">
            <summary>
            Draws the vertex handle.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="brushVertextFill">Brush used to fill vertex interior.</param>
            <param name="penVertexOutline">Pen used to draw vertex outline.</param>
            <param name="ptHandle">The rect handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawResizeHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.Matrix,System.Boolean)">
            <summary>
            Draws the resize handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="matrixTransform">The matrix transform.</param>
            <param name="bWithoutRotation">if set to <c>true</c> handles will rotate around pin line other shape points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawRotationPrimitive(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.HandlePrimitive)">
            <summary>
            Draws the rotation primitive.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="rotationPrimitive">The rotation primitive.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawResizeHandle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.BoxPosition,System.Boolean,System.Drawing.RectangleF)">
            <summary>
            Draws the resize handle.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="handle">The handle.</param>
            <param name="bEnable">if set to <c>true</c> to draw activate handle, otherwise - <b>false</b>.</param>
            <param name="rectHandle">The rect handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawPinPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Draws the pin point.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="brushPinPoint">The brush pin point.</param>
            <param name="penHandleOutline">The pen handle outline.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.DrawRotationHandle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Draws the rotation handle.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="brushPinPoint">The brush pin point.</param>
            <param name="penHandleOutline">The pen handle outline.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandleRenderer.Enabled(Syncfusion.Windows.Forms.Diagram.BoxPosition,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Enables the specified handle.
            </summary>
            <param name="handle">The handle.</param>
            <param name="node">The shape.</param>
            <returns>true, if handle is enabled.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleRenderer.HandleColor">
            <summary>
            Gets or sets the color of the handle.
            </summary>
            <value>The color of the handle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleRenderer.HandleOutlineColor">
            <summary>
            Gets or sets the color of the handle outline.
            </summary>
            <value>The color of the handle outline.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandleRenderer.HandleDisabledColor">
            <summary>
            Gets or sets the color of the handle disabled.
            </summary>
            <value>The color of the handle disabled.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingHelper">
            <summary>
            Helper class for rendering.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.CreateIconIndirect(Syncfusion.Windows.Forms.Diagram.RenderingHelper.ICONINFO@)">
            <summary>
            API function CreateIconIndirect
            </summary>
            <param name="iconinfo">The icon info.</param>
            <returns>The IntPtr.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.RenderToImage(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Render node collection to image.
            </summary>
            <param name="nodes">The nodes to draw.</param>
            <returns>Metafile image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.RenderToImage(Syncfusion.Windows.Forms.Diagram.NodeCollection,Syncfusion.Windows.Forms.Diagram.RenderingStyle)">
            <summary>
            Render given node collection to image.
            </summary>
            <param name="nodes">The nodes to draw.</param>
            <param name="styleRender">The render style.</param>
            <returns>Metafile image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.RenderToImage(Syncfusion.Windows.Forms.Diagram.ICompositeNode,Syncfusion.Windows.Forms.Diagram.RenderingStyle)">
            <summary>
            Renders composite node using given rendering style.
            </summary>
            <param name="nodeComposite">The composite node.</param>
            <param name="styleRender">The render style.</param>
            <returns>Metafile image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.RenderToImage(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Renders composite node
            </summary>
            <param name="nodeComposite">The node composite.</param>
            <returns>The image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.CreateCursor(System.Drawing.Bitmap)">
            <summary>
            Creates a cursor from a bitmap.
            </summary>
            <param name="bmp">The bitmap.</param>
            <returns>The cursor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.CreateCursor(System.Drawing.Bitmap,System.Windows.Forms.Cursor)">
            <summary>
            Creates a cursor from a bitmap and combines it with another cursor.
            </summary>
            <param name="bmp">The bitmap.</param>
            <param name="prototype">The prototype cursor.</param>
            <returns>The cursor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.GetBoundingRectangle(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Calculate bounding rectangle of the given model.
            </summary>
            <param name="model">Model to calculate bouncing rectangle</param>
            <param name="measureUnits"><see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits"/> to convert bounding rectangle to.</param>
            <returns>Bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.GetBoundingRectangle(System.Collections.ICollection,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Calculate bounding rectangle of given nodes collection.
            </summary>
            <param name="nodes">Nodes collection to calculate bounding rectangle.</param>
            <param name="measureUnits"><see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits"/> to convert bounding rectangle to.</param>
            <returns>Bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.GetBoundingRectangle(System.Collections.ICollection,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean)">
            <summary>
            Calculate bounding rectangle of given nodes collection.
            </summary>
            <param name="nodes">Nodes collection to calculate bounding rectangle.</param>
            <param name="measureUnits"><see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits"/> to convert bounding rectangle to.</param>
            <param name="considerShadow">Indicates that need to consider shadow.</param>
            <returns>Bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.GetBoundingRectangle(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Calculate bounding rectangle of the given node.
            </summary>
            <param name="node">Node to calculate bounding rectangle.</param>
            <param name="measureUnits"><see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits"/> to convert bounding rectangle to.</param>
            <returns>Bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.GetBoundingRectangle(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Boolean)">
            <summary>
            Calculate bounding rectangle of the given node.
            </summary>
            <param name="node">Node to calculate bounding rectangle.</param>
            <param name="measureUnits"><see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits"/> to convert bounding rectangle to.</param>
            <param name="considerShadow">Indicates that need to consider shadow.</param>
            <returns>Bounding rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.RenderingHelper.ConsiderHandles(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF@,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Considers the handles.
            </summary>
            <param name="node">The node.</param>
            <param name="rectBounding">The bounding rectangle.</param>
            <param name="fMagnification">The magnification value.</param>
            <param name="measureUnits">The measure units.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.RenderingHelper.ICONINFO">
            <summary>
            API-Structure ICONINFO
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer">
            <summary>
            Base class for custom handle renderers
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.m_handleColor">
            <summary>
            Handle color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.m_handleDisabledColor">
            <summary>
            Handle disabled color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.m_handleOutlineColor">
            <summary>
            Handle outline color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.handleRenderer">
            <summary>
            Renderer of custom handle renderer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.Render(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.HandleEditMode,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            General rendering method.
            Override this method to fully change handles rendering.
            </summary>
            <param name="grfx">Graphics to draw on.</param>
            <param name="handleEditMode">The handle edit mode.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            This method renders outlining rectangle for given node.
            Override this method to change appearance and positioning of outline.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            This method renders outlining rectangle for given node.
            Override this method to change appearance and positioning of outline.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
            <param name="bWithoutRotation">if set to <c>true</c> to skip rotation transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OutlineBoundingRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)">
            <summary>
            This method renders outlining rectangle for given node.
            Override this method to change appearance and positioning of outline.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="rcBoundingRectangle">Rectangle which has all node elements (ports, labels, etc).</param>
            <param name="mtxTransfrom">Transformation matrix.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawOutlineRectangle(System.Drawing.Graphics,System.Drawing.SizeF)">
            <summary>
            Renders outlining rectangle.
            Override this method to change appearance of outline
            </summary>
            <param name="gfx">Target Graphics</param>
            <param name="size">size of outlining rectangle</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OutlineSegmentsLine(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Outlines the segments line.
            Override this method to change appearance and positioning of outline.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawSegmentOutline(System.Drawing.Graphics,System.Drawing.PointF[])">
            <summary>
            Renders segment outlining.
            Override this method to change appearance of segment outline
            </summary>
            <param name="gfx">Target Graphics</param>
            <param name="pathPoints">The segment path points.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Renders selection/resize handles.
            Override this method to change appearance and positioning of selection/resize handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Renders selection/resize handles.
            Override this method to change appearance and positioning of selection/resize handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="bWithoutRotation">if set to <c>true</c> to skip rotation transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawSelectionHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Boolean)">
            <summary>
            Renders selection/resize handles.
            Override this method to change appearance and positioning of selection/resize handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
            <param name="rcBoundary">Rectangle which has all node elements (ports, labels, etc).</param>
            <param name="mtxTransform">Transformation matrix</param>
            <param name="bWithoutRotation">if set to <c>true</c> to skip rotation transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawResizeHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Single)">
            <summary>
            Renders resize handle.
            Override this method to change appearance of resize handle.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
            <param name="rcBoundary">The node bounding rectangle.</param>
            <param name="matrixTransform">Transformation matrix.</param>
            <param name="fParentsRotation">if set to <c>true</c> to skip rotation transformation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawResizeHandleShape(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.BoxPosition,Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.RectangleF)">
            <summary>
            Renders resize handle.
            Override this method to change appearance of resize handle.
            </summary>
            <param name="gfx">Target Graphics</param>
            <param name="handle">The handle.</param>
            <param name="node">The node.</param>
            <param name="rectHandle">The handle bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawRotationHandle(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the rotation handle.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawRotationHandleInterior(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the pin point interior itself.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.CreateRotationHandleShape(System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Method creates and returns GraphicsPath that represents rotation handle
            Override this method to change rotationhandle appearance
            </summary>
            <param name="location">Location of rotation handle</param>
            <param name="handleSize">size of rotation handle</param>
            <returns>The graphics path.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawPinPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the pin point.
            Override this method to change appearance and positioning of pinpoint.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawPinPointShape(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Renders PinPoint shape.
            Override this method to change appearance of pinpoint.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawEndPoints(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Draws the end points.
            Override this method to change appearance and positioning of endpoint.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="endPointContainer">The end point container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawEndPoint(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.EndPoint,System.Drawing.PointF)">
            <summary>
            Draw endPoint handle in specific position.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="endPoint">EndPoint handle.</param>
            <param name="ptPosition">EndPoint position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawTailInterior(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws tail endpoint interior.
            Override this method to change interior.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rectBounds">The rect bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawHeadInterior(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws head endpoint interior.
            Override this method to change interior.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rectBounds">The rect bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawEndPointOutline(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Draws endpoint outline and background.
            Override this method to change endpoint outline and background.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rectHandle">The rect handle.</param>
            <param name="endpoint">The endpoint.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.DrawVertexHandles(System.Drawing.Graphics,Syncfusion.Windows.Forms.Diagram.PathNode)">
            <summary>
            Draws the vertex handles.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.OnDrawVertexHandleShape(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Pen,System.Drawing.PointF)">
            <summary>
            Called when needs to draw vertex handle shape.
            </summary>
            <param name="gfx">Graphics to draw on.</param>
            <param name="brushVertextFill">The brush vertext fill.</param>
            <param name="penVertexOutline">The pen vertex outline.</param>
            <param name="ptHandle">The handle position in.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.GetHandlePosition(Syncfusion.Windows.Forms.Diagram.BoxPosition,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the handle position.
            </summary>
            <param name="handle">The handle.</param>
            <param name="node">The node.</param>
            <returns>The point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.GetBoundingRect(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Gets the bounding rect.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.Enabled(Syncfusion.Windows.Forms.Diagram.BoxPosition,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Checks if the specified handle is enabled.
            </summary>
            <param name="handle">The handle.</param>
            <param name="node">The shape.</param>
            <returns>true, if handle is enabled.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.HandleColor">
            <summary>
            Gets or sets the color of the handle.
            </summary>
            <value>The color of the handle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.HandleOutlineColor">
            <summary>
            Gets or sets the color of the handle outline.
            </summary>
            <value>The color of the handle outline.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.UserHandleRenderer.HandleDisabledColor">
            <summary>
            Gets or sets the color of the handle disabled.
            </summary>
            <value>The color of the handle disabled.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting">
            <summary>
            Helper class that contains methods to check hit testing and append node transformations.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.m_scaleFactor">
            <summary>
            Scale factor for handles hit testing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetNodeParentTransformations(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the node transformations with all 
            parent hierarchy transformations.
            </summary>
            <param name="node">The node.</param>
            <returns>returns the Parent transformation Matrix value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsLocalTransformations(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the parents rotation.
            </summary>
            <param name="node">The node.</param>
            <returns>returns the Parents local transformation Matrix value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsTransformations(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the parents rotation.
            </summary>
            <param name="node">The node.</param>
            <returns>returns the Parent transformation Matrix value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsTransformations(Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
             Returns matrix which is an accumulated transformations from parents according to hierarchy, if bWithGivenNode parameter is set to true, node's own matrix will also be included).
            </summary>
            <param name="node">Node for verification</param>
            <param name="bWithGivenNode">if bWithGivenNode parameter is set to true, node's own matrix will also be included. </param>
            <returns>returns the Parents transformation Matrix value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetUpperLeftPoint(Syncfusion.Windows.Forms.Diagram.IUnitIndependent,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the upper left point of node by pin position and pint offset.
            </summary>
            <param name="node">The node.</param>
            <param name="units">The units.</param>
            <returns>Returns the Upper Left Point value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetUpperLeftPoint(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the upper left point of node by pin position and pint offset.
            </summary>
            <param name="node">The node.</param>
            <param name="units">The units.</param>
            <returns>Returns the Upper Left Point value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsFlipX(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Indicates whether FlipX is enabled for parent of the given Node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns true, if the parents of the given node's FlipX is enabled</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsFlipX(Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Indicates whether FlipX is enabled for parent of the given Node.
            </summary>
            <param name="node">The node.</param>
            <param name="bGivenInclude">if set to <c>true</c> given node will include to result.</param>
            <returns>Returns true, if the parent of the given node's FlipX is enabled</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsFlipY(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Indicates whether FlipY is enabled for parent of the given Node.
            </summary>
            <param name="node">The node.</param>
            <returns>Returns true, if the parents of the given node's FlipY is enabled</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsFlipY(Syncfusion.Windows.Forms.Diagram.Node,System.Boolean)">
            <summary>
            Indicates whether FlipX is enabled for parent of the given Node.
            </summary>
            <param name="node">The node.</param>
            <param name="bGivenInclude">if set to <c>true</c> given node will include to result.</param>
            <returns>Returns true, if the parent of the given node's FlipX is enabled</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.AppendParentsFlipTransformations(System.Drawing.Drawing2D.Matrix,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Appends the parents flip transformations.
            </summary>
            <param name="mtxMatrix">The matrix to append.</param>
            <param name="node">The node.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetEndPointLocation(Syncfusion.Windows.Forms.Diagram.ConnectionPoint,Syncfusion.Windows.Forms.Diagram.EndPoint)">
            <summary>
            Get docked the end point location to port location.
            </summary>
            <param name="port">The port.</param>
            <param name="endPoint">The end point.</param>
            <returns>The endpoint.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetPortPosition(Syncfusion.Windows.Forms.Diagram.ConnectionPoint)">
            <summary>
            Gets the port position with parent transformations.
            </summary>
            <param name="port">The port.</param>
            <returns>The port position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsRotationTransform(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the parents rotation transform.
            </summary>
            <param name="node">The node.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetParentsRotation(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the parents rotation.
            </summary>
            <param name="node">The node.</param>
            <returns>The parents rotation value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.ConvertToParentCoordinates(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Convert nodes from model to parent node coordinates.
            </summary>
            <param name="node">The node to covert.</param>
            <param name="parent">The node parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.ConvertToModelCoordinates(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Convert from parent node to model coordinates.
            </summary>
            <param name="node">The node to convert.</param>
            <param name="parent">The node parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.IsParent(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Determines whether the specified given parent node is a child parent.
            </summary>
            <param name="child">The child node.</param>
            <param name="parent">The parent node.</param>
            <returns>
            <c>true</c> if the specified parent is a child parent; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetAllNodesAtPoint(Syncfusion.Windows.Forms.Diagram.ICompositeNode,System.Drawing.PointF,System.Boolean,System.Boolean)">
            <summary>
            Get all nodes at given point.
            </summary>
            <param name="compositeNode">The parent.</param>
            <param name="ptPoint">The point to check .</param>
            <param name="bOnlyCanSelected">if set to <c>true</c> result collection contain only nodes  what can be selected.</param>
            <param name="bGroupFirst">if set to <c>true</c> group will add before it children.</param>
            <returns>The node collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.CanSelectNode(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Check if node can select.
            </summary>
            <param name="node">Node to check.</param>
            <returns>
            <b>True</b> if node can be selected, otherwise - <b>false</b>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.IsVisible(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Check if node visible in diagram.
            </summary>
            <param name="node">Node to check.</param>
            <returns><b>True</b> if node is visible, otherwise - <b>false</b>. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.SaveConnections(Syncfusion.Windows.Forms.Diagram.NodeCollection)">
            <summary>
            Saves the connections.
            </summary>
            <param name="nodes">The nodes.</param>
            <returns>The connections list.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.RestoreConnections(System.Collections.ArrayList)">
            <summary>
            Restores the connections.
            </summary>
            <param name="portConnections">The port connections.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.CanResizeChildren(Syncfusion.Windows.Forms.Diagram.ICompositeNode)">
            <summary>
            Determines whether composite node can resize children in one dimension.
            </summary>
            <param name="compositeNode">The composite node to check.</param>
            <returns>
            <c>true</c> if given composite can resize children in one dimension; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSumEditStyle(Syncfusion.Windows.Forms.Diagram.Node,Syncfusion.Windows.Forms.Diagram.EditStyle@)">
            <summary>
            Gets the union of children edit styles.
            </summary>
            <param name="node">The node.</param>
            <param name="editStyle">The edit style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.AppendScaleTransforms(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.Matrix,System.Boolean)">
            <summary>
            Append the node scale transformation.
            </summary>
            <param name="node">The node.</param>
            <param name="mtxTemp">The MTX temp.</param>
            <param name="bSkipGivenNode">if set to <c>true</c> [b skip given node].</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetRefreshRectangle(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Gets the node graphics path refresh rectangle include shadow, line width, decorators, labels and ports.
            </summary>
            <param name="node">The node.</param>
            <returns>The refresh rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.SplitNodeName(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Split the name of the node to two part where
            first is a rootName and second is name index.
            </summary>
            <param name="nodeName">Name of the node.</param>
            <param name="regex">The Regex type instance.</param>
            <returns>
            Array of string what contains two elements, rootName and index
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSkippedIndexes(System.Int64[],System.Int64)">
            <summary>
            Gets the skipped indexes in indexes array.
            </summary>
            <param name="indexes">The indexes array.</param>
            <param name="nNewIdxLength">Length of the new index.</param>
            <returns>Array with skipped indexes.&gt;</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.ShouldGenerateNewIndex(System.Collections.Hashtable,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Evaluates whether new index for given node name should be generated.
            </summary>
            <param name="nameTable">The name table hash where key - node name, 
            value list of indexes.</param>
            <param name="strNodeName">Node name.</param>
            <param name="regex">The Regex type instance.</param>
            <returns>
            true- new index should be generated, otherwise no.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GenerateUniqueNodeName(System.Collections.Hashtable,Syncfusion.Windows.Forms.Diagram.Node,System.String@,System.Text.RegularExpressions.Regex)">
            <summary>
            Called to generate a unique name when inserting a new node.
            </summary>
            <param name="nameTable">The name table hash where key - node name, 
            value list of indexes.</param>
            <param name="obj">Node to generate unique name for.</param>
            <param name="nodeName">Node name generated.</param>
            <param name="regex">Regex used to split node name.</param>
            <returns>
            True if a new name was generated; False if the name is already unique.
            </returns>
            <remarks>
            <para>
            The implementation of this method first checks to see if the name is
            already unique. If it is, then it returns False to the caller and
            the nodeName parameter contains the original name. If the node's name
            is not unique within the model, then this method adds a numeric suffix
            to the name and continues to increment it in a loop until the name
            is unique. If the nodeName output parameter contains a value other
            than the original node name, then this method returns True.
            </para>
            <para>
            This method can be overriden in derived classes in order to customize or
            replace the algorithm for generating unique names.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.RegisterNode(System.Collections.Hashtable,Syncfusion.Windows.Forms.Diagram.Node,System.Text.RegularExpressions.Regex)">
            <summary>
            Register the name of the node to name table.
            </summary>
            <param name="nameTable">The name table hash where key - node name, 
            value list of indexes.</param>
            <param name="node">Node to register.</param>
            <param name="regex">The Regex type instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.UnregisterNode(System.Collections.Hashtable,Syncfusion.Windows.Forms.Diagram.Node,System.Text.RegularExpressions.Regex)">
            <summary>
            Unregister the name of the node form name table.
            </summary>
            <param name="nameTable">The name table hash where key - node name, 
            value list of indexes.</param>
            <param name="node">Node to unregister.</param>
            <param name="regex">The Regex type instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSegmentLineAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point,System.Int32@)">
            <summary>
             Returns topmost node and segment index in it, that contains/intersects with ptTesting point.  
            </summary>
            <param name="nodes">Nodes collection for verification.</param>
            <param name="ptTesting">Search point of the segment. </param>
            <param name="nSegmentID">Index of segment that contains / intersects with ptTesting point.</param>
            <returns>node to which the segment belongs.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSegmentLineAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Int32@)">
            <summary>
             Returns topmost node and segment index in it, that contains/intersects with ptTesting point.  
            </summary>
            <param name="nodes">Nodes collection for verification.</param>
            <param name="ptTesting">Search point of the segment. </param>
            <param name="nSegmentID">Index of segment that contains / intersects with ptTesting point.</param>
            <returns>node to which the segment belongs.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSegmentLineAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF,System.Int32@)">
            <summary>
            Returns topmost node and segment index in it, that contains/intersects with ptTesting point.
            </summary>
            <param name="node">Node for verification.</param>
            <param name="ptTesting">Search point of the segment.</param>
            <param name="nSegmentID">Index of segment that contains / intersects with ptTesting point.</param>
            <returns>node to which the segment belongs.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetSegmentLineAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point,System.Int32@)">
            <summary>
            Returns topmost node and segment index in it, that contains/intersects with ptTesting point.
            </summary>
            <param name="node">Node for verification.</param>
            <param name="ptTesting">Search point of the segment.</param>
            <param name="nSegmentID">Index of segment that contains / intersects with ptTesting point.</param>
            <returns>node to which the segment belongs.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetVertexHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point,System.Int32@)">
            <summary>
            Returns topmost node from the nodes collection and index of vertex, that contains/intersects with the testing point.
            </summary>
            <param name="nodes">Nodes collection for verification.</param>
            <param name="ptTesting">Search point of the vertex.</param>
            <param name="nVertexID">Index of vertex that contains/intersects with ptTesting point.</param>
            <returns>The path node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetVertexHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,System.Int32@)">
            <summary>
            Returns topmost node from the nodes collection and index of vertex, that contains/intersects with the testing point.
            </summary>
            <param name="nodes">Nodes collection for verification.</param>
            <param name="ptTesting">Search point of the vertex.</param>
            <param name="nVertexID">Index of vertex that contains/intersects with ptTesting point.</param>
            <returns>The path node.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetVertexHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF,System.Int32@)">
            <summary>
             Shows whether there is at least one vertex containing / intersecting with ptTesting point.
            </summary>
            <param name="node">Vertex container.</param>
            <param name="ptTesting">Search point of the vertex.</param>
            <param name="nVertexID">Index of vertex that contains / intersects with ptTesting point.</param>
            <returns>The vertex handle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetVertexHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point,System.Int32@)">
            <summary>
             Shows whether there is at least one vertex containing / intersecting with ptTesting point.
            </summary>
            <param name="node">Vertex container.</param>
            <param name="ptTesting">Search point of the vertex.</param>
            <param name="nVertexID">Index of vertex that contains / intersects with ptTesting point.</param>
            <returns>true, if get vertex handle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetResizeHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.BoxPosition@)">
            <summary>
             Returns node and ResizeHandle position that is found in ptTesting point from nodes collection.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="ptTesting"> Search point of ResizeHandle.</param>
            <param name="handleHit">Handle position in ptTesting point. </param>
            <returns>The node and resize handle position at the given point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetResizeHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.BoxPosition@)">
            <summary>
             Returns node and ResizeHandle position that is found in ptTesting point from nodes collection.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="ptTesting"> Search point of ResizeHandle.</param>
            <param name="handleHit">Handle position in ptTesting point. </param>
            <returns>The resize handle at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetResizeHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.BoxPosition@)">
            <summary>
             Shows whether there is at least one handle in the  ptTesting point that belongs to the  node.
            </summary>
            <param name="node">Handles owner for verification.</param>
            <param name="ptTesting">Point of  possible location of the ResizeHandle.</param>
            <param name="handleHit">Handle position in ptTesting point.</param>
            <returns>true, if get the resize handle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetResizeHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.BoxPosition@)">
            <summary>
            Returns node and ResizeHandle position that is found in ptTesting point from nodes collection.
            </summary>
            <param name="node">The node.</param>
            <param name="ptTesting">Search point of ResizeHandle.</param>
            <param name="handleHit">Handle position in ptTesting point.</param>
            <returns>true, if get the resize handle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetRotationHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point)">
            <summary>
            Returns node and RotationHandle position that is located in ptTesting point from nodes collection.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="ptTesting">Search point for RotationHandle.</param>
            <returns>true, if get the rotation handle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetRotationHandleAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
            Returns node and RotationHandle position that is located in ptTesting point from nodes collection.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="ptTesting">Search point for RotationHandle.</param>
            <returns>The rotation handle at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetRotationHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point)">
            <summary>
             Shows whether there is at least one RotationHandle in the ptTesting point that belongs to node.
            </summary>
            <param name="node">Handle owner for verification.</param>
            <param name="ptTesting">Point of  possible location of the RotationHandle.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetRotationHandleAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF)">
            <summary>
             Shows whether there is at least one RotationHandle in the ptTesting point that belongs to node.
            </summary>
            <param name="node">Handle owner for verification.</param>
            <param name="ptTesting">Point of  possible location of the RotationHandle.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetPinPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
             Returns topmost node from collection, PinPoint of which, is in ptTesting point.
            </summary>
            <param name="nodes">Collection for PinPoint search.</param>
            <param name="ptTesting">Point of the possible location of the Pinpoint.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetPinPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point)">
            <summary>
             Returns topmost node from collection, PinPoint of which, is in ptTesting point.
            </summary>
            <param name="nodes">Collection for PinPoint search.</param>
            <param name="ptTesting">Point of the possible location of the Pinpoint.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetPinPointAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF)">
            <summary>
             Returns topmost node from collection, PinPoint of which, is in ptTesting point.
            </summary>
            <param name="node">PinPoint container.</param>
            <param name="ptTesting">Point of the possible location of the Pinpoint.</param>
            <returns>true, if get pin point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetPinPointAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point)">
            <summary>
             Shows whether PinPoint can be found in the ptTesting point.
            </summary>
            <param name="node">Node for PinPoint verification.</param>
            <param name="ptTesting">Point for PinPoint search.</param>
            <returns>true, if get pin point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetEndPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
            Shows whether PinPoint can be found in the ptTesting point.
            </summary>
            <param name="nodes">Collection for PinPoint verification.</param>
            <param name="ptTesting">Point for PinPoint search.</param>
            <param name="handleHit">The handle hit.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetEndPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
             Returns topmost container and EndPoint that is found in ptTesting point.
            </summary>
            <param name="nodes">Collection for search of the EndPoint container.</param>
            <param name="ptTesting">Search point of the EndPoint from nodes collection.</param>
            <param name="handleHit">Container EndPoint that is found in search point.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetEndPointAtPoint(Syncfusion.Windows.Forms.Diagram.IEndPointContainer,System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
             Returns topmost container and EndPoint that is found in ptTesting point.
            </summary>
            <param name="node">Possibly EndPoint container.</param>
            <param name="ptTesting">Search point of the EndPoint from nodes collection.</param>
            <param name="handleHit">Container EndPoint that is found in search point.</param>
            <returns>true, if get end point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetEndPointAtPoint(Syncfusion.Windows.Forms.Diagram.IEndPointContainer,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
             Returns topmost container and EndPoint that is found in ptTesting point.
            </summary>
            <param name="node">Possibly the EndPoint container.</param>
            <param name="ptTesting">Search point of the EndPoint from nodes collection.</param>
            <param name="handleHit">Container EndPoint that is found in search point.</param>
            <returns>true, if get end point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetControlPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
             Returns topmost node and its handle that is in search point.
            </summary>
            <param name="nodes">Nodes collection for handle search.</param>
            <param name="ptTesting">Handle search point.</param>
            <param name="handleHit">Node handle that is in search point.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetControlPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point,Syncfusion.Windows.Forms.Diagram.IHandle@)">
            <summary>
             Returns topmost node and its handle that is in search point.
            </summary>
            <param name="nodes">Nodes collection for handle search.</param>
            <param name="ptTesting">Handle search point.</param>
            <param name="handleHit">Node handle that is in search point.</param>
            <returns>The node at the specified point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetConnectionPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.PointF)">
            <summary>
             Returns ConnectionPoint, that belongs to the node transformed using given transformation matrix and intersects with point.
            </summary>
            <param name="nodes">Nodes collection for port search.</param>
            <param name="ptTesting">Point that contains port.</param>
            <returns>The connection point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetConnectionPointAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF)">
            <summary>
            Returns ConnectionPoint, that belongs to the node transformed using given transformation matrix and intersects with point.
            </summary>
            <param name="node">Node for port search.</param>
            <param name="ptTesting">Point that contains port.</param>
            <returns>Connection point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetConnectionPointAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Drawing2D.Matrix,System.Drawing.PointF)">
            <summary>
             Returns ConnectionPoint that belongs to the node transformed using the given transformation matrix and intersects with point.
            </summary>
            <param name="node">Ports container.</param>
            <param name="matrixParent">Parent's transformation matrix.</param>
            <param name="ptTesting">Search point of the port.</param>
            <returns>Connection point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetConnectionPointAtPoint(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.Point)">
            <summary>
             Returns ConnectionPoint, that belongs to the node transformed using given transformation matrix and intersects with point.
            </summary>
            <param name="nodes">Nodes collection for port search.</param>
            <param name="ptTesting">Point that contains port.</param>
            <returns>Connection point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetConnectionPointAtPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.Point)">
            <summary>
            Returns ConnectionPoint, that belongs to the node transformed using given transformation matrix and intersects with point.
            </summary>
            <param name="node">Node for port search.</param>
            <param name="ptTesting">Point that contains port.</param>
            <returns>Connection point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetNodesIntersecting(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
             Returns nodes from collection given, which intersects with rectangle recbBounding.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="recbBounding">Rectangle in which nodes are located..</param>
            <returns>Node collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetNodesContainedBy(Syncfusion.Windows.Forms.Diagram.NodeCollection,System.Drawing.RectangleF)">
            <summary>
             Returns nodes from collection given, which are located inside rectangle recbBounding.
            </summary>
            <param name="nodes">Collection for verification.</param>
            <param name="recbBounding">Rectangle in which nodes are located..</param>
            <returns>Contained node collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetGraphisPathBounds(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Gets the graphis path bounds with matrix transfomation.
            </summary>
            <param name="grPath">The graphics path.</param>
            <param name="mtxTransform">The matrix transform.</param>
            <returns>Graphics rect.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetDecoratorTransfrom(System.Drawing.PointF,System.Drawing.PointF,System.Single)">
            <summary>
            Gets the decorator transfromation.
            </summary>
            <param name="ptPoint">The decorator position.</param>
            <param name="ptControl">The last control position.</param>
            <param name="depth">The decorator end point depth.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetTailDecoratorTransformations(Syncfusion.Windows.Forms.Diagram.LineBase)">
            <summary>
            Gets the tail decorator transformations.
            </summary>
            <param name="line">The line.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetHeadDecoratorTransformations(Syncfusion.Windows.Forms.Diagram.LineBase)">
            <summary>
            Gets the head decorator transformations.
            </summary>
            <param name="line">The line.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.CreateParentMatrix(Syncfusion.Windows.Forms.Diagram.Node)">
            <summary>
            Create matrix with append parent's
            transformations on given graphics - WITHOUT ROTATIONS
            </summary>
            <param name="node">The node.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.GetLocalPoint(Syncfusion.Windows.Forms.Diagram.Node,System.Drawing.PointF)">
            <summary>
            Convert point to node local coordinates.
            </summary>
            <param name="parent">The parent.</param>
            <param name="ptLocation">The given point.</param>
            <returns>The local point.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.ScaleFactor">
            <summary>
            Gets or sets the scale factor for handles hit testing.
            </summary>
            <value>The scale factor.</value>
            <remarks>
            This properties used for checking hit testing on 
            handles with given scale factor.
            <c> Needed to set before every handle getting. </c>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.NameIndex">
            <summary>
            Gets the regex instance to split node name and index.
            </summary>
            <value>The regex instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.TouchMode">
            <summary>
            Gets or sets the value indicating that whether the touch mode is enabled or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandlesHitTesting.NodeInfo">
            <summary>
            Helper structure to save goal node information. Used internal only.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter">
            <summary>
            The UnitsConverter class helps convert different metrics units. Conversion is 
            based on Graphics object DPI settings. Handles cases such as printers often 
            having 300 and greater dpi resolution, while the default screen dpi is 96. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ToPixelX(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ToPixelY(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to pixels
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <returns>Value stored in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.FromPixelX(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.FromPixelY(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in pixels, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ConvertX(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ConvertY(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.Convert(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.Convert(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.Convert(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.Convert(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Converts value, stored in "from" units, to value in "to" units
            </summary>
            <param name="value">Value to convert</param>
            <param name="from">Indicates units to convert from</param>
            <param name="to">Indicates units to convert to</param>
            <returns>Value stored in "to" units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ToPixels(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle location and size to Pixels from specified 
            measure units
            </summary>
            <param name="rect">source rectangle</param>
            <param name="from">source rectangle measure units</param>
            <returns>Rectangle with Pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ToPixels(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert point from specified measure units to pixels
            </summary>
            <param name="point">source point for convert</param>
            <param name="from">measure units</param>
            <returns>point in pixels coordinates</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.ToPixels(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert size from specified measure units to pixels
            </summary>
            <param name="size">source size</param>
            <param name="from">measure units</param>
            <returns>size in pixels</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.FromPixels(System.Drawing.RectangleF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle in Pixels into rectangle with specified 
            measure units
            </summary>
            <param name="rect">source rectangle in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Rectangle in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.FromPixels(System.Drawing.PointF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert rectangle from pixels to specified units
            </summary>
            <param name="point">point in pixels units</param>
            <param name="to">convert to units</param>
            <returns>output Point in specified units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.FromPixels(System.Drawing.SizeF,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Convert Size in pixels to size in specified measure units
            </summary>
            <param name="size">source size</param>
            <param name="to">convert to units</param>
            <returns>output size in specified measure units</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.GetAbbreviation(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the measure unit abbreviation.
            </summary>
            <param name="units">The measure units.</param>
            <returns>Abbreviated string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.GetMeasureUnit(System.String,Syncfusion.Windows.Forms.Diagram.MeasureUnits@)">
            <summary>
            Gets the measure unit from abbreviation.
            </summary>
            <param name="strAbbreviation">The measure unit abbreviation.</param>
            <param name="units">The units.</param>
            <returns>true, if get measure unit.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.DpiX">
            <summary>
            Gets or sets the dot per inch value by X axis.
            </summary>
            <value>The dpi X.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.DpiY">
            <summary>
            Gets or sets the dot per inch value by Y axis.
            </summary>
            <value>The dpi Y.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureUnitsConverter.MeasureUnitAbbreviation">
            <summary>
            Gets the measure unit abbreviations.
            </summary>
            <value>The measure unit abbreviations.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureSize">
            <summary>
            The size type object with specified measurement units.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(Syncfusion.Windows.Forms.Diagram.MeasureSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(System.String,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="width">The width.</param>
            <param name="widthUnit">The width unit.</param>
            <param name="height">The height.</param>
            <param name="heightUnit">The height unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="widthUnit">The width unit.</param>
            <param name="height">The height.</param>
            <param name="heightUnit">The height unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.MeasureSize"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.GetSize(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the size.
            </summary>
            <param name="units">The units.</param>
            <returns>The size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.SetSize(System.Single,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Sets the size.
            </summary>
            <param name="fWidth">Width of the f.</param>
            <param name="fHeight">Height of the f.</param>
            <param name="measureUnits">The measure units.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.RecordPropertyChanged(System.String)">
            <summary>
            Records the property changed.
            </summary>
            <param name="strPropertyName">Name of the STR property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.UpdateServiceReferences(Syncfusion.Windows.Forms.Diagram.IServiceReferenceProvider)">
            <summary>
            Updates the service references from service provider.
            </summary>
            <param name="provider">The service provider.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.OnPropertyChanging(System.String,System.String,System.Object)">
            <summary>
            Called when property is changing.
            </summary>
            <param name="strPropertyFullPath">The full path.</param>
            <param name="strPropertyName">The Name.</param>
            <param name="oldValue">The old value.</param>
            <returns>true, if property changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when property is changed.
            </summary>
            <param name="strPropertyFullPath">The full path.</param>
            <param name="strPropertyName">The Name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.OnPropertyChanging(System.String,System.Object)">
            <summary>
            Called when property is changing.
            </summary>
            <param name="strPropertyName">The property name.</param>
            <param name="newValue">The new value.</param>
            <returns>true, if property changing.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.OnPropertyChanged(System.String)">
            <summary>
            Called when property is changed.
            </summary>
            <param name="strPropertyName">Property Name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.GetPropertyContainerByName(System.String)">
            <summary>
            Gets the name of the property container.
            </summary>
            <param name="strPropertyName">Name of the property.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.MeasureSize.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.PixelWidth">
            <summary>
            Gets the width of the pixel.
            </summary>
            <value>The width of the pixel.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.PixelHeight">
            <summary>
            Gets the height of the pixel.
            </summary>
            <value>The height of the pixel.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.Owner">
            <summary>
            Gets the owner.
            </summary>
            <value>The owner.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.WidthMeasureUnit">
            <summary>
            Gets or sets the width measure unit.
            </summary>
            <value>The width measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.HeightMeasureUnit">
            <summary>
            Gets or sets the height measure unit.
            </summary>
            <value>The height measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.HistoryService">
            <summary>
            Gets the history service.
            </summary>
            <value>The history service.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.PropertyObserber">
            <summary>
            Gets the property observer.
            </summary>
            <value>The property observer.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.MeasureSize.FullContainerName">
            <summary>
            Gets the full name of the container.
            </summary>
            <value>The full name of the container.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageSize">
            <summary>
            Use for configure virtual document size without any scaling.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(Syncfusion.Windows.Forms.Diagram.PageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(System.String,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="width">The width.</param>
            <param name="widthUnit">The width unit.</param>
            <param name="height">The height.</param>
            <param name="heightUnit">The height unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="widthUnit">The width unit.</param>
            <param name="height">The height.</param>
            <param name="heightUnit">The height unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageSize"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSize.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSize.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSize.WidthMeasureUnit">
            <summary>
            Gets or sets the width measure unit.
            </summary>
            <value>The width measure unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSize.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageSize.HeightMeasureUnit">
            <summary>
            Gets or sets the height measure unit.
            </summary>
            <value>The height measure unit.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageScale">
            <summary>
            Use for configure model and nodes measure scale.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor(Syncfusion.Windows.Forms.Diagram.PageScale)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
            <param name="src">The SRC.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
            <param name="pageScale">The page scale.</param>
            <param name="drawingScale">The drawing scale.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor(System.String,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pageScale">The page scale.</param>
            <param name="drawingScale">The drawing scale.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor(System.String,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits,System.Single,Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="pageScale">The page scale.</param>
            <param name="pageUnit">The page unit.</param>
            <param name="drawingScale">The drawing scale.</param>
            <param name="drawingUnit">The drawing unit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PageScale"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.GetScaleFactor(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the scale factor.
            </summary>
            <param name="units">The units.</param>
            <returns>The scale factor.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScale.GetScaleTransformation(Syncfusion.Windows.Forms.Diagram.MeasureUnits)">
            <summary>
            Gets the scale transformation.
            </summary>
            <param name="measureUnits">The measure units.</param>
            <returns>The matrix.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.Width">
            <summary>
            Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.Height">
            <summary>
            Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.ModelScale">
            <summary>
            Gets or sets the model scale.
            </summary>
            <value>The model scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.ModelScaleUnit">
            <summary>
            Gets or sets the model scale unit.
            </summary>
            <value>The model scale unit.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.DrawingScale">
            <summary>
            Gets or sets the drawing scale.
            </summary>
            <value>The drawing scale.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Diagram.PageScale.DrawingScaleUnit">
            <summary>
            Gets or sets the drawing scale unit.
            </summary>
            <value>The drawing scale unit.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageSizeEditor">
            <summary>
            Editor for modifying page size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeEditor.SetEditorProps(Syncfusion.Windows.Forms.Diagram.PageSize,Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.PageSizeDialog)">
            <summary>
            Sets the editor properties.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="model">The model.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeEditor.UpdateReturnValue(Syncfusion.Windows.Forms.Diagram.PageSize,Syncfusion.Windows.Forms.Diagram.PageSizeDialog)">
            <summary>
            Updates the return value.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="editor">The editor.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageSizeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PageScaleEditor">
            <summary>
            Editor for modifying page scale.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleEditor.SetEditorProps(Syncfusion.Windows.Forms.Diagram.PageScale,Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.PageScaleDialog)">
            <summary>
            Sets the editor properties.
            </summary>
            <param name="editingInstance">The editing instance.</param>
            <param name="model">The model.</param>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"/> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleEditor.UpdateReturnValue(Syncfusion.Windows.Forms.Diagram.Model,Syncfusion.Windows.Forms.Diagram.PageScaleDialog)">
            <summary>
            Updates the return value.
            </summary>
            <param name="model">The model.</param>
            <param name="editor">The editor.</param>
            <returns>The object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PageScaleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"/> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"/> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"/> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"/> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"/>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PerfCounter">
            <summary>
            Class containing Perf Counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.PerfCounter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Diagram.PerfCounter"/> class.
            </summary>
            <param name="strMessage">The STR message.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.UpdateInfo">
            <summary>
            Class containing Update Info.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Diagram.UpdateInfo.UpdateRefreshRect(System.Drawing.Rectangle)">
            <summary>
            Union the given update rectangle with exist refresh rectangle.
            </summary>
            <param name="rectUpdating">The update rectangle in client coordinates.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MoveCallback">
            <summary>
            Move callback
            </summary>
            <param name="fX">X value</param>
            <param name="fY">Y value</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.SizeCallback">
            <summary>
            Size callback
            </summary>
            <param name="szOld">Old size</param>
            <param name="szNew">New size</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.PinOffsetCallback">
            <summary>
            Pin offset call back.
            </summary>
            <param name="szOldPinOffset">Old pin offset</param>
            <param name="szNewPinOffset">New pin offset</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.HandlePrimitive">
            <summary>
            Enum containing Rotation primitives
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandlePrimitive.PinPoint">
            <summary>
            Pinpoint primitives.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandlePrimitive.RotationHandle">
            <summary>
            Rotation handle primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.HandlePrimitive.ControlPoint">
            <summary>
            Control point primitive.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.MeasureUnits">
            <summary>
            Real-world units of measurement:
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Pixel">
            <summary>
            Measurement in GDI 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Point">
            <summary>
            Measurement in Points 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Document">
            <summary>
            Measurement in Document
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Display">
            <summary>
            Measurement in Display
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.SixteenthInch">
            <summary>
            Measurement in Sixteenth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.EighthInch">
            <summary>
            Measurement in Eighth Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.QuarterInch">
            <summary>
            Measurement in Quarter Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.HalfInch">
            <summary>
            Measurement in Half Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Inch">
            <summary>
            Measurement in Inches
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Foot">
            <summary>
            Measurement in Feet
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Yard">
            <summary>
            Measurement in Yards
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Mile">
            <summary>
            Measurement in Miles
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Millimeter">
            <summary>
            Measurement in Millimeters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Centimeter">
            <summary>
            Measurement in Centimeters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Meter">
            <summary>
            Measurement in Meters
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.MeasureUnits.Kilometer">
            <summary>
            Measurement in Kilometers
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoxPosition">
            <summary>
            Specifies one of nine relative positions on a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopCenter">
            <summary>
            Top center point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopRight">
            <summary>
            Top right point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.MiddleRight">
            <summary>
            Middle left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomRight">
            <summary>
            Bottom right point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomCenter">
            <summary>
            Bottom center point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.BottomLeft">
            <summary>
            Bottom left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.MiddleLeft">
            <summary>
            Middle left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.TopLeft">
            <summary>
            Top left point of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxPosition.Center">
            <summary>
            Center of the box.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.CompassHeading">
            <summary>
            Specifies a compass heading.
            </summary>
            <remarks>
            This enumeration is used to specify the direction of a vector. A vector
            can be generated given one point and a CompassHeading.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.None">
            <summary>
            No heading.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.North">
            <summary>
            North (up) heading.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.South">
            <summary>
            South (down) heading.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.East">
            <summary>
            East (right).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.West">
            <summary>
            West (left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Northwest">
            <summary>
            Northwest (up and left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Northeast">
            <summary>
            Northeast (up and right).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Southwest">
            <summary>
            Southwest (down and left).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.CompassHeading.Southeast">
            <summary>
            Southeast (down and right).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoxSide">
            <summary>
            The box side specifies a top bottom, 
            right and left sides of rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxSide.Right">
            <summary>
            Right side of rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxSide.Top">
            <summary>
            Top side of rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxSide.Left">
            <summary>
            Left side of rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxSide.Bottom">
            <summary>
            Bottom side of rectangle
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.BoxOrientation">
            <summary>
            The BoxOrientation specifies a vertical or horizontal line passing
            through one of the four edges or through the center of a box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Left">
            <summary>
            Left edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Top">
            <summary>
            Top edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Right">
            <summary>
            Right edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.Bottom">
            <summary>
            Bottom edge of the box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.HCenter">
            <summary>
            Horizontal center.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.BoxOrientation.VCenter">
            <summary>
            Vertical center.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.Positions">
            <summary>
            Specifies the position of scroll to node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Positions.Relative">
            <summary>
            Relative position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.Positions.Absolute">
            <summary>
            Absolute position
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Diagram.TextCases">
            <summary>
            Specifies the text case of Text/RichText node
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextCases.AllUpper">
            <summary>
            upper case.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextCases.AllLower">
            <summary>
            lower case.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Diagram.TextCases.None">
            <summary>
            original text
            </summary>
        </member>
        <member name="T:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard">
            <summary>
            Base class for diagram wizard.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.m_EDDPath">
            <summary>
            Path of diagram file.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.GetAutoRunWizard">
            <summary>
            Gets the auto run wizard.
            </summary>
            <returns>true, if auto run wizard.</returns>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.GetVersion(System.String)">
            <summary>
            Gets the assembly version.
            </summary>
            <param name="assemblyVersion">The assembly version.</param>
            <returns>The assembly version.</returns>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.DiagramBuilder_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the DiagramBuilder button control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnLoadEDD">
            <summary>
            Load EDD button.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnLoadEDP">
            <summary>
            Load EDP button.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.dEDP">
            <summary>
            Open file dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnDiagramBuilder">
            <summary>
            Load diagram builder button.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnSymbolDesigner">
            <summary>
            Load Symbol designer button.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnOk">
            <summary>
            OK button.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.btnCancel">
            <summary>
            Cancel button.
            </summary>
        </member>
        <member name="P:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.EDDPath">
            <summary>
            Gets or sets the EDD path.
            </summary>
            <value>The EDD path.</value>
        </member>
        <member name="P:Syncfusion.Diagram.Base.Wizard.DiagramLoadBaseWizard.EDPPath">
            <summary>
            Gets or sets the EDP path.
            </summary>
            <value>The EDP path.</value>
        </member>
        <member name="T:Syncfusion.Diagram.Base.Wizard.NameSpaceDoc">
            <summary>
            This is the Base class for diagram wizard.The Diagram Wizard helps you when creating new diagrams and offers a host of pre-configured diagram layouts for you to choose from.
            This provides control to load EDD files and control to customize the loaded EDD files in the diagram.
            Also provides control to load EDP files and control to customize the loaded EDP files in the Palette.
            </summary>
        </member>
    </members>
</doc>
