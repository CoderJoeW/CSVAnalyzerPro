<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Shared.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.SharedBaseAssembly">
            <exclude/>
            <summary>
            This class holds the name of the Syncfusion.Shared.Base assembly and provides a helper 
            routine that helps with resolving types when loading a serialization stream and when 
            the framework probes for assemblies by reflection. 
            </summary>
        </member>
        <member name="F:Syncfusion.SharedBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information: "Syncfusion.Shared.Base".
            </summary>
        </member>
        <member name="F:Syncfusion.SharedBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the grid assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.SharedBaseAssembly.RootNamespace">
            <summary>
            The root namespace of this assembly. Used internally for locating resources within the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.SharedBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as an eventhandler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IExtendableTexBox">
            <summary>
            Defines the interface for extendable text box wrappper.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IExtendableTexBox.Invalidate">
            <summary>
            Invalidates text box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.Handle">
            <summary>
            Text box control native handle.
            </summary>
            <remarks>Must return <see cref="F:System.IntPtr.Zero"/> if handle isn't created yet.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IExtendableTexBox.HandleCreated">
            <summary>
            Occurs when text box is created.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IExtendableTexBox.TextBoxTextChanged">
            <summary>
            Occurs when text of text box is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.Focused">
            <summary>
            Indicates whether text box is focused.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.BackColor">
            <summary>
            Background color of text box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.ClientRectangle">
            <summary>
            Client rectangle of text box
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.Font">
            <summary>
            Font of text box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IExtendableTexBox.RightToLeft">
            <summary>
            Indicates whether text box is in RTL mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IComponentBannerTextProvider">
            <summary>
            Defines the interface for extending text box owned by some components.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IComponentBannerTextProvider.CanExtend(System.ComponentModel.Component)">
            <summary>
            Specifies whether this component can provide banner text extender properties to the specified object.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.Component"/> to receive the extender properties.</param>
            <returns>true if this object can provide extender properties to the specified object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IComponentBannerTextProvider.GetExtendableTexBox(System.ComponentModel.Component,Syncfusion.Windows.Forms.BannerTextProvider)">
            <summary>
            Retrieves extendable text box info.
            </summary>
            <param name="extendee">Extended component.</param>
            <returns><see cref="T:Syncfusion.Windows.Forms.IExtendableTexBox"/> object</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IComponentBannerTextProvider.ComponentType">
            <summary>
            Type of extended component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ComponentBannerTextProviderBase.m_type">
            <summary>
            Component's type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextProvider.s_extendedComponents">
            <summary>
            Collection of extended components.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextProvider.s_etb2component">
            <summary>
            Stores text box to component backaward mapping. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextProvider.s_info2extenders">
            <summary>
            Stores map of bannet text info to extenders <see cref="T:System.Collections.ArrayList"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextProvider.s_bannerProviders">
            <summary>
            Default banner text providers.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates instance of <see cref="T:Syncfusion.Windows.Forms.BannerTextProvider"/> class and registers it in owner's container.
            </summary>
            <param name="container">Owner's container.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.#cctor">
            <summary>
            Static constructor.
            </summary>
            <remarks>Registers default banner text providers.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.RegisterProvider(Syncfusion.Windows.Forms.IComponentBannerTextProvider)">
            <summary>
            Register additional <see cref="T:Syncfusion.Windows.Forms.IComponentBannerTextProvider"/>.
            </summary>
            <param name="provider">Provider to register.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.GetBannerText(System.ComponentModel.Component)">
            <summary>
            Returns <see cref="T:Syncfusion.Windows.Forms.BannerTextInfo"/> for given component.
            </summary>
            <param name="textBox">Component to retirive info for.</param>
            <returns>Associated <see cref="T:Syncfusion.Windows.Forms.BannerTextInfo"/> object.</returns>
            <remarks>Returns a copy of <see cref="T:Syncfusion.Windows.Forms.BannerTextInfo"/> object.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.SetBannerText(System.ComponentModel.Component,Syncfusion.Windows.Forms.BannerTextInfo)">
            <summary>
            Associates <see cref="T:Syncfusion.Windows.Forms.BannerTextInfo"/> with component.
            </summary>
            <param name="textBox">Component.</param>
            <param name="info"><see cref="!:BannerText"/> info object.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextProvider.ETB2Component">
            <summary>
            Retrieves text box to component backward map.
            </summary>
            <remarks>Mapping is created on demand.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BannerTextProvider.TextBoxExtender">
            <summary>
            Renders banner text for <see cref="T:System.Windows.Forms.TextBox"/>-derived control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.TextBoxExtender.DrawBannerText(System.Drawing.Graphics,Syncfusion.Windows.Forms.BannerTextInfo,System.Drawing.Color,System.Drawing.Font,System.Windows.Forms.RightToLeft,System.Drawing.Rectangle)">
            <summary>
            Draws banner text.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/> to draw at.</param>
            <param name="info">Specifies banner text appearance.</param>
            <param name="bgColor">Banner text background color.</param>
            <param name="font">Fallback font for the case when <see cref="!:info"/> doesn't contain valid font.</param>
            <param name="rtl">Text flow layout.</param>
            <param name="clientRect">Rectangle to draw within.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextProvider.TextBoxExtender.IsBannerTextVisible(Syncfusion.Windows.Forms.BannerTextInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether draw text is visible and must be drawn.
            </summary>
            <param name="info">Describes banner text appearance.</param>
            <param name="bFocused">Indicates whether extended text box is focused.</param>
            <param name="bEmptyText">Indicates whether extended text box's text is empty.</param>
            <returns>True if banner text is visible.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BannerTextMode">
            <summary>
            Describes banner text rendering behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextMode.FocusMode">
            <summary>
            Banner text disappears when the control gets focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BannerTextMode.EditMode">
            <summary>
            Banner text disappears only when associated text box is not empty.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BannerTextInfo">
            <summary>
            Describes banner text appearance and behavior.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextInfo.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BannerTextInfo.#ctor(Syncfusion.Windows.Forms.BannerTextInfo)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextInfo.Text">
            <summary>
            Specifies banner text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextInfo.Visible">
            <summary>
            Specifies whether banner text is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextInfo.Font">
            <summary>
            Specifies font of banner text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextInfo.Mode">
            <summary>
            Specifies banner text rendering mode. See <see cref="T:Syncfusion.Windows.Forms.BannerTextMode"/> for details.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BannerTextInfo.Color">
            <summary>
            Specifies banner text color.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BannerTextInfoTypeConverter">
            <summary>
            Type converter for <see cref="T:Syncfusion.Windows.Forms.BannerTextInfo"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.BannerTextProviderDesigner">
            <summary>
            Designer for <see cref="T:Syncfusion.Windows.Forms.BannerTextProvider"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase">
            <summary>
            Base implementation for <see cref="T:Syncfusion.Windows.Forms.IExtendableTexBox"/> interface.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase.HandleCreated">
            <summary>
            HandleCreated event delegate.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase.TextBoxTextChanged">
            <summary>
            TextBoxTextChanged event delegate.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBoxBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox">
            <summary>
            Extendable text box wrapper for <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox"/> class.
            </summary>
            <param name="textBox">The text box.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.ResetCursorPosition">
            <summary>
            Sets the cursor position to initial state
            </summary>
            <value>The font.</value>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.Handle">
            <summary>
            Gets the handle.
            </summary>
            <value>The handle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.Focused">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox"/> is focused.
            </summary>
            <value><c>true</c> if focused; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.BackColor">
            <summary>
            Gets the color of the back.
            </summary>
            <value>The color of the back.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.ClientRectangle">
            <summary>
            Gets the client rectangle.
            </summary>
            <value>The client rectangle.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.Font">
            <summary>
            Gets the font.
            </summary>
            <value>The font.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableTextBox.RightToLeft">
            <summary>
            Gets the right to left.
            </summary>
            <value>The right to left.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.TextBoxBannerTextProvider">
            <summary>
            Banner text provider for TextBox-derived classes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ComboDropDownBannerTextProvider">
            <summary>
            Banner text provider for ComboDropDown-derived classes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ExtendableComboBoxTextBox">
            <summary>
            Extendable text box wrapper for <see cref="T:System.Windows.Forms.ComboBox"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ComponentBannerTextProviders.ComboBoxBannerTextProvider">
            <summary>
            Banner text provider for ComboBox-derived classes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroButtonRenderer">
            <summary>
            Render button in metro style
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonRenderer">
            <summary><para>
            Basic class for all renderers. ButtonRenderer provides the basic plumbing that is needed by all renderers.
            </para><para>
            You can derive from ButtonRenderer to create your own renderers.
            </para></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.bounds">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.m_button">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.imageRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.textPoint">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.textRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.m_bDisposed">
            <summary>True - class is disposed, otherwise False.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.borderWidth">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.textAlignment">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.s_imageHorizontalMargin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.s_imageVerticalMargin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.s_textHorizontalMargin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.s_textVerticalMargin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonRenderer.s_defaultImageSize">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary>
            </summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.Finalize">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.OnDispose(System.Boolean)">
            <summary>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.Dispose">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.GetRegion(System.Drawing.Rectangle)">
            <summary>
            Specifies region for drawing
            </summary>        
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.SetColorScheme(Syncfusion.Windows.Forms.Office2007Theme)">
            <summary>
            Sets vista color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.Set2010ColorScheme(Syncfusion.Windows.Forms.Office2010Theme)">
            <summary>
            Sets office 2010 color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.SetMetroColorScheme(Syncfusion.Windows.Forms.MetroTheme)">
            <summary>
            Sets Metro color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.Render(System.Drawing.Graphics)">
            <summary>
                This function does much of the rendering. In the base <see cref="T:Syncfusion.Windows.Forms.ButtonRenderer"/>, it does not
                do anything.
            </summary>
            <param name="g" type="System.Drawing.Graphics"><para>
                The graphics object to use.  
                </para></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Draws text on ButtonAdv with specified color
             </summary>
            <param name="g" type="System.Drawing.Graphics"><para>
             The graphics object to use.  
             </para></param>
             <param name="textColor">Color of the text</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawTextAndImage(System.Drawing.Graphics)">
            <summary>
            Draws background image, image and text
            </summary>
            <param name="g" type="System.Drawing.Graphics"><para>
            The graphics object to use.  
            </para></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawKnownImage(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.ButtonTypes,System.Drawing.Point,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="buttonImageType"/>
            <param name="offset"/>
            <param name="imageColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.ComputeTextPosition">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.ComputeImagePosition">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.RefreshStyle">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.GetImage(System.String)">
            <summary>
            Helper function to get an image from within embedded resources.
            </summary>
            <param name="resourceName">The resource name to get.</param>
            <returns>An image; NULL if the image is not available.</returns>
            <remarks>
            The <see cref="M:Syncfusion.Windows.Forms.ButtonRenderer.GetImage(System.String)"/> class can take an image based on the
            <see cref="M:Syncfusion.Windows.Forms.ButtonRenderer.GetImage(System.String)"/> property. This helper function
            loads the images based on the resource name.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.IsPressed(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns><c>True</c> if button has state <see cref="F:Syncfusion.Windows.Forms.ButtonAdvState.Pressed"/>, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.IsMouseOver(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"></param>
            <returns><c>True</c> if button has state <see cref="F:Syncfusion.Windows.Forms.ButtonAdvState.MouseOver"/>, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.IsDefault(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"></param>
            <returns><c>True</c> if button has state <see cref="F:Syncfusion.Windows.Forms.ButtonAdvState.Default"/>, otherwise <c>False</c>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.GetButtonTextSize(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="proposedSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.CalcTextRectangle(System.Drawing.ContentAlignment)">
            <summary></summary>
            <returns></returns>
            <param name="g"/>
            <param name="align"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawBackgroundImage(System.Drawing.Graphics,System.Drawing.Image,System.Windows.Forms.ImageLayout,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Point,System.Windows.Forms.RightToLeft)">
            <summary>
            Renders an background image.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="backgroundImage">BackgroundImage to render.</param>
            <param name="backgroundImageLayout"> The layout of background image.</param>
            <param name="bounds"> The bounds of the control.</param>
            <param name="clipRect"> The rectangle to draw on it.</param>
            <param name="scrollOffset"> Offset of location of the image when layout is tile.</param>
            <param name="rightToLeft"> The rightToLeft property of the control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Image)">
            <summary>
            Renders an image. Delegates to the <see cref="T:Syncfusion.Windows.Forms.RenderingHelper"/> class.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">The bounds to be used when rendering the image.</param>
            <param name="image">Image to render.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawInvertedTriangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Renders an inverted triangle. Delegates to the <see cref="T:Syncfusion.Windows.Forms.RenderingHelper"/> class.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">The bounds to be used when rendering the shape.</param>
            <param name="brush">The brush to be used for filling the interior of the rendered triangle.</param>
            <param name="pen">The pen to be used for stroking the triangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.DrawTriangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Renders a triangle. Delegates to the <see cref="T:Syncfusion.Windows.Forms.RenderingHelper"/> class.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">The bounds to be used when rendering the shape.</param>
            <param name="brush">The brush to be used for filling the interior of the rendered triangle.</param>
            <param name="pen">The pen to use for stroking the triangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonRenderer.SetBounds(System.Drawing.Rectangle)">
            <summary></summary>
            <param name="bounds"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonRenderer.Button">
            <summary>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.DEF_BORDERS_RADIUS">
            <summary>
            Default radius truncation coreners of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.DEF_VERTICAL_BRUSH_ANGLE">
            <summary>
            Angle for vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.DEF_WIDTH_BRUSH">
            <summary>
            Width for brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.HIGHTLIGHTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_blButtonSelected">
            <summary>
            Blend for selected control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_blButtonDefault">
            <summary>
            Blend for control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_blButtonPressed">
            <summary>
            Blend for pressed control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_blButtonDisabled">
            <summary>
            Blend for disabled control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_metroColor" -->
        <member name="F:Syncfusion.Windows.Forms.MetroButtonRenderer.m_metroForeColor">
            <summary>
            Metro ForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.OnDispose(System.Boolean)">
            <summary>Make class cleanup</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.SetMetroColor(System.Drawing.Color)">
            <summary>
            Sets metro color      
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.GetVerticalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets vertical gradient brush.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Draws background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState,System.Boolean)">
            <summary>
            Draws border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.PaintGradientDisabled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for disabled control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"></param>        
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroButtonRenderer.GetRegion(System.Drawing.Rectangle)">
            <summary>
            Specifies region for drawing
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ColorUIActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ColorUIActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the ClockActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ColorUIActionList.InitializeActionList">
            <summary>
            Overrridden InitializeActionList.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ColorUIActionList.Text">
            <summary>
            Gets or sets the Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ColorUIActionList.Style">
            <summary>
            Gets or sets the visual style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ColorUIActionList.BStyle">
            <summary>
            Gets or sets the visual style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ColorUIActionList.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.NullableHelper">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.NullableHelper.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.ComponentModel.NullableHelper.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FontSize">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FontSize.Normal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FontSize.Large">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.UseStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.UseStyle.True">
            <summary>
            UseVisualStyle is true
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.UseStyle.False">
            <summary>
            UseVisualStyle is false
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.UseStyle.Inherited">
            <summary>
            value for UseVisualStyle inherits from parent
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAppearance">
            <summary>
            Specifies the appearance of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.None">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Classic">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Office2000">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.WindowsXP">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.OfficeXP">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Office2003">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Office2007">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Office2010">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAppearance.Metro">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdvState">
            <summary>
            Specifies the state of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.Default">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.MouseOver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.Pressed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.Checked">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.Flat">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.Inactive">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvState.All">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdvBorderStyle">
            <summary>
            Specifies ButtonAdv border style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.None">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Default">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Dashed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Dotted">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Inset">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Outset">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Solid">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Bump">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Etched">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Flat">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Raised">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.RaisedInner">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.RaisedOuter">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.Sunken">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.SunkenInner">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvBorderStyle.SunkenOuter">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdv">
            <summary>
            Button with advanced rendering features.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportOffice2007Theme">
            <summary>
            Specifies that this object supports <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISupportOffice2007Theme.EnableOffice2007Style">
            <summary>
            Enables rendering with <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISupportOffice2007Theme.Office2007ColorTheme">
            <summary>
            Specifies <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/> to use.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportThemeChanged">
            <summary>
            Specifies that this object subscribes to <see cref="E:Syncfusion.Windows.Forms.XPThemes.ThemeChanged"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IVisualStyle">
            <summary>
            Interface for SkinManager
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.c_nDEFAULT_BORDER_WIDTH">
            <summary>
            Specifies ButtonAdv default border width.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_CHECKVISIBLE">
            <summary>
            Draw the window only if it is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_NONCLIENT">
            <summary>
            Draw the non-client area of the window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_CLIENT">
            <summary>
            Draw the client area of the window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_ERASEBKGND">
            <summary>
            Erase the background before drawing the window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_CHILDREN">
            <summary>
            Draw all visible child windows.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_OWNED">
            <summary>
            Draw all owned windows.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.PRF_ALL">
            <summary>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.isLastLeftButton">
            <summary>
            Indicates whether renderer could  draw the background for half of the control differently.
            Used in XP style when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.isFirstRightButton">
            <summary>
            Indicates whether renderer could draw the background for half of the control differently.
            Used in XP style when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_bIgnoreMouse">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_bsBorderStyle">
            <summary>
            Specifies border style of ButtonAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.s_hashDelegates">
            <summary>
            Internal usage field ( Border drawing ).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.s_nHashDelegates">
            <summary>
            Reference counter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.altPressed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_bKeepFocusRectangle">
            <summary>
            Indicates whether ButtonAdv will show focus rectenagle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_appearance">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_cachedAppearance">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_renderer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_state">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_buttonImageType">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_comboEditBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_isComboButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_bPushable">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_pushed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_bIsDown">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_animateState">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_colorScheme">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_metroColor">
            <summary>Metrocolor</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_foreColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_backColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_customColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_overrideManagedColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_useStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_weakThemeChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.PaintButton(System.Drawing.Graphics,Syncfusion.Windows.Forms.ButtonAdv,System.Drawing.Point)">
            <summary>
            Drawing ButtonAdv's surface on custom Graphics
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="control">buttonAdv control to draw</param>
            <param name="p">Point that represents the location of the upper-left
             corner of the drawn image.</param>
             <example>
                    private void pictureBox1_Paint(object sender, PaintEventArgs e)
                    {
                        e.Graphics.RotateTransform(20); 
                        ButtonAdv.PaintButton(e.Graphics, this.buttonAdv1, new Point(75, 25));
                    }
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeMetroColor">
            <summary>
            To indicate whether to serialize MetroColor or not
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetMetroColor">
            <summary>
            To Reset MetroColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.imageListAdv">
            <summary>
            Gets or sets the ImageListAdv of the ButtonAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isComboButton">Indicates whether button is of combo button type.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.InitializeProperties">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ApplyScaleToControl(System.Single)">
            <summary>
            applies the scaling
            </summary>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnFontChanged(System.EventArgs)">
            <summary>
            Font changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.GetFlag(System.Int32)">
            <summary>
            Indicates whether to animate the image.
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetFlag(System.Int32,System.Boolean)">
            <summary>
            Sets the value of animateState member.
            </summary>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnFrameChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.Animate(System.Boolean)">
            <summary>
            If animate is true - animates the image, else doesn`t animate.
            </summary>
            <param name="animate"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.Animate">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.StopAnimate">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.isBackStageButton">
            <summary>
            finding the button is BackStageButton or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_MessageBoxAdvOptionButton">
            <summary>
            Holds MessageBoxAdvOptionButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdv.m_IsDropDownButton">
            <summary>
            Holds is DropDown Button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetIsDropDownButton">
            <summary>
            Reset DropDown Button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializaIsDropDownButton">
            <summary>
            Specifies whether this is DropDown Button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeIsDropDownButton">
            <summary>
            Specifies whether this is DropDown Button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawFocus(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawBorderDelegateRoutine">
            <summary>
            Creates delegates for border drawing methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawBorder(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Performs border drawing.
            </summary>
            <param name="e">PaintEventArgs from OnPaint method</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawFlatBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Flat style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawSunkenOuterBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.SunkenOuter style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawSunkenInnerBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.SunkenInner style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawSunkenBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Sunken style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawRaisedOuterBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.RaisedOuter style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawRaisedInnerBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.RaisedInner style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawRaisedBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Raised style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawEtchedBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Etched style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawBumpBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Bump style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawOutsetBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Outset style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawInsetBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Inset style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawSolidBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Solid style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawDottedBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Dotted style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawDashedBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws border with ButtonAdvBorderStyle.Dashed style.
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.DrawNoBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            This method draws nothing. Used with ButtonAdvBorderStyle.Default and ButtonAdvBorderStyle.None
            </summary>
            <param name="g">Graphics to draw on</param>
            <param name="rectClient">rectangle to draw border in</param>
            <returns>border width</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.GetBorderColor">
            <summary>
            Gets color to draw border with.
            </summary>
            <returns>border color</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetIgnoreMouse(System.Boolean)">
            <summary>
            Recover or suspends mouse handling logic for property <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.State"/>. 
            </summary>
            <param name="ignoreMouse">
            True to suspend, otherwise to resume handling logic.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SuspendMouseState">
            <summary>
            Suspend <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.State"/> property updating till the <see cref="M:Syncfusion.Windows.Forms.ButtonAdv.ResumeMouseState"/> method call.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResumeMouseState">
            <summary>
            Recover mouse handling logic for property <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.State"/>. To suspend call <see cref="M:Syncfusion.Windows.Forms.ButtonAdv.SuspendMouseState"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetIsLastLeftButton(System.Boolean)">
            <summary>
            If the isLastleftButton is set to True, the button's renderer could 
            draw the background for half of the control differently. Used in XP style 
            when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
            <param name="val">The value that is to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetIsFirstRightButton(System.Boolean)">
            <summary>
            If the IsFirstRightButton is set to True, the button's renderer could 
            draw the background for half of the control differently. Used in XP style 
            when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
            <param name="val">The value that is to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.GetIsLastLeftButton">
            <summary>
            If the isLastleftButton is set to True, the button's renderer could 
            draw the background for half of the control differently. Used in XP style 
            when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.GetIsFirstRightButton">
            <summary>
            If the IsFirstRightButton is set to True, the button's renderer could 
            draw the background for half of the control differently. Used in XP style 
            when used as a combo button.
            </summary>
            <remarks>Used only for by <see cref="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer"/> class.</remarks>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnSystemColorsChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnButtonChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnClick(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnMouseEnter(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnMouseLeave(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/> event.
            </summary>
            <param name="kevent">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/> event.
            </summary>
            <param name="kevent">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetUseVisualStyle">
            <summary>
            Resets the UseVisualStyle to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeUseVisualStyle">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetComboEditBackColor">
            <summary>
            Resets the ComboEditBackColor to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeComboEditBackColor">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetForeColor">
            <summary>
            Resets the System.Windows.Forms.Control.ForeColor property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeForeColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ResetBackColor">
            <summary>
            Resets the System.Windows.Forms.Control.BackColor property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerialize">
            <summary>
            Should serialize for IsBackStageButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.BackColor"/> property should be persisted.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.RaisePaintEvent(System.Windows.Forms.PaintEventArgs)">
            <summary>Method allow to raise <see cref="E:System.Windows.Forms.Control.Paint"/> event.</summary>
            <param name="e">Paint event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetRenderer">
            <summary>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.SetRegion">
            <summary>
            Sets region of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.GetButtonAppearance">
            <summary>
            Gets ButtonAppearance depending on current operating system
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdv.MousePointInside">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.IsDesignMode">
            <summary>
            Indicates whether button have DesignMode
            </summary>                
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.Office2007ColorScheme">
            <summary>
            Gets or sets office 2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.Office2010ColorScheme">
            <summary>
            Gets or sets office 2010 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.BorderStyleAdv">
            <summary>
            Gets or sets ButtonAdv border style.	Borders styles supported only in 
            appearance styles: <see cref="F:Syncfusion.Windows.Forms.ButtonAppearance.Office2003"/>, 
            <see cref="F:Syncfusion.Windows.Forms.ButtonAppearance.OfficeXP"/> and <see cref="F:Syncfusion.Windows.Forms.ButtonAppearance.WindowsXP"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.KeepFocusRectangle">
            <summary>
            Gets or Sets value specifying whether ButtonAdv will show focus rectangle receiveng focus. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.Appearance">
            <summary>
            Gets or sets the look and feel of the ButtonAdv. Set <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.UseVisualStyle"/> 
            to <c>True</c> if you want to apply style on button, otherwise <c>False</c>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.MetroColor">
            <summary>
            Gets or sets the MetroColor color of the ButtonAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.ForeColor">
            <summary>
            Gets or sets the foreground color of the ButtonAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.BackColor">
            <summary>
            Gets or sets the background color of the ButtonAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.CustomManagedColor">
            <summary>
            Gets or sets the background color of the ButtonAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.OverrideFormManagedColor">
            <summary>
            Gets or sets a value indicating whether the custom managed color is to be applied by overiding the Form's managed color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.UseVisualStyle">
            <summary>
            Indicates whether Visual Styles must be enabled for the button.
            Set value to <c>True</c> if you want to apply settings of properties:
            <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.Appearance"/>, <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.BorderStyleAdv"/>, <see cref="P:Syncfusion.Windows.Forms.ButtonAdv.ButtonType"/>
            and etc. on current button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.ButtonType">
            <summary>
            Gets or sets the type of button to be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.Text">
            <summary>
            Gets or sets the text to be displayed on the button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.State">
            <summary>
            Gets or sets the different states the button can hold: Default, MouseOver, Pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.PushButton">
            <summary>
            Indicates the state of control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.ResetStateOnLostFocus">
            <summary>
            Gets or sets a value indicating whether state should be reset on focus lost.
            </summary>
            <value>
            	<c>true</c> if reset state on lost focus; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.IsMouseDown">
            <summary>
            Indicates whether the mouse is currently pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.IsComboButton">
            <summary>
            Indicates whether the button is of ComboButton type.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.ComboEditBackColor">
            <summary>
            Gets or sets the combo edit backcolor.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ButtonAdv.ButtonChanged">
            <summary>
            Indicates whether Appearance of the ButtonAdv has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.EnableTouchMode">
            <summary>
            gets or sets the touchmode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.IsBackStageButton">
            <summary>
            Gets/Sets the value for IsBackStageButton
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.MessageBoxAdvOptionButton">
            <summary>
            Gets/Sets whether this is MessageBoxAdv Button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.IsDropDownButton">
            <summary>
            Gets/Sets whether this is DropDownButton
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdv.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdv.DrawBorderEventHandler">
            <summary>
            Delegate used for border drawing.
            </summary>
            <returns></returns>
            <param name="g"/>
            <param name="rectClient"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdvDesigner">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonAdvDesigner.actionLists">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdvDesigner.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonAdvDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary></summary>
            <param name="component"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonAdvDesigner.ActionLists">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonAdvActionList">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WindowsXPColorScheme">
            <summary>
            This should be called WindowsXPColorAndLayoutScheme.
            Specifies the layout and colors for buttons and combo box buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.DefaultBlue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.OliveGreen">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.Silver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.DefaultBlueCombo">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.OliveGreenCombo">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorScheme.SilverCombo">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WindowsXPColors">
            <summary>
            Defines the different colors that will be used to define the 3 Windows XP
            color schemes supported.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueGradientStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueGradientEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueMouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboButtonColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboButtonMouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboButtonPressedColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboArcColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.defaultBlueComboButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenGradientStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenGradientEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenMouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboButtonColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboButtonMouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboButtonPressedColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboArcColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.oliveGreenComboButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverGradientStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverGradientEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverMouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColors.silverComboBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueGradientStartColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueGradientEndColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueMouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboButtonColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboButtonMouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboButtonPressedColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboArcColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.DefaultBlueComboButtonBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenGradientStartColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenGradientEndColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenMouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboButtonColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboButtonMouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboButtonPressedColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboArcColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.OliveGreenComboButtonBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverGradientStartColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverGradientEndColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverMouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPColors.SilverComboBorderColor">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonOffice2003Colors">
            <summary>
            Defines the different colors that are used to define the Office 2003 look and feel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOffice2003Colors.defaultColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOffice2003Colors.mouseOverColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOffice2003Colors.pressedColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOffice2003Colors.borderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOffice2003Colors.focusBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOffice2003Colors.DefaultColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOffice2003Colors.MouseOverColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOffice2003Colors.PressedColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOffice2003Colors.BorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOffice2003Colors.FocusBorderColor">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonOfficeXPColors">
            <summary>
            Defines the different colors that are used to define the Office XP look and feel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonOfficeXPColors.borderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonOfficeXPColors.BorderColor">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DrawParams">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_align">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_bounds">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_backColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_enabled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_bRightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawParams.m_Appearance">
            <summary>
            Initialize the Button Appearance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DrawParams.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DrawParams.#ctor(System.Boolean,System.Drawing.Color,System.Drawing.RectangleF,System.Drawing.ContentAlignment)">
            <summary>
            Constructor with variables initialization.
            </summary>
            <param name="enabled"></param>
            <param name="back"></param>
            <param name="bounds"></param>
            <param name="align"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.ControlBackColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.Appearance">
            <summary>
            Gets/ Sets the Button Appearance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.Align">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.Bounds">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.Enabled">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DrawParams.RightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ButtonTypes">
            <summary>
            The types of buttons that the child button of the
            ButtonEdit class can be set to. The ButtonType specifies
            the image that is to be used for the button. 
            Set the button to normal appearance if you want to use your
            own image.
            </summary>
            <remarks>
            The ButtonType and <see cref="!:Button.Image"/> property are only loosely enforced by the
            control and the designer. In the case where the ButtonType is set to one of these
            values other than ButtonTypes.Normal and the Image property of the ButtonEditChildButton
            is changed, the new image will be displayed and the ButtonType will still be the same
            (it will not be changed to normal as its displaying a new image).
            <para>
            The ButtonTypes are only provided for ease of use and do not in any way change the
            functionality of the buttons.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Normal">
            <summary>
            Normal button. The image can be set by the user.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Calculator">
            <summary>
            Calculator image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Currency">
            <summary>
            Currency image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Down">
            <summary>
            Down image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.ComboXPDown">
            <summary>
            Down image like in a Windows XP combo box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Up">
            <summary>
            Up image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Left">
            <summary>
            Left image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Right">
            <summary>
            Right image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Redo">
            <summary>
            Redo image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Undo">
            <summary>
            Undo image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Check">
            <summary>
            Check image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.Browse">
            <summary>
            Browse image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.LeftEnd">
            <summary>
            Left end image is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ButtonTypes.RightEnd">
            <summary>
            Right end image is used.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ClassicButtonRenderer">
            <summary>
            Render button in classic style
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ClassicButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ClassicButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WindowsVistaColors">
            <summary>
            Defines the different colors that will be used to define the 3 Windows XP
            color schemes supported.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonPressedTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonPressedBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonSelectedTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonSelectedBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonDisabledTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonDisabledBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonPressedBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonSelectedBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.buttonDisabledBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blueButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.silverButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsVistaColors.blackButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonPressedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonPressedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonSelectedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonSelectedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonDisabledTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonDisabledBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonPressedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonSelectedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.ButtonDisabledBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlueButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.SilverButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsVistaColors.BlackButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2000ButtonRenderer">
            <summary>
            Summary description for Office2000ButtonRenderer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2000ButtonRenderer.OutsidePadding">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2000ButtonRenderer.InsidePadding">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2000ButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2000ButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2003ButtonRenderer">
            <summary>
            Office2003 button style rendering.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2003ButtonRenderer.grayBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2003ButtonRenderer.orangeBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2003ButtonRenderer.redBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2003ButtonRenderer.borderPen">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2003ButtonRenderer.focusBorderPen">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003ButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003ButtonRenderer.OnDispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003ButtonRenderer.DisposeDrawingObjects">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003ButtonRenderer.CreateDrawingObjects">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003ButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007ButtonRenderer">
            <summary>
            Represents renderer of the Office 2007 style for ButtonAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DEF_BORDERS_RADIUS">
            <summary>
            Default radius truncation coreners of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DEF_VERTICAL_BRUSH_ANGLE">
            <summary>
            Angle for vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DEF_WIDTH_BRUSH">
            <summary>
            Width for brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.HIGHTLIGHTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_blButtonSelected">
            <summary>
            Blend for selected control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_blButtonDefault">
            <summary>
            Blend for control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_blButtonPressed">
            <summary>
            Blend for pressed control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_blButtonDisabled">
            <summary>
            Blend for disabled control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_colorScheme">
            <summary>
            The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ButtonRenderer.m_colorTable">
            <summary>
            Current color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.CreateDrawingObjects">
            <summary>
            Initialize all drawing objects
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.OnDispose(System.Boolean)">
            <summary>Make class cleanup</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.SetColorScheme(Syncfusion.Windows.Forms.Office2007Theme)">
            <summary>
            Sets vista color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.GetRoundedPath(System.Drawing.Rectangle,System.Int32,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rounded path for control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.GetButtonBackgroundRect(System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rectangle for background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.GetInternalBorderRect(System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rectangle for internal border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.GetVerticalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets vertical gradient brush.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Draws background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState,System.Boolean)">
            <summary>
            Draws border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBackgroundDefault(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when it don't press and mouse don't over it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBackgroundPressed(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when it pressed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBackgroundSelected(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when mouse over it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawBackgroundDisabled(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for disable control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.PaintGradientDefault(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.PaintGradientPressed(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for pressed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.PaintGradientSelected(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for selected control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.PaintGradientDisabled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for disabled control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"></param>        
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.GetRegion(System.Drawing.Rectangle)">
            <summary>
            Specifies region for drawing
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007ButtonRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Draws text on ButtonAdv with specified color
             </summary>
            <param name="g" type="System.Drawing.Graphics"><para>
             The graphics object to use.  
             </para></param>
             <param name="textColor">Color of the text</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010ButtonRenderer">
            <summary>
            Represents renderer of the Office 2007 style for ButtonAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DEF_BORDERS_RADIUS">
            <summary>
            Default radius truncation coreners of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DEF_VERTICAL_BRUSH_ANGLE">
            <summary>
            Angle for vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DEF_WIDTH_BRUSH">
            <summary>
            Width for brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.HIGHTLIGHTED">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_blButtonSelected">
            <summary>
            Blend for selected control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_blButtonDefault">
            <summary>
            Blend for control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_blButtonPressed">
            <summary>
            Blend for pressed control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_blButtonDisabled">
            <summary>
            Blend for disabled control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_colorScheme">
            <summary>
            The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ButtonRenderer.m_colorTable">
            <summary>
            Current color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.CreateDrawingObjects">
            <summary>
            Initialize all drawing objects
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.OnDispose(System.Boolean)">
            <summary>Make class cleanup</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.Set2010ColorScheme(Syncfusion.Windows.Forms.Office2010Theme)">
            <summary>
            Sets vista color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.GetRoundedPath(System.Drawing.Rectangle,System.Int32,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rounded path for control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.GetButtonBackgroundRect(System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rectangle for background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.GetInternalBorderRect(System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Gets rectangle for internal border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.GetVerticalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets vertical gradient brush.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState)">
            <summary>
            Draws background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonAdvState,System.Boolean)">
            <summary>
            Draws border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBackgroundDefault(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when it don't press and mouse don't over it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBackgroundPressed(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when it pressed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBackgroundSelected(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for control when mouse over it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawBackgroundDisabled(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws background for disable control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.PaintGradientDefault(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.PaintGradientPressed(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for pressed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.PaintGradientSelected(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for selected control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.PaintGradientDisabled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fill rectangle with gradient for disabled control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"></param>        
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.GetRegion(System.Drawing.Rectangle)">
            <summary>
            Specifies region for drawing
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010ButtonRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Color)">
             <summary>
             Draws text on ButtonAdv with specified color
             </summary>
            <param name="g" type="System.Drawing.Graphics"><para>
             The graphics object to use.  
             </para></param>
             <param name="textColor">Color of the text</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.OfficeXPButtonRenderer">
            <summary>
            Summary description for OfficeXPButtonRenderer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.grayBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.orangeBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.redBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.borderPen">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.OnDispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.CreateDrawingObjects">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.OfficeXPButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonMnemonicHelper">
            <summary>
            Show or Hide the prefix character
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RenderingHelper">
            <summary>
            Summary description for RenderingHelper.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.DEF_DISABLED_TEXT_OFFSET">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.DEF_MIN_BRIGHTNESS">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.DEF_MIN_BRIGHTNESS_COEF">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.DEF_BRIGHTNESS_COEF">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.anyRight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.anyBottom">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.anyCenter">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.anyMiddle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RenderingHelper.DT_FLAGS">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.CalculateBackgroundImageRectangle(System.Drawing.Rectangle,System.Drawing.Image,System.Windows.Forms.ImageLayout)">
            <summary>
            Calculates rectangle to draw on it backgroundImage, depending on imageLayout
            </summary>  
            <param name="bounds">Bounds of the control</param>
            <param name="backgroundImage">Background image of the control</param>
            <param name="imageLayout">Image layout of the background image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawImage(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Image,System.Drawing.Rectangle,Syncfusion.Windows.Forms.DrawParams)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="image"/>
            <param name="param"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawCircle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="brush"/>
            <param name="pen"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawDiamond(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="brush"/>
            <param name="pen"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawInvertedTriangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="brush"/>
            <param name="pen"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawTriangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="brush"/>
            <param name="pen"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Font,System.Drawing.PointF,Syncfusion.Windows.Forms.DrawParams,System.Boolean,System.Boolean)">
            <summary></summary>
            <param name="g"/>
            <param name="str"/>
            <param name="textColor"/>
            <param name="textFont"/>
            <param name="pt"/>
            <param name="param"/>
            <param name="drawShadow"/>
            <param name="autoEllipsis"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Font,System.Drawing.PointF,Syncfusion.Windows.Forms.DrawParams,System.Boolean,System.Boolean,Syncfusion.Windows.Forms.ButtonMnemonicHelper)">
            <summary></summary>
            <param name="g"/>
            <param name="str"/>
            <param name="textColor"/>
            <param name="textFont"/>
            <param name="pt"/>
            <param name="param"/>
            <param name="drawShadow"/>
            <param name="autoEllipsis"/>
            <param name="prefixChar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Font,System.Drawing.PointF,Syncfusion.Windows.Forms.DrawParams,System.Boolean)">
            <summary></summary>
            <param name="g"/>
            <param name="str"/>
            <param name="textColor"/>
            <param name="textFont"/>
            <param name="pt"/>
            <param name="param"/>
            <param name="drawShadow"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Font,System.Drawing.PointF,Syncfusion.Windows.Forms.DrawParams)">
            <summary></summary>
            <param name="g"/>
            <param name="str"/>
            <param name="textColor"/>
            <param name="textFont"/>
            <param name="pt"/>
            <param name="param"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Color,System.Drawing.Font,System.Drawing.PointF,Syncfusion.Windows.Forms.DrawParams,Syncfusion.Windows.Forms.ButtonMnemonicHelper)">
            <summary></summary>
            <param name="g"/>
            <param name="str"/>
            <param name="textColor"/>
            <param name="textFont"/>
            <param name="pt"/>
            <param name="param"/>
            <param name="prefixChar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawRightLeftButton(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.ButtonTypes,System.Drawing.Point,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="buttonImageType"/>
            <param name="offset"/>
            <param name="imageColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawUpDownButton(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.ButtonTypes,System.Drawing.Point,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="buttonImageType"/>
            <param name="offset"/>
            <param name="imageColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.DrawComboXPDownButton(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.ButtonTypes,System.Drawing.Point,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="bounds"/>
            <param name="buttonImageType"/>
            <param name="offset"/>
            <param name="imageColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.VAlignWithin(System.Drawing.Size,System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary></summary>
            <returns></returns>
            <param name="alignThis"/>
            <param name="withinThis"/>
            <param name="align"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.HAlignWithin(System.Drawing.Size,System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary></summary>
            <returns></returns>
            <param name="alignThis"/>
            <param name="withinThis"/>
            <param name="align"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.TranslateAlignment(System.Drawing.ContentAlignment)">
            <summary></summary>
            <returns></returns>
            <param name="align"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RenderingHelper.TranslateLineAlignment(System.Drawing.ContentAlignment)">
            <summary></summary>
            <returns></returns>
            <param name="align"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WindowsXPButtonRenderer">
            <summary>
            WindowsXP button Renderer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.topColorBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.bottomColorBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.gradientBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.invertGradientBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.mouseOverBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.pressedBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.borderPen">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fullPath">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.bottomPath">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.topRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.middleRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.bottomRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fullRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fillRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.leftBorderRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.topBorderRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.rightBorderRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.bottomBorderRectangle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.arcColorBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fillColorBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fillColorMouseOverBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.fillColorPressedBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.borderColorBrush">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.colorScheme">
            <summary>
            The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.#ctor(Syncfusion.Windows.Forms.ButtonAdv)">
            <summary></summary>
            <param name="button"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.OnDispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBounds(System.Drawing.Rectangle)">
            <summary>
            Sets the rectangles and paths used to draw the XP button when the size of the button is set.
            </summary>
            <param name="bounds">Set drawing bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.Render(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.DrawKnownImage(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Windows.Forms.Tools.ButtonTypes,System.Drawing.Point,System.Drawing.Color)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="buttonImageType"></param>
            <param name="offset"></param>
            <param name="imageColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetColorScheme(Syncfusion.Windows.Forms.WindowsXPColorScheme)">
            <summary>
            Sets WindowsXP color scheme for the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetColorScheme">
            <summary>
            Set the color scheme for the button based on the current XP Scheme and
            the IsComboButton property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.CreateDrawingObjects">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsDefaultBlue(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.CalcBounds(System.Drawing.RectangleF)">
            <summary>
            Calculates bounds for helper rectangles.
            </summary>
            <param name="buttonRect"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsDefaultBlueCombo(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsOliveGreen(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsOliveGreenCombo(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsSilver(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.SetBoundsSilverCombo(System.Drawing.RectangleF)">
            <summary></summary>
            <param name="buttonRect"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.RenderDefault(System.Drawing.Graphics)">
            <summary>
            Renders ButtonAdv using visual styles.
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.RenderDefaultBlueCombo(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.RenderOliveGreenCombo(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPButtonRenderer.RenderSilverCombo(System.Drawing.Graphics)">
            <summary></summary>
            <param name="g"/>
        </member>
        <member name="T:Syncfusion.Collections.ArrayListExt">
            <summary>
            Extends ArrayList by throwing events when Collection changes, an
            item's property changes, etc.
            </summary>
            <remarks>
            This class lets you know through the <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event
            when an item gets added or deleted from the ArrayList or
            when an exisiting item is replaced by a new item at a position.
            It will also listen for property change notifications from the
            items in the list, provided the items implement the <see cref="T:Syncfusion.ComponentModel.IChangeNotifyingItem"/>
            interface and forward them using the <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> event.
            </remarks>
        </member>
        <member name="F:Syncfusion.Collections.ArrayListExt.suspendCollectionChangedEvent">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Collections.ArrayListExt.forceReadOnly">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Collections.ArrayListExt.forceFixedSize">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.#ctor">
            <summary>
            Overloaded. Creates a new instance of the ArrayListExt class.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.#ctor(System.Object[])">
            <summary>
            Creates a new instance of the ArrayListExt class and inserts
            the items specified in an array into the ArrayList.
            </summary>
            <param name="items">An array of objects.</param>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event.
            </summary>
            <param name="args">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> object containing data 
            pertaining to this event.
            </param>
            <remarks><para>The <see cref="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)"/> method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. </para><para>Note to Inheritors:  When overriding OnCollectionChanged in a derived 
            class, be sure to call the base class's OnCollectionChanged method so that 
            registered delegates receive the event.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanging">
            <summary>
            Called when an item is being added, removed, moved or when an exisiting item is
            replaced by a new item.
            </summary>
            <remarks><para>This method does not fire a corresponding event.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> object that contains
            data pertaining to this event.</param>
            <remarks><para>The <see cref="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)"/> method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. </para><para>Note to Inheritors: When overriding <see cref="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)"/> in a derived 
            class, be sure to call the base class's <see cref="M:Syncfusion.Collections.ArrayListExt.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)"/> method so that 
            registered delegates receive the event.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.ReleaseHandler(System.Object)">
            <summary>
            Called when an item gets removed from the list.
            </summary>
            <param name="item">The object that got removed from the list.</param>
            <remarks><para>This provides you a convenient place where you can
            perform operations pertaining to the removal of an object
            from the list. Make sure to call the base class when you override
            this function.</para><para>The base class will call the <see cref="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)"/> event with appropriate parameters.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.AddHandlers(System.Object)">
            <summary>
            Called when an object gets added to the list.
            </summary>
            <param name="item">The object that got added to the list.</param>
            <remarks><para>This provides you a convenient place where you can
            perform operations pertaining to the addition of an object
            to the list. Make sure to call the base class when you override
            this function.</para><para>The method will call the <see cref="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)"/> method with appropriate parameters.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged_Handler(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.RaiseCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Call this method to force a <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event.
            </summary>
            <param name="args">The args for the above mentioned event.</param>
            <remarks>This method is useful when after suspending and resuming events in this list,
            you might want to fire the CollectionChanged event for some specific changes.</remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Add(System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Add"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Insert(System.Int32,System.Object)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Insert"/>.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.InsertRange"/>.
            </summary>
            <param name="index"></param>
            <param name="c"></param>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Clear">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.Clear"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.RemoveAt(System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.RemoveAt"/></summary>
            <param name="index"/>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Overridden. See <see cref="M:System.Collections.ArrayList.RemoveRange"/>.
            </summary>
            <param name="index"/>
            <param name="count"/>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Sort(System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            Sorts the elements in the entire System.Collections.ArrayList 
            using the System.IComparable implementation of each element.
            </summary>
            <param name="index"/>
            <param name="count"/>
            <param name="comparer"/>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverse range of items in collection from position specified by index 
            parameter and length specified by count parameter.
            </summary>
            <param name="index">range start position.</param>
            <param name="count">range length.</param>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.Move(System.Int32,System.Int32,System.Int32)">
            <summary>
            Allows you to move one or more items in the collection from 
            one position to another.
            </summary>
            <param name="from">The beginning index of the range of items to move.</param>
            <param name="to">The destination index where the items will be moved to.</param>
            <param name="count">The number of elements in the range to be moved.</param>
            <remarks><para>
            If the above indices are not within the list's count, this
            method will return without performing any operation.
            </para><para>For example, say a list contains the following elements:
            A, B, C, D, E, F. Then the following call:</para><code>list.Move(2, 4, 2); </code><para>will result in the following array: A, B, E, F, C, D.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.SuspendEvents">
            <summary>
            Will suspend the <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> and  <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> events 
            temporarily.
            </summary>
            <remarks><para>Call <see cref="M:Syncfusion.Collections.ArrayListExt.ResumeEvents(System.Boolean)"/> when you are ready to receive events again.
            The <see cref="M:Syncfusion.Collections.ArrayListExt.SuspendEvents"/>/<see cref="M:Syncfusion.Collections.ArrayListExt.ResumeEvents(System.Boolean)"/> calls are useful when you
            are performing a series of operations that will result in 
            multiple changes in the collection, throwing multiple events.
            In such cases, you could use these methods to have a single event thrown
            at the end of the series of operations.</para><para>Note that there is no one-to-one correspondence between
            <see cref="M:Syncfusion.Collections.ArrayListExt.SuspendEvents"/> and <see cref="M:Syncfusion.Collections.ArrayListExt.ResumeEvents(System.Boolean)"/>. <see cref="M:Syncfusion.Collections.ArrayListExt.SuspendEvents"/> could be called
            more than once but a single subsequent <see cref="M:Syncfusion.Collections.ArrayListExt.ResumeEvents(System.Boolean)"/> call will
            resume throwing events.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.ArrayListExt.ResumeEvents(System.Boolean)">
            <summary>
            Starts throwing the <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> and <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/>
            events.
            </summary>
            <param name="throwEvent">True will throw a <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event; False will not.</param>
            <remarks><para>Call this method after calling a <see cref="M:Syncfusion.Collections.ArrayListExt.SuspendEvents"/> method to resume
            throwing the <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> and <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> events.</para><para>Note that there is no one-to-one correspondence between
            SuspendEvents and ResumeEvents. SuspendEvents could be called
            more than once but a single subsequent ResumeEvents call will
            resume throwing events.</para></remarks>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.Item(System.Int32)">
            <summary>
            Overridden. See <see cref="P:System.Collections.ArrayList.Item"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.ForceReadOnly">
            <summary>
            Indicates whether the collection is Read-only.
            </summary>
            <value>True to make the collection Read-only; False otherwise. Default is False.</value>
            <remarks>When set to True, the <see cref="P:Syncfusion.Collections.ArrayListExt.IsReadOnly"/> property will return True
            and exisiting items in the list cannot be replaced.</remarks>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.ForceFixedSize">
            <summary>
            Indicates whether the collection should be made fixed size.
            </summary>
            <value>True to make the collection fixed size; False otherwise. Default is False.</value>
            <remarks>When set to True, the <see cref="P:Syncfusion.Collections.ArrayListExt.IsFixedSize"/> property will return True
            and no new elements can be added to the list.</remarks>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.IsFixedSize">
            <override/>
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.IsReadOnly">
            <override/>
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Collections.ArrayListExt.IsCollectionChangedEventSuspended">
            <summary>
            Indicates whether firing <see cref="E:Syncfusion.Collections.ArrayListExt.CollectionChanged"/> event is suspended.
            </summary>
            <value>True indicates firing the event is suspended; False otherwise.</value>
        </member>
        <member name="E:Syncfusion.Collections.ArrayListExt.CollectionChanged">
            <summary>
            Will be thrown when the Collection has changed due to the addition or removal of one
            or more items.
            </summary>
        </member>
        <member name="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged">
            <summary>
            Will be thrown if the items in the Collection implement <see cref="T:Syncfusion.ComponentModel.IChangeNotifyingItem"/> interface 
            and when their property changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.VisuallyInheritableIntList">
            <summary>
            A list deriving from <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> with a strongly-typed indexer of type int.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.VisuallyInheritableList">
            <summary>
            An <see cref="T:Syncfusion.Collections.ArrayListExt"/> derived class that supports creating "visually inheritable lists".
            </summary>
            <remarks><para>
            A "visually inheritable list" is one that keeps track of and persists in code, 
            the incremental changes applied on the list in a derived class's designer.
            </para><para>
            You should typically not use the methods and properties exposed by this class in 
            your code. The properties are meant to be used during design-time to store the
            incremental changes done at design-time.
            </para></remarks>
        </member>
        <member name="F:Syncfusion.Collections.VisuallyInheritableList.newItemsInDerivedClass">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Collections.VisuallyInheritableList.parent">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Collections.VisuallyInheritableList.designTimeBaseClassCopy">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Collections.VisuallyInheritableList.bApplyingDesignTimeChanges">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.#ctor">
            <summary>
            Overloaded. Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> without any support
            for visual inheritance.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.#ctor(System.Object[])">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> class and inserts
            the items specified in the array into the VisuallyInheritableList without any
            support for visual inheritance.
            </summary>
            <param name="items">An array of objects.</param>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.#ctor(Syncfusion.ComponentModel.IDesignable)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> with support for
            visual inheritance provided based on the specified parent's design state.
            </summary>
            <param name="parent">A reference to the <see cref="T:Syncfusion.ComponentModel.IDesignable"/> interface
            that typically contains this collection.</param>
            <remarks><para>
            This list keeps track of the incremental changes happening in a designer by
            following the parent's <see cref="P:Syncfusion.ComponentModel.IDesignable.DesignMode"/> property.
            </para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.ReinitBaseClassCopy">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.InitBaseClassCopy">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.ShouldContinueIfItemsCountChanged">
            <summary>
            Indicates whether to continue applying incremental-changes done in the 
            previous design-time invocation.
            </summary>
            <returns>True to continue; False otherwise.</returns>
            <remarks><para>
            This method is called if it seems like items were removed in the base class
            since the last invoke of this design-time.
            </para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.SetDesignTimeChanges(System.Collections.ArrayList)">
            <summary>
            Called to apply the changes made in the previous design-time invoke.
            </summary>
            <param name="newPositionList">A list specifying the new positions based on the positions of the exisiting items 
            set in the base class.</param>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.GetDesignTimeChanges">
            <summary>
            Returns a list representing the incremental changes made at design-time.
            </summary>
            <returns>A list representing the new position of the items based on the position of the items in the base class.</returns>
            <remarks><para>This list will be provided in a call to <see cref="M:Syncfusion.Collections.VisuallyInheritableList.SetDesignTimeChanges(System.Collections.ArrayList)"/>
            to reapply the changes done during this design-time.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.IsIdenticalObjects(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="item1">Object 1.</param>
            <param name="item2">Object 2.</param>
            <returns>True if identical; False otherwise.</returns>
            <remarks><para>The base class version uses the "==" operator to perform the 
            comparison. This could be overridden to support boxed types (int, for example),
            where 2 integers should be compared based on their value rather than the boxed object instance.
            </para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.OnCollectionChanging">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Collections.ArrayListExt.OnCollectionChanged"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableList.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary></summary>
            <param name="args"/>
        </member>
        <member name="P:Syncfusion.Collections.VisuallyInheritableList.BaseClassCopy">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Collections.VisuallyInheritableList.Parent">
            <summary>
            Gets / sets the associated parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.VisuallyInheritableList.DesignTimeChanges">
            <summary>
            Gets  / sets the incremental changes done at design-time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableIntList.#ctor">
            <summary>
            Overloaded. Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableIntList.#ctor(System.Int32[])">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> class and inserts
            the items specified in an array into the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/>, without
            support for visual inheritance.
            </summary>
            <param name="items">An array of integers.</param>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableIntList.#ctor(Syncfusion.ComponentModel.IDesignable)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Collections.VisuallyInheritableList"/> with support for
            visual inheritance provided based on the specified parent's design state.
            </summary>
            <param name="parent">A reference to the <see cref="T:Syncfusion.ComponentModel.IDesignable"/> interface
            that typically contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableIntList.AddRange(System.Int32[])">
            <summary>
            Lets you add an array of integers into the list.
            </summary>
            <param name="value">An integer array.</param>
            <remarks><para>Available to enable serialization using AddRange in designer.</para></remarks>
        </member>
        <member name="M:Syncfusion.Collections.VisuallyInheritableIntList.IsIdenticalObjects(System.Object,System.Object)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Collections.VisuallyInheritableList:IsIdentiacalObjects"/>.
            </summary>
            <param name="item1">Object 1.</param>
            <param name="item2">Object 2.</param>
            <returns>True if identical; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Collections.VisuallyInheritableIntList.Item(System.Int32)">
            <summary>
            Custom indexer of type int. See <see cref="M:System.Collections.ArrayList.Item"/> for more information.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.IntList">
            <summary>
            A list deriving from <see cref="T:Syncfusion.Collections.ArrayListExt"/> with a strongly-typed indexer of type int.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.IntList.#ctor">
            <summary>
            Overloaded. Creates a new instance of the IntList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.IntList.#ctor(System.Int32[])">
            <summary>
            Creates a new instance of the IntList class and inserts
            the items specified in array into the IntList.
            </summary>
            <param name="items">An array of integers.</param>
        </member>
        <member name="M:Syncfusion.Collections.IntList.AddRange(System.Int32[])">
            <summary>
            Lets you add an array of integers into the list.
            </summary>
            <param name="value">An integer array.</param>
            Available to enable serialization via AddRange in designer.
        </member>
        <member name="P:Syncfusion.Collections.IntList.Item(System.Int32)">
            <summary>
            Custom indexer of type int. See <see cref="M:System.Collections.ArrayList.Item"/> for more information.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.IntListDesignTime">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.IntListDesignTime.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.IntListDesignTime.#ctor(System.Int32[])">
            <summary></summary>
            <param name="items"/>
        </member>
        <member name="T:Syncfusion.Collections.IntListConverter">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Collections.IntListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary></summary>
            <returns></returns>
            <param name="context"/>
            <param name="culture"/>
            <param name="value"/>
            <param name="destinationType"/>
        </member>
        <member name="M:Syncfusion.Collections.IntListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary></summary>
            <returns></returns>
            <param name="context"/>
            <param name="destinationType"/>
        </member>
        <member name="T:Syncfusion.Collections.TypedArrayListExt`1">
            <summary>
            An ArrayListExt instance that will enforce the type of objects that can be added to the array during runtime.
            </summary>
            <typeparam name="T">Specifies the type of objects that can be added to the array.</typeparam>
        </member>
        <member name="P:Syncfusion.Collections.TypedArrayListExt`1.Item(System.Int32)">
            <summary>
            An indexer of the specified template type.
            </summary>
            <param name="index">The index of the object in the list that you want to retrieve.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="T:Syncfusion.Collections.DataTableWrapperList">
            <summary>
            An IBindingList that wraps a DataTable and provides optimized access to the rows of the datatable. Assign
            this list to a grid as DataSource to improve performance when inserting records into an existing
            table with many records.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new object and attaches it to the wrapped DataTable.
            </summary>
            <param name="dt">The DataTable to be wrapped.</param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Not implemented.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Not implemented. Returns -1.
            </summary>
            <param name="property"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.RemoveSort">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.AddNew">
            <summary>
            Adds a new row (calling DataTable.NewRow) and returns the new object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Not implemented.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index of the element to remove. </param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="value">The element to insert. The value must not be a NULL reference (Nothing in Visual Basic). </param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.Remove(System.Object)">
            <summary>
            Removes the specified row object from the collection.
            </summary>
            <param name="value">The element to remove from the collection. If the value is NULL or the element is not contained
            in the collection, the method will do nothing.</param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.System#Collections#IList#Contains(System.Object)">
            <summary>
            Always False, the method is not implemented yet.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.Clear">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Always -1, the method is not implemented.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.Add(System.Object)">
            <summary>
            Adds a row object to the end of the collection.
            </summary>
            <param name="value">The element to be added to the end of the collection. The value must not be a NULL reference (Nothing in Visual Basic). </param>
            <returns>The zero-based collection index at which the value has been added.</returns>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional array that is the destination of the elements copied from the ArrayList. The array must have zero-based indexing. </param>
            <param name="index">The zero-based index in an array at which copying begins. </param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns a PropertyDescriptorCollection that represents the DataTable.Columns collection. 
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.DataTableWrapperList.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            Returns DataTable.TableName.
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.DataTable">
            <summary>
            The underlying DataTable.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.AllowNew">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SortProperty">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SupportsSorting">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.IsSorted">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.AllowRemove">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SupportsSearching">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SortDirection">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="E:Syncfusion.Collections.DataTableWrapperList.ListChanged">
            <summary>
            Broadcasts the <see cref="E:System.ComponentModel.IBindingList.ListChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SupportsChangeNotification">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.AllowEdit">
            <summary>
            Always True.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.IsReadOnly">
            <summary>
            Always False.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.Item(System.Int32)">
            <summary>
            Returns the element at the zero-based index. 
            Setting is not supported and will throw an exception since the collection is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.System#Collections#IList#IsFixedSize">
            <summary>
            Always False since this collection has no fixed size.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.IsSynchronized">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.Count">
            <summary>
            Returns the number of elements contained in the collection. 
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.DataTableWrapperList.SyncRoot">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.DataTableColumnPropertyDescriptor">
            <summary>
            A custom PropertyDescriptor that is used within a <see cref="T:Syncfusion.Collections.DataTableWrapperList"/> to access
            a DataColumn.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.#ctor(System.Data.DataColumn)">
            <summary>
            Initializes a new PropertyDescriptor and attaches it to a DataColumn.
            </summary>
            <param name="dataColumn"></param>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.SetValue(System.Object,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.ResetValue(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.GetValue(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.CanResetValue(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.DataTableColumnPropertyDescriptor.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Collections.DataTableColumnPropertyDescriptor.PropertyType">
            <override/>
        </member>
        <member name="P:Syncfusion.Collections.DataTableColumnPropertyDescriptor.IsReadOnly">
            <override/>
        </member>
        <member name="P:Syncfusion.Collections.DataTableColumnPropertyDescriptor.ComponentType">
            <override/>
        </member>
        <member name="P:Syncfusion.Collections.DataTableColumnPropertyDescriptor.IsBrowsable">
            <override/>
        </member>
        <member name="P:Syncfusion.Collections.DataTableColumnPropertyDescriptor.Column">
            <summary>
            Returns the DataColumn.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.ListPropertyChangedType">
            <summary>
            Specifies the change in the ListProperty. Used by OnChanging and OnChanged events of strong typed collections.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.Add">
            <summary>
            An item is appended.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.Remove">
            <summary>
            An item is removed.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.Insert">
            <summary>
            An item is inserted.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.Move">
            <summary>
            An item is moved.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.Refresh">
            <summary>
            The whole collection is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.ItemChanged">
            <summary>
            An item is replaced.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.ListPropertyChangedType.ItemPropertyChanged">
            <summary>
            A nested property of an item is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.ListPropertyChangedEventArgs">
            <summary>
            Used by OnChanging and OnChanged events of strong typed collections.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionCancelEventArgs">
            <summary>
            Provides data for a cancellable event. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCancelEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionCancelEventArgs class.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCancelEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionCancelEventArgs class with the Cancel property set to the given value.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCancelEventArgs.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Collections.ListPropertyChangedEventArgs.#ctor(Syncfusion.Collections.ListPropertyChangedType,System.Int32,System.Object,System.String)">
            <summary>
            Initializes the ListPropertyChangedEventArgs.
            </summary>
            <param name="listChangedType"></param>
            <param name="index"></param>
            <param name="item"></param>
            <param name="property"></param>
        </member>
        <member name="M:Syncfusion.Collections.ListPropertyChangedEventArgs.#ctor(Syncfusion.Collections.ListPropertyChangedType,System.Int32,System.Object,System.String,System.Object)">
            <summary>
            Initializes the ListPropertyChangedEventArgs.
            </summary>
            <param name="listChangedType"></param>
            <param name="index"></param>
            <param name="item"></param>
            <param name="property"></param>
            <param name="tag"></param>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Action">
            <summary>
            Returns the type in which the list changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Index">
            <summary>
            Returns the index of the item that is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Item">
            <summary>
            Returns a reference to the affected item.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Property">
            <summary>
            Returns the names of the affected property.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Inner">
            <summary>
            If tag is EventArgs, then it returns the Tag casted to EventArgs.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.ListPropertyChangedEventArgs.Tag">
            <summary>
            Gets / sets a tag.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.ListPropertyChangedEventHandler">
            <summary>
            Used by OnChanging and OnChanged events of strong typed collections.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.ListUtil">
            <summary>
            Provides helper routines for exploring properties in a collection. Essential Grid uses
            this routine to find out about columns and relations to be displayed in the grid when
            a collection is specified as datasource.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetSortDirection(System.Collections.IList)">
            <summary>
            Checks IBindingList.SortDirection.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetSortProperty(System.Collections.IList)">
            <summary>
            Checks IBindingList.SortProperty.
            </summary>
            <param name="list">The list to check.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.SetSort(System.Collections.IList,System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Calls IBindingList.ApplySort.
            </summary>
            <param name="list">List to be sorted.</param>
            <param name="property"></param>
            <param name="sortDirection"></param>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.SupportsSort(System.Collections.IList)">
            <summary>
            Checks IBindingList.SupportsSorting.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetAllowRemove(System.Collections.IList)">
            <summary>
            Checks IBindingList.AllowRemove for IBindingList or IList.IsReadOnly and IList.IsFixedSize for IList collections.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.PropertyDescriptorIsARelation(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the property represents a relation or nested collection.
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.IsEqualItemProperties(System.ComponentModel.PropertyDescriptorCollection,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Compares the two PropertyDescriptorCollection and indicates whether they are equal.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetDataRelation(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the PropertyDescriptorCollection for the relation or nested collection.
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedItemProperties(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Overloaded. Returns the PropertyDescriptorCollection for the relation or nested collection.
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedItemProperties(System.ComponentModel.PropertyDescriptor,System.String@)">
            <summary>
            Returns the PropertyDescriptorCollection for the relation or nested collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedItemProperties(System.Object,System.ComponentModel.PropertyDescriptor,System.String@,System.Object@)">
            <summary>
            Returns the PropertyDescriptorCollection for the relation or nested collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.IsComplexType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.RegisterNonComplexType(System.Type)">
            <summary>
            Lets you register additional types that should return false when <see cref="M:Syncfusion.Collections.ListUtil.IsComplexType(System.ComponentModel.PropertyDescriptor)"/> is called. 
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetStandardValuesExclusive(System.ComponentModel.PropertyDescriptor)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetListName(System.Object)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedDataRelation(System.ComponentModel.PropertyDescriptor)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedList(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the <see cref="P:System.Data.DataRelation.ChildTable"/> or DataTable of the <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetDataColumn(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the <see cref="T:System.Data.DataColumn"/> of the <see cref="T:System.ComponentModel.PropertyDescriptor"/> if it
            is a DataColumnPropertyDescriptor.
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetDataTable(System.Object)">
            <summary>
            Determines and returns the DataTable object for the given list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetRelatedDataTable(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns the <see cref="P:System.Data.DataRelation.ChildTable"/> or DataTable of the <see cref="T:System.ComponentModel.PropertyDescriptor"/>
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetItemProperties(System.Type)">
            <summary>
            Returns the properties for the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetListItemType(System.Object)">
            <summary>
            Returns the type of the items in the list if the list is strong-typed.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetListItemType(System.Type)">
            <summary>
            Returns the type of the items in the list if the list is strong-typed.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetItemProperties(System.Object)">
            <summary>
            Returns the properties for the object.
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.ListUtil.GetItemValue(System.Object,System.String,System.Object)">
            <summary>
            Returns the value for the ValueMember of the specified item.
            </summary>
            <param name="item">The row item.</param>
            <param name="dataSource">The list</param>
            <param name="valueMember">The name of the value member</param>
            <returns>The value of the ValueMember.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ObservableList`1">
            <summary>
            Extends List{T} with events.
            </summary>
            <typeparam name="T">Type of collection elements.</typeparam>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Add(`0)">
            <summary>
            Add method.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.  
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index.  
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the list contains a specific value.  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Clear">
            <summary>
            Removes all items from the list.  
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.Sort(System.Collections.IComparer)">
            <summary>
            
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the list.  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the list.  
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the list contains a specific value.  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the list.  
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the list at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the list.  
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index.  
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index. 
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the collection. 
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns>TRUE to insert object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnRemove(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes when removing an element from the collection. 
            </summary>
            <param name="index"></param>
            <param name="value"></param>
            <returns>TRUE to remove object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Fires ItemAdded event.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Fires ItemRemoved event.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ObservableList`1.OnClearCompleted">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.List">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the list has a fixed size. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index. 
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ObservableList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection. 
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Collections.ObservableList`1.ItemAdded">
            <summary>
            Fired when new item is added to the collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Collections.ObservableList`1.ItemRemoved">
            <summary>
            Fired when item is removed from collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ListItemEventArgs`1">
            <summary>
            Event arguments for ObservableList events.
            </summary>
            <typeparam name="T">Type of items in InnerList.</typeparam>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Collections.ListItemEventArgs`1.Item">
            <summary>
            Underlying item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ListItemEventArgs`1.#ctor(`0)">
            <summary>
            Creates and initializes new instance of ListItemEventArgs.
            </summary>
            <param name="item">Underlying item.</param>
        </member>
        <member name="T:Syncfusion.Collections.SFTable">
            <summary>
            Implements a two-dimensional table that holds an <see cref="T:Syncfusion.Collections.SFArrayList"/> of rows. Each row
            is an <see cref="T:Syncfusion.Collections.SFArrayList"/> of objects.
            </summary>
            <remarks>
            <p>This is a memory efficient way to represent a table where values can remain empty. Only rows
            that actually contain data will allocate an <see cref="T:Syncfusion.Collections.SFArrayList"/> and the array only holds
            as many objects as the specific row contains columns.</p>
            <p>When you access data that are out of range, an empty () object will be returned.
            If you set data that are out of range, an exception will be thrown. If you set data for
            a row that is empty, the row will be allocated before the value is stored.</p>
            <p>SFTable provides methods that let you insert, remove or rearrange columns or rows
            in the table.</p>
            </remarks>
            <seealso cref="T:Syncfusion.Collections.SFArrayList"/>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFTable"/> class from the specified instances
            of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="info">An instance of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> class containing the information required to serialize the new <see cref="T:Syncfusion.Collections.SFTable"/> instance.</param>
            <param name="context">An instance of the <see cref="T:System.Runtime.Serialization.StreamingContext"/> class containing the source of the serialized stream associated with the new <see cref="T:Syncfusion.Collections.SFTable"/> instance. </param>
            <remarks>This constructor implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface for the <see cref="T:Syncfusion.Collections.SFTable"/> class.</remarks>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the <see cref="T:Syncfusion.Collections.SFTable"/>.
            </summary>
            <param name="info">A SerializationInfo object containing the information required to serialize the object.</param>
            <param name="context">A StreamingContext object containing the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.#ctor">
            <overload>
            Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFTable"/>
            class.
            </overload>
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFTable"/>
            class that is empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.#ctor(Syncfusion.Collections.SFTable,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFTable"/>
            class and optional copies of data from an existing table.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.Clone">
            <summary>
              <para>Creates a deep copy of the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
            <returns>
              <para>A deep copy of the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.Clear">
            <summary>
              <para>Removes all elements from the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.CreateRowsCollection">
            <summary>
            Creates and returns a new <see cref="T:Syncfusion.Collections.SFArrayList"/>.
            </summary>
            <returns>A new <see cref="T:Syncfusion.Collections.SFArrayList"/></returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.CreateCellCollection">
            <summary>
            Creates a collection of cells for a row.
            </summary>
            <returns>An <see cref="T:Syncfusion.Collections.SFArrayList"/> or derived object for the cell collection.</returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.InsertRows(System.Int32,System.Int32)">
            <summary>
            Inserts a specified number of empty rows in the <see cref="T:Syncfusion.Collections.SFTable"/> at a given row index.
            </summary>
            <param name="rowIndex">The zero-based row index of the first row to be inserted.</param>
            <param name="count">The number of rows to be added.</param>
            <returns>not used.</returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.InsertCols(System.Int32,System.Int32)">
            <summary>
            Inserts a specified number of empty columns for each row in the <see cref="T:Syncfusion.Collections.SFTable"/> at a given column index.
            </summary>
            <param name="colIndex">The zero-based column index of the first column to be inserted.</param>
            <param name="count">The number of columns to be inserted.</param>
            <returns>not used.</returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.RemoveRows(System.Int32,System.Int32)">
            <summary>
            Removes a specified number of rows from the <see cref="T:Syncfusion.Collections.SFTable"/> at a given row index.
            </summary>
            <param name="rowIndex">The zero-based row index of the first row to be removed.</param>
            <param name="count">The number of rows to be removed.</param>
            <returns>not used.</returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.RemoveCols(System.Int32,System.Int32)">
            <summary>
            Removes a specified number of columns for each row in the <see cref="T:Syncfusion.Collections.SFTable"/> at a given column index.
            </summary>
            <param name="colIndex">The zero-based column index of the first column to be removed.</param>
            <param name="count">The number of columns to be removed.</param>
            <returns>not used.</returns>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.MoveRows(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rearranges rows in the <see cref="T:Syncfusion.Collections.SFTable"/>.
            </summary>
            <param name="rowIndex">The zero-based index of the first row to be moved.</param>
            <param name="count">The number of rows in the range to be moved.</param>
            <param name="target">The new starting index for the range. The zero-based index is based on the original array.</param>
            <example>
            <code>
            SFTable array = new SFTable();
            array.RowCount = 5;
            array.ColCount = 1;
            array[0,0] = 0;
            array[1,0] = 1;
            array[2,0] = 2;
            array[3,0] = 3;
            array.MoveRows(0, 2, 3);
            // results in new order: 2, 0, 1, 3
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.MoveCols(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rearranges columns in the <see cref="T:Syncfusion.Collections.SFTable"/>.
            </summary>
            <param name="colIndex">The zero-based index of the first column to be moved.</param>
            <param name="count">The number of columns in the range to be moved.</param>
            <param name="target">The new starting index for the range. The zero-based index is based on the original array.</param>
            <example>
            <code>
            SFTable array = new SFTable();
            array.ColCount = 5;
            array.RowCount = 1;
            array[0,0] = 0;
            array[0,1] = 1;
            array[0,2] = 2;
            array[0,3] = 3;
            array.MoveCols(0, 2, 3);
            // results in new order: 2, 0, 1, 3
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Collections.SFTable.Contains(System.Int32,System.Int32)">
            <summary>
              <para>Indicates whether an element is at the specified coordinates in the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
            <param name="rowIndex">The zero-based row index.</param>
            <param name="colIndex">The zero-based column index.</param>
            <returns>
              <para>
                <see langword="true"/> if an element exists at the specified coordinates in the <see cref="T:Syncfusion.Collections.SFTable"/>;
             <see langword="false"/> otherwise.</para>
            </returns>
        </member>
        <member name="P:Syncfusion.Collections.SFTable.Rows">
            <summary>
            Returns the <see cref="T:Syncfusion.Collections.SFArrayList"/> from all rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.SFTable.RowCount">
            <summary>
              <para>Gets / sets the number of rows contained in the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
            <remarks>
            If you decrease the row count, the rows in the <see cref="T:Syncfusion.Collections.SFTable"/> will be removed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Collections.SFTable.ColCount">
            <summary>
              <para>Gets / sets the number of columns contained in the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
            <remarks>
            If you decrease the column count, the last columns in each row will be removed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Collections.SFTable.Item(System.Int32,System.Int32)">
            <summary>
              <para>Gets / sets an element at the specified coordinates in the <see cref="T:Syncfusion.Collections.SFTable"/>.</para>
            </summary>
            <param name="rowIndex">The zero-based row index.</param>
            <param name="colIndex">The zero-based column index.</param>
            <remarks>
            If you query for an element and the coordinates are out of range, an empty (<see langword="null"/>) object will be returned.<para/>
            If you set an element and the the coordinates are out of range, an exception is thrown.
            </remarks>
        </member>
        <member name="T:Syncfusion.Collections.SFArrayList">
            <summary>
               Extends ArrayList with MoveRange, InsertRange and RemoveRange methods. The Item property
               will grow the array on demand or return NULL if an index is out of range.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFArrayList"/>
            class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.#ctor(System.Collections.ICollection)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Collections.SFArrayList"/> class that contains elements copied from the specified
            collection and has the same initial capacity as the number of elements copied.</para>
            </summary>
            <param name="c">The <see cref="T:System.Collections.ICollection"/> whose elements are copied to the new list.</param>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.Clone">
            <summary>
              <para>Overridden. Creates a deep copy of the <see cref="T:Syncfusion.Collections.SFArrayList"/>.</para>
            </summary>
            <returns>
              <para>A deep copy of the <see cref="T:Syncfusion.Collections.SFArrayList"/>.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rearranges the values in the <see cref="T:Syncfusion.Collections.SFArrayList"/>.
            </summary>
            <param name="index">The zero-based index of the first value to be moved.</param>
            <param name="count">The number of values in the range to be moved.</param>
            <param name="dest">The new starting index for the range. The zero-based index is based on the original array.</param>
            <example>
            <code>
            SFArrayList array = new SFArrayList();
            array[0] = 0;
            array[1] = 1;
            array[2] = 2;
            array[3] = 3;
            array.MoveRange(0, 2, 3);
            // results in new order: 2, 0, 1, 3
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.EnsureCount(System.Int32)">
            <summary>
            Enlarges the array if needed.
            </summary>
            <param name="value">The size to be checked. If the array has less elements, empty (<see langword="null"/>) objects will be appended
            at the end of the array.</param>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of values from the <see cref="T:Syncfusion.Collections.SFArrayList"/>.
            </summary>
            <param name="index">The zero-based index of the first value to be removed.</param>
            <param name="count">The number of values in the range to be removed.</param>
            <example>
            <code>
            SFArrayList array = new SFArrayList();
            array[0] = 0;
            array[1] = 1;
            array[2] = 2;
            array[3] = 3;
            array.RemoveRange(1, 2);
            // results in new order: 0, 3
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Collections.SFArrayList.InsertRange(System.Int32,System.Int32)">
            <summary>
            Inserts a specified number of (<see langword="null"/>) values in the <see cref="T:Syncfusion.Collections.SFArrayList"/> at a given index.
            </summary>
            <param name="index">The zero-based index of the first value to be inserted.</param>
            <param name="count">The number of values in the range to be added.</param>
            <example>
            <code>
            SFArrayList array = new SFArrayList();
            array[0] = 0;
            array[1] = 1;
            array[2] = 2;
            array[3] = 3;
            array.InsertRange(1, 2);
            // results in new order: 0, null, null, 2, 3
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Collections.SFArrayList.Item(System.Int32)">
            <summary>
            Gets / sets the element at the specified index.
            In C#, this property is the indexer for the <see cref="T:Syncfusion.Collections.SFArrayList"/> class.
            </summary>
            <param name="index">The zero-based index of the element to get / set.</param>
            <value>
            The element at the specified index.
            When querying the value and the index is out of range, an empty (<see langword="null"/>) object will be returned.
            When setting the value and the index is out of range the array will be enlarged. See <see cref="M:Syncfusion.Collections.SFArrayList.EnsureCount(System.Int32)"/>
            </value>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.IDisposedEvent">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.IIsDisposedProperty">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableNodeColor">
            <summary>
            Used by TreeTable to balance the tree with algorithm based on Red-Black tree.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.BinaryTree.TreeTableNodeColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.BinaryTree.TreeTableNodeColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableNode">
            <summary>
            A branch or leaf in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.GetPosition">
            <summary>
            returns the position in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.GetLevel">
            <summary>
            Returns the tree level of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.GetMinimum">
            <summary>
            Returns the minimum value (of the leftmost leaf) of the branch in a sorted tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walk up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableNode.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableBranch">
            <summary>
            A branch with left and right leaves or branches.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.SetLeft(Syncfusion.Collections.BinaryTree.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSortedTree">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.Collections.BinaryTree.ITreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.SetRight(Syncfusion.Collections.BinaryTree.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Specifies if tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.Collections.BinaryTree.ITreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.GetLeftB">
            <summary>
            Returns the left branch cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.GetRightB">
            <summary>
            Returns the right branch cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.GetEntryPositionOfChild(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Returns the position in the tree table of the specified child node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node Count dirty and
            marks parent nodes' child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node Count dirty and steps
            through all child branches and marks their child node Count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node Minimum dirty and
            marks parent nodes' child node Minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node Minimum dirty and steps
            through all child branches and marks their child node Minimum dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableBranch.Left">
            <summary>
            Gets / sets the left node.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableBranch.Right">
            <summary>
            Gets / sets the right node.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableBranch.Color">
            <summary>
            Gets / sets the Red-Black tree color.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableEntry">
            <summary>
            A leaf with value and optional sort key.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableEntry.CreateBranch(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableEntry.Value">
            <summary>
            Gets / sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableNode">
            <summary>
            A branch or leaf in the tree.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.Disposable">
            <summary>
            This class provides a base class that implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern.
            </summary>
            <remarks>If you derive from this class, you only need to override the protected
            Dispose method and check the disposing parameter.</remarks>
        </member>
        <member name="T:Syncfusion.ComponentModel.NonFinalizeDisposable">
            <summary>
            This is a base class for Disposable. It implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern but it does not
            implement a finalizer. If you need finalization you need to derive from Disposable
            or add a finalizer to your derived class and manually call Dispose from the Finalizer.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NonFinalizeDisposable.Dispose">
            <overload>
            Releases all resources used by the Component.
            </overload>
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NonFinalizeDisposable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.ComponentModel.Disposable.Finalize">
            <summary>
            <see cref="M:System.Object.Finalize"/>.<para/>
            In C# and C++, finalizers are expressed using destructor syntax.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.GetPosition">
            <summary>
            Returns the position in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.IsEmpty">
            <summary>
            Indicates whether leaf is empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.GetLevel">
            <summary>
            Returns the tree level of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.GetNodeInfo">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.ToString">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset counters.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableNode.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableNode.Tree">
            <summary>
            Gets / sets the tree this node belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableNode.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableBranch">
            <summary>
            A branch in a tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.#ctor(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Initializes a new branch.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.GetLeftB">
            <summary>
            Returns the left node cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.GetRightB">
            <summary>
            Returns the right node cast to ITreeTableBranch.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.SetLeft(Syncfusion.Collections.BinaryTree.ITreeTableNode,System.Boolean,System.Boolean)">
            <summary>
            Sets the left node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <param name="isSorted">Indicates whether tree-table is sorted.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.Collections.BinaryTree.TreeTableBranch.Left"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.SetRight(Syncfusion.Collections.BinaryTree.ITreeTableNode,System.Boolean)">
            <summary>
            Sets the right node.
            </summary>
            <param name="value">The new node.</param>
            <param name="inAddMode">Indicates whether tree-table is in add-mode.</param>
            <remarks>
            Call this method instead of simply setting <see cref="P:Syncfusion.Collections.BinaryTree.TreeTableBranch.Right"/> property if you want
            to avoid the round-trip call to check whether the tree is in add-mode
            or if tree-table is sorted.
            </remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.GetEntryPositionOfChild(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Returns the position in the tree table of the specific child node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.InvalidateCountBottomUp">
            <summary>
            Sets this object's child node count dirty and
            walks up parent nodes and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.InvalidateCountTopDown">
            <summary>
            Sets this object's child node count dirty and steps
            through all child branches and marks their child node count dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.InvalidateMinimumBottomUp">
            <summary>
            Sets this object's child node minimum dirty and
            marks parent nodes' child node minimum dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableBranch.InvalidateMinimumTopDown">
            <summary>
            Sets this object's child node minimum dirty and steps
            through all child branches and marks their child node minimum dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableBranch.Color">
            <summary>
            Gets / sets Red-Black tree algorithm helper.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableBranch.Left">
            <summary>
            Gets / sets the left leaf or branch.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableBranch.Right">
            <summary>
            Gets / sets the right tree or branch.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableEntry">
            <summary>
            A leaf in the tree with value and optional sort key.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.GetSortKey">
            <summary>
            Returns the sort key of this leaf.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.GetMinimum">
            <summary>
            Returns the minimum value (of the most-left leaf) of the branch in a sorted tree.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.GetCount">
            <summary>
            Returns the number of child nodes (+1 for the current node).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.CreateBranch(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.GetNodeInfo">
            <summary>
            Returns the Debug / text information about the node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntry.IsEntry">
            <summary>
            Indicates whether this is a leaf.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntry.Value">
            <summary>
            Gets / sets the value attached to this leaf.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableEmpty">
            <summary>
            An empty node.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTable">
            <summary>
            Tree table interface definition.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTable.GetNextEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTable.GetPreviousEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry)">
            <summary>
            Optimized access to a previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTable.Sorted">
            <summary>
            Indicates whether this is a sorted tree.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTable.Comparer">
            <summary>
            A comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTable.Root">
            <summary>
            Returns the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTable.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableSource">
            <summary>
            This object owns a <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSource.GetTreeTable">
            <summary>
            Returns a reference to an inner tree table.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTable">
            <summary>
            A tree table.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTable"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.SetNodeAt(System.Int32,Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Sets the node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node that is to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.GetPreviousEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry)">
            <summary>
            Optimized access to the previous entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.GetNextEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry)">
            <summary>
            Optimized access to a subsequent entry.
            </summary>
            <param name="current"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Insert(System.Int32,Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index">Index value where the node is to be inserted.</param>
            <param name="value">Value of the node to insert.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Remove(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Removes the specified node.
            </summary>
            <param name="value">Node value to look for and remove.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.ResetCache">
            <summary>
            Resets the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Contains(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value">Node value to search for.</param>
            <returns>True if node belongs to this tree; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.IndexOf(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Returns the position of a node.
            </summary>
            <param name="value">Node value to look for.</param>
            <returns>Index of the node if found.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Add(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Appends a node.
            </summary>
            <param name="value">Node value to append.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.AddSorted(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Adds a node into a sorted tree.
            </summary>
            <param name="value">Node value to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.AddIfNotExists(System.Object,Syncfusion.Collections.BinaryTree.ITreeTableEntry)">
            <summary>
            Adds a node in a sorted tree only if no node with the same value has not been added yet.
            </summary>
            <param name="key"></param>
            <param name="value">Node value to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.IndexOfKey(System.Object)">
            <summary>
            Finds a node in a sorted tree.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.FindKey(System.Object)">
            <summary>
            Finds a node in a sorted tree that matches the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.FindHighestSmallerOrEqualKey(System.Object)">
            <summary>
            Finds the node in a sorted tree is just one entry ahead of the
            node with the specified key. It searches for the largest possible
            key that is smaller than the specified key.
            </summary>
            <param name="key">The key to search.</param>
            <returns>The node; NULL if not found.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified position.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts a node at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the node with the specified value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicates whether the node belongs to this tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified node.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified node to the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.GetCount">
            <summary>
            Returns the number of leaves.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the element from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in thedestination array.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.CopyTo(Syncfusion.Collections.BinaryTree.ITreeTableNode[],System.Int32)">
            <summary>
            Copies the elements from this collection into an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="index">The starting index in the destination array.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTable.GetEnumerator">
            <summary>
            Returns a <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEnumerator"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Reserved1">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Reserved2">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Reserved3">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Reserved4">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.ReservedShort">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Comparer">
            <summary>
            Gets / sets the comparer used by sorted trees.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Tag">
            <summary>
            Gets / sets the tag that can be associated with this object.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Sorted">
            <summary>
            Indicates whether tree is sorted.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Root">
            <summary>
            Gets / sets the root node.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.Item(System.Int32)">
            <summary>
            Gets / sets an item at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.IsReadOnly">
            <summary>
            Indicates whether the tree is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the item with the specified index.
            </summary>
            <param name="index">Index value of the item.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.IsFixedSize">
            <summary>
            Indicates whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.IsSynchronized">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.System#Collections#ICollection#Count">
            <summary>
            Returns the number of leaves.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTable.SyncRoot">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableEnumerator">
            <summary>
            Strongly typed enumerator for <see cref="T:Syncfusion.Collections.BinaryTree.TreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEnumerator.#ctor(Syncfusion.Collections.BinaryTree.ITreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next node.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEnumerator.Current">
            <summary>
            Returns the current node.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableEntrySource">
            <summary>
            An object that holds an <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableEntry"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableEntrySource.Entry">
            <summary>
            Gets a reference to the <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableEntry"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableEntrySource"/> objects
            that are internally using a <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTable"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.#ctor">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.#ctor(Syncfusion.Collections.BinaryTree.ITreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.BeginInit">
            <summary>
            Optimizes insertion of many elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Contains(Syncfusion.Collections.BinaryTree.ITreeTableEntrySource)">
            <summary>
            Indicates whether object belongs to this collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.IndexOf(Syncfusion.Collections.BinaryTree.ITreeTableEntrySource)">
            <summary>
            Returns the position of a object in the collection.
            </summary>
            <param name="value">The value of the object.</param>
            <returns>The position of the object.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.CopyTo(Syncfusion.Collections.BinaryTree.ITreeTableEntrySource[],System.Int32)">
            <summary>
            Copies the contents of the collection to an array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns>A strongly types enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Insert(System.Int32,Syncfusion.Collections.BinaryTree.ITreeTableEntrySource)">
            <summary>
            Inserts an object at the specified index.
            </summary>
            <param name="index">Index value where the object is to be inserted.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Add(Syncfusion.Collections.BinaryTree.ITreeTableEntrySource)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value of the object to append.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Remove(Syncfusion.Collections.BinaryTree.ITreeTableEntrySource)">
            <summary>
            Removes the object.
            </summary>
            <param name="value">The value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a node at the specified index.
            </summary>
            <param name="index">Index value of the node to remove.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts the object at the specified index.
            </summary>
            <param name="index">Index value of the object to insert.</param>
            <param name="value">Value of the object to insert.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the specified object.
            </summary>
            <param name="value">Value of the object to remove.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Indicate whether the specified object belongs to this collection.
            </summary>
            <param name="value">Object value to look for.</param>
            <returns>True if object belongs to the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Clear">
            <summary>
            Clears all nodes in the tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Returns the index of the specified object.
            </summary>
            <param name="value">Value of the object.</param>
            <returns>Index value of the object.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds the specified object to the collection.
            </summary>
            <param name="value">Value of the object to add.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies elements to destination array.
            </summary>
            <param name="array">Destination array.</param>
            <param name="index">Starting index of the destination array.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.IsInitializing">
            <summary>
            Indicates whether BeginInit was called.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Item(System.Int32)">
            <summary>
            Gets / sets an <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableEntrySource"/> at a specific position.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.IsReadOnly">
            <summary>
            Indicates whether tree is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets / sets the item at the specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item at the specified index.</returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.IsFixedSize">
            <summary>
            Indicates whether the nodes can be added or removed.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.IsSynchronized">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection.Count">
            <summary>
            Returns the number of objects in this collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator.#ctor(Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollection)">
            <summary>
            Initializes the <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator"/>.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator.MoveNext">
            <summary>
            Indicates whether to move to the next object in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Returns the current enumerator.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableEntrySourceCollectionEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableEntrySource"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableCounterNode">
            <summary>
            Interface definition for a node that has counters and summaries.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableSummaryNode">
            <summary>
            Interface definition for a node that has one or more summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryNode.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryNode.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyEntrySummary">if set to <c>true</c> notify entry summary.</param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableSummaryNode.HasSummaries">
            <summary>
            Indicates whether node has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterNode.GetCounterTotal">
            <summary>
            The total of this node's counter and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterNode.GetCounterPosition">
            <summary>
            The cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterNode.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableCounterSource">
            <summary>
            Interface definition for an object that has counters.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterSource.GetCounter">
            <summary>
            Returns the counter object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableCounter">
            <summary>
            Interface definition for a counter object.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounter.Combine(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Combines this counter object with another counter and returns a new object. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounter.Compare(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            	<c>true</c> if the specified cookie is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableCounter.GetValue(System.Int32)">
            <summary>
            Returns the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.ITreeTableCounter.Kind">
            <summary>
            Gets the Counter Kind.
            </summary>
            <value>The kind.</value>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableCounterCookies">
            <summary>
            Default counter cookies for identifying counter types.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.BinaryTree.TreeTableCounterCookies.CountAll">
            <summary>
            All counters.
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.BinaryTree.TreeTableCounterCookies.CountVisible">
            <summary>
            Visible Counter.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter">
            <summary>
            A counter that counts objects that are marked "Visible".
            </summary>
        </member>
        <member name="F:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.Empty">
            <summary>
            Returns an empty TreeTableVisibleCounter that represents zero visible elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.#ctor(System.Double)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter"/> with a specified number of visible elements.
            </summary>
            <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.GetVisibleCount">
            <summary>
            Returns the visible count.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.GetValue(System.Int32)">
            <summary>
            Returns the integer value of the counter. A cookie specifies
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.Syncfusion#Collections#BinaryTree#ITreeTableCounter#Combine(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Combines one tree object with another and returns the new object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.CreateCounter">
            <summary>
            Factory method creates a new counter object of the same type as this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.OnCombineCounters(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Called to combine the values of two counter objects. Results are saved back into this counter object.
            A cookie can filter the operation to a limited set of counter types.
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.Combine(Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Combines the counter values of this counter object with the values of another counter object
            and returns a new counter object.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.Compare(Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter,System.Int32)">
            <summary>
            Compares this counter with another counter. A cookie can specify
            a specific counter type.
            </summary>
            <param name="other">The other.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.IsEmpty(System.Int32)">
            <summary>
            Indicates whether the counter object is empty. A cookie can specify
            a specific counter type.
            </summary>
            <param name="cookie">The cookie.</param>
            <returns>
            	<c>true</c> if the specified cookie is empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter.Kind">
            <summary>
            The Counter Kind.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch">
            <summary>
            A tree table branch with a counter.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch">
            <summary>
            A tree table branch with a counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.#ctor(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.GetLeftC">
            <summary>
            Returns the left branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.GetRightC">
            <summary>
            Returns the right branch node cast to ITreeTableSummaryNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.TreeTableWithSummary">
            <summary>
            Returns the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryBranch.HasSummaries">
            <summary>
            Indicates whether this node has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.#ctor(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.GetCounterPositionOfChild(Syncfusion.Collections.BinaryTree.ITreeTableNode)">
            <summary>
            Returns the cumulative counter position object of a child node with all counter values.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.GetLeftC">
            <summary>
            Returns the left branch node cast to ITreeTableCounterNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.GetRightC">
            <summary>
            Returns the right branch node cast to ITreeTableCounterNode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.GetCounterTotal">
            <summary>
            Returns the total of this node's counter and child nodes (cached).
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.GetCounterPosition">
            <summary>
            Returns the cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.TreeTableWithCounter">
            <summary>
            Returns the tree this branch belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounterBranch.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry">
            <summary>
            A tree leaf with value, sort key and counter information.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry">
            <summary>
            A tree leaf with value and summary information.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.CreateBranch(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.OnGetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)">
            <summary>
            Called from <see cref="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)"/> when called the first time after summaries were invalidated.
            </summary>
            <param name="emptySummaries">The empty summaries.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.GetSummaryArraySource">
            <summary>
            Returns the value as <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.InvalidateSummariesBottomUp(System.Boolean)">
            <summary>
            Walks up parent branches and reset summaries.
            </summary>
            <param name="notifyParentRecordSource"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifySummaryArraySource">if set to <c>true</c> notify summary array source.</param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.TreeTableWithSummary">
            <summary>
            Returns the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry.HasSummaries">
            <summary>
            Indicates whether the node has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.CreateBranch(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Creates a branch that can hold this entry when new leaves are inserted into the tree.
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.GetCounterPosition">
            <summary>
            Returns the cumulative position of this node.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.GetCounterSource">
            <summary>
            Returns the value as <see cref="T:Syncfusion.Collections.BinaryTree.ITreeTableCounterSource"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.IsCounterDirty">
            <summary>
            Indicates whether the counter was set dirty.
            </summary>
            <returns>True if dirty; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.GetCounterTotal">
            <summary>
            Returns the total of this node's counter and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.InvalidateCounter">
            <summary>
            Reset cached counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.InvalidateCounterBottomUp(System.Boolean)">
            <summary>
            Invalidates the counter bottom up.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty in this node and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.TreeTableWithCounter">
            <summary>
            Returns the tree this leaf belongs to.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry.Parent">
            <summary>
            Gets / sets the parent branch.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounter">
            <summary>
            A balanced tree with <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry"/> entries.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummary">
            <summary>
            A balanced tree with <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry"/> entries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummary"/>.
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.InvalidateSummariesTopDown(System.Boolean)">
            <summary>
            Marks all summaries dirty.
            </summary>
            <param name="notifySummariesSource">if set to <c>true</c> notify summaries source.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource)">
            <summary>
            Returns an array of summary objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.Insert(System.Int32,Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry"/> object at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.Remove(Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.Contains(Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry)">
            <summary>
            Indicates whether an object belongs to the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.IndexOf(Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry)">
            <summary>
            Returns the index of an object in the tree.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.Add(Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.CopyTo(Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.HasSummaries">
            <summary>
            Indicates whether the tree has summaries.
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummary.Item(System.Int32)">
            <summary>
            Gets / sets a TreeTableWithSummaryEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.#ctor(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounter"/>.
            </summary>
            <param name="startPos"></param>
            <param name="sorted"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.EndInit">
            <summary>
            Ends optimization of insertion of elements when tree is initialized for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty.
            </summary>
            <param name="notifyCounterSource"></param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetCounterTotal">
            <summary>
            Returns the total of all counters in this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetStartCounterPosition">
            <summary>
            Returns the starting counter for this tree.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Overloaded. Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Returns an entry at the specified counter position. A cookie defines the type of counter.
            </summary>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">Indicates if the leftmost entry should be returned if multiple tree elements have the
            same searchPosition.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetEntryAtCounterPosition(Syncfusion.Collections.BinaryTree.ITreeTableCounter,Syncfusion.Collections.BinaryTree.ITreeTableCounter,System.Int32,System.Boolean)">
            <summary>
            Gets the entry at counter position.
            </summary>
            <param name="start">The start.</param>
            <param name="searchPosition">The search position.</param>
            <param name="cookie">The cookie.</param>
            <param name="preferLeftMost">if set to <c>true</c> prefer left most.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetNextNotEmptyCounterEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry,System.Int32)">
            <summary>
            Returns the subsequent entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetPreviousNotEmptyCounterEntry(Syncfusion.Collections.BinaryTree.ITreeTableEntry,System.Int32)">
            <summary>
            Returns the previous entry in the collection for which the specific counter is not empty.
            A cookie defines the type of counter.
            </summary>
            <param name="current">The current.</param>
            <param name="cookie">The cookie.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetNextVisibleEntry(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Returns the next entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetPreviousVisibleEntry(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Returns the previous entry in the collection for which CountVisible counter is not empty.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.Insert(System.Int32,Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Inserts a <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry"/> object at the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.Remove(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Removes an object from the tree.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.Contains(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Indicates whether an entry belongs to the tree.
            </summary>
            <param name="value">The entry.</param>
            <returns>
            	<c>true</c> if tree contains the specified entry; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.IndexOf(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Returns the position of an object in the tree.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.Add(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry)">
            <summary>
            Appends an object.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.CopyTo(Syncfusion.Collections.BinaryTree.TreeTableWithCounterEntry[],System.Int32)">
            <summary>
            Copies the elements of this tree to an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.GetEnumerator">
            <summary>
            Returns a strongly typed enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounter.Item(System.Int32)">
            <summary>
            Gets / sets a TreeTableWithCounterEntry.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounter"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEnumerator.#ctor(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithCounterEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithCounter"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounterSource">
            <summary>
            An object that counts objects that are marked "Visible". It implements
            the ITreeTableCounterSource interface and creates a <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounter"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounterSource.#ctor(System.Double)">
            <summary>
            Initializes the object with visible count.
            </summary>
            <param name="visibleCount">The visible count.</param>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounterSource.InvalidateCounterBottomUp">
            <summary>
            Marks all counters dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounterSource.GetCounter">
            <summary>
            Returns the counter object with counters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableVisibleCounterSource.InvalidateCounterTopDown(System.Boolean)">
            <summary>
            Marks all counters dirty in this object and child nodes.
            </summary>
            <param name="notifyCounterSource">if set to <c>true</c> notify counter source.</param>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableSummary">
            <summary>
            Interface definition for a summary object.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummary.Combine(Syncfusion.Collections.BinaryTree.ITreeTableSummary)">
            <summary>
            Combines this summary information with another object's summary and returns a new object.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource">
            <summary>
            Provides a <see cref="M:Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource.GetEmptySummaries"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource.GetEmptySummaries">
            <summary>
            Gets an array of summary objects.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource">
            <summary>
            Interface definition for an object that has summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource.GetSummaries(Syncfusion.Collections.BinaryTree.ITreeTableEmptySummaryArraySource,System.Boolean@)">
            <summary>
            Returns an array of summary objects.
            </summary>
            <param name="emptySummaries">An array of empty summary objects.</param>
            <param name="changed">Returns True if summaries were recalculated; False if already cached.</param>
            <returns>An array of summary objects.</returns>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource.InvalidateSummariesTopDown">
            <summary>
            Marks all summaries dirty in this object and child nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource.InvalidateSummariesBottomUp">
            <summary>
            Marks all summaries dirty in this object and parent nodes.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.ITreeTableSummaryArraySource.InvalidateSummary">
            <summary>
            Marks all summaries dirty in this object only.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEnumerator">
            <summary>
            A strongly typed enumerator for the <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummary"/> collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEnumerator.#ctor(Syncfusion.Collections.BinaryTree.TreeTable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEnumerator"/>.
            </summary>
            <param name="tree"></param>
        </member>
        <member name="P:Syncfusion.Collections.BinaryTree.TreeTableWithSummaryEnumerator.Current">
            <summary>
            Returns the current <see cref="T:Syncfusion.Collections.BinaryTree.TreeTableWithSummary"/> object.
            </summary>
        </member>
        <member name="T:Syncfusion.Collections.TypedDictionaryBase">
            <summary>
            Provides the <see langword="abstract"/> base class for a strongly typed collection of key-and-value pairs.
            </summary>
            <remarks>
            This class is very similar to the <see cref="T:System.Collections.DictionaryBase"/>
            class. The main difference is that this version allows you to set the InnerHashtable.
            <see cref="T:System.Collections.DictionaryBase"/> only provides a Read-only property for the
            InnerHashtable.</remarks>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.#ctor(System.Collections.Hashtable)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> and associates it with a <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="hashtable">The inner collection that will hold entries of this collection.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.Clear">
            <summary>
              <para>Clears the contents of the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.CopyTo(System.Array,System.Int32)">
            <summary>
              <para>Copies the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> elements to a one-dimensional <see cref="T:System.Array"/> at the specified index.</para>
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the <see cref="T:System.Collections.DictionaryEntry"/> objects copied from the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in an <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.GetEnumerator">
            <summary>
              <para>Returns a <see cref="T:System.Collections.IDictionaryEnumerator"/> that can iterate through the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
            <returns>
              <para>A <see cref="T:System.Collections.IDictionaryEnumerator"/> for the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnClear">
            <summary>
              <para>Performs additional custom processes before clearing the contents of the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnGet(System.Object,System.Object)">
            <summary>
              <para>Returns the element with the specified key and value in the
            <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
            <param name="key">The key of the element to get.</param>
            <param name="currentValue">The current value of the element associated with <paramref name="key"/>.</param>
            <returns>
              <para>A <see cref="T:System.Object"/> containing the element with the specified key and
            value.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnInsert(System.Object,System.Object)">
            <summary>
              <para>Performs additional custom processes before inserting a new element into the
            <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnRemove(System.Object,System.Object)">
            <summary>
              <para> Performs additional custom processes before removing an element from the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">The value of the element to remove.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnSet(System.Object,System.Object,System.Object)">
            <summary>
              <para>Performs additional custom processes before setting a value in the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
            <param name="key">The key of the element to locate.</param>
            <param name="oldValue">The old value of the element associated with <paramref name="key"/>.</param>
            <param name="newValue">The new value of the element associated with <paramref name="key"/>.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.OnValidate(System.Object,System.Object)">
            <summary>
              <para>Performs additional custom processes when validating the element with the specified key and value.</para>
            </summary>
            <param name="key">The key of the element to validate.</param>
            <param name="value">The value of the element to validate.</param>
        </member>
        <member name="M:Syncfusion.Collections.TypedDictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds the element with the specified key and value to the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.Keys">
            <summary>
              <para>Returns the list of keys contained in the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.Values">
            <summary>
              <para>Returns the list of values contained in the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.Count">
            <summary>
              <para>Removes the number of elements contained in the
            <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.Dictionary">
            <summary>
              <para>Removes the list of elements contained in the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.InnerHashtable">
            <summary>
              <para>Gets / sets the list of elements contained in the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> instance.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.IsReadOnly">
            <summary>
              <para>Indicates whether
             the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> is Read-only.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.IsFixedSize">
            <summary>
              <para>Indicates whether the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> has a fixed size.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.IsSynchronized">
            <summary>
              <para>Indicates whether access to
            the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/> is synchronized (thread-safe).</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Collections.TypedDictionaryBase.SyncRoot">
            <summary>
              <para>Gets an object that can be used to
            synchronize access to the <see cref="T:Syncfusion.Collections.TypedDictionaryBase"/>.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorPickerButton">
            <summary>
            Implements a drop-down button control for selecting colors.
            </summary>
            <remarks>
            The ColorPickerButton class is a button-type control that pops-up an instance of the Syncfusion 
            <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> when clicked. This class derives from the Windows Forms Button class and 
            hence can be used in place of a regular button control. The ColorPickerButton's ColorUIControl component 
            can be accessed through the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.ColorUI"/> property.
            <seealso cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ShouldSerializeSelectedColor">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ResetSelectedColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ShouldSerializeCustomTabName">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ResetCustomTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.CustomTabName"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ShouldSerializeStandardTabName">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ResetStandardTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.StandardTabName"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ShouldSerializeSystemTabName">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.ResetSystemTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.SystemTabName"/> property to its default value. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.ColorPickerButton"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.DecodeGesture(System.Windows.Forms.Message@)">
            <summary>
            Process touch gestures
            </summary>
            <param name="m">Gesture messages</param>
            <returns>true/false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.OnFontChanged(System.EventArgs)">
            <summary>
            Sets the font to ColorUI control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.CreateDropdownContainer">
            <summary>
            Creates a default instance of a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.
            </summary>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.InitializeDropdownContainer">
            <summary>
            Initializes the drop-down container. Adds a <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.DropdownContainerPopup(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.DropdownContainerBeforePopup(System.Object,System.ComponentModel.CancelEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.DropdownContainerCloseUp(System.Object,Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            Called when the drop-down has been closed.		
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorPickerButton.OnClick(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnClick"/>.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ColorPickerButton.ColorSelected">
            <summary>
            The ColorSelected event occurs when a color is selected from the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.ColorUI">
            <summary>
            Returns a reference to the drop-down ColorUIControl.
            </summary>
            <value>A reference to the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.ColorUISize">
            <summary>
            Gets or sets the size of the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
            <value>A Size value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.DroppedDown">
            <summary>
            Indicates whether the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> is visible.
            </summary>
            <value>True if the drop-down is visible; False otherwise. By default, it is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedAsBackcolor">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedColor"/> is set as the button backcolor.
            </summary>
            <value>True if the SelectedColor is used; False otherwise. By default, it is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedAsText">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedColor"/> is set as the button text value.
            </summary>
            <value>True if the SelectedColor is used; false otherwise. By default, it is False.</value> 
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedColor">
            <summary>
            Gets or sets the current selected color.
            </summary>
            <value>A color value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.ColorGroups">
            <summary>
            Gets or sets the color tabpages to be displayed by the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.ColorUIGroups"/> value. The default is ColorUIGroups.All.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.SelectedColorGroup">
            <summary>
            Gets or sets the tab associated with this colorgroup as the selected tab in the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.ColorUISelectedGroup"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.CustomTabName">
            <summary>
            Gets or sets the text displayed on the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>'s custom colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.StandardTabName">
            <summary>
            Gets or sets the text displayed on the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>'s standard colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.SystemTabName">
            <summary>
            Gets or sets the text displayed on the drop-down <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>'s system colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.DropDownContainer">
            <summary>
            Returns a reference to the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> that will contain the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
            <value>A reference to the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorPickerButton.IsTouchEnabled">
            <summary>
            Gets/Sets if Dropdown opened using Touch Gesture
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorUIGroups">
            <summary>
            Specifies constants that define the color groups for the ColorPicker controls.
            </summary>
            <remarks>
            The ColorUIGroup's enumeration is used for specifying the color tab pages to be 
            displayed in the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> and the <see cref="T:Syncfusion.Windows.Forms.ColorPickerButton"/> controls.
            <p>This enumeration has a FlagsAttribute that allows a combination of its member values.</p>
            </remarks>	
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.None">
            <summary>
            None of the color groups are displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.CustomColors">
            <summary>
            Displays the custom colors group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.StandardColors">
            <summary>
            Displays the standard colors group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.SystemColors">
            <summary>
            Displays the system colors group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.All">
            <summary>
            Displays all color groups, but not displays UserColors groups.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.UserColors">
            <summary>
            Displays the user colors group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIGroups.Full">
            <summary>
            Displays all color groups.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorUISelectedGroup">
            <summary>
            Specifies constants that define the selected color group in the ColorPicker controls.
            </summary>
            <remarks>
            The ColorUISelectedGroup enumeration is used for specifying the selected color group in the 
            <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> and the <see cref="T:Syncfusion.Windows.Forms.ColorPickerButton"/> controls.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUISelectedGroup.None">
            <summary>
            No color group is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUISelectedGroup.CustomColors">
            <summary>
            The custom colors group is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUISelectedGroup.StandardColors">
            <summary>
            The standard colors group is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUISelectedGroup.SystemColors">
            <summary>
            The system colors groups is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUISelectedGroup.UserColors">
            <summary>
            The user colors groups is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorUIControl">
             <summary>
             Provides a standard interface for selecting colors.
             </summary>
             <remarks>
             The ColorUIControl implements a palette type visual interface for selecting colors at
             run-time similar to the color picker drop-down provided by the Visual Studio.NET environment.
             The ColorUIControl class offers a selection of colors divided into three color groupings arranged as
             tabs. The three color groupings are the SystemColors consisting of the colors defined
             within the <see cref="T:System.Drawing.SystemColors"/> class, the StandardColors consisting of the colors defined within
             <see cref="T:System.Drawing.Color"/> and a CustomColors providing a customizable color palette.
             The ColorUIControl control can be used either as a regular control hosted within a parent container
             or it can be used as a drop-down control in combination with the <see cref="T:Syncfusion.Windows.Forms.ColorPickerButton"/> control.
             </remarks>
             <seealso cref="T:Syncfusion.Windows.Forms.ColorPickerButton"/>
             <example>
             The following code creates a ColorUIControl, sets the color groups and adds an event handler 
             for the ColorUIControl.ColorSelected event:
             
             <coderef file="Shared\Samples\ColorPickerDemo\CS\Form1.cs" name="ColorUIControl" lang="C#"><code lang="C#">
            		private void InitializeColorUIControl()
            		{
            			// Create the ColorUIControl.
            			Syncfusion.Windows.Forms.ColorUIControl clrUIControl = new Syncfusion.Windows.Forms.ColorUIControl();
            	
            			// Set the ColorGroups to be displayed
            			clrUIControl.ColorGroups = ( Syncfusion.Windows.Forms.ColorUIGroups.CustomColors|
            				Syncfusion.Windows.Forms.ColorUIGroups.StandardColors|
            				Syncfusion.Windows.Forms.ColorUIGroups.SystemColors );
            	
            			// Set the initially selected group and color.
            			clrUIControl.SelectedColorGroup = Syncfusion.Windows.Forms.ColorUISelectedGroup.SystemColors;	
            			clrUIControl.SelectedColor = SystemColors.ControlDark;
            
            			// Provide a handler for the ColorUIControl.ColorSelected event.
            			clrUIControl.ColorSelected += new EventHandler(this.OnColorSelected);
            		}
            
            		// Handler for the ColorUIControl.ColorSelected event.
            		private void OnColorSelected(object sender, System.EventArgs e)
            		{
            			Color clrselected = (sender as ColorUIControl).SelectedColor;
            		}</code></coderef>
            		
             <coderef file="Shared\Samples\ColorPickerDemo\VB\Form1.vb" name="ColorUIControl" lang="VB"><code lang="VB">
                    Private Sub InitializeColorUIControl()
            
                        ' Create an instance of the ColorUIControl.
                        Me.clrUIControl = New Syncfusion.Windows.Forms.ColorUIControl()
            
                        ' Set the color groups to be shown.
                        Me.clrUIControl.ColorGroups = Syncfusion.Windows.Forms.ColorUIGroups.CustomColors Or Syncfusion.Windows.Forms.ColorUIGroups.StandardColors
            
                        ' Set the initially selected group.
                        Me.clrUIControl.SelectedColorGroup = Syncfusion.Windows.Forms.ColorUISelectedGroup.CustomColors
            
                        ' Subscribe to the ColorUIControl.ColorSelected event.
                        AddHandler Me.clrUIControl.ColorSelected, New System.EventHandler(AddressOf clrUIControl_ColorSelected)
            
                    End Sub
            
                    ' Handler for the ColorUIControl.ColorSelected event.
                    Private Sub clrUIControl_ColorSelected(ByVal sender As Object, ByVal e As System.EventArgs)
            
                        Dim clrselected As Color = Me.clrUIControl.SelectedColor
            
                    End Sub 'clrUIControl_ColorSelected</code></coderef>
             
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.ColorUIControl.m_sUserTabText" -->
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_userTabPage">
            <summary>
            User tab page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_userColorPalette">
            <summary>
            User colors palette.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_userCustomColors">
            <summary>
            User custom colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_userCustomColorsCollection">
            <summary>
            User custom colors collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_userColorsCollection">
            <summary>
            User colors collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_bCustomColorsStretchOnResize">
            <summary>
            Enable stretch custom colors panel on resize.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_bUserColorsStretchOnResize">
            <summary>
            Enable stretch user colors panel on resize.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.style">
            <summary>
            Specifies an advanced appearance this control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.metroColorTbl">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_metroColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.metroForeColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.m_showUserSelectionColors">
            <summary>
            Specifies a value to show / hide the user selection color swatches.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.TabControlItemSize">
            <summary>
            Specifies TabControl item height
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.skinstyle">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetSelectedColorGroup">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorUIControl.SelectedColorGroup"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetCustomTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorUIControl.CustomTabName"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetStandardTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorUIControl.StandardTabName"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetSystemTabName">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorUIControl.SystemTabName"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetSelectedColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ColorUIControl.SelectedColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ShouldSerializeEnableTouchMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.GetBestColor(System.Drawing.Color)">
            <summary>
                 Takes the given color and looks for an instance in the ColorValues table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.GetConstants(System.Type)">
            <summary>
                 Retrieves an array of color constants for the given object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.OnFontChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnFontChanged"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.OnGotFocus(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnGotFocus"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.OnColorSelected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ColorUIControl.ColorSelected"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <summary>
            Paints a representative value of the given object to the provided canvas. 		
            </summary>
            <param name="e">The <see cref="T:System.Drawing.Design.PaintValueEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.PaintValue(System.Object,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints a representative value of the given object to the provided canvas. 		
            </summary>
            <param name="value">The value to paint.</param>
            <param name="canvas">Gets the System.Drawing.Graphics object with which painting should be done.</param>
            <param name="rectangle">Gets the rectangle that indicates the area in which the painting should be done.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessDialogKey"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.Start(System.Drawing.Color)">
            <summary>
            Displays the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/> control as a drop-down component. 
            </summary>
            <param name="clrselected"> The initially selected color. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.End">
            <summary>
            Ends the color display drop-down.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.MetroForeColor">
            <summary>
            Gets or sets the theme forecolor of the ColorUI
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.MetroColor">
            <summary>
            Gets or sets the theme color of the ColorUI
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ShowUserSelectionColors">
            <summary>
            Gets or sets a value to show / hide the user selection color swatches.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ScrollMetroColorTable">
            <summary>
            Gets or sets custom color to scroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.CustomColorsStretchOnResize">
            <summary>
            Gets or sets enable stretch custom colors panel on resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.VisualStyle">
            <summary>
            Gets or sets an advanced appearance for the ColorUI.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.UserColorsStretchOnResize">
            <summary>
            Gets or sets enable stretch user colors panel on resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.UserCustomColors">
            <summary>
            Gets user custom colors.
            ColorGroups must be UserColors for use this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.UserColors">
            <summary>
            Gets user colors.
            ColorGroups must be UserColors for use this property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.UserTabName">
            <summary>
            Gets or sets the text displayed on the user colors tab.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ColorUIControl.ColorSelected">
            <summary>
            The ColorSelected event occurs when a color is selected from one of the palettes in the <see cref="T:Syncfusion.Windows.Forms.ColorUIControl"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ColorGroups">
            <summary>
            Gets or sets the color tabpages to be displayed by the control.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.ColorUIGroups"/> value. The default is ColorUIGroups.All.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.SelectedColorGroup">
            <summary>
            Makes the tab associated with this color group the selected tab.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.ColorUISelectedGroup"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.CustomTabName">
            <summary>
            Gets or sets the text displayed on the custom colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.StandardTabName">
            <summary>
            Gets or sets the text displayed on the standard colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.SystemTabName">
            <summary>
            Gets or sets the text displayed on the system colors tab.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.SelectedColor">
            <summary>
            Gets or sets the current selected color.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.BorderStyle"/> value. The default is BorderStyle.Fixed3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.CreateParams">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.CreateParams"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ColorValues">
            <summary>
                 Returns an array of standard colors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.CustomColors">
            <summary>
                 Retrieves the array of custom colors for our use.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.SystemColorValues">
            <summary>
                 Returns an array of system colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.ColorCollection.m_colorArray">
            <summary>
            Color array.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.ColorCollection.m_control">
            <summary>
            Control for invalidate if color array was chenged.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.oldValue">
             <summary>
            Assigns the value for Oldvalue
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.WndProc(System.Windows.Forms.Message@)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.OnHScroll(System.Windows.Forms.ScrollEventArgs)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.LoWord(System.IntPtr)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.HiWord(System.IntPtr)">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIControl.ColorEditorTabControl.setStyle(System.Boolean)">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIControl.ColorPalette.m_bStretchOnResize">
            <summary>
            Stretch color cell on resize.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ColorPalette.StandardColors">
            <summary>
            Gets standard colors array;
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIControl.ColorPalette.StretchOnResize">
            <summary>
            Gets or sets stretch color cell on resize.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorUIStyle">
            <summary>
            ColorUI Style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIStyle.Default">
            <summary>
            Classic appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIStyle.Metro">
            <summary>
            Metro-like appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorUIDesigner">
            <summary>
            CheckBoxAdv Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorUIDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorUIDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorUIDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.ByteStreamTypeConverter">
            <summary>
            Special type converter that can convert the associated type to a byte array and vice-versa when
            requested by the design-time, for example.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.ByteStreamTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.ByteStreamTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.ByteStreamTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.ByteStreamTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionCommand">
            <summary>
            An abstract class that encapsulates a command to be executed at a later point in time.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionCommand.Execute">
            <summary>
            Execute the command this object represents.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionCommand.Description">
            <summary>
            Get a description for the command.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.MethodReflectionCommand">
            <summary>
            Still being discussed if they should be included in shared.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.MethodReflectionCommand.Execute">
            <override/>
        </member>
        <member name="P:Syncfusion.ComponentModel.MethodReflectionCommand.Description">
            <override/>
        </member>
        <member name="T:Syncfusion.ComponentModel.PropertySetReflectionCommand">
            <summary>
            Still being discussed if they should be included in shared.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.ControlEventsHelper">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventBackgroundImage">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventBindingContext">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventCausesValidation">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventChangeUICues">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventClick">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventContextMenu">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventControlAdded">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventControlRemoved">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventCursor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDock">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDoubleClick">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDragDrop">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDragEnter">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDragLeave">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventDragOver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventEnabled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventEnabledChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventEnter">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventFont">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventForeColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventGiveFeedback">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventGotFocus">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventHandleCreated">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventHandleDestroyed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventHelpRequested">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventImeModeChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventInvalidated">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventKeyDown">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventKeyPress">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventKeyUp">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventLayout">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventLeave">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventLocation">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventLostFocus">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseDown">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseEnter">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseHover">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseLeave">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseMove">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseUp">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMouseWheel">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventMove">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventPaint">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventParent">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventQueryAccessibilityHelp">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventQueryContinueDrag">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventResize">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventRightToLeft">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventSize">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventStyleChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventSystemColorsChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventTabIndex">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventTabStop">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventText">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventValidated">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventValidating">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventVisible">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.ControlEventsHelper.EventVisibleChanged">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.ControlEventsHelper.#cctor">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ICurrencyManagerSource">
            <summary>
            Provides support for the <see cref="M:Syncfusion.Windows.Forms.ICurrencyManagerSource.GetCurrencyManager"/> method that returns a <see cref="T:System.Windows.Forms.CurrencyManager"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ICurrencyManagerSource.GetCurrencyManager">
            <summary>
            Returns a <see cref="T:System.Windows.Forms.CurrencyManager"/> that is associated with the current object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerMappingNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerWidthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerPositionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrencyManagerHiddenConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ComponentModel.CustomPropertiesTypeConverter.EmptyAttributes">
            <summary>Empty attributes array for optimization.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ComponentModel.CustomPropertiesTypeConverter.#ctor">
            <summary>Hide default constructor. Allow to see it only inheritors.</summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.NonFinalizeDisposableWithDisposedProp">
            <summary>
            This is a base class for DisposableWithDisposedProp. It implements the IDisposable interface
            as suggested in the .NET documentation using the Disposable pattern but it does not
            implement a finalizer. If you need finalization you need to derive from Disposable
            or add a finalizer to your derived class and manually call Dispose from the Finalizer.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.NonFinalizeDisposableWithDisposedProp.m_bDisposed">
            <summary>
            Storage for IsDisposed property. True - object is disposed, 
            otherwise object is still alive and available for user use.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NonFinalizeDisposableWithDisposedProp.Dispose">
            <overload>
            Releases all resources used by the Component.
            </overload>
            <summary>
            Releases all resources used by the Component.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.NonFinalizeDisposableWithDisposedProp.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="P:Syncfusion.ComponentModel.NonFinalizeDisposableWithDisposedProp.IsDisposed">
            <summary>
            Allows to detect if object is disposed or not. True indicates object is disposed,
            otherwise indicates object is still alive and ready for use.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.DisposableWithDisposedProp">
            <summary>
            This class provides	a base class that implements the IDisposable interface
            as suggested in	the	.NET documentation using the Disposable	pattern.
            </summary>
            <remarks>If	you	derive from	this class,	you	only need to override the protected
            Dispose	method and check the disposing parameter.</remarks>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposableWithDisposedProp.Finalize">
            <summary>
            <see cref="M:System.Object.Finalize"/>.<para/>
            In C# and C++, finalizers are expressed	using destructor syntax.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.DisposeHelper">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Windows.Forms.ImageList@)">
            <summary></summary>
            <param name="list"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Collections.IList@)">
            <summary>Clear collection and then reset it reference to NULL.</summary>
            <param name="collection"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Collections.IDictionary@)">
            <summary></summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Windows.Forms.NativeWindow@)">
            <summary></summary>
            <param name="window"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.IDisposable@)">
            <summary></summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.ComponentModel.Component@)">
            <summary></summary>
            <param name="component"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(Syncfusion.Windows.Forms.ToolTipAdv@)">
            <summary></summary>
            <param name="tooltip"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(Syncfusion.Windows.Forms.DragHelper@)">
            <summary></summary>
            <param name="dragHelper"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Drawing.Pen@)">
            <summary></summary>
            <param name="pen"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Drawing.Brush@)">
            <summary></summary>
            <param name="brush"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Drawing.Graphics@)">
            <summary></summary>
            <param name="graphics"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Drawing.Drawing2D.GraphicsPath@)">
            <summary></summary>
            <param name="path"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(System.Drawing.StringFormat@)">
            <summary></summary>
            <param name="format"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.Dispose(Syncfusion.Collections.ArrayListExt@)">
            <summary></summary>
            <param name="collection"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.DisposeHelper.DisposeItems(System.Collections.IList@)">
            <summary>Dispose array items and then clear collection and reset it reference to NULL.</summary>
            <param name="collection"></param>
        </member>
        <member name="M:Syncfusion.ComponentModel.AmbientHelper.GetAmbientValue(System.Object,System.String,System.Type,System.Object@)">
            <summary>
            Gets the value of a property from some object
            </summary>
            <param name="instance">Object from which we want to take the value of property</param>
            <param name="nameOfProperty">Name of the property from which we want to take value</param>
            <param name="retType">Type of value? which to return</param>
            <param name="retValue">Value which we want to take</param>
        </member>
        <member name="T:Syncfusion.ComponentModel.PropertyChangeEffect">
            <summary>
            Specifies the expected effect of the change in property of an object / Control.
            </summary>
            <remarks>
            <para>Used by the <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> class.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.NeedRepaint">
            <summary>
            The Control needs a repaint due to change in property's value.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.NeedLayout">
            <summary>
            The Control needs to be laid out due to change in a property's value.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.PropertyChangeEffect.None">
            <summary>
            No effect when there is change in a property's value.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs">
            <summary>
            Provides data for the <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventHandler"/> delegate.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.#ctor(Syncfusion.ComponentModel.PropertyChangeEffect,System.String,System.Object,System.Object)">
            <summary>
            Creates an instance of the SyncfusionPropertyChangedEventArgs class.
            </summary>
            <param name="propertyChangeType">A PropertyChangeEffect value.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="oldValue">The old value cast into an object.</param>
            <param name="newValue">The new value cast into an object.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect">
            <summary>
            Gets / sets the <see cref="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect"/> of this change in property value.
            </summary>
            <value>The <see cref="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.PropertyChangeEffect"/>.</value>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.OldValue">
            <summary>
            The old value of the property before it changes.
            </summary>
            <remarks>
            The object representing the old value. This can be cast to
            the type of the property.
            </remarks>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs.NewValue">
            <summary>
            The new value of the property after it changes.
            </summary>
            <remarks>
            The object representing the new value. This can be cast to
            the type of the property.
            </remarks>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the PropertyChanged event of
            certain classes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs"/> object that 
            contains the event data.</param>
        </member>
        <member name="T:Syncfusion.ComponentModel.IChangeNotifyingItem">
            <summary>
            A class implements this interface to let it be known that it provides
            a <see cref="E:Syncfusion.ComponentModel.IChangeNotifyingItem.PropertyChanged"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Collections.ArrayListExt"/> class makes use of this interface when the items
            in its list implement it. The <see cref="T:Syncfusion.Collections.ArrayListExt"/> listens to this event and
            forwards the event args using its own <see cref="E:Syncfusion.Collections.ArrayListExt.ItemPropertyChanged"/> event.
            </remarks>
        </member>
        <member name="E:Syncfusion.ComponentModel.IChangeNotifyingItem.PropertyChanged">
            <summary>
            Occurs when one of the object's property changes.
            </summary>
            <remarks>
            This event provides a generic way of notifying changes
            in an object's property, along with the old value, new value
            and the PropertyChangeEffect.
            </remarks>
        </member>
        <member name="T:Syncfusion.ComponentModel.IDesignable">
            <summary>
            Used internally to expose the DesignMode property of certain component-derived
            classes.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.IDesignable.DesignMode">
            <summary>
            Indicates whether the component is in design-mode.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.OperationMilestone">
            <summary>
            Indicates the current state of the operation.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.OperationMilestone.Start">
            <summary>
            The operation is starting.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.OperationMilestone.Progress">
            <summary>
            The operation is in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.OperationMilestone.Finished">
            <summary>
            The operation is finished.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.OperationFeedbackListener">
            <summary>
            This class listens to a list of <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> and fires a <see cref="E:Syncfusion.ComponentModel.OperationFeedbackListener.Progress"/> event
            if the operation takes longer than a specified <see cref="P:Syncfusion.ComponentModel.OperationFeedbackListener.Delay"/>.
            </summary>
            <remarks>
            Derive from this class if you want to add support for displaying status messages in your
            status bar.
            <note type="note"><see cref="T:Syncfusion.ComponentModel.OperationFeedbackListener"/> operates on the same thread
            where the long operation takes place. See the <see cref="T:Syncfusion.Windows.Forms.DelayedStatusDialog"/> class how to
            give feedback about the operation on a different thread and allow the user to cancel the
            operation by pressing the Cancel button in a dialog.</note>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.DelayedStatusDialog"/> <seealso cref="T:Syncfusion.Windows.Forms.DelayedWaitCursor"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedbackListener.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedbackListener.AddProvider(Syncfusion.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Adds an <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> that this object will listen to and
            provide user feedback for.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> interface.</param>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedbackListener.RemoveProvider(Syncfusion.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Removes an <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> from the list of feedback providers.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> interface.</param>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedbackListener.OnProgress(Syncfusion.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.ComponentModel.OperationFeedbackListener.Progress"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.ComponentModel.OperationFeedbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.ComponentModel.OperationFeedbackListener.Progress">
            <summary>
            Occurs to indicate the progress of an ongoing operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackListener.Delay">
            <summary>
            Gets / sets the delay in milliseconds before Progress events about an operation should be raised.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.OperationFeedbackEventArgs">
            <summary>
            Holds status information about an ongoing operation.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedbackEventArgs.#ctor(Syncfusion.ComponentModel.OperationMilestone,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes the event args.
            </summary>
            <param name="milestone">The current status of the operation.</param>
            <param name="name">The name of the operation.</param>
            <param name="description">A textual description for the operation.</param>
            <param name="percent">The percentage of work the operation completed so far or -1 if the operation
            is not able to calculate a meaningful percentage value.</param>
            <param name="ticks"> The number of milliseconds that passed since the operation started.</param>
            <param name="allowCancel">Indicates whether the operation can be canceled by the user.</param>
            <param name="allowRollback">Indicates whether changes made by the operation can be rolled back if the
            operation is canceled by the user.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Percent">
            <summary>
            Returns the percentage of work the operation completed so far; -1 if the operation
            is not able to calculate a meaningful percentage value.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Name">
            <summary>
            Returns the name of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Description">
            <summary>
            Returns the textual description for the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.AllowCancel">
            <summary>
            Indicates whether the operation can be canceled by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.AllowRollback">
            <summary>
            Indicates whether changes made by the operation can be rolled back if the
            operation is canceled by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Rollback">
            <summary>
            Indicates whether the operation should roll back.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Milestone">
            <summary>
            Returns the current status of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedbackEventArgs.Ticks">
            <summary>
            Returns the number of milliseconds that passed since the operation started.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.OperationFeedbackEventHandler">
            <summary>
            Represents the method that will handle the OperationFeedbackEvent event of certain classes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An OperationFeedbackEventArgs object that
            contains the event data.</param>
        </member>
        <member name="T:Syncfusion.ComponentModel.IOperationFeedbackProvider">
            <summary>
            The class that implements the component where operations are operated on should
            implement this interface.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.IOperationFeedbackProvider.RaiseOperationFeedbackEvent(Syncfusion.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Raises an RaiseOperationFeedbackEvent.
            </summary>
            <param name="e">An OperationFeedbackEventArgs object that
            contains the event data.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.IOperationFeedbackProvider.FeedbackStack">
            <summary>
            Returns the stack for nested operations.
            </summary>
        </member>
        <member name="E:Syncfusion.ComponentModel.IOperationFeedbackProvider.OperationFeedback">
            <summary>
            Occurs to indicate the progress of an ongoing operation.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.OperationFeedback">
             <summary>
             Use this class when you want to provide feedback during time-consuming operations or
             if you want the user to be able to abort an operation.
             </summary>
             <remarks>
             You need to implement IOperationFeedbackProvider in your class.
             <code>
             // interface IOperationFeedbackProvider
             public event OperationFeedbackEventHandler OperationFeedback;
             Stack feedbackStack = new Stack();
             void IOperationFeedbackProvider.RaiseOperationFeedbackEvent(OperationFeedbackEventArgs e)
             {
                 if (OperationFeedback != null)
                         OperationFeedback(this, e);
             }
             Stack IOperationFeedbackProvider.FeedbackStack
             {
                 get { return feedbackStack; }
             }
             </code>
            
             When you implement an operation that you want to be cancellable or where
             you want to show feedback (e.g. display percentage in status bar) you
             do this by creating an OperationFeedback object inside a using statement.<para/>
            
             Example:
             <code>
             using (OperationFeedback op = new OperationFeedback(this))
             {
                 op.Name = "Cell";
                 op.Description = "Command Description";
                 op.AllowCancel = true;
                 op.AllowNestedProgress = true;
                 op.AllowNestedFeedback = false;
                 while (n++ != 100)
                 {
                     if (op.ShouldCancel())
                         return;
            
                     op.PercentComplete = n;
                 }
             }
                 </code>
                 It is also supported in nest operations in case your method calls other
                 routines that also use OperationFeedback. AllowNestedProgress will disable
                 OperationFeedback and OperationProgress / ShouldCancel in nested routines.
                 AllowNestedFeedback will simply prohibit changing the description. But
                 the object will still fire OperationProgress events.<para/>
            
                 A sample for a consumer is the DelayedWaitCursor class. You can assign a DelayedWaitCursor
                 to a grid table. The DelayedWaitCursor object will listen to OperationFeedback events and
                 automatically change the cursor to a wait cursor if operations take more time.
                 </remarks>
            
             <seealso cref="T:Syncfusion.Windows.Forms.DelayedWaitCursor"/>
             <seealso cref="T:Syncfusion.Windows.Forms.DelayedStatusDialog"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedback.#ctor(Syncfusion.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Initializes a new OperationFeedback object and pushes the object
            onto the providers feedback stack.
            </summary>
            <param name="feedback">Component that implements IOperationFeedbackProvider.</param>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedback.System#IDisposable#Dispose">
            <summary>
            Closes the current operation. Removes the object from FeedbackStack.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedback.Start">
            <summary>
            Call this method to signal the start of the operation. If you do not explicitly
            call this routine, it will be called automatically the first time Progress or ShouldCancel
            is called.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedback.Close">
            <summary>
            Call this method to signal the end of the operation. If you do not explicitly
            call this routine it will be called automatically when you are using the "using"
            statement in C# and / or when Dispose is called.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.OperationFeedback.Progress">
            <summary>
            Call this method inside a loop from your method that implements the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.SeriesCount">
            <summary>
            Gets / sets the number of series if you have a series of nested operations.
            </summary>
            <remarks>
            If you know the number of operations in advance, you should specify this value.
            This allows OperationFeedback to adjust the percentage display to reflect the percentage
            in the overall operation. If you have two operations, the first operation will show percentage
            from 0 to 50 and the second from 51 to 100. In the original program code for these operations, you
            can keep your original calculations (setting percentage from 0 to 100).
            OperationFeedback simply divides the percentage by SeriesCount when it fires the Progress event.
            </remarks>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.IsNested">
            <summary>
            Indicate whether this operation is nested inside another operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.AllowNestedProgress">
            <summary>
            Indicates whether nested operations are enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.ShouldCallProgress">
            <summary>
            Indicates whether calls to Progress or ShouldCancel have any effect.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.ShouldShowFeedback">
            <summary>
            Indicates whether the percent complete and description should be shown or discarded
            for this operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.AllowNestedFeedback">
            <summary>
            Indicates whether percentage display and description for nested operations are enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.ShouldCancel">
            <summary>
            Indicates whether the user wants to abort the operation. ShouldCancel will call
            Progress.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.AllowCancel">
            <summary>
            Indicates whether cancelling the current operation is enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.AllowRollback">
            <summary>
            Indicates whether rolling back (undoing) the current operation is enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.Rollback">
            <summary>
            Indicates whether the canceled operation should be rolled back.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.RollbackConfirmed">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.Name">
            <summary>
            Gets / sets the short name of the operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.Ticks">
            <summary>
            Returns the number of ticks elapsed since the operation was started.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.Description">
            <summary>
            Gets / sets the description of the operation. Use localized string (SR.GetString("...")) if necessary.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.PercentComplete">
            <summary>
            Gets / sets the progress in percentage for the current operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.OperationFeedback.Counter">
            <summary>
            Returns the number of counts of calls to Progress.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.TracePropertyAttribute">
            <summary>
            Specifies whether a property should be shown in the ToString result.
            </summary>
            <seealso cref="T:Syncfusion.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be shown in the ToString result. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should not be shown in the ToString result. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.ComponentModel.TracePropertyAttribute.Default">
            <summary>
            The default value for TracePropertyAttribute. (No)
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/> class.</para>
            </summary>
            <param name="traceProperty">
              <see langword="True"/> if a property should be shown in ToString result; <see langword="False"/> otherwise. The default is <see langword="True"/>.</param>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.GetHashCode">
            <summary>
            Overridden. See <see cref="M:System.Attribute.GetHashCode"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.TracePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.ComponentModel.TracePropertyAttribute.TraceProperty">
            <summary>
              <para>Indicates whether a property is shown in the ToString result.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.TraceProperties">
            <summary>
            Helper class for creating a string concatenating the string representation of all properties in an object.
            </summary>
            <remarks>
            The static <see cref="M:Syncfusion.ComponentModel.TraceProperties.ToString(System.Object)"/> method of this helper class will loop through any property
            in a given object and check if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/> has been set. If it has
            been set, the string representation of the property will be appended to the resulting string.
            </remarks>
        </member>
        <member name="M:Syncfusion.ComponentModel.TraceProperties.IsTraceProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.ComponentModel.TraceProperties.ToString(System.Object)">
            <summary>
            This method will loop through any property in a given object and append the
            string representation of the property if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>
            has been set.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionEventArgs">
            <summary>
            This is a base class for events of the Syncfusion libraries. It supports writing
            properties in its ToString() method. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionEventArgs.ToString">
            <summary>
            This method will loop through all properties in a derived class and append the
            string representation of the property if the <see cref="T:Syncfusion.ComponentModel.TracePropertyAttribute"/>
            has been set.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs">
            <summary>
            Provides data for an event that indicates success or failure. 
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionSuccessEventArgs class with the Success property set to True.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionSuccessEventArgs class with the Success property set to the given value.
            </summary>
            <param name="success"> Indicates whether an operation was successful.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionSuccessEventArgs.Success">
            <summary>
            Indicates whether an operation was successful.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.SyncfusionHandledEventArgs">
            <summary>
            Provides data for a event that can be handled by a subscriber and overrides the event's default behavior.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to False.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled property set to the given value.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled">
            <summary>
            Indicates whether the event has been handled and no further processing of the event should happen.
            </summary>
        </member>
        <member name="T:Syncfusion.ComponentModel.TypeDescriptorContext">
            <summary>
            Provides a basic implementation for the ITypeDescriptorContext interface and can be used
            together with WindowsFormsEditorService to launch an Editor directly outside a property grid.
            </summary>
            <example>
            The grid uses this class to display a collection editor:
            <code lang="C#">
            public static DialogResult ShowGridBaseStylesMapDialog(object instance, string propertyName)
            {
                GridBaseStyleCollectionEditor ce = new GridBaseStyleCollectionEditor(typeof(ArrayList));
            WindowsFormsEditorServiceContainer esc = new WindowsFormsEditorServiceContainer(null);
                PropertyDescriptor pd = TypeDescriptor.GetProperties(instance)[propertyName];
                TypeDescriptorContext tdc = new TypeDescriptorContext(instance, pd);
                tdc.ServiceProvider = esc;
                object v = ce.EditValue(tdc, esc, ((ICloneable) pd.GetValue(instance)).Clone());
                if (esc.DialogResult == DialogResult.OK)
                {
                    pd.SetValue(instance, v);
                }
                return esc.DialogResult;
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.TypeDescriptorContext.#ctor(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a TypeDescriptorContext for the given object and PropertyDescriptor.
            </summary>
            <param name="instance">The instance of the property to be edited.</param>
            <param name="propertyDescriptor">A PropertyDescriptor that contains information about the property.</param>
        </member>
        <member name="P:Syncfusion.ComponentModel.TypeDescriptorContext.ServiceProvider">
            <summary>
            Gets / sets the associated IServiceProvider.
            </summary>
            <value>An IServiceProvider value.</value>
        </member>
        <member name="T:Syncfusion.ComponentModel.IItemPropertiesSource">
            <summary>
            Provides support for the <see cref="M:Syncfusion.ComponentModel.IItemPropertiesSource.GetItemProperties"/> method that returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.ComponentModel.IItemPropertiesSource.GetItemProperties">
            <summary>
            Returns a collection of property descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer">
            <summary>
            Provides a basic implementation for the IWindowsFormsEditorService and IServiceProvider interfaces and can be used
            together with TypeDescriptorContext to launch an Editor directly outside a property grid.
            </summary>
            <example>
            The grid uses this class to display a collection editor.
            <code lang="C#">
            public static DialogResult ShowGridBaseStylesMapDialog(object instance, string propertyName)
            {
                GridBaseStyleCollectionEditor ce = new GridBaseStyleCollectionEditor(typeof(ArrayList));
            WindowsFormsEditorServiceContainer esc = new WindowsFormsEditorServiceContainer(null);
                PropertyDescriptor pd = TypeDescriptor.GetProperties(instance)[propertyName];
                TypeDescriptorContext tdc = new TypeDescriptorContext(instance, pd);
                tdc.ServiceProvider = esc;
                object v = ce.EditValue(tdc, esc, ((ICloneable) pd.GetValue(instance)).Clone());
                if (esc.DialogResult == DialogResult.OK)
                {
                    pd.SetValue(instance, v);
                }
                return esc.DialogResult;
            }
            </code>
            </example>
            <seealso cref="T:Syncfusion.ComponentModel.TypeDescriptorContext"/>
        </member>
        <member name="M:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a WindowsFormsEditorServiceContainer with the given IServiceProvider.
            </summary>
            <param name="serviceProvider">An IServiceProvider. Can be NULL.</param>
        </member>
        <member name="E:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer.ShowingDialog">
            <summary>
            Occurs immediately before the Dialog is displayed. The ControlEventArgs.Control 
            the form.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer.DialogResult">
            <summary>
            Returns the dialog result of the edit operation.
            </summary>
        </member>
        <member name="P:Syncfusion.ComponentModel.WindowsFormsEditorServiceContainer.ServiceProvider">
            <summary>
            Gets / sets the associated IServiceProvider.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.TextBox"/> class to handle currency input
            and validation.
            </summary>
            <remarks>
            The CurrencyTextBox is derived from the textbox and provides all the functionality
            of a text box and adds additional functionality of its own.
            <para>
            Collecting currency input in a consistent format requires a lot of validation code
            that needs to be built into the application when using the Windows Forms textbox control.
            The CurrencyTextBox includes all this logic into its methods and properties
            and makes it easy for the developer and the end user to collect and enter currency data.
            </para>
            <para>
            The CurrencyTextBox is also closely tied to the globalization settings of the
            operating system for Currency related properties. Please refer to the <see cref="T:System.Globalization.NumberFormatInfo"/>
            class for a detailed explanation of globalization and Currency related attributes.
            </para>
            <para>
            The CurrencyTextBox has full support for the Windows Forms designer and you can
            just drag-and-drop and set properties on the control just as you would with the
            Windows Forms textbox.
            </para>
            <para>
            The CurrencyTextBox also raises a <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError"/> event when
            inappropriate data is entered into the control.
            </para>
            <para>
            All clipboard functions such as copy, paste and cut are also supported with
            special accommodations for currency related issues.
            </para>
            </remarks>
            <example>
            <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\CS\MainForm.cs" name="Currency InitializeComponent" lang="CS">
            <code lang="C#">
            
               // Create the Calculator Control.
               this.currencyTextBox1 = new CurrencyTextBox();
            
               // Set the initial value.
               this.currencyTextBox1.Text = "$1.00";
            
               // Set the clipmode.
               this.currencyTextBox1.ClipMode = CurrencyClipModes.IncludeFormatting;
            
               // Set formatting properties.
               this.currencyTextBox1.CurrencyDecimalDigits = 2;
               this.currencyTextBox1.CurrencyDecimalSeparator = ".";
               this.currencyTextBox1.CurrencyGroupSeparator = ",";
               this.currencyTextBox1.CurrencyGroupSizes = new int[] {3};
               this.currencyTextBox1.CurrencyNegativePattern = 1;
               this.currencyTextBox1.CurrencyNumberDigits = 27;
               this.currencyTextBox1.CurrencyPositivePattern = 0;
               this.currencyTextBox1.CurrencySymbol = "$";
               this.currencyTextBox1.ForeColor = System.Drawing.Color.Black;
               this.currencyTextBox1.NegativeColor = System.Drawing.Color.Red;
               this.currencyTextBox1.NegativeSign = "-";
               this.currencyTextBox1.PositiveColor = System.Drawing.Color.Black;
            
               this.currencyTextBox1.Size = new System.Drawing.Size(256, 20);
               this.currencyTextBox1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
            
               // Add the CurrencyTextBox control to the form.
               this.Controls.Add(this.currencyTextBox1);
               </code>
               </coderef>
               
               <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\VB\MainForm.vb" name="Currency InitializeComponent" lang="VB"><code lang="VB">
               ' Create the CurrencyTextBox
               Me.currencyTextBox1 = New CurrencyTextBox
               ' Set the initial value
               Me.currencyTextBox1.Text = "$1.00"
               ' Set the clipmode
               Me.currencyTextBox1.ClipMode = CurrencyClipModes.IncludeFormatting
               ' Set formatting properties
               Me.currencyTextBox1.CurrencyDecimalDigits = 2
               Me.currencyTextBox1.CurrencyDecimalSeparator = "."
               Me.currencyTextBox1.CurrencyGroupSeparator = ","
               Me.currencyTextBox1.CurrencyGroupSizes = New Integer() {3}
               Me.currencyTextBox1.CurrencyNegativePattern = 1
               Me.currencyTextBox1.CurrencyNumberDigits = 27
               Me.currencyTextBox1.CurrencyPositivePattern = 0
               Me.currencyTextBox1.CurrencySymbol = "$"
               Me.currencyTextBox1.ForeColor = System.Drawing.Color.Black
               Me.currencyTextBox1.NegativeColor = System.Drawing.Color.Red
               Me.currencyTextBox1.NegativeSign = "-"
               Me.currencyTextBox1.PositiveColor = System.Drawing.Color.Black
               Me.currencyTextBox1.Size = New System.Drawing.Size(256, 20)
               Me.currencyTextBox1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right
               ' Add the CurrencyTextBox control to the form
               Me.Controls.Add(Me.currencyTextBox1)</code></coderef>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.TextBox"/> class to handle numeric input
            and validation. 
            </summary>
            <remarks>
            The NumberTextBoxBase class is not to be used directly. Defines the base class for 
            controls that provide specific formatting and validation for different data types.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextBoxExt">
            <summary>
            An extended textbox that provides advanced border styles.
            </summary>
            <remarks>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Border3DStyle"/> property provides you advanced 3D border options. The
            <see cref="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.BorderColor"/> property lets you specify custom single border colors.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_ioverflowIndicatorBorderIndent">
            <summary>
            Overflow indicator border indent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.WM_TOUCH">
            <summary>
            Default windows message for gesture support.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.WM_MOUSEACTIVATE">
            <summary>
            Default windows message for Mouse captured.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_sOverflowIndicator">
            <summary>
            Overflow indicator size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_overflowIndicatorElementSize">
            <summary>
            Overflow indicator element size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_overflowIndicatorBorderColor">
            <summary>
            Overflow indicator border color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_overflowIndicatorForegroundElementColor">
            <summary>
            Overflow indicator foreground element color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.c_overflowIndicatorToolTipOffset">
            <summary>
            Overflow indicator ToolTip offset.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.isScaling">
            <summary>
            To check whether the scaling of the TextBoxExt;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.FONTSTYLE">
            <summary>
            Default font style of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.USERFONTSTYLE">
            <summary>
            Font which stored after changed in design
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_strOVerflowToolTipText">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.themedEditDrawing">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.borderSides">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.border3DStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.borderColor">
            <summary></summary>
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.cd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.themesEnabled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.drawActiveWhenDisabled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_subClass">
            <summary>
            Parent sub class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_bShowOverflowIndicator">
            <summary>
            overflow indicator visibility.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_bOverflowIndicatorLastState">
            <summary>
            Last overflow indicator state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_overflowIndicatorToolTip">
            <summary>
            Overflow indicator ToolTip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_leftIndicatorLastPaintedRect">
            <summary>
            Left last painted overflow indicator rectcangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_rightIndicatorLastPaintedRect">
            <summary>
            Right last painted overflow indicator rectcangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_rcClient">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.checkTouch">
            <summary>
            Collects the boolean value if Control is selected by Touch or Mouse control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.m_bShowOverflowIndicatorToolTip">
            <summary>
            Show overflow indicator ToolTip.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShouldSerializeEnableTouchMode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ResetEnableTouchMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.metrocolor">
            <summary>
            MetroColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShouldSerializeFocusBorderColor">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ResetFocusBorderColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShouldSerializeUseBorderColorOnFocus">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ResetUseBorderColorOnFocus">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.TextBoxExt_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Event will be triggered when the TextBoxExt lost its Focus.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.#ctor">
            <summary>
            Creates a new instance of the TextBoxExt class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShowTouchKeyboard(System.Collections.Generic.List{System.Boolean})">
            <summary>
            To Show/Display the virtual keyboard
            </summary>
            <param name="v_touch"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.HideTouchKeyboard">
            <summary>
            To hide the touch keyboad.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.Init">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.Uninit">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.Dispose(System.Boolean)">
            <summary>Dispose all created internal object</summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShouldSerializeBorderColor">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.ResetBorderColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnMaximumSizeChanged(System.EventArgs)">
            <summary>
            Raises the MaximumSizeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnMaximumSizeChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnMaximumSizeChanged 
            in a derived class, be sure to call the base class's 
            OnMaximumSizeChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event will be triggered while clicking on the TextBoxExt.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
            Sends the specified message to the default windows procedure.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnFontChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnMinimumSizeChanged(System.EventArgs)">
            <summary>
            Raises the MinimumSizeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnMinimumSizeChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnMinimumSizeChanged 
            in a derived class, be sure to call the base class's 
            OnMinimumSizeChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnCharacterCasingChanged(System.EventArgs)">
            <summary>
            Raises the CharacterCasingChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnCharacterCasingChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnCharacterCasingChanged 
            in a derived class, be sure to call the base class's 
            OnCharacterCasingChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnBorderSidesChanged(System.EventArgs)">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnBorderColorChanged(System.EventArgs)">
            <summary>
            Raises the BorderColorChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderColorChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnBorderColorChanged 
            in a derived class, be sure to call the base class's 
            OnBorderColorChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnThemesEnabledChanged(System.EventArgs)">
            <summary>
            Raises the ThemesEnabledChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnThemesEnabledChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemesEnabledChanged 
            in a derived class, be sure to call the base class's 
            OnThemesEnabledChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnParentChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnEnabledChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnHandleCreated(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnHandleDestroyed(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnMultilineChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnTextChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.WndProc(System.Windows.Forms.Message@)">
            <override/>
            <summary></summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.NCOverflowIndicatorPaint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Overflow indicators drawing.
            </summary>
            <param name="g"></param>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.TextBoxBase.BorderStyleChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.UpdatePaintingStyle">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.My_BackColorChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.InvalidateWindow">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.UpdateOverflowIndicatorToolTipVisible(System.Drawing.Point,System.Boolean)">
            <summary></summary>
            <param name="pt"></param>
            <param name="hitTest"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.TrackMouseEvent(System.Boolean)">
            <summary></summary>
            <param name="useLeaveFlags"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.GetTextSize(System.String)">
            <summary>
            Return GDI text size.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.UpdateNCArea">
            <summary>
             Send WM_NCCALCSIZE message.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.UpdateOverflowIndicator">
            <summary>
            Send WM_NCCALCSIZE message and invalidate NC area.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.GetOverflowIndicatorState">
            <summary>
            Return overflow indicator state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnWmNcCalcSize(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.OnWmNcPaint(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExt.skinstyle">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.DrawOverflowIndicator(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draw one overflow indicator.
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="mirrored"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.DrawOverflowIndicatorForegroundElement(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draw overflow indicator foregraund element.
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="mirrored"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExt.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.CreateParams">
            <override/>
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Metrocolor">
            <summary>
            Gets or sets the metrocolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.FocusBorderColor">
            <summary>
            Gets or sets the FocusBorderColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.UseBorderColorOnFocus">
            <summary>
            Enables the FocusBorderColor property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShowOverflowIndicatorToolTip">
            <summary>
            Gets or sets can show overflow indicator ToolTip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.OverflowIndicatorToolTipText">
            <summary>
            Gets or sets overflow indicator ToolTip text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.ShowOverflowIndicator">
            <summary>
            Gets or sets overflow indicator visibility.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.DrawActiveWhenDisabled">
            <summary>
            Indicates whether the text should be drawn active even when the control is disabled.
            </summary>
            <value>False for default textbox behavior; True to draw the text enabled even when the control is
            disabled.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.BorderSides">
            <summary>
            Gets or sets the border sides for which you want the 3D border style applied.
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Border3DStyle">
            <summary>
            Gets or sets the 3D border style for the control.
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.BorderColor">
            <summary>
            Gets or sets the single border color for the control.
            </summary>
            <remarks>
            This property is used only when BorderStyle is FixedSingle.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.OverFlowIndicatorLastState">
            <summary>
            Last overflow indicator state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.OverflowIndicatorToolTip">
            <summary>
            Overflow indicator ToolTip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.ThemesEnabled">
            <summary>
            Indicates whether XPThemes should be used when BorderStyle is set to Fixed3D.
            </summary>
            <value>True to use XPThemes; False otherwise. Default is True.</value>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.MaximumSize">
            <summary>
            Gets or sets the maximum size for the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.MinimumSize">
            <summary>
            Gets or sets the minimum size for the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.CharacterCasing">
            <summary>
            Gets or sets the case of characters as they are typed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.CornerRadius">
            <summary>
            Gets or sets corner radius of control.
            </summary>
            <remarks>Radius has to be not less than zero or half of minimum dimension (width or height) of control.
            If radius is zero, control has standard rectangular appearance.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.NearImage">
            <summary>
            Gets or sets the near image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.FarImage">
            <summary>
            Gets or sets the far image.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.BorderSidesChanged">
            <summary>
            This event is raised if the BorderSides property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.Border3DStyleChanged">
            <summary>
            This event is raised if the Border3DStyle property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.BorderColorChanged">
            <summary>
            This event is raised when the value of the BorderColor property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.ThemesEnabledChanged">
            <summary>
            This event is raised if the ThemesEnabled property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.MaximumSizeChanged">
            <summary>
            This event is raised if the MaximumSize property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.MinimumSizeChanged">
            <summary>
            This event is raised if the MinimumSize property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextBoxExt.CharacterCasingChanged">
            <summary>
            This event is raised if the CharacterCasing property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Office2010ColorScheme">
            <summary>
            Office2010 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Office2010ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Office2007ColorScheme">
            <summary>
            Office2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExt.Initializing">
            <summary>
            Gets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExt"/> is initializing.
            </summary>
            <value><c>true</c> if initializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.numberFormatInfoObject">
            <summary>
            The NumberFormatInfo object that will specify the
            localized attributes for displaying the currency
            value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.negativeColor">
            <summary>
            Forecolor to be used when the value is negative.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.overWriteText">
            <summary>
            Gets or sets a value indicating whether to overrite the immediate text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.m_MinMaxValidation">
            <summary>
            Specifies when the MinMax Validation Need to be performed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.m_OnValidationFailed">
            <summary>
            Specifies the Action To be Performed when Validation Fails
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.positiveColor">
            <summary>
            Forecolor to be used when the value is positive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.zeroColor">
            <summary>
            Forecolor to be used when the value is zero.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.isNegative">
            <summary>
            Indicates whether the current value is negative.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.clipMode">
            <summary>		
            The clip mode specifies the kind of data to be returned
            when copied to the clip board. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.editMenu">
            <summary>
            The context menu for the text box.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miUndo">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miCut">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miCopy">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miPaste">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miDelete">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.miSelectAll">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.undoBufferText">
            <summary>
            String for holding undo buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.redoBufferText">
            <summary>
            String for holding redo buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ignoreTextChange">
            <summary>
            Internal variable to suppress TextChanged event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.selectedCulture">
            <summary>
            The currently selected culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.specialCultureValue">
            <summary>
            Indicates whether the special culture values need to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.rightToLeftCultures">
            <summary>
            Array of cultures that require RightToLeft by default.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.useUserOverride">
            <summary>
            The UseUserOverride value to be passed in when creating CultureInfo objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.nullString">
            <summary>
            The NULL string value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.nullState">
            <summary>
            Indicates whether the control is in NULL state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.nullFormat">
            <summary>
            The IFormatProvider for formatting NULL entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.returnBaseText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.useNullString">
            <summary>
            Indicates whether the NULL String should be used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.rollBackOperation">
            <summary>
            Indicates whether an operation is to be rolled back because of an error.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.initCulture">
            <summary>
            Support for culture initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.initNumberFormatInfoObject">
            <summary>
            Support for NumberFormatInfo initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.supressKeyPress">
            <summary>
            Indicates whether to allow the KeyPress event to be raised but no other action to be taken
            by the base class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.supressKeyDown">
            <summary>
            Indicates whether to allow the KeyDown event to be raised but no other action to be taken
            by the base class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.preserveData">
            <summary>
            Indicates whether the current value can be held in numeric form or has
            been 'dirtied' by user input.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.zeroNegative">
            <summary>
            Used when the NegativeSign is keyed in when the value is zero.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.currentCultureRefresh">
            <summary>
            Indicates whether the control is to listen to the <see cref="E:Syncfusion.Windows.Forms.ThreadCulture.CultureChanged"/>
            event and refresh the culture. (Only if the SpecialCultureValue is set to CurrentCulture.)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.defaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.negativeInputPending">
            <summary>
            This will be set to True when the negative key is input with the entire contents of the
            textbox selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.readOnlyBackColor">
            <summary>
            Custom backcolor that will be used when the control is Read-only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.backGroundColor">
            <summary>
            Gets or Sets the BackGroundColor of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.#ctor">
            <summary>
            Overloaded. Creates an object of type NumberTextBox. 
            </summary>
            <remarks>
            The NumberTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific 
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.EndInit">
            <summary>
            Implementation of the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeContextMenu">
            <summary>
            Initialize the context menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.RaiseValidationError(System.String,System.Int32)">
            <summary>
            This method raises the ValidationError event.
            </summary>
            <param name="invalidText">The text that was input.</param>
            <param name="startPosition">The start position of the error.</param>
            <remarks>
            See the <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnValidationError(Syncfusion.Windows.Forms.Tools.ValidationErrorArgs)"/> method for more information.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnValidationError(Syncfusion.Windows.Forms.Tools.ValidationErrorArgs)">
            <summary>
            Invokes the ValidationError event.
            <param name="args">A ValidationErrorEventArgs that contains the event data.</param>
            </summary>
            <remarks>
            The OnValidationError method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors: When overriding OnValidationError in a derived
            class, be sure to call the base class's OnValidationError method so that
            registered delegates receive the event.</note>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError"/> event when there is unacceptable
            text in the control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Validate(System.Boolean)">
            <summary>
            Validates the control.
            </summary>
            <param name="bRaiseValidationError">Indicates whether the validation error is to be raised.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.RefreshCulture">
            <summary>
            Refreshes and reapplies the culture specific settings. 
            </summary>
            <remarks>
            Call this function when there has been a change in the CurrentCulture of the
            application.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ApplyRightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetRightToLeft">
            <summary>
            Resets the <see cref="P:System.Windows.Forms.Control.RightToLeft"/> property to its default value.
            </summary>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            	<IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/>
            	<IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            </PermissionSet>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetForeColor">
            <summary>
            Resets the <see cref="P:System.Windows.Forms.Control.ForeColor"/> property to its default value.
            </summary>
            <PermissionSet>
            	<IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true"/>
            </PermissionSet>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ShouldSerializeNegativeSign">
            <summary>
            Indicates whether the NegativeSign should not be serialized if the value is the same as the one for the 
            current culture.
            </summary>
            <returns>True if the property should be serialized; otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetNegativeSign">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetCopyOfCurrentNumberFormatInfo">
            <summary>
            Returns a copy of the current NumberFormatInfo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ShouldSerializeNegativeColor">
            <summary>
            Indicates whether NegativeColor property value should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetNegativeColor">
            <summary>
            Resets NegativeColor property to default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ShouldSerializeZeroColor">
            <summary>
            Indicates whether ZeroColor property value should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetZeroColor">
            <summary>
            Resets ZeroColor property to default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ShouldSerializePositiveColor">
            <summary>
            Indicates whether PositiveColor property value should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetPositiveColor">
            <summary>
            Resets ResetPositiveColor property to default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnBindableValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetControlColor">
            <summary>
            Sets the control's forecolor depending on whether the
            current value is negative.
            </summary>
            <remarks>
            See the <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NegativeColor"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.PositiveColor"/>
            properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ApplyFormattingAndSetText(System.String)">
            <summary>
            Takes the incoming text, formats it based on the
            rules and settings prevailing currently and sets
            the display accordingly.
            Returns the length of the new text after setting the
            display.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetModifiedText(System.String,System.String)">
            <summary>
            Takes the incoming text, formats it based on the
            rules and settings prevailing currently and sets
            the display accordingly. 
            Returns the length of the new text after setting the
            display.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ApplyFormatting(System.String)">
            <summary>
            Formats the given text according to the current setting.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.RemoveFormatting(System.String,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="formattedText"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetControlBackColor">
            <summary>
            Resets the ControlBackColor property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ResetReadOnlyBackColor">
            <summary>
            Resets ReadOnlyBackColor property to default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetClipText(System.Boolean)">
            <summary>
            Gets the clip text. 
            </summary>
            <param name="padIfEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnClipTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ClipTextChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnFormattedTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.FormattedTextChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleContextMenuPopup(System.Object,System.EventArgs)">
            <summary>
            Handles the Context popup.
            </summary>
            <param name="sender">The context menu.</param>
            <param name="ea"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuUndoClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Undo menu click.
            </summary>
            <param name="sender">The undo menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuCutClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Cut menu.
            </summary>
            <param name="sender">Cut menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuCopyClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Copy menu.
            </summary>
            <param name="sender">Copy menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuDeleteClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Delete menu.
            </summary>
            <param name="sender">Delete menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuSelectAllClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Select All menu.
            </summary>
            <param name="sender">Select All menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleMenuPasteClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Paste menu.
            </summary>
            <param name="sender">Paste menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Undo">
            <summary>
            This method will Undo the previous operation.
            </summary>
            <remarks>
            This method is invoked when the Undo context menu item is
            clicked or the shortcut (CTRL+Z) is clicked. You can override
            this method to provide your own implementation for Undo.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SelectAll">
            <summary>
            Selects all text in the text box.
            </summary>
            <remarks>
            This method is called when the menu item "Select All" or its
            shortcut (CTRL+A) is used. This method overrides the base 
            implementation in <see cref="M:System.Windows.Forms.TextBoxBase.SelectAll"/>.
            Override this method to provide your own implementation for 
            SelectAll.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Paste">
            <summary>
            Pastes the data in the clipboard into the NumberTextBox control.
            </summary>
            <remarks>
            The data will be formatted before being pasted into the text box.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Copy">
            <summary>
            Copies the content of the NumberTextBox to the clipboard.
            The ClipMode property dictates what gets copied.
            </summary>
            <remarks>
            If the text of the control is $56,000.12, this is the content
            that will be copied to the clipboard based on whether the ClipMode
            is set to <see cref="F:Syncfusion.Windows.Forms.Tools.CurrencyClipModes.IncludeFormatting"/> or 
            <see cref="F:Syncfusion.Windows.Forms.Tools.CurrencyClipModes.ExcludeFormatting"/>.
            <para>
            IncludeFormatting - $56,000.12
            ExcludeFormatting - 56000.12
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Cut">
            <summary>
            Cuts the selected data to the clipboard.
            </summary>
            <remarks>
            The selected text in the CurrencyTextBox will be deleted and the content
            will be copied to the clipboard.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Delete">
            <summary>
            Deletes the current selection of the text box.
            </summary>
            <remarks>
            This method is invoked by the ContextMenu "Delete" menu item of the
            text box through the "Del" shortcut or by selecting the menu item.
            If you want to override the default behavior of this method, derive
            and override this method to provide your own implementation.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.IsValidCharacter(System.Char)">
            <summary>
            The NumberTextBox accepts numeric digits only. This method checks
            for numeric input.
            </summary>
            <param name="inputCharacter">The character to be checked.</param>
            <returns>True if the character is valid; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ParseForNegativeFormat(System.String)">
            <summary>
            Overloaded. Override this method to provide an implementation for parsing
            a negative value.
            </summary>
            <param name="currentText">The text to be parsed.</param>
            <returns>True if the value is negative; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ParseForNegativeFormat(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Override this method to provide an implementation for parsing
            a negative value.
            </summary>
            <param name="currentText">The text to be parsed.</param>
            <returns>True if the value is negative; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetEmptySelection(System.Int32)">
            <summary>
            Sets the start position to value passed and sets the
            SelectionLength to be zero.
            </summary>
            <param name="selectionStart">The start of the selection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetFirstDataPos">
            <summary>
            Returns the first data position which is the index within the current
            string content of the edit control at which data can be 
            inserted.
            </summary>
            <returns>The index of the first possible data position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetNextDataPos(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the next valid position for receiving data input.
            </summary>
            <param name="startPosition">The position to start seeking from.</param>
            <param name="inDecimalPosition">Indicates whether the start position is after the decimal separator.</param>
            <param name="back">Indicates whether the backspace key has been pressed.</param>
            <returns>The index in the string that is valid for input.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetDecimalSeparatorPosition(System.String)">
            <summary>
            Overloaded. Returns the position of the decimal separator taking into account
            the CurrencySymbol.
            </summary>
            <param name="currentText">The text in which to look for the decimal separator.</param>
            <returns>The decimal separator's position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetDecimalSeparatorPosition(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Returns the position of the decimal separator taking into account
            the CurrencySymbol.
            </summary>
            <param name="currentText">The text in which to look for the decimal separator.</param>
            <returns>The decimal separator's position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetPrevDataPos(System.Int32)">
            <summary>
            Returns the previous valid data position for text input.
            </summary>
            <param name="startPosition">The position to seek from.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetDecimalSeparator">
            <summary>
            Overloaded. Override this to return DecimalSeparator in NumberTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetDecimalSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return DecimalSeparator in NumberTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetGroupSeparator">
            <summary>
            Overloaded. Override this to return GroupSeparator in NumberTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetGroupSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return GroupSeparator in NumberTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.DeleteSelectedText(System.String,System.Int32,System.Int32)">
            <summary>
            Deletes the currently selected text.
            </summary>
            <returns>The content of the text box after deletion.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.DeleteSelectedText">
            <summary>
            Deletes the currently selected text.
            </summary>
            <returns>The content of the text box after deletion.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetFirstFillPos(System.Int32)">
            <summary>
            Returns the first data position that can take valid input.
            </summary>
            <param name="startPosition">The start position to seek from.</param>
            <returns>The index of the first valid position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CanInsert(System.String,System.String,System.Int32)">
            <summary>
            Checks if the text can be inserted subject to the constraints.
            </summary>
            <param name="currentText">The current content of the text box.</param>
            <param name="inputText">The text to be inserted.</param>
            <returns>The length of the acceptable string to be inserted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CheckForMinMax(System.String)">
            <summary>
            
            </summary>
            <param name="newText"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CheckForMinMax(System.String,System.Boolean)">
            <summary>
            Indicates whether the given value meets the minimum and maximum value considerations.
            </summary>
            <param name="newText"></param>
            <param name="ignoreLength"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CheckNullStringIsInRange(System.String)">
            <summary>
            Checks whether the NullSring Value is with in the Min Max Values
            </summary>
            <param name="nullString"></param>
            <returns>True if it is in range else false</returns>
            <Note>override this method to check the nullString is in range by parsing it to respective Type </Note>
            <example>
            Double doubleVal;
            bool isNumber = Double.TryParse(currentTextValue, out doubleVal);
            if (isNumber)
            {
                return CheckForMinMax(doubleVal.ToString(),true);
            }
            else
                return true;
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InsertString(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts a string into the textbox at the current position.
            The string data will be parsed for valid numeric data and 
            only the valid characters will be accepted.
            </summary>
            <param name="textToBeInserted">The string to be inserted.</param>
            <param name="pasteOperation">Paste and Text properties will be treated differently for validation.</param>
            <returns>True if the operation succeeds.</returns>
            <remarks>
            This method attempts to insert the text passed in as the parameter into
            the NumberTextBox subject to the constraints imposed by the other
            attributes of the NumberTextBox such as the maximum length of a 
            the string etc.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ConcatModifiedText(System.String,System.String,System.String)">
            <summary>
            Concat modified text.
            </summary>
            <param name="startCurrentText"></param>
            <param name="inputRawText"></param>
            <param name="endCurrentText"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides OnTextChanged.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CheckDecimalPartLength(System.String)">
            <summary>
            Checks the length of the decimal part of the text box content.
            </summary>
            <param name="rawText">The input raw text string.</param>
            <returns>The checked string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.GetInitialZeroCount(System.String,System.Int32)">
            <summary>
            Returns the count of zeros at the beginning of the string. This is 
            needed as we will have to compensate for this once a valid
            number appears after it for repositioning the cursor.
            </summary>
            <param name="currentText"></param>
            <param name="startPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.IsInDecimalPosition(System.String,System.Int32)">
            <summary>
            Indicates whether the start position is after the decimal separator.
            </summary>
            <param name="currentText">The current text.</param>
            <param name="startPosition">The start position to seek for.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.UpdateNullState">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.IsNullOrEmpty(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            This method overrides the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)"/> method
            and handles the key messages that are of interest to the NumberTextBox.
            </summary>
            <param name="m">The message that is to handled.</param>
            <returns>True if the key message is handled; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <summary>
            Overrides to suppress KeyPress. Only the KeyPress event is raised - no other
            processing is done.
            </summary>
            <param name="m">The message.</param>
            <returns>True if the message is a KeyPress; otherwise the base class handles this.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleBackspaceKey">
            <summary>
            Handles the backspace key.
            </summary>
            <returns>True if the key was accepted and the action performed; false otherwise.</returns>
            <remarks>
            The backspace key results in one character being removed in front of the
            current selection if the selection is empty or deletion of the selection if the
            selection is not empty.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleCharacterKey(System.Char)">
            <summary>
            Invoked when a character key is pressed.
            </summary>
            <param name="charToBeInserted">The character to be inserted.</param>
            <returns>True if the insert was successful; false otherwise.</returns>
            <remarks>
            Character entry is accepted if the character is a valid digit. This
            method invokes the InsertString method to insert the character into
            the CurrencyTextBox.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CursorShouldBeMoved(System.Int32,System.Boolean)">
            <summary>
            When the start position is in the number part and there is only a zero, the cursor should be moved.
            </summary>
            <param name="startPosition"></param>
            <param name="inDecimalPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleDeleteKey">
            <summary>
            Invoked when the Delete key is pressed.
            </summary>
            <returns>True if the key is handle; false otherwise.</returns>
            <remarks>
            This method performs the action of removing the selected text when the 
            delete key was pressed and also positioning the cursor appropriately.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleSubtractKey">
            <summary>
            Invoked when the negative key is pressed.
            </summary>
            <returns>True if the key is handled; false otherwise.</returns>
            <remarks>
            The defined behavior for this key is to toggle the sign (negativity)
            of the content of the NumberTextBox.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.m_bDecimalMode">
            <summary>
            Decimal typing mode. Use if NullString is true;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.m_iDecimalDigitsPosition">
            <summary>
            Decimal digits position. Use for typing in decimal mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.HandleDecimalKey">
            <summary>
            Invoked when the decimal key is pressed.
            </summary>
            <returns>True if the key is handled; false otherwise.</returns>
            <remarks>
            The defined behavior for this key is to jump to the position immediately
            after the decimal position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.PositionCursorAfterEdit(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Invoked for positioning the cursor at the right position after 
            something has changed.
            </summary>
            <param name="startPositionJustNumbers">The number of valid numbers before the point.</param>
            <param name="inDecimalPosition">Indicates whether the point comes after the decimal separator.</param>
            <param name="back">Indicates whether the direction is backwards.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.m_bNeedAllSelectOnMouseDown">
            <summary>
            Need all select OnMouseDown.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetNull">
            <summary>
            Event raised when NULL State is to be set based on a value.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.KeyValidate">
            <summary>
            Event raised when a Key is to be validated. This validation is performed before any of the
            NumberTextBox's own validation of the input character.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.EnforceMinMaxDuringValidating">
            <summary>
            If the Min Max values are not met, the Validating event will be handled and cancelled if this property is set to true.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError">
            <summary>
            Occurs when the input text is invalid for the current state of the control.
            </summary>
            <remarks>
            <para>
            This event can be handled and you can do your processing based
            on the information provided. The ValidationErrorEventArgs object
            will provide the invalid text that was input and also the position
            within that text where the error occurred.
            </para>
            <para>
            The ValidationError event is raised when:
            1. The <see cref="E:System.Windows.Forms.Control.Validating"/> event is raised (if there is invalid input).
            2. Invalid key characters are input.
            3. Invalid values are set through the Text property.
            </para>
            </remarks>
            <example>
            <code lang="C#">
            	Console.WriteLine("ValidationError in currencyTextBox1 InvalidText" + e.InvalidText);
            	Console.WriteLine("ValidationError in currencyTextBox1 StartPosition" + e.StartPosition );</code>
            	<coderef file="c:\syncfusion\essential suite\tools\samples\quick start\currencydemo\VB\MainForm.vb" name="Currency ValidationError" lang="VB"><code lang="VB">
                Console.WriteLine(("ValidationError in currencyTextBox1 InvalidText" + e.InvalidText))
                Console.WriteLine(("ValidationError in currencyTextBox1 StartPosition" + e.StartPosition))</code></coderef>
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.Culture">
            <summary>
            Gets or sets the culture that is to be used for formatting the numeric display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SpecialCultureValue">
            <summary>
            Gets or sets the mode for the cultures.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CurrentCultureRefresh">
            <summary>
            Indicates whether the Culture property is to be refreshed when the culture changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.UseUserOverride">
            <summary>
            The UseUserOverride parameter for CultureInfo.
            </summary>
            <remarks>
            The NumberTextBoxBase control has several properties that expose culture-specific
            information. These properties use a <see cref="T:System.Globalization.NumberFormatInfo"/> object for
            handling the culture specific information. This property is used in the creation
            of the NumberFormatInfo object. <seealso cref="P:System.Globalization.CultureInfo.UseUserOverride"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.UseNullString">
            <summary>
            Indicates whether the NULLString property will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.RightToLeft">
            <summary>
             Gets or sets a value indicating whether control's elements are aligned to
                support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BackColor">
            <summary>
            Gets or sets the back color. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NumberFormatInfoObject">
            <summary>
            Gets or sets the NumberFormatInfo object that will be used for formatting the
            number value.
            </summary>
            <remarks>
            This property will not be exposed to the developer. This is only meant
            to be an accessor for use within the control. The developer will be able
            to access the properties of the NumberFormatInfo through the individual
            properties exposed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NegativeSign">
            <summary>
            Gets or sets the sign that is to be used to indicate a negative value.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NegativeColor">
            <summary>
            Gets or sets the forecolor when the current value is negative.
            </summary>
            <remarks>
            You can customize the look and provide feedback to the user by defining
            a different color for the negative numbers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ZeroColor">
            <summary>
            Gets or sets the forecolor when the current value is zero.
            </summary>
            <remarks>
            You can customize the look and provide feedback to the user by defining
            a different color for displaying zero.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.PositiveColor">
            <summary>
            Gets or sets the forecolor when the current value is positive.
            </summary>
            <remarks>
            You can customize the look and provide feedback to the user by defining
            a different color for the positive numbers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NullFormat">
            <summary>
            Returns the NumberFormatInfo object for the NULL display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NullString">
            <summary>
            Gets or sets the NULL string to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.AllowNull">
            <summary>
            Gets or sets the NULL string to be displayed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValue"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ControlValidated">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValue">
            <summary>
            Wrapper property around the selected value. Use this property if you
            want to be able to set the value of the control to NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.DefaultValue">
            <summary>
            Gets or set the default value. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OverWriteText">
            <summary>
            Gets or sets a value indicating whether to overrite the immediate text when the text cannot be inserted.
            Effective when MinMaxValidation is set to OnKeyPress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.MinMaxValidation">
            <summary>
            Specifies when the MinMax Validation Need to be performed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.MaxLength">
            <summary>
            Overrides the MaxLength property. This has no effect on this EditControl as it does not honor MinValue and MaxValue properties.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.PercentTextBox"/> control does not honor the 
            MaxLength property. Set the <see cref="!:MaxValue"/> and <see cref="!:MinValue"/>
            properties.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.OnValidationFailed">
            <summary>
            Specifies the action to be performed when validation fails, Effective only if MinMaxValidation is set to OnLostFocus
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.IsNull">
            <summary>
            Indicates whether the field is Null(NullString) or Not.
            </summary>
            <remarks>when this is True and <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.AllowNull"/> is True the field will be assigned with <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NullString"/> </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NullState">
            <summary>
            Indicates the NULLState of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BackGroundColor">
            <summary>
            Gets or Sets the BackGroundColor of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ReadOnlyBackColor">
            <summary>
            Color to be used for the Backcolor when the control is Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ClipMode">
            <summary>
            Determines whether to include or exclude the literal characters in the input mask when doing a copy command.
            </summary>
            <remarks>
            This property is used when copying to the clipboard and also the
            <see cref="N:Syncfusion.Text"/> property.
            <para>
            When databinding the Text property, it is advisable to have the ClipMode
            set to <see cref="F:Syncfusion.Windows.Forms.Tools.CurrencyClipModes.ExcludeFormatting"/> in cases where
            the data source does not accept the formatted text.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ClipText">
            <summary>
            Returns the clipped text without the formatting.
            </summary>
            <remarks>
            For example, if the text in the CurrencyTextBox is $45,000.00, the
            ClipText property will give 45000.00.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ClipTextChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.FormattedText">
            <summary>
            Returns the formatted text with the formatting.
            </summary>
            <remarks>
            For example, if the Text in the CurrencyTextBox is $45,000.00, the
            FormattedText property will give $45,000.00.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.FormattedTextChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.CanUndo">
            <summary>
            Indicates whether the Undo operation is possible at this time.
            </summary>
            <remarks>
            The NumberTextBox maintains its own undo mechanism and hence
            needs to implement this method to be compatible with the Undo
            mechanism.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.NegativeInputPendingOnSelectAll">
            <summary>
            This property defines the behavior when the contents of the TextBox is fully selected and the negative 
            key is pressed by the user. 
            If the value is set to True - The current value is not changed at all. The next key stroke is taken to be a 
            new value and the entire contents of the TextBox is replaced by the negative value of the key stroke character
            entered. Example: If the current value of the TextBox is 1.00 and all the text is selected and the user presses
            the -ve key followed by the key 5 - the value is -5.00
            If the value is set to False - The current value is changed to the negative value immediately. Example: If the current value of the TextBox is 1.00 and all the text is selected and the user presses
            the -ve key the value is -1.00
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SelectAllOnFocus">
            <summary>
            Specifies if the text should be selected when the control gets the focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SelectedText">
            <summary>
            Gets or sets SelectedText. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ForeColor">
            <summary>
            Please use NegativeColor, ZeroColor and PositiveColor properties instead of ForeColor property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.MaxNumberLength">
            <summary>
            The maximum number of valid digits the textbox can take.
            This is set to the maximum value a decimal type can hold.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.currencyNegativePatterns">
            <summary>
            The negative patterns.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.minValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.maxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.numberDigitsValue">
            <summary>
            The maximum number of currency digits.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.initDecimalValue">
            <summary>
            The initial decimal value set in InitializeComponent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.enterDecimalValue">
            <summary>
            The decimal value when the control gets the focus. Used when validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.preservedDecimalValue">
            <summary>
            The decimal value that is set through the DecimalValue property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.oldDecimalValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.newDecimalValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.initCurrencyDecimalDigits">
            <summary>
            For initialization of Culture related values. Needed when SpecialCultureValue is
            not the default value. Since the base class will reset the Culture property during
            ISupportInitialize.EndInit, we will have to hold these values and set them on the
            correct cultureinfo / numberformatinfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.#cctor">
            <summary>
            Static initializer for the CurrencyTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyFormattedText(System.Globalization.NumberFormatInfo,System.String,System.String,System.Decimal@)">
            <summary>
            Gets the currency formatted text and the decimal value for a given NumberFormatInfo object and
            text value.
            </summary>
            <param name="nfi">The NumberFormatFormatInfo object to be used for the formatting.</param>
            <param name="currencyText">The text to be formatted.</param>
            <param name="nullString">The value to be returned if the currencyText is considered a NULL value. This should be NULL if the string is not to be formatted as NULL even if value is NULL.</param>
            <param name="dValue">The decimal value.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.#ctor">
            <summary>
            Overloaded. Creates an object of type CurrencyTextBox. 
            </summary>
            <remarks>
            The CurrencyTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific 
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.InitializeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.InitializeNumberTextBox">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeNumberTextBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeNumberDigits">
            <summary>
            Indicates whether to serialize the CurrencyNumberDigits property
            if its the same as the MaximumLength.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetNumberDigits">
            <summary>
            Restores the CurrencyNumberDigits to the MaximumLength.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyDecimalDigits">
            <summary>
            Indicates whether the CurrencyDecimalDigits should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyDecimalDigits">
            <summary>
            Reset the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyDecimalSeparator">
            <summary>
            Indicates whether the CurrencyDecimalSeparator should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyDecimalSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyGroupSeparator">
            <summary>
            Indicates whether the CurrencyGroupSeparator should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyGroupSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyGroupSizes">
            <summary>
            Indicates whether the CurrencyGroupSizes should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyGroupSizes">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyNegativePattern">
            <summary>
            Indicates whether the CurrencyNegativePattern should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyNegativePattern">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyPositivePattern">
            <summary>
            Indicates whether the CurrencyPositivePattern should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyPositivePattern">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencySymbol">
            <summary>
            Indicates whether the CurrencySymbol should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencySymbol">
            <summary>
            Resets the value to the culture specific value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeCurrencyNumberDigits">
            <summary>
            Indicates whether to serialize the CurrencyNumberDigits property
            if its the same as the MaximumLength
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetCurrencyNumberDigits">
            <summary>
            Restores the CurrencyNumberDigits to the MaximumLength.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.FormatChanged(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            
            </summary>
            <param name="previousFormat"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.c_cLeadingSymbol">
            <summary>
            Leading symbol.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.m_bRemoveDecimalZeros">
            <summary>
            Remove last decimal zeros.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.m_bCorrectConcatModifiedText">
            <summary>
            If need correct ConcatModifiedText.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.m_iZerosNeedAddedCount">
            <summary>
            Zeros need added count.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ApplyFormatting(System.String)">
            <summary>
            Format the given text according to the current setting.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeText">
            <summary>
            Indicates whether to serialize the Text property
            if it is null or quals NullString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetText">
            <summary>
            Restores the CurrencyNumberDigits to the MaximumLength.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeMaxValue">
            <summary>
            Indicates whether the MaxValue property should be serialized.
            </summary>
            <returns>true if the value is not equal to <see cref="F:System.Decimal.MaxValue"/></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetMaxValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ShouldSerializeMinValue">
            <summary>
            Indicates whether the MinValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Decimal.MaxValue"/></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ResetMinValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.OnDecimalValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides OnTextChanged.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.GetNumberStartPosition">
            <summary>
            Calculates start position of numeric value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.GetNumberEndPosition">
            <summary>
            Calculates end position of numeric value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.HandleBackspaceKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.HandleDeleteKey">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CanInsert(System.String,System.String,System.Int32)">
            <summary>
            Checks if the text can be inserted subject to the constraints.
            </summary>
            <param name="currentText">The current content of the TextBox.</param>
            <param name="inputText">The text to be inserted.</param>
            <returns>The length of the acceptable string to be inserted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.GetDecimalSeparatorPosition(System.String)">
            <summary>
            Returns the position of the decimal separator taking into account
            the CurrencySymbol.
            </summary>
            <param name="currentText">The text in which to look for the decimal separator.</param>
            <returns>The decimal separator's position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.GetDecimalSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return CurrencyDecimalSeparator in CurrencyTextBox
            and PercentDecimalSeparator in PercentTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.GetGroupSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return CurrencyDecimalSeparator in CurrencyTextBox
            and PercentGroupSeparator in PercentTextBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.ParseForNegativeFormat(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ParseForNegativeFormat(System.String,System.Globalization.NumberFormatInfo)"/>
            </summary>
            <param name="currentText">The text to be parsed.</param>
            <returns>True if the value is negative; false, otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.OnEnter(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Saves the current DecimalValue so that it can be compared 
            during validation. The DecimalValueChanged and TextChanged event
            will only be raised if the value is different during validation.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.NumberDigits">
            <summary>
            The number of digits for the number part. This is not part of the globalization structure.
            </summary>
            <remarks>
            This value is initially set based on the maximum value of the
            Currency data type.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyDecimalDigits">
            <summary>
            The maximum number of digits for the decimal portion of the currency.
            </summary>
            <remarks>
            The US dollar requires 2 decimal points to accomodate the smallest
            denomination and this property will have the value 2 in this case. If there
            is a need to have a different value based on the locale, it will be
            automatically changed based on the current locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyNegativePatterns">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyDecimalSeparator">
            <summary>
            The decimal separator character that will be used for the display.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyGroupSeparator">
            <summary>
            This property specifies the separator to be used for grouping digits.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyGroupSizes">
            <summary>
            This property specifies the grouping of CurrencyDigits in the CurrencyTextBox.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyNegativePattern">
            <summary>
            This property specifies the pattern to use when the value is negative.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyPositivePattern">
            <summary>
            This property specifies the pattern to use when the value is positive.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencySymbol">
            <summary>
            This property specifies the currency symbol to be used in the CurrencyTextBox.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.CurrencyNumberDigits">
            <summary>
            The number of digits for the number part. This is not part of the globalization structure.
            </summary>
            <remarks>
            This value is initially set based on the maximum value of the
            Currency data type.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.RemoveDecimalZeros">
            <summary>
            Gets or sets remove last decimal zeros.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.Text">
            <summary>
            Overrides the Text property of <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <remarks>
            This property is overriden in order to normalize the data that is set
            to the Text property and format it as needed. The method <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InsertString(System.String,System.Int32,System.Int32,System.String,System.Boolean)"/>
            is used to format the data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.MaxValue">
            <summary>
            The Maximum Value that can be set through the CurrencyTextBox.
            </summary>
            <remarks>
            The default value is the MaxValue for <see cref="T:System.Decimal"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.MinValue">
            <summary>
            The Minimum Value that can be set through the CurrencyTextBox.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValue">
            <summary>
            The decimal value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.m_CurrencyTextBox">
            <summary>
            CurrencyTextBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.CurrencyTextBox)">
            <summary>
            Constructor
            </summary>
            <param name="CurrencyTextBox">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBoxAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DataBindingUtils.AppendBindableProperties(System.ComponentModel.PropertyDescriptorCollection,System.Collections.IList)">
            <summary>
            Overloaded. Looks for bindable properties in each of the component objects
             and create a new PD entry for it. It then creates a brand new PDC combining the PDs of
             the originalList and the new entries and returns the new PDC.
            </summary>
            <param name="originalList">The originalList consists of the PDC of the parent control.</param>
            <param name="lookupObjects">The lookupObjects list consists of the array of instances of the component classes.</param>
            <returns>A collection of property descriptors.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DataBindingUtils.AppendBindableProperties(System.ComponentModel.PropertyDescriptorCollection,System.Object)">
            <summary>
            Looks for bindable properties in each of the component objects
             and create a new PD entry for it. It then creates a brand new PDC combining the PDs of
             the originalList and the new entries and returns the new PDC.
            </summary>
            <param name="originalList">The originalList consists of the PDC of the parent control.</param>
            <param name="lookupObject">The lookupObjects list consists of the array of instances of the component classes.</param>
            <returns>A collection of property descriptors.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.DefaultChildTypeAttribute">
            <summary>
            Attribute used to specify the default child type for a parent type.
            </summary>
            <remarks>
            <para>
            A parent type designer, say TabControl for example, usually lets you add child types,
            TabPage in this case, during design-time. However, when you create custom types deriving
            from TabControl and TabPage, the designer needs to be informed about this change in "default child type"
            for your derived parent type. This attribute lets you declare this relationship.
            </para>
            <para>
            Some of our components like TabControlExt and XPTaskBar use this attribute to declare
            their default child type. Their corresponding designers query this attribute before creating a new child instance. 
            This way, when you derive custom types for the above Controls, you
            can specify the new default child type using this attribute on your parent type.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DefaultChildTypeAttribute.#ctor(System.Type)">
            <summary>
            Creates a new instance of the DefaultChildTypeAttribute specifying the child type.
            </summary>
            <param name="childType">An Type instance.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.DefaultChildTypeAttribute.ChildType">
            <summary>
            Returns the specified child Type.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignTimeUtils.SyncSelection(System.Object)">
            <summary>
            This should be called during design time when a component has been moved, sized or re-parented,
            but the change was not the result of a property change.  All property
            changes are monitored by the selection UI service, so this is automatic most
            of the time.  There are times, however, when a component may be moved without
            property change notification occurring.  Scrolling an auto scroll Win32
            form is an example of this.
            This method simply re-queries all currently selected components for their
            bounds and updates the selection handles for the ones that have changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignTimeUtils.GetPersistenceModeAttribute(System.String)">
            <summary>
            Initializes the PersistenceModeAttribute type with the specified constant, using reflection, if the
            System.Web.dll is loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.AttributesAddingPropertyDescriptor">
            <summary>
            A dummy PropertyDescriptor that could be used to add custom attributes dynamically.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.VisualStyleEnumFilter">
            <summary>
            Generic <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> enumeration value filter class.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Design.VisualStyleEnumFilter.m_avsValuesToSkip">
            <summary>
            Enumeration values to be skipped.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.DefaultVisualStyleEnumFilter">
            <summary>
            Default <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> enumeration value filter class.
            </summary>
            <remarks>Skips <see cref="F:Syncfusion.Windows.Forms.VisualStyle.Office2007Outlook"/> value.</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Design.DefaultVisualStyleEnumFilter.r_avsValuesToSkip">
            <summary>
            Default values to be skipped.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Design.EnumFlagsEditor">
            <summary>
            EnumFlagsEditor implements a UITypeEditor for modifying a enum value that
            has been marked with the FlagsAttribute.
            </summary>
            <remarks>The editor lets you check and uncheck
            individual flags in a dropdown CheckedListBox. A None button allows to reset all
            flags at once.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.EnumFlagsEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.EnumFlagsEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <override/>
        </member>
        <member name="T:Syncfusion.Design.ShouldSerializeBasedPersisterType">
            <summary>
            If the static DesignerPersistance.IsPersisting property gets set, then deriving from this type will do the following:
            It will return a custom property descriptor for the properties it contains that will return property values
            after checking the ShouldSerializeXXX impl. This is useful while serializing web pages in the designer - as the
            web designer doesn't check for ShouldSerializeXXX, by default.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.CurrencyCultureEditor">
            <summary>
            Summary description for CurrencyCultureEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.GroupViewItemConverter">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.LMDesigner">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.GetIsInsertBefore(System.Drawing.Point,System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="pt"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.SetInsertIndex(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="ptMouse"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.GetInsertIndex(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="ptMouse"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.SetPointerRect">
            <summary>
            Updates bounds of the instertion pointer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.InvalidatePointer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.DrawPointer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.InsertControls">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.Attach">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.Detach">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.IsControlGlyph(System.Windows.Forms.Design.Behavior.ComponentGlyph)">
            <summary>
            
            </summary>
            <param name="glyph"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.OnBehaviorSvcBeginDrag(System.Object,System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.OnBehaviorSvcEndDrag(System.Object,System.Windows.Forms.Design.Behavior.BehaviorDragDropEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.OnBehaviorDragOver(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.OnBehaviorDragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.InsertBefore">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.Control">
            <summary>
            Managed control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.IsRightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.IsVerticalLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.DragComponents">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.LayoutManagerBehavior.#ctor(System.Windows.Forms.Design.Behavior.BehaviorService)">
            <summary>
            
            </summary>
            <param name="behaviorSvc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.LayoutManagerBehavior.OnDragOver(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.LayoutManagerBehavior.OnDragDrop(System.Windows.Forms.Design.Behavior.Glyph,System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="e"></param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.LayoutManagerBehavior.DragOver">
            <summary>
            
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Design.LMDesigner.LayoutManagerBehavior.DragDrop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.MaskedEditCultureEditor">
            <summary>
            Summary description for MaskedEditCultureEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.MaskedEditDataGroupInfoConverter">
            <summary>
            TypeConverter for MaskedEditDataGroupInfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.MaskedEditDataGroupInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Indicates whether this converter can convert an object to
            the given destination type using the context.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context. </param>
            <param name="destinationType">A <see cref="T:System.Type"/> object that represents the type to which you want to convert. </param>
            <returns>True if conversion is possible; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Design.MaskedEditDataGroupInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            This member overrides <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)"/>.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current culture is assumed. </param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              <para>Returns the edit style from the current context.</para>
            </summary>
            <param name="context">The context of the object the bindings provide values to.</param>
            <returns>
              <para>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
              <para>Edits the specified value using the specified provider
             within the specified context.</para>
            </summary>
            <param name="context">The context of the value.</param>
            <param name=" provider">The provider to use to provide values.</param>
            <param name=" value"> The object to be edited.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.disposed">
            <summary>
              <para>Adds an event handler to listen to the disposed event on the component.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.#ctor(System.Windows.Forms.ControlBindingsCollection)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AdvancedBindingObject" /> class.</para>
            </summary>
            <param name="bindings">The collection of bindings to store.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.Disposed">
            <summary>
              <para>Adds an event handler to listen to the disposed event on the component.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.Name">
            <summary>
              <para>Gets / sets the name for this object.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.Bindings">
            <summary>
              <para>Gets / sets the collection of bindings.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingObject.ShowAll">
            <summary>
              <para>Indicates whether to show all bindings.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPicker.#ctor(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.AdvancedBindingPicker" /> class.</para>
            </summary>
            <param name="context">A type descriptor context that can provide context information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
              <para>Indicates whether the value of this property should be persisted.</para>
            </summary>
            <param name="component">The component that owns the property to determine whether the value should be persisted.</param>
            <returns>
              <para>
                <see langword="true" /> if the property should be persisted; 
            <see langword="false" /> otherwise.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
              <para>Sets the specified value of the property on the specified component.
             </para>
            </summary>
            <param name="component">The component that owns the property whose value has to be set.</param>
            <param name=" value">The value to set the property to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ResetValue(System.Object)">
            <summary>
              <para>Resets the value of the property on the specified component.</para>
            </summary>
            <param name="component">The component with this property that should be reset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.GetValue(System.Object)">
            <summary>
              <para>Returns the current value of the property on the specified
             component.</para>
            </summary>
            <param name="component">The component from which to get the value of the property this descriptor describes.</param>
            <returns>
              <para>The value of the property on the specified component.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.GetEditor(System.Type)">
            <summary>
              <para>Returns an editor of the specified type.</para>
            </summary>
            <param name="type">The type of editor to retrieve.</param>
            <returns>
              <para>An instance of the requested editor type, or <see langword="null " />if an
            editor could not be found. </para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
              <para>Indicates whether resetting the component will change the value of the
             component.</para>
            </summary>
            <param name="component">The component to determine if resetting will change the value of the property on.</param>
            <returns>
              <para>
                <see langword="true" /> if the component can be reset without changing the
            value of the property; <see langword="false" /> otherwise.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.FillAttributes(System.Collections.IList)">
            <summary>
              <para>In a derived class, adds the attributes of the inherited class to the
             specified list of attributes in the parent class.</para>
            </summary>
            <param name="attributeList">An <see cref="T:System.Collections.IList" /> that lists the attributes in the parent class. Initially, this will be empty.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.PropertyType">
            <summary>
              <para>Returns the type of the property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.IsReadOnly">
            <summary>
              <para>Indicates whether this property is read-only.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.AdvancedBindingPropertyDescriptor.ComponentType">
            <summary>
              <para>Returns the type of component this property is bound to.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
              <para>Indicates whether the specified component should persist the value.</para>
            </summary>
            <param name="component">The component to determine whether the value of should be persisted.</param>
            <returns>
              <para>
                <see langword="true" /> if the value should be persisted;
            <see langword="false" /> otherwise.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
              <para>Sets the specified value for the specified component.</para>
            </summary>
            <param name="component">The component to set the value for.</param>
            <param name=" value">The value to set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.ResetValue(System.Object)">
            <summary>
              <para>Resets the value of the specified component.</para>
            </summary>
            <param name="component">The component whose value is to be reset.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.GetValue(System.Object)">
            <summary>
              <para>Returns a value from the specified component.</para>
            </summary>
            <param name="component">The component to retrieve a value from.</param>
            <returns>
              <para>The value of the specified component.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
              <para>Indicates whether the specified component can reset the value
             of the property.</para>
            </summary>
            <param name="component">The component to test whether it can change the value of the property.</param>
            <returns>
              <para>
                <see langword="true" /> if the value can be reset; 
            <see langword="false" /> otherwise.</para>
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.PropertyType">
            <summary>
              <para>Returns the type of the property.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.IsReadOnly">
            <summary>
              <para>Indicates whether the property is read-only.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.Converter">
            <summary>
              <para>Returns the type converter.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Design.DesignBindingPropertyDescriptor.ComponentType">
            <summary>
              <para>Returns the type of the component that owns the property.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Diagnostics.Switches">
            <summary>
               Provides predefined switches for enabling / disabling trace
               output or code instrumentation in the Syncfusion shared library.
            </summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.general">
            <summary>General switch for Shared Library.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.Styles">
            <summary>Enable Tracing for the Styles.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.Serialization">
            <summary>Enable Tracing for the Shared Serialization.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.ScrollControl">
            <summary>Enable Tracing for the ScrollControl.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.Timers">
            <summary>Enable Tracing for Timer Start and Stop</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.Workbook">
            <summary>Enable Tracing for Timer Start and Stop.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.BeginEndUpdate">
            <summary>Enable Tracing for BeginUpdate and EndUpdate methods calls</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.MouseController">
            <summary>Enable Tracing for MouseController.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.OperationFeedback">
            <summary>Enable Tracing for OperationFeedback.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.BrushPaint">
            <summary>Enable Tracing for BrushPaint drawing methods.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.ArrowButtonBarEvents">
            <summary>Enable Tracing for ArrowButtonBar events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.ButtonBarEvents">
            <summary>Enable Tracing for ButtonBar events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.RecordNavigationBarEvents">
            <summary>Enable Tracing for RecordNavigationBar events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.RecordNavigationControlEvents">
            <summary>Enable Tracing for RecordNavigationControl events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.SplitterControlEvents">
            <summary>Enable Tracing for SplitterControl events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.TabBarEvents">
            <summary>Enable Tracing for TabBar events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.TabBarSplitterControlEvents">
            <summary>Enable Tracing for TabBarSplitterControl events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.MouseControllerDispatcherEvents">
            <summary>Enable Tracing for MouseControllerDispatcher events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.ScrollControlEvents">
            <summary>Enable Tracing for ScrollControl events.</summary>
        </member>
        <member name="F:Syncfusion.Diagnostics.Switches.ScrollControlFocus">
            <summary>Enable Tracing for Focus events.</summary>
        </member>
        <member name="P:Syncfusion.Diagnostics.Switches.General">
            <summary>
            Returns the General Tracing level for the Grid Library.
            </summary>
        </member>
        <member name="T:Syncfusion.Diagnostics.TraceUtil">
            <summary>
            Provides various diagnostic utilities for tracing methods, exception and more.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.StartTraceFile(System.String)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.CloseTraceFile">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceExceptionCatched(System.Exception)">
            <summary>
            Writes a trace log for the given exception together with information where the exception was caught.
            </summary>
            <param name="e">An Exception.</param>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.IsCalledFrom(System.Reflection.MethodBase)">
            <summary>
             Indicates whether a given procedure is being called by another procedure.
            </summary>
            <param name="method">The method to be looked up in the stack trace.</param>
            <returns>True if method was found; false otherwise.</returns>
            <example>
            <code lang="C#">
            if (TraceUtil.IsCalledFrom(typeof(Form1).GetMethod("Form1_Load", BindingFlags.NonPublic|BindingFlags.Instance)))
            	Debugger.Break()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceCalledFrom">
            <overload>
            Writes a trace log of the current stack.
            </overload>
            <summary>
            Writes a trace log of the current stack.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceCalledFromIf(System.Boolean,System.Int32,System.Object[])">
            <summary>
            Writes a trace log with information about current class and method name and
            string representations of any method arguments if the condition is true.
            </summary>
            <param name="condition">Indicates whether to skip or write the log.</param>
            <param name="args">An array of method arguments.</param>
            <param name="levels">The number of levels to check in call stack.</param>
            <example>The following method shows typical usage of this diagnostic method.
            <code lang="C#">
            private void OnTimerElapsed(object source, ElapsedEventArgs e)
            {
            	TraceUtil.TraceCalledFromIf(Switches.Timers.TraceVerbose, 3);
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceCalledFrom(System.Int32)">
            <summary>
            Writes a trace log of the current stack.
            </summary>
            <param name="levels">The number of method on the stack to trace.</param>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceCurrentMethodInfo(System.Object[])">
            <summary>
            Writes a trace log with information about current class and method name and
            string representations of any method arguments.
            </summary>
            <param name="args">An array of method arguments.</param>
        </member>
        <member name="M:Syncfusion.Diagnostics.TraceUtil.TraceCurrentMethodInfoIf(System.Boolean,System.Object[])">
            <summary>
            Writes a trace log with information about current class and method name and
            string representations of any method arguments if the condition is true.
            </summary>
            <param name="condition">Indicates whether to skip or write the log.</param>
            <param name="args">An array of method arguments.</param>
            <example>The following method shows typical usage of this diagnostic method.
            <code lang="C#">
            private void OnTimerElapsed(object source, ElapsedEventArgs e)
            {
            	TraceUtil.TraceCurrentMethodInfoIf(Switches.Timers.TraceVerbose);
            }
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Diagnostics.MeasureTime">
            <summary>
            Provides a diagnostic utility for measuring performance. 
            </summary>
            <example>The following example display a message box with performance info.
            <code lang="C#">
            		private void button1_Click(object sender, System.EventArgs e)
            		{
            			int rows = (int) this.numericUpDown1.Value;
            
            			this.gridControl1.theData = new VirtGrid.VirtData(rows, 20);
            			this.gridControl1.Refresh();
            
            			using (Syncfusion.Diagnostics.MeasureTime.Measure("gridControl1.TopRowIndex = 500000"))
            			{
            				this.gridControl1.TopRowIndex = 5000000;
            			}
            
            			MessageBox.Show(Syncfusion.Diagnostics.MeasureTime.DumpTimes());
            		}
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Diagnostics.MeasureTime.Measure(System.String)">
            <summary>
                Insert this before a code block that should be measured.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagnostics.MeasureTime.Dispose">
            <summary>
                Ends the code block that should be measured and increments the associated performance counter.
            </summary>
        </member>
        <member name="M:Syncfusion.Diagnostics.MeasureTime.DumpTimes">
            <summary>
                Prints all performance counters into a string and sorts it by ids. All counters will be reset afterwards.
            </summary>
        </member>
        <member name="P:Syncfusion.Diagnostics.MeasureTime.TickCount">
            <summary>
            Returns the time since Reset in microseconds.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.ActiveXSnapshot">
            <summary>
            Provides support for capturing an ActiveX or Windows Forms control to a bitmap.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.TakeSnapshot(System.Object)">
            <overload>
            Captures the contents of an ActiveX control to a bitmap using the IViewObject interface.
            </overload>
            <summary>
            Captures the contents of an ActiveX control to a bitmap using the IViewObject interface.
            </summary>
            <param name="ocx">The ActiveX control.</param>
            <returns>The bitmap with the display contents of the ActiveX control.</returns>
            <remarks>
            The control must have an implementation of the IViewObject interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.TakeSnapshot(System.Object,System.Boolean)">
            <summary>
            Captures the contents of an ActiveX control to a bitmap using the IViewObject interface.
            </summary>
            <param name="ocx">The ActiveX control.</param>
            <param name="preferViewObject2">Indicates whether IViewObject2 interface should be used if available.</param>
            <returns>The bitmap with the display contents of the ActiveX control.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.PrintWindow(System.Windows.Forms.Control)">
            <summary>
            Captures the contents of a Windows Forms control using the WM_PRINT message.
            </summary>
            <param name="control">The control to be captured.</param>
            <returns>The bitmap with the display contents of the Windows Forms control.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.PrintClient(System.Windows.Forms.Control)">
            <summary>
            Captures the contents of a Windows Forms control using the WM_PRINTCLIENT message.
            </summary>
            <param name="control">The control to be captured.</param>
            <returns>The bitmap with the display contents of the Windows Forms control.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.PrintControl(System.Windows.Forms.Control,System.Int32,System.Int32,System.Drawing.Size)">
            <summary>
            Captures the contents of a Windows Forms control using the WM_PRINTCLIENT or WM_PRINT message.
            </summary>
            <param name="control">The control to be captured.</param>
            <param name="msg">WM_PRINT or WM_PRINTCLIENT.</param>
            <param name="flags">Flags used for the WM_PRINT message.</param>
            <param name="size">The size of the window.</param>
            <returns>The bitmap with the display contents of the Windows Forms control.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.BeginResizeNoPaint(System.Windows.Forms.Control,System.Drawing.Size,System.Drawing.Rectangle@)">
            <summary>
            Temporarily resizes the control without updating the screen. Call <see cref="M:Syncfusion.Drawing.ActiveXSnapshot.EndResizeNoPaint(System.Windows.Forms.Control,System.Drawing.Rectangle)"/>
            to switch the control back to regular behavior.
            </summary>
            <param name="c">The target control.</param>
            <param name="size">The new size.</param>
            <param name="bounds">The saved bounds of the control.</param>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.EndResizeNoPaint(System.Windows.Forms.Control,System.Drawing.Rectangle)">
            <summary>
            Ends temporary resizing of a control after you called <see cref="M:Syncfusion.Drawing.ActiveXSnapshot.BeginResizeNoPaint(System.Windows.Forms.Control,System.Drawing.Size,System.Drawing.Rectangle@)"/>.
            </summary>
            <param name="c">The target control.</param>
            <param name="savedBounds">The saved bounds of the control.</param>
        </member>
        <member name="M:Syncfusion.Drawing.ActiveXSnapshot.FakeLeftMouseClick(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Sends a WM_LBUTTONDOWN and WM_LBUTTONUP message to the control at the specified client coordinates.
            </summary>
            <param name="c">The target control.</param>
            <param name="point">The client coordinates where to simulate the click.</param>
        </member>
        <member name="P:Syncfusion.Drawing.ActiveXSnapshot.ForceWmPaintInPrintWindow">
            <summary>
            Indicates whether there are issues with WM_PRINT and it is not properly supported by the framework.
            The property is available to provide a workaround for issues with GenericControlCell and early Whidbey builds. Default is false.
            </summary>
            <remarks>
            <example>
            <code>
            if (Environment.Version.Major >= 2)
               ActiveXSnapshot.ForceWmPaintInPrintWindow = true;
            </code>
            </example>
            </remarks>
        </member>
        <member name="T:Syncfusion.Drawing.AnimationHelper">
            <summary>
            Utility class comes handy when you need to perform simple
            animations in your control.
            </summary>
            <remarks>
            <para>The <see cref="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)"/> method in this class allows you to specify the 
            number of animation positions (0 to N), the direction of animation
            (whether animation is from 0 towards N or from N towards 0), and
            the speed (X) at which animation is performed.</para>
            <para>
            When the <see cref="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)"/> method is called, the current animation position
            is set (<see cref="P:Syncfusion.Drawing.AnimationHelper.AnimationPosition"/> property) which gets reduced (or
            incremented based on the direction of animation) every X time
            interval specified in the <see cref="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)"/> method call, until it reaches
            the other extreme of the Animation position range. Every time
            the <see cref="P:Syncfusion.Drawing.AnimationHelper.AnimationPosition"/> value changes, an <see cref="E:Syncfusion.Drawing.AnimationHelper.AnimationPositionChanged"/> event
            is thrown. Upon reaching the last animation position, an 
            <see cref="E:Syncfusion.Drawing.AnimationHelper.AnimationDone"/> event is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.AnimationHelper.#ctor">
            <summary>
            Creates an instance of the AnimationHelper class.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.AnimationHelper.NeedAnimation">
            <summary>
            Indicates whether more animation positions are to be drawn to complete this animation.
            </summary>
            <returns>True indicates there is more to come; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Defines the animation range: 0 to maxPosition; specifies the
            direction of animation: 0 to maxPositon or maxPosition to 0;
            specifies the interval at which animation should be performed: interval,
            and starts animation.
            </summary>
            <param name="maxPosition">The integer value indicating
            the max position of animation.</param>
            <param name="directionExpand">The direction of animation.</param>
            <param name="interval">The frequency at which animation is performed.</param>
            <remarks>
            This class uses a <see cref="T:System.Windows.Forms.Timer"/> to trigger
            the <see cref="E:Syncfusion.Drawing.AnimationHelper.AnimationPositionChanged"/> event, which means events will
            be thrown within the same thread as this method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.AnimationHelper.StopAnimation">
            <summary>
            Allows you to stop animation abruptly (if it is currently on). 
            This will then throw the <see cref="E:Syncfusion.Drawing.AnimationHelper.AnimationDone"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.AnimationHelper.AnimateNext">
            <summary>
            Triggers <see cref="E:Syncfusion.Drawing.AnimationHelper.AnimationPositionChanged"/> to force drawing next animation position.
            </summary>
            <remarks>
            <para>You can optionally use this method to force animation not waiting for the timer to break.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Drawing.AnimationHelper.MaxAnimationPosition">
            <summary>
            Returns the maximum animation position specified in the
            <see cref="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)"/> method.
            </summary>
            <value>
            An integer value indicating the maximum animation position.
            </value>
        </member>
        <member name="P:Syncfusion.Drawing.AnimationHelper.AnimationPosition">
            <summary>
            Returns the current animation position once animation is started.
            </summary>
            <value>An integer value some where in between (including) 
            0 and <see cref="P:Syncfusion.Drawing.AnimationHelper.MaxAnimationPosition"/>.</value>
        </member>
        <member name="P:Syncfusion.Drawing.AnimationHelper.AnimationOn">
            <summary>
            Indicates whether Animation is on.
            </summary>
            <value>True indicates Animation is on; False otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Drawing.AnimationHelper.AnimationDirectionExpand">
            <summary>
            Indicates in which direction animation is performed.
            </summary>
            <value>True indicates animation is towards <see cref="P:Syncfusion.Drawing.AnimationHelper.MaxAnimationPosition"/>;
            False indicates animation is towards zero.</value>
        </member>
        <member name="E:Syncfusion.Drawing.AnimationHelper.AnimationPositionChanged">
            <summary>
            Will be thrown as the <see cref="P:Syncfusion.Drawing.AnimationHelper.AnimationPosition"/> property changes
            during animation.
            </summary>
            <remarks>
            After calling <see cref="M:Syncfusion.Drawing.AnimationHelper.StartAnimation(System.Int32,System.Boolean,System.Int32)"/>, you should listen to this event to 
            repaint your control for each new animation position.
            </remarks>
        </member>
        <member name="E:Syncfusion.Drawing.AnimationHelper.AnimationDone">
            <summary>
            This will be called when animation is complete or when 
            <see cref="M:Syncfusion.Drawing.AnimationHelper.StopAnimation"/> is called.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.BrushInfo">
            <summary>
            Holds information on how to fill the background of a window or grid cell.
            </summary>
            <remarks>
            BrushInfo lets you specify a solid backcolor, gradient or pattern style with both
            back and forecolor.
            <para/>
            This information can be persisted with serialization.
            <para/>
            You can also convert the information to a string and recreate it from a string.
            <para/>
            BrushInfo is immutable (just like <see cref="T:System.String"/>). You cannot change its values.
            Instead you have to create a new BrushInfo object.
            <para/>
            BrushInfo can also be persisted into code when used as a property in a component designer.
            <para/>
            <see cref="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Drawing.BrushInfo)"/> shows how to fill a rectangle using <see cref="T:Syncfusion.Drawing.BrushInfo"/> 
            information.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor">
            <summary>
            Overloaded. Initializes a new empty instance of BrushInfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with the specified solid backcolor.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color"/> used as solid background.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a solid backcolor and forecolor.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.PatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the pattern.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the pattern.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.PatternStyle,Syncfusion.Drawing.BrushInfoColorArrayList)">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.PatternStyle,System.Drawing.Color[])">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="hatchStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.GradientStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with a gradient style and gradient fill colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.GradientStyle,Syncfusion.Drawing.BrushInfoColorArrayList)">
            <summary>
            Initializes a new instance of BrushInfo with a gradient style and gradient fill colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of gradient fill colors.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.GradientStyle,System.Drawing.Color[])">
            <summary>
            Initializes a new instance of BrushInfo with a hatch style and pattern colors.
            </summary>
            <param name="gradientStyle">A <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>.</param>
            <param name="colors">List of colors.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.BrushStyle,System.Object,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of BrushInfo with any BrushStyle. Internal only.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(System.Int32,Syncfusion.Drawing.BrushInfo)">
            <summary>
            Initializes a new instance of BrushInfo with a new alpha-blend value and copies other information from a given BrushInfo.
            </summary>
            <param name="alpha">The alpha value that should be applied to the forecolor and backcolor of the new brush.</param>
            <param name="br">A BrushInfo that holds information for this BrushInfo.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.#ctor(Syncfusion.Drawing.BrushInfo)">
            <summary>
            Initializes a new instance of BrushInfo and copies its information from a given BrushInfo.
            </summary>
            <param name="brush">A BrushInfo that holds information for this BrushInfo.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.Parse(System.String)">
            <summary>
            Creates a new BrushInfo object and initializes it from a string.
            </summary>
            <param name="s">A string in the format BrushStyle;Style;ForeColor;BackColor.</param>
            <returns>A new BrushInfo object.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.ToString">
            <summary>
            Overloaded. Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.ToString(System.String)">
            <summary>
            Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
            </summary>
            <param name="format">Specifies the format for string. NULL for default, "compact" for a compact string, "G" for more descriptive text.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.ToString(System.String,System.IFormatProvider)">
             <summary>
             Returns the string representation of the brush in the format BrushStyle;Style;ForeColor;BackColor.
             </summary>
             <param name="format">Specifies the format for string. NULL for default, "compact", for a compact string or "G" for more descriptive text.</param>
             <param name="formatProvider">
             The IFormatProvider to use to format the value. <para/>
             -or- <para/>
             A <see langword="NULL"/> reference to obtain the numeric format information from the current locale setting
             of the operating system.
            </param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.Equals(System.Object)">
            <summary>
            Overridden. Compares two BrushInfo object and indicates whether they are equal.
            </summary>
            <param name="obj">The <see cref="T:Syncfusion.Drawing.BrushInfo"/> to compare with the current <see cref="T:Syncfusion.Drawing.BrushInfo"/>. </param>
            <returns>True if the specified Object is equal to the current <see cref="T:Syncfusion.Drawing.BrushInfo"/>; false otherwise.
            </returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.MakeBlackAndWhite">
            <summary>
            Creates a new BrushInfo with the same style but with only black and white colors.
            </summary>
            <returns>A new object with the same style and black and white colors.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.GetBrushKey">
            <summary>
            Returns a string id that you can use to store the BrushInfo in a HashTable.
            </summary>
            <returns>A string with compact identitiy information about the BrushInfo.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the contents of this object into an XML stream.
            </summary>
            <param name="writer">Represents the XML stream.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Not implemented and returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the contents of this object from an XML stream.
            </summary>
            <param name="reader">Represents the XML stream.</param>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.Empty">
            <summary>
            An empty BrushInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.Description">
            <summary>
            Returns a string description of the BrushInfo. See <see cref="M:Syncfusion.Drawing.BrushInfo.ToString(System.String)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.IsEmpty">
            <summary>
            Indicates whether this is an empty object.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.BackColor">
            <summary>
            Returns the backcolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.ForeColor">
            <summary>
            Returns the forecolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.GradientColors">
            <summary>
            Returns the gradient colors.
            </summary>
            <value>A reference to the <see cref="T:Syncfusion.Drawing.BrushInfoColorArrayList"/> instance.</value>
            <remarks><p>This color list will be used to specify the <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors"/>
            or the <see cref="P:System.Drawing.Drawing2D.PathGradientBrush.SurroundColors"/> depending on the
            <see cref="P:Syncfusion.Drawing.BrushInfo.GradientStyle"/> selected.</p>
            <p>The first entry in this list will be the same as the <see cref="P:Syncfusion.Drawing.BrushInfo.BackColor"/> property and
            the last entry (not the 2nd) will be the same as the <see cref="P:Syncfusion.Drawing.BrushInfo.ForeColor"/> property.</p>
            <p>
            Note that this list is Read-only.
            </p>
            </remarks>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.PatternStyle">
            <summary>
            Returns the pattern style.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.GradientStyle">
            <summary>
            Returns the gradient style.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfo.Style">
            <summary>
            Returns the brush style (solid, gradient or pattern).
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.BrushInfoColorArrayList">
            <summary>
            A list of colors returned by the <see cref="P:Syncfusion.Drawing.BrushInfo.GradientColors"/> property
            in the <see cref="T:Syncfusion.Drawing.BrushInfo"/> type.
            </summary>
            <remarks>
            When returned by the <see cref="P:Syncfusion.Drawing.BrushInfo.GradientColors"/> property, this list will
            be made Read-only.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoColorArrayList.#ctor">
            <summary>
            Overloaded. Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoColorArrayList.#ctor(System.Drawing.Color[])">
            <summary>
            Creates a new instance of this class with some colors.
            </summary>
            <param name="colors">An array of colors.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoColorArrayList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Drawing.BrushInfoColorArrayList"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="P:Syncfusion.Drawing.BrushInfoColorArrayList.Item(System.Int32)">
            <summary>
            Returns the color at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.BrushInfoConverter">
            <summary>
                 Provides a way to convert <see cref="T:Syncfusion.Drawing.BrushInfo"/> to a string and from a string.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.BrushInfoConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="T:Syncfusion.Drawing.BrushPaint">
            <summary>
            Paints window background using <see cref="T:Syncfusion.Drawing.BrushInfo"/> information.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Drawing.BrushInfo)">
            <summary>
            Overloaded. Fills the interior of a rectangle using <see cref="T:Syncfusion.Drawing.BrushInfo"/> information.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> structure that represents the rectangle to fill. </param>
            <param name="brush"><see cref="T:Syncfusion.Drawing.BrushInfo"/> object that determines the characteristics of the fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Drawing.BrushInfo)">
            <summary>
            Fills the interior of a rectangle using <see cref="T:Syncfusion.Drawing.BrushInfo"/> information.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="brush"><see cref="T:Syncfusion.Drawing.BrushInfo"/> Object that determines the characteristics of the fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Drawing.GradientStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> Structure that represents the rectangle to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Drawing.GradientStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Drawing.GradientStyle,System.Drawing.Color[])">
            <summary>
            Fills the interior of a rectangle with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="colors">An array of <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Drawing.GradientStyle,System.Drawing.Color[])">
            <summary>
            Fills the interior of a rectangle with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="colors">An array of <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Drawing.PatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a pattern.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> Structure that represents the rectangle to fill. </param>
            <param name="hatchStyle"><see cref="T:Syncfusion.Drawing.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,Syncfusion.Drawing.PatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a pattern.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="hatchStyle"><see cref="T:Syncfusion.Drawing.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a solid color.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Rectangle"/> Structure that represents the rectangle to fill. </param>
            <param name="color">A <see cref="T:System.Drawing.Color"/>.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRectangle(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Fills the interior of a rectangle with a solid color.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.RectangleF"/> Structure that represents the rectangle to fill. </param>
            <param name="color">A <see cref="T:System.Drawing.Color"/>.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRegion(System.Drawing.Graphics,System.Drawing.Region,Syncfusion.Drawing.BrushInfo)">
            <summary>
            Overloaded. Fills the interior of a region using <see cref="T:Syncfusion.Drawing.BrushInfo"/> information.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Region"/> Structure that represents the region to fill. </param>
            <param name="brush"><see cref="T:Syncfusion.Drawing.BrushInfo"/> object that determines the characteristics of the fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRegion(System.Drawing.Graphics,System.Drawing.Region,Syncfusion.Drawing.GradientStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a region with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Region"/> Structure that represents the region to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRegion(System.Drawing.Graphics,System.Drawing.Region,Syncfusion.Drawing.GradientStyle,System.Drawing.Color[])">
            <summary>
            Fills the interior of a region with a gradient.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Region"/> structure that represents the region to fill. </param>
            <param name="gradientStyle"><see cref="T:Syncfusion.Drawing.GradientStyle"/>.</param>
            <param name="colors">An array of <see cref="T:System.Drawing.Color"/> used for the gradient fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRegion(System.Drawing.Graphics,System.Drawing.Region,Syncfusion.Drawing.PatternStyle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills the interior of a region with a pattern.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Region"/> Structure that represents the region to fill. </param>
            <param name="hatchStyle"><see cref="T:Syncfusion.Drawing.PatternStyle"/>.</param>
            <param name="foreColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
            <param name="backColor">A <see cref="T:System.Drawing.Color"/> used for the pattern fill.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillRegion(System.Drawing.Graphics,System.Drawing.Region,System.Drawing.Color)">
            <summary>
            Fills the interior of a region with a solid color.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="r"><see cref="T:System.Drawing.Region"/> Structure that represents the region to fill. </param>
            <param name="color">A <see cref="T:System.Drawing.Color"/>.</param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Color)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <param name="p"></param>
             <param name="color"></param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Drawing.BrushInfo)">
             <summary>
            
             </summary>
             <param name="g"></param>
             <param name="p"></param>
             <param name="brush"></param>
        </member>
        <member name="M:Syncfusion.Drawing.BrushPaint.FillPath(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Drawing.GradientStyle,System.Drawing.Color[])">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="p"></param>
            <param name="gradientStyle"></param>
            <param name="colors"></param>
        </member>
        <member name="T:Syncfusion.Drawing.BrushStyle">
            <summary>
            Specifies the BrushStyle used by <see cref="T:Syncfusion.Drawing.BrushInfo"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.BrushStyle.None">
            <summary>
            The <see cref="T:Syncfusion.Drawing.BrushInfo"/> is an empty object.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.BrushStyle.Solid">
            <summary>
            The <see cref="T:Syncfusion.Drawing.BrushInfo"/> represents a solid fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.BrushStyle.Pattern">
            <summary>
            The <see cref="T:Syncfusion.Drawing.BrushInfo"/> represents a pattern fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.BrushStyle.Gradient">
            <summary>
            The <see cref="T:Syncfusion.Drawing.BrushInfo"/> represents a gradient fill.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.ColorConvert">
            <summary>
            Conversion methods for a <see cref="T:System.Drawing.Color"/> to and from a string.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.ColorConvert.ColorFromString(System.String)">
            <summary>
            	ColorFromString parses a string previously generated with ColorToString and returns a color.
            </summary>
            <param name="parseStr">String generated with ColorToString.</param>
            <returns>
            	Color value that was encoded in parseStr.
            </returns>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.ColorConvert.ColorToString(System.Drawing.Color,System.Boolean)">
            <summary>
            	ColorToString creates a string from a color. All information such as 
            	knownColor and name in the color structure will be preserved. 
            </summary>
            <param name="color"> </param>
            <param name="writeName"> </param>
            <returns>
            	A string that can be passed as parameter to ColorFromString.
            </returns>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorHSL">
            <summary>
            HSL color space.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSL.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSL.#ctor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="pColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSL.Modify(System.Int32,System.Int32,System.Int32)">
            <summary>
            Method converts Color defined in RGB values to HSL color space.
            </summary>
            <param name="hue"> Hue value. </param>
            <param name="sat"> Saturation value. </param>
            <param name="lum"> Luminance value. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSL.Initialize(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSL.ToRGB">
            <summary>
            Method converts Color defined in HSL values to RGB color space.
            </summary>
            <param name="h"> Hue value. </param>
            <param name="s"> Saturation value. </param>
            <param name="l"> Luminance value. </param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSL.m_iH">
            <summary>
            Hue component of a color space. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSL.m_iS">
            <summary>
            Saturation component of a color space.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSL.m_iL">
            <summary>
            Luminance component of a color space.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSL.H">
            <summary>
            Gets or sets hue component of a color space. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSL.S">
            <summary>
            Gets or sets saturation component of a color space. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSL.L">
            <summary>
            Gets or sets luminance component of a color space. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorHSV">
            <summary>
            HSV color space.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSV.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <param name="s"></param>
            <param name="l"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSV.#ctor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="pColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSV.Modify(System.Int32,System.Int32,System.Int32)">
            <summary>
            Method converts Color defined in RGB values to HSL color space.
            </summary>
            <param name="hue"> Hue value. </param>
            <param name="sat"> Saturation value. </param>
            <param name="lum"> Luminance value. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSV.Initialize(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ColorHSV.ToRGB">
            <summary>
            Method converts Color defined in HSV values to RGB color space.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSV.m_iH">
            <summary>
            Hue component of a color space. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSV.m_iS">
            <summary>
            Saturation component of a color space.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ColorHSV.m_iV">
            <summary>
            Value component of a color space.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSV.H">
            <summary>
            Gets or sets hue component of a color space. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSV.S">
            <summary>
            Gets or sets saturation component of a color space. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ColorHSV.V">
            <summary>
            Gets or sets value component of a color space. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ControlDrawing">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ControlDrawing.DrawTextFlags">
            <summary>
            Inflate offset for drawing selection rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ControlDrawing.offset">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawAlignedText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,System.Drawing.ContentAlignment)">
            <summary></summary>
            <param name="g"/>
            <param name="text"/>
            <param name="font"/>
            <param name="color"/>
            <param name="rc"/>
            <param name="align"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.BorderStyle,System.Windows.Forms.Border3DStyle,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="borderStyle"/>
            <param name="border3DStyle"/>
            <param name="borderSingle"/>
            <param name="borderColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.BorderStyle,System.Windows.Forms.Border3DStyle,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Windows.Forms.Border3DSide)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="borderStyle"/>
            <param name="border3DStyle"/>
            <param name="borderSingle"/>
            <param name="borderColor"/>
            <param name="sides"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawFillColor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="fillColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawVerticalGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="color1"/>
            <param name="color2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="color1"/>
            <param name="color2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.GetGradientBrush(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <returns></returns>
            <param name="rc"/>
            <param name="color1"/>
            <param name="color2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.GetVerticalGradientBrush(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <returns></returns>
            <param name="rc"/>
            <param name="color1"/>
            <param name="color2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Boolean)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="img"/>
            <param name="stretchImage"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawTube(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="color1"/>
            <param name="color2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.GetTubeBrush(System.Drawing.Color,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary></summary>
            <returns></returns>
            <param name="color1"/>
            <param name="color2"/>
            <param name="rc"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawMultipleGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ArrayList,System.Boolean)">
            <summary></summary>
            <param name="g"/>
            <param name="rc"/>
            <param name="foreColors"/>
            <param name="vertical"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.Transform(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Methods recalculate top left and right bottom points 
            using Graphics matrix settings. This method required when we will
            draw on Graphics created from HDC that does not have applied transformations.
            Very useful when used ControlPaint class for drawing.</summary>
            <param name="g">reference on Graphics</param>
            <param name="rect">rectangle to recalculate.</param>
            <returns>Transformed rectangle.</returns>
            <remarks>Methods will work fine only in limited cases. If on graphics applied 
            rotations then in most cases will be wrong calculated rectangle.</remarks>
            <example language="C#">
            Rectangle rcBorders = ControlDrawing.Transform( g, this.Bounds );
            ControlDrawing.DrawBorderInternal( g, rcBorders, this.BorderStyle, this.Border3DStyle, this.BorderSingle, this.BorderColor, this.BorderSides );
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.Transform(System.Drawing.Graphics,System.Drawing.Point)">
            <summary>Methods recalculate point using Graphics matrix settings. 
            This method required when we will draw on Graphics created from HDC 
            that does not have applied transformations. Very useful when used 
            ControlPaint class for drawing.</summary>
            <param name="g">reference on Graphics</param>
            <param name="point">Point to recalculate.</param>
            <returns>Transformed point.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.DrawBorderInternal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.BorderStyle,System.Windows.Forms.Border3DStyle,System.Windows.Forms.ButtonBorderStyle,System.Drawing.Color,System.Windows.Forms.Border3DSide,System.Boolean)">
            <summary>
            Method allow to draw borders according to specified styles.
            </summary>
            <param name="g">Reference on Graphics.</param>
            <param name="rc">Output rectangle.</param>
            <param name="borderStyle">border style.</param>
            <param name="border3DStyle">3D border style.</param>
            <param name="borderSingle">border style in single mode.</param>
            <param name="borderColor">border color in single mode.</param>
            <param name="sides">sides that have to be drawn by methods.</param>
            <param name="useTransform">True - fix known bug in method, otherwise leave 
            old code (for compatibility only).</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.MeasureDisplayStringSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Boolean)">
            <summary>
            Returns	the	width	required to	draw the text	specified	using	the	font specified.
            </summary>
            <param name="graphics">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="text">The text	that is	to be	drawn.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> using which to	draw.</param>
            <param name="mirrored">True - we use RTL, otherwise normal drawing.</param>
            <returns>Width required.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ControlDrawing.MeasureDisplayStringSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Boolean,System.Int32)">
            <summary>Measure string with limit by width.</summary>
            <param name="graphics"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="mirrored"></param>
            <param name="width">-1 - apply single line mode for measuring, values greater zero 
            enables multiline measuring mode.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ControlDrawing.Offset">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Drawing.INonClientPaintingSupport">
            <internalonly/>
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.INonClientPaintingSupport.NonClientPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Implement this method and draw your NonClient area using the passed in parameters.
            </summary>
            <param name="e">The PaintEventArgs using this to draw the non client area.</param>
            <param name="displayRect">The control's window bounds into which to draw. Left and Top are usually zero.</param>
            <param name="windowRectInScreen">The control's bounds in screen co-ordinates.</param>
            <returns>
            HRgn (as IntPtr) that excludes the region you just drew in the displayRect.
            </returns>
        </member>
        <member name="T:Syncfusion.Drawing.DrawingUtils">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.GetDesktopBounds(System.Windows.Forms.Control)">
            <summary></summary>
            <returns></returns>
            <param name="c"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.NCPaintHelper(System.Windows.Forms.Control,Syncfusion.Drawing.INonClientPaintingSupport,System.Windows.Forms.Message@)">
            <summary>
            Call this method to help you prepare for non client painting. This method will in turn
            call your INonClientPaintingSupport.NonClientPaint implementation.
            </summary>
            <param name="control">The control in which we will be drawing.</param>
            <param name="ncPaintDelegate">The INonClientPaintingSupport implementation to which we will delegate the final non client drawing.</param>
            <param name="m">The WM_NCPAINT message.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawDesignTimeBorder(System.Drawing.Graphics,System.Windows.Forms.Control)">
            <summary></summary>
            <param name="g"/>
            <param name="control"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawShadow(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)">
            <summary></summary>
            <param name="g"/>
            <param name="iconImage"/>
            <param name="left"/>
            <param name="top"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.PaintButtonGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Paints a rectangular area with the given colors in Office2007 style.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="clrBorder">The border color.</param>
            <param name="topFirst">The top gradient start color.</param>
            <param name="topLast">The top gradient end color.</param>
            <param name="bottomFirst">The bottom gradient start color.</param>
            <param name="bottomLast">The bottom gradient end color.</param>
            <param name="bottomLine">The bottom line color.</param>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32)">
            <summary></summary>
            <param name="g"/>
            <param name="image"/>
            <param name="left"/>
            <param name="top"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Int32,System.Int32,System.Single)">
            <summary></summary>
            <param name="g"/>
            <param name="image"/>
            <param name="left"/>
            <param name="top"/>
            <param name="transparency"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary></summary>
            <param name="g"/>
            <param name="image"/>
            <param name="destRect"/>
            <param name="srcRect"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawGrayedImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.RectangleF,System.Single)">
            <summary></summary>
            <param name="g"/>
            <param name="image"/>
            <param name="destRect"/>
            <param name="srcRect"/>
            <param name="transparency"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawTransparentImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image,System.Single)">
            <summary></summary>
            <param name="g"/>
            <param name="rect"/>
            <param name="image"/>
            <param name="transparency"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.GetRoundedRectangle(System.Drawing.Rectangle,System.Int32)">
            <param name="rect"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.AdjustForeColorBrightnessForBackColor(System.Drawing.Color@,System.Drawing.Color,System.Single)">
            <summary>
            Adjusts the specified forecolor's brightness based on the specified backcolor and preferred contrast.
            </summary>
            <param name="foreColor">The forecolor to adjust.</param>
            <param name="backColor">The backcolor for reference.</param>
            <param name="prefContrastLevel">Preferred contrast level.</param>
            <remarks>
            This method checks if the current contrast in brightness between the 2 colors is
            less than the specified contrast level. If so, it brightens or darkens the forecolor appropriately.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawImageViaImageList(System.Drawing.Graphics,System.Windows.Forms.ImageList,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws an image using the ImageList, taking into account the Graphics.ClipBounds.
            </summary>
            <param name="g">The Graphics object into which to draw.</param>
            <param name="il">The ImageList containing the image.</param>
            <param name="index">The index of the image.</param>
            <param name="rect">The rectangle into which to draw.</param>
            <remarks>
            This method will use ImageList_DrawEx to draw the image (to use the transparency info in the embedded images).
            We use the PInvoke rather than ImageList.Draw because, the Draw method
            uses the PaintEventArgs.ClipRectangle rather than g.ClipBounds (both
            can be different) and here we force the ClipBounds on the DC.
            <p>
            Also, you do not have to use this method if your images will never be
            drawn clipped (in that case just use ImageList.Draw).
            </p></remarks>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draws specified image to graphics context.
            If image size is less than maxWidth, maxHeight parameters, it will be drawn
            without any changes, otherwise - it will be scaled proportionally to those values.
            </summary>
            <param name="g">Graphics context.</param>
            <param name="image">Image object which must be drawing.</param>
            <param name="x">X coordinate of the destination location.</param>
            <param name="y">Y coordinate of the destination location.</param>
            <param name="maxWidth">Maximum width of the image.</param>
            <param name="maxHeight">Maximum height of the image.</param>
        </member>
        <member name="M:Syncfusion.Drawing.DrawingUtils.ConvertHSBToRGB(System.Single,System.Single,System.Single,System.Single@,System.Single@,System.Single@)">
            <summary>
            Converts the HSB value to RGB.
            </summary>
            <param name="h">Hue.</param>
            <param name="s">Saturation.</param>
            <param name="v">Brightness.</param>
            <param name="r">Red.</param>
            <param name="g">Green.</param>
            <param name="b">Blue.</param>
            <remarks>
            This does not seem to yield accurate results, but very close.
            </remarks>
        </member>
        <member name="T:Syncfusion.Drawing.PanoseFontFamilyTypes">
            <summary>
            Enumeration of Panose Font Family Types.  These can be used for
            determining the similarity of two fonts or for detecting non-character
            fonts like WingDings.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_ANY">
            <summary>
             Any
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_NO_FIT">
            <summary>
            No Fit
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_FAMILY_TEXT_DISPLAY">
            <summary>
            Text and Display
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_FAMILY_SCRIPT">
            <summary>
            Script
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_FAMILY_DECORATIVE">
            <summary>
            Decorative
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PanoseFontFamilyTypes.PAN_FAMILY_PICTORIAL">
            <summary>
            Pictorial                      
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.FontUtil">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.FontUtil.privateFonts">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.AddMemoryFont(System.IO.Stream)">
            <summary></summary>
            <returns></returns>
            <param name="s"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.AddMemoryFont(System.IntPtr,System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="memory"/>
            <param name="length"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.AddFontFile(System.String)">
            <summary></summary>
            <returns></returns>
            <param name="fileName"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.GetPrivateFont(System.String)">
            <summary></summary>
            <returns></returns>
            <param name="familyName"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.CreateFont(System.String,System.Single)">
            <summary></summary>
            <returns></returns>
            <param name="facename"/>
            <param name="size"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.CreateFont(System.String,System.Single,System.Drawing.FontStyle)">
            <summary></summary>
            <returns></returns>
            <param name="facename"/>
            <param name="size"/>
            <param name="fontStyle"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.CreateFont(System.Drawing.Font,System.Drawing.FontStyle)">
            <summary></summary>
            <returns></returns>
            <param name="srcFont"/>
            <param name="fontStyle"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.CreateFont(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)">
            <summary></summary>
            <returns></returns>
            <param name="facename"/>
            <param name="size"/>
            <param name="fontStyle"/>
            <param name="unit"/>
        </member>
        <member name="M:Syncfusion.Drawing.FontUtil.PanoseFontFamilyType(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Gets the <see cref="T:Syncfusion.Drawing.PanoseFontFamilyTypes"/> for the specified font.
            </summary>
            <param name="graphics">A graphics object to use when detecting the Panose
            family.</param>
            <param name="font">The font to check.</param>
            <returns>The Panose font family type.</returns>
        </member>
        <member name="P:Syncfusion.Drawing.FontUtil.PrivateFonts">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Drawing.ImageListSourceFiles">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageListSourceFiles.il">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageListSourceFiles.sourceFilesList">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageListSourceFiles.baseDir">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.Dispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.RemoveRelativePaths">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.ApplyRelativePaths">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.Collection_Changed(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Drawing.ImageListSourceFiles.OnSourceFilesChanged">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Drawing.ImageListSourceFiles.ImageList">
            <summary>
            Gets / sets the ImageList to wrap around.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.ImageListSourceFiles.BaseDirectory">
            <summary>
            Gets/ sets the base directory from which the images will be added.
            </summary>
            <remarks>
            This helps to maintain a relative path in the SourceFiles list.
            </remarks>
        </member>
        <member name="P:Syncfusion.Drawing.ImageListSourceFiles.SourceFiles">
            <summary>
            Returns the source of the images in the underlying ImageList.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.ImageListSourceFiles.Designer">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Drawing.SourceImageFilesEditor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.SourceImageFilesEditor.#ctor(System.Type)">
            <summary><para>Initializes a new instance of the <see cref="T:Syncfusion.Drawing.SourceImageFilesEditor"/> class.</para></summary>
            <param name="type">The type of the collection to edit.</param>
        </member>
        <member name="M:Syncfusion.Drawing.SourceImageFilesEditor.CreateInstance(System.Type)">
            <summary><para>Creates an instance of the specified type in the collection.</para></summary>
            <param name="type">The type of the image to insert in the collection.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.SourceImageFilesEditor.SetItems(System.Object,System.Object[])">
            <summary></summary>
            <returns></returns>
            <param name="editValue"/>
            <param name="value"/>
        </member>
        <member name="T:Syncfusion.Drawing.DrawIconHelper">
            <summary>
            Apply functionality to choose alpha-blended icon and correctly change it to bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.DrawIconHelper.m_drawIcons">
            <summary>
            Stores info about drawing icons.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.DrawIconHelper.c_masIconWidth">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.DrawIconHelper.GetIconToDraw(System.Drawing.Icon,System.Object)">
            <summary></summary>
            <returns></returns>
            <param name="icon"/>
            <param name="relatedObject"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawIconHelper.component_Disposed(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawIconHelper.IconToBitmap(Syncfusion.Runtime.InteropServices.NativeMethods.ICONINFO)">
            <summary></summary>
            <returns></returns>
            <param name="ii"/>
        </member>
        <member name="M:Syncfusion.Drawing.DrawIconHelper.FixAlphaBitmap(System.Drawing.Bitmap)">
            <summary></summary>
            <returns></returns>
            <param name="bmSource"/>
        </member>
        <member name="T:Syncfusion.Drawing.DrawIconHelper.IconDrawInfo">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.DrawIconHelper.IconDrawInfo.bIsAlphablended">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.DrawIconHelper.IconDrawInfo.nIconWidth">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.DrawIconHelper.IconDrawInfo.#ctor(System.Boolean,System.Int32)">
            <summary></summary>
            <param name="alphaBlended"/>
            <param name="width"/>
        </member>
        <member name="T:Syncfusion.Drawing.CMirroredDrawer">
            <summary>
            Utility class for mirroring graphics output if needed.
            </summary>
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.DEF_ADVANCED_GR_STATE">
            <summary>
            Value of advanced graphics state.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.DEF_MULTI_MODE">
            <summary>
            Mode of transformation matrix multiplication.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_gfxTarget">
            <summary>
            Graphics object for target context.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_gfxCanvas">
            <summary>
            Temporary virtual Graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_bmpCanvas">
            <summary>
            Temporary bitmap object.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_rectTargetBounds">
            <summary>
            Target rectangle. 
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_rectCanvas">
            <summary>
            Rectangle of virtual temporary area.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_pathCanvas">
            <summary>
            Target graphics path.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_bDrawMirrored">
            <summary>
            Indicates whether image must be mirrored.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_bOSSupports">
            <summary>
            Indicates whether OS supports needed API functions.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_oldGraphicsMode">
            <summary>
            Holds old value of source graphics mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_oldMatrix">
            <summary>
            Holds old value of source graphics transformation.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_gfxHandleWrap">
            <summary>
            Handle wrapper of graphics object.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.CMirroredDrawer.m_gfxHandle">
            <summary>
            Handle of graphics object.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.#ctor(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Overloaded. Creates a new mirror object for drawing mirrored images.
            </summary>
            <param name="gfxTarget">Source graphics object.</param>
            <param name="pathTarget">Source graphics path object.</param>
            <param name="bDrawMirrored">If True  mirror output; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Creates a new mirror object for drawing mirrored images.
            </summary>
            <param name="gfxTarget">Source graphics object.</param>
            <param name="rectBounds">Source rectangle structure.</param>
            <param name="bDrawMirrored">If True mirror output; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Overloaded ctor.. as a workaround for Themed Mirrored rendering issue.
            <para/>
            Creates a new mirror object for drawing mirrored images.
            </summary>
            <param name="gfxTarget">Source graphics object.</param>
            <param name="rectBounds">Source rectangle structure.</param>
            <param name="bDrawMirrored">If True mirror output; False otherwise.</param>
            <param name="bOSSupports">False as a workaround when drawing themed mirrored graphics.</param>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.Dispose">
            <summary>
            Disposes all resources, but first paints all data 
            from the buffer to source device context.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.Initialize(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Initializes an object.
            </summary>
            <param name="gfxTarget">Source graphics object.</param>
            <param name="rectBounds">Source rectangle structure.</param>
            <param name="bDrawMirrored">If True mirror output; False otherwise.</param>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.IsSupportedByOS">
            <summary>
            Checks OS Version for API functions support.
            Need NT 3.1 or later.
            </summary>
            <returns>True if current OS is NT 3.1 or later; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.TransformGraphics">
            <summary>
            Transforms graphics.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.RestoreGraphics">
            <summary>
            Restores graphics to its previous state.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.CMirroredDrawer.Flush">
            <summary>
            Flushes all drawing data to destination if needed.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.CMirroredDrawer.VirtualGfx">
            <summary>
            Returns virtual graphics context object.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.CMirroredDrawer.VirtualBounds">
            <summary>
            Returns virtual rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.CMirroredDrawer.VirtualPath">
            <summary>
            Returns virtual Graphics path object.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.CMirroredDrawer.NeedBitmap">
            <summary>
            Indicates whether additional bitmap is needed.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsAutoAfineTransfrom">
            <summary><para>
            Class does 2D ratio and offset tranformation for <see cref="T:System.Drawing.Graphics"/> object using <see cref="P:System.Drawing.Graphics.Transform"/> property.
            </para><para>
            Transform is done in constructor and reverted in Dispose() method.
            </para></summary>
            <remarks>
            Supposed to be used with <see cref="!:using"/> keyword.
            </remarks>
        </member>
        <member name="F:Syncfusion.Drawing.GraphicsAutoAfineTransfrom.m_gph">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Drawing.GraphicsAutoAfineTransfrom.m_matrixPrev">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoAfineTransfrom.#ctor(System.Drawing.Graphics,System.Single,System.Single,System.Single,System.Single)">
            <summary></summary>
            <param name="gph"/>
            <param name="fRatioX"/>
            <param name="fRatioY"/>
            <param name="fOffsetX"/>
            <param name="fOffsetY"/>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoAfineTransfrom.System#IDisposable#Dispose">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsAutoMirrorX">
            <summary><para>
            Class does 2D mirroring for X axis for <see cref="T:System.Drawing.Graphics"/>.
            </para><para>
            Transform is done in constructor and reverted in Dispose() method.
            </para></summary>
            <remarks>
            Supposed to be used with <see cref="!:using"/> keyword.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoMirrorX.#ctor(System.Drawing.Graphics,System.Single,System.Single)">
            <summary></summary>
            <param name="gph"/>
            <param name="fOffsetX"/>
            <param name="fOffsetY"/>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoMirrorX.#ctor(System.Drawing.Graphics,System.Single)">
            <summary></summary>
            <param name="gph"/>
            <param name="fOffsetX"/>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsAutoMirrorY">
            <summary><para>
            Class does 2D mirroring for Y axis for <see cref="T:System.Drawing.Graphics"/>.
            </para><para>
            Transform is done in constructor and reverted in Dispose() method.
            </para></summary>
            <remarks>
            Supposed to be used with <see cref="!:using"/> keyword.
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoMirrorY.#ctor(System.Drawing.Graphics,System.Single,System.Single)">
            <summary></summary>
            <param name="gph"/>
            <param name="fOffsetX"/>
            <param name="fOffsetY"/>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsAutoMirrorY.#ctor(System.Drawing.Graphics,System.Single)">
            <summary></summary>
            <param name="gph"/>
            <param name="fOffsetY"/>
        </member>
        <member name="T:Syncfusion.Drawing.GradientStyle">
            <summary>
            Specifies the Gradient style used by the <see cref="P:Syncfusion.Drawing.BrushInfo.GradientStyle"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.ForwardDiagonal">
            <summary>
            ForwardDiagonal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.BackwardDiagonal">
            <summary>
            BackwardDiagonal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.Horizontal">
            <summary>
            Horizontal Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.Vertical">
            <summary>
            Vertical Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.PathRectangle">
            <summary>
            PathRectangle Gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.GradientStyle.PathEllipse">
            <summary>
            PathEllipse Gradient.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.GradientStyleEditor">
            <summary>
               Provides a <see cref="T:System.Drawing.Design.UITypeEditor"/> for the <see cref="T:Syncfusion.Drawing.GradientStyle"/> enumeration.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.GradientStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.GradientStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <override/>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event of
            a <see cref="T:Syncfusion.Drawing.GraphicsProvider"/> instance.
            </summary>
            <remarks>
            The event lets you apply custom settings for the Graphics object, before
            other routines draw to the object.
            </remarks>
        </member>
        <member name="F:Syncfusion.Drawing.GraphicsEventArgs.Empty">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsEventArgs.#ctor(System.Drawing.Graphics)">
            <overload>
            Initializes a new empty <see cref="T:Syncfusion.Drawing.GraphicsEventArgs"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Drawing.GraphicsEventArgs"/> with a <see cref="P:Syncfusion.Drawing.GraphicsEventArgs.Graphics"/> object.
            </summary>
            <param name="graphics">The graphics object.</param>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsEventArgs.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.Drawing.GraphicsEventArgs"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.GraphicsEventArgs.Graphics">
            <summary>
            Returns the window graphics object.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsEventHandler">
            <summary>
            Represents a method that handles a <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event of
            a <see cref="T:Syncfusion.Drawing.GraphicsProvider"/> instance.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.IGraphicsProvider">
            <summary>
            Implements an interface that returns a graphics context when needed and raises a 
            <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event to initialize the graphics object.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.IGraphicsProvider.Graphics">
            <summary>
            Creates and returns a cached graphics object.
            </summary>
        </member>
        <member name="E:Syncfusion.Drawing.IGraphicsProvider.PrepareGraphics">
            <summary>
            Called after a new <see cref="P:Syncfusion.Drawing.IGraphicsProvider.Graphics"/> object was created and gives the handler
            a chance to initialize the graphics context.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.GraphicsProvider">
            <summary>
            Returns a graphics context when needed and raises a 
            <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event to initialize the graphics object.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsProvider.#ctor(System.Drawing.Graphics)">
            <overload>
            Initializes a new empty <see cref="T:Syncfusion.Drawing.GraphicsProvider"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Drawing.GraphicsProvider"/> with a <see cref="P:Syncfusion.Drawing.GraphicsProvider.Graphics"/> object.
            </summary>
            <param name="g">The Graphics object that will be used.</param>
            <remarks>The <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event will not be fired when this type
            is instantiated via this constructor.</remarks>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsProvider.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Drawing.GraphicsProvider"/> with a <see cref="T:System.Windows.Forms.Control"/> object.
            </summary>
            <param name="control">The control that will be used for creating the graphics object.</param>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsProvider.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Syncfusion.Drawing.GraphicsProvider"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsProvider.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.GraphicsProvider.OnPrepareGraphics(Syncfusion.Drawing.GraphicsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Drawing.GraphicsEventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Drawing.GraphicsProvider.PrepareGraphics">
            <summary>
            Called after a new <see cref="P:Syncfusion.Drawing.GraphicsProvider.Graphics"/> object was created and gives the handler
            a chance to initialize the graphics context.
            </summary>
        </member>
        <member name="P:Syncfusion.Drawing.GraphicsProvider.Graphics">
            <summary>
            Creates and returns a cached graphics object.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.DisplayDCGraphicsProvider">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Drawing.DisplayDCGraphicsProvider.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageListAdvActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdvActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the ClockActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdvActionList.InitializeActionList">
            <summary>
            Overrridden InitializeActionList.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdvActionList.Images">
            <summary>
            Gets the image collection
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CustomButton">
            <summary>
            Class for Custom Button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CustomButton.IsCustomButton">
            <summary>
            Gets/Sets if this is Custom Buttons
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv">
            <summary>
            Class for MessageBoxMetroStyleFormAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FW_NORMAL">
            <summary>
             Normal font weight
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.captionButtonHoverColor">
            <summary>
            Hover Color for CaptionButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.touchMode">
            <summary>
            Gets/Sets touch enabled
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ResetShowMaximizeBox">
            <summary>
            Reset the value of the ShowMaximizeBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ShouldSerializeShowMaximizeBox">
            <summary>
            Serializing the value of the ShowMaximizeBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ShouldSerializeShowMinimizeBox">
            <summary>
            Serializing the value of the ShowMinimizeBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ResetShowMinimizeeBox">
            <summary>
            Reset the value of the ShowMinimizeBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ResetShowMinimizeBox">
            <summary>
            Reset the value of the ShowMinimizeBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.ApplyScaleToControl(System.Single)">
            <summary>
            applies the scaling
            </summary>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.Touch(System.Windows.Forms.Control)">
            <summary>
            applies the scaling
            </summary>
            <param name="ctr"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="specified"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnHandleCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnStyleChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnRightToLeftLayoutChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetScalingFactor">
            <summary>
            Get Scaling Factor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcCalcSize(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcPaint(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcHitTest(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcActivate(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param> 
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcMouseLeave(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmNcLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmLButtonUp(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmCaptureChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmSetIcon(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmSetText(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmGetMinMaxInfo(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmSetCursor(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmSysCommand(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnWmCotextMenu(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnCompositionChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.BaseWndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.UpdateRegion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.UpdateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetFormPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetFormPath(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetRoundedPolygon(System.Drawing.Rectangle,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.InvalidateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetHitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetButtonId(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetControlButtonId(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt">pt - coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetButtonId(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt">pt - coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.IsButtonEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrame(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameCaption(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.HideControlboxHighlights">
            <summary>
            Disabling the controlbox highlights
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.adjustvalueForDPI">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="rc"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameButtonBackgroundSelected(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameButtonBackgroundPressed(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameButtonGradient(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
            <param name="color_4"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameButtonFlash(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameButtonBorder(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.DrawFrameBorders(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetMaxRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetButtonImage(System.Int32)">
            <summary>
            Gets Image for a button by specific ID.
            </summary>
            <param name="buttonID"> Button ID that indicates Image. </param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetButtonCommand(System.Int32)">
            <summary>
            Gets system command by specific buttonID.
            </summary>
            <param name="buttonID"> Button ID that indicates system command. </param>
            <returns> </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.MoveWindow(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.SizeWindow(System.Windows.Forms.Message@,System.Int32)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="command"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.GetIsCompositionEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.TrackPopupMenu(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hMenu"></param>
            <param name="uFlags"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nReserved"></param>
            <param name="hWnd"></param>
            <param name="prcRect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.InvalidateOnDemand">
            <summary>
            Invalidates client area if MetroScheme back color is used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.OnColorSchemeChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Office2007Form.ColorScheme"/> property is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.refresh">
            <summary>
            variable to check whether the mouse is moved over the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bActive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bMouseIsTracked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_frameLayout">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_selectedButton">
            <summary>
            Selected system button. (SB__MAX - no button is selected)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_pressedButton">
            <summary>
            Pressed system button. (SB__MAX - no button is pressed)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_highlightedButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bSuppressSizing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_pBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_pSeparatorDark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_pSeparatorLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_systemButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bmpHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_systemCommands">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_iSystemHelpCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_blTitle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_blFrameButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_blFrameButtonBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bUseOffice2007ThemeBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bDisableOffice2007Style">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.applyAeroTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_bCompositionEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_captionFont">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.m_captionAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.captionForeColor">
            <summary>
            CaptionText Color
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.labelLocation">
            <summary>
            location for label in caption
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.captionImages">
            <summary>
            CaptionImage Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.captionLabels">
            <summary>
            LabelCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.Border">
            <summary>
            BorderColor to highlights the ControlBox
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.isDisablingHighlights">
            <summary>
            Value for show/hide the highlights 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.DisableOffice2007Style">
            <summary>
            Gets/sets if to disable Office2007 look and feel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ShowMouseOver">
            <summary>
            Gets or Sets Mouse over color for CaptionButtons
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.MetroColor">
            <summary>
            Gets or Sets the value for CaptionBarColor BorderColor MetroColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionBarColor">
            <summary>
            Gets or Sets the value for CaptionBarColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionVerticalAlignment">
            <summary>
            Gets/Sets the value for CaptionVerticalAlignment
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.BorderColor">
            <summary>
            Gets or Sets the value for CaptionBarColor BorderColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionButtonColor">
            <summary>
            Gets/Sets the value for CaptionButtonColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionButtonHoverColor">
            <summary>
            Gets/Sets the value for CaptionButtonHoverColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionBarHeight">
            <summary>
            Gets or Sets value for CaptionBarHeight
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.EnableTouchMode">
            <summary>
            Gets/Sets  touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.BorderThickness">
            <summary>
            Gets or Set the valur for BorderThickness
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ApplyAeroTheme">
            <summary>
            Gets/sets if to Force the OS Aero theme look and feel when Office2007Visual style is enabled.
            </summary>
            <remarks>
            If DisableOffice2007Style is set to true then the ordinary form drawn will still have the aero theme applied
            as the default frame is drawn in the base.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.AutoScroll">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ColorScheme">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ColorSchemeIsManaged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionFont">
            <summary>
            Gets or sets the font of the form's title.
            </summary>
            Don't rename this property. Name is important for CodeDomSerialization order.
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionForeColor">
            <summary>
            Gets or sets the color for caption in titlebar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionAlign">
            <summary>
            Gets or sets the alignment of of the form's title. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.DropShadow">
            <summary>
            Gets or Set Value to Drop Shadow to the form
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ColorTable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsRightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.SelectedButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.PressedButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.HighlightedButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.MaximizeButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.MinimizeButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.TitleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsMinimized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ShowMaximizeBox">
            <summary>
            Gets / set the value to enable the MaximizeBox
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ShowMinimizeBox">
            <summary>
            Gets / set the value to enable the MinimizeBox
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsMaximized">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsSizeable">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.DesktopRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.ParentClientRectangle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.UseOffice2007SchemeBackColor">
            <summary>
            Specifies whether current selected Office2007 scheme background color is used to fill form's backround is used.
            If false <see cref="!:Form.Background"/> is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionFontInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.SystemCaptionFont">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CreateParams">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionLabels">
            <summary>
            Gets/Sets the label for form caption
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.CaptionImages">
            <summary>
            Gets/Sets the CaptionImage for form caption
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.IsMaximized(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.AdjustWindowRectEx(Syncfusion.Runtime.InteropServices.NativeMethods.RECT@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="dwStyle"></param>
            <param name="bMenu"></param>
            <param name="dwExStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_form">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMdiIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMdiMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMdiMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMdiClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_rcMdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_titleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_captionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_captionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.m_iBorderWidth">
            <summary>
            Border width of the Office2007Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.TextBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.IconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.CloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.HelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MdiIconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MdiMinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MdiMaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MdiCloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.MdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.TitleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.CaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.CaptionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.BorderWidth">
            <summary>
            Gets border width of the Office2007Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.SysCaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroForm.FrameLayoutInfo.SysBorderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroForm.CaptionManager.#ctor(Syncfusion.Windows.Forms.MetroForm,System.Boolean)">
            <summary>
            
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.c_nHorzPad">
            <summary>
            Gets the horizontal padding
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.c_nVertPad">
            <summary>
            Gets the vertical padding
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.LockWindowUpdate(System.IntPtr)">
            <summary>
            Lock Window update function
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.btnHeight">
            <summary>
            Holds the Button height
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.details" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.ClickedIndex" -->
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.CustomBtnCollection">
            <summary>
            Custom Button Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.CustomButtonsForeColor">
            <summary>
            Defines the CustomButton ForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.CustomButtonsBackColor">
            <summary>
            Defines the CustomButton BackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_buttonsPanel">
            <summary>
            Variable for buttons panel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_ok">
            <summary>
            Variable for ok ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_cancel">
            <summary>
            Variable for cancel ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_yes">
            <summary>
            Variable for yes ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_ignore">
            <summary>
            Variable for ignore ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_retry">
            <summary>
            Variable for retry ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_abort">
            <summary>
            Variable for abort ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_no">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_details">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_spaceBtn">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_buttons">
            <summary>
            Gets MessageBoxButtons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_custombuttons">
            <summary>
            Gets Custom MessageBox Buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_icon">
            <summary>
            Gets MessageBoxIcon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_defaultButton">
            <summary>
            Gets MessageBoxDefaultButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_options">
            <summary>
            Gets MessageBoxOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_owner">
            <summary>
            Variable for owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.m_helpButtonClicked">
            <summary>
            Variable for CancelEventHandler
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.s_buttons">
            <summary>
            Static variable for buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.s_buttonNames">
            <summary>
            Static variable for s_buttonNames
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.s_buttonLocIDs">
            <summary>
            Static variable for System defined strings
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.#cctor">
            <summary>
            Constructor for MessageBoxMetroStyleFormAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.#ctor">
            <summary>
            Constructor for MessageBoxMetroStyleFormAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size,System.String)">
            <summary>
            Initializes the new instance for MessageBoxMetroStyleFormAdv class.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes the new instance for MessageBoxMetroStyleFormAdv class.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler)">
            <summary>
            Initializes the new instance for MessageBoxMetroStyleFormAdv class.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.Initialize">
            <summary>
            Initialization of button names 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeCustomButtons(System.String[])">
            <summary>
            Custom Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Click Event for Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeButtons">
            <summary>
            Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetButtons">
            <summary>
            Returns the button for the dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initialize image which is used in MessageBoxAdv
            </summary>
            <param name="image"></param>
            <param name="sizeImage"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeSysIcon">
            <summary>
            Icon Initialization
            </summary>
            <returns>Icon</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeOptions">
            <summary>
            Initialize the TextAlign
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.ApplyFontSettings(System.String[])">
            <summary>
            Helps to apply the Font Settings to Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.ApplyFontSettings(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Helps to apply the Font Settings to built buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeCustomButtonSizes">
            <summary>
            Custom Button Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeSizes">
            <summary>
            Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetButton(System.Windows.Forms.DialogResult)">
            <summary>
            Method to get the button
            </summary>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.SetButonsPadding(System.Drawing.Size,System.Int32)">
            <summary>
            Sets the padding for the buttons
            </summary>
            <param name="clientSize"></param>
            <param name="btnsWidth"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetClientSize(System.Drawing.Size)">
            <summary>
            Returns the client size
            </summary>
            <param name="textSize"></param>
            <returns>Size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetCustomButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.GetLocString(System.Windows.Forms.DialogResult)">
            <summary>
            Returns the system defined strings
            </summary>
            <param name="btn"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.SnapToDefault">
            <summary>
            Method to set the cursor position
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnClosing"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnHelpButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.IsImageShown">
            <summary>
            Gets or sets whether the image is showing 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.IsCancelable">
            <summary>
            Gets the button operations
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MessageBoxMetroStyleFormAdv.SystemLocStrings">
            <summary>
            Enumeration for system defined strings
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv">
            <summary>
            Class for Office2010StyleMessageBoxAdv
            </summary>
            <summary>
            Class for Office2010StyleMessageBoxAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FW_NORMAL">
            <summary>
             Normal font weight
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.#ctor">
            <summary>
            constructor for Office2010form with empty arguments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.dropShadow">
            <summary>
            Variable to Gets or Set Value to Drop Shadow to the form.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.ResetDropShadow">
            <summary>
            Reset the value of the DropShadow
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.ShouldSerializeDropShadow">
            <summary>
            Serializing the value of the DropShadow
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.touchMode">
            <summary>
            Gets/Sets touch enabled
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.ApplyScaleToControl(System.Single)">
            <summary>
            applies the scaling
            </summary>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.Touch(System.Windows.Forms.Control)">
            <summary>
            applies the scaling
            </summary>
            <param name="ctr"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetCloseBox(System.Windows.Forms.Control)">
            <summary>
            Gets the closebox
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="specified"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnHandleCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnStyleChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnRightToLeftLayoutChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcCalcSize(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcPaint(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcHitTest(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcActivate(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcMouseLeave(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmNcLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmLButtonUp(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmCaptureChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmSetIcon(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmSetText(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmGetMinMaxInfo(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmSetCursor(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmSysCommand(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnWmCotextMenu(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnCompositionChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.BaseWndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.UpdateRegion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.UpdateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetFormPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetFormPath(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetRoundedPolygon(System.Drawing.Rectangle,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.InvalidateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetHitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetButtonId(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetButtonId(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt">pt - coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.IsButtonEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrame(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameCaption(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameIcon(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="rc"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButtonBackgroundSelected(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButtonBackgroundPressed(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButtonGradient(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
            <param name="color_4"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButtonFlash(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameButtonBorder(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.DrawFrameBorders(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetMaxRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetButtonImage(System.Int32)">
            <summary>
            Gets Image for a button by specific ID.
            </summary>
            <param name="buttonID"> Button ID that indicates Image. </param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.UpdateSystemButtonsImages">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetButtonCommand(System.Int32)">
            <summary>
            Gets system command by specific buttonID.
            </summary>
            <param name="buttonID"> Button ID that indicates system command. </param>
            <returns> </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.MoveWindow(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.SizeWindow(System.Windows.Forms.Message@,System.Int32)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="command"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.GetIsCompositionEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.TrackPopupMenu(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hMenu"></param>
            <param name="uFlags"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nReserved"></param>
            <param name="hWnd"></param>
            <param name="prcRect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.InvalidateOnDemand">
            <summary>
            Invalidates client area if Office2010Scheme back color is used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.OnColorSchemeChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Office2010Form.ColorScheme"/> property is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bActive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bMouseIsTracked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_frameLayout">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_selectedButton">
            <summary>
            Selected system button. (SB__MAX - no button is selected)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_pressedButton">
            <summary>
            Pressed system button. (SB__MAX - no button is pressed)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_highlightedButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bSuppressSizing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_pBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_pSeparatorDark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_pSeparatorLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_systemButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bmpHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_systemCommands">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_iSystemHelpCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_blTitle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_blFrameButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_blFrameButtonBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bUseOffice2010ThemeBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bDisableOffice2010Style">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.applyAeroTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_bCompositionEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_captionFont">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.m_captionAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.captionForeColor">
            <summary>
            CaptionText Color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.DropShadow">
            <summary>
            Gets or Sets whether to enable Drop Shadow to the Office2010form
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CreateParams">
            <summary>
            Gets the CreateParams for the Office2007 form.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.DisableOffice2010Style">
            <summary>
            Gets/sets if to disable Office2010 look and feel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.ApplyAeroTheme">
            <summary>
            Gets/sets if to Force the OS Aero theme look and feel when Office2010Visual style is enabled.
            </summary>
            <remarks>
            If DisableOffice2010Style is set to true then the ordinary form drawn will still have the aero theme applied
            as the default frame is drawn in the base.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.AutoScroll">
            <summary>
            Gets or Sets the AutoScroll value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.ColorScheme">
            <summary>
            Gets or sets the Office2010 colorscheme
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CaptionFont">
            <summary>
            Gets or sets the font of the form's title.
            </summary>
            Don't rename this property. Name is important for CodeDomSerialization order.
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CaptionForeColor">
            <summary>
            Gets or sets the color for caption in titlebar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CaptionAlign">
            <summary>
            Gets or sets the alignment of of the form's title. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.ColorTable">
            <summary>
            Gets the colortable for Office2010
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsActive">
            <summary>
            Gets the value for IsActive
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsRightToLeft">
            <summary>
            Gets whether right to left has been set
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.SelectedButton">
            <summary>
            Gets or Sets the Selected button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.PressedButton">
            <summary>
            Gets or Sets the pressed button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.HighlightedButton">
            <summary>
            Gets or Sets the highlighted button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.MaximizeButton">
            <summary>
            Gets the Maximize button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.MinimizeButton">
            <summary>
            Gets the Minimize button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CaptionHeight">
            <summary>
            Gets the caption height value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.EnableTouchMode">
            <summary>
            Gets/Sets touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.TitleHeight">
            <summary>
            Gets the value of title height
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsMinimized">
            <summary>
            Gets whether the form is minimized
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsMaximized">
            <summary>
            Gets whether the form is maximized
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsSizeable">
            <summary>
            Gets whether the form is sizable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.DesktopRectangle">
            <summary>
            Gets the screen rectangle
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.ParentClientRectangle">
            <summary>
            Gets the area to be painted
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.IsVisible">
            <summary>
            Gets the value of Isvisible property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.UseOffice2010SchemeBackColor">
            <summary>
            Specifies whether current selected Office2010 scheme background color is used to fill form's backround is used.
            If false <see cref="!:Form.Background"/> is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CaptionFontInternal">
            <summary>
            Gets the caption font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.SystemCaptionFont">
            <summary>
            Gets the system font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.CloseBox">
            <summary>
            Gets the closebox value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.#ctor(Syncfusion.Windows.Forms.Office2010Form)">
            <summary>
            
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.PerformLayout(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.IsMaximized(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.AdjustWindowRectEx(Syncfusion.Runtime.InteropServices.NativeMethods.RECT@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="dwStyle"></param>
            <param name="bMenu"></param>
            <param name="dwExStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_form">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMdiIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMdiMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMdiMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMdiClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_rcMdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_titleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_captionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_captionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.m_iBorderWidth">
            <summary>
            Border width of the Office2010Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.TextBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.IconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.CloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.HelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MdiIconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MdiMinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MdiMaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MdiCloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.MdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.TitleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.CaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.CaptionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.BorderWidth">
            <summary>
            Gets border width of the Office2010Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.SysCaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Form.FrameLayoutInfo.SysBorderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.ColorSchemeTypeConverter.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.ColorSchemeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Form.CaptionManager.#ctor(Syncfusion.Windows.Forms.Office2010Form,System.Boolean)">
            <summary>
            Constructor for CaptionManager
            </summary>
            <param name="c"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.c_nHorzPad">
            <summary>
            Gets the horizontal padding
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.c_nVertPad">
            <summary>
            Gets the vertical padding
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.#cctor">
            <summary>
            Initializes the new instance for Office2010StyleMessageBoxAdv class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.#ctor">
            <summary>
            Initializes the new instance for Office2010StyleMessageBoxAdv class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.LockWindowUpdate(System.IntPtr)">
            <summary>
            Lock Window update function
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.btnHeight">
            <summary>
            Holds the Button height
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.details">
            <summary>
            String variable for details text
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_details">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_spaceBtn">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.ClickedIndex" -->
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.CustomBtnCollection">
            <summary>
            Custom Button Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_contentPanel">
            <summary>
            Variable for content panel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_buttonsPanel">
            <summary>
            Variable for buttons panel
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_ok">
            <summary>
            Variable for ok ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_cancel">
            <summary>
            Variable for cancel ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_yes">
            <summary>
            Variable for yes ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_ignore">
            <summary>
            Variable for ignore ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_retry">
            <summary>
            Variable for retry ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_abort">
            <summary>
            Variable for abort ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_no">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_image">
            <summary>
            Variable for PictureBox
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_text">
            <summary>
            Variable for Label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_buttons">
            <summary>
            Gets MessageBoxButtons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_custombuttons">
            <summary>
            Gets Custom MessageBox Buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_icon">
            <summary>
            Gets MessageBoxIcon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_defaultButton">
            <summary>
            Gets MessageBoxDefaultButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_options">
            <summary>
            Gets MessageBoxOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_owner">
            <summary>
            Variable for owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.m_helpButtonClicked">
            <summary>
            Variable for CancelEventHandler
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.s_buttons">
            <summary>
            Static variable for buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.s_buttonNames">
            <summary>
            Static variable for s_buttonNames
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.s_buttonLocIDs">
            <summary>
            Static variable for System defined strings
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size,System.String)">
            <summary>
            Initializes the new instance for MessageBoxMetroStyleFormAdv class.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes the new instance for Office2010StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler)">
            <summary>
            Initializes the new instance for Office2010StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeCustomButtons(System.String[])">
            <summary>
            Custom Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Click Event for Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeCustomButtonSizes">
            <summary>
            Custom Button Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetCustomButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.Initialize">
            <summary>
            Initialization of button names 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeButtons">
            <summary>
            Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetButtons">
            <summary>
            Returns the button for the dialog
            </summary>
            <returns> Return value of a dialog box.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initialize image which is used in MessageBoxAdv
            </summary>
            <param name="image">Image which is used in MessageBoxAdv</param>
            <param name="sizeImage">Width of the Button</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeSysIcon">
            <summary>
            Icon Initialization
            </summary>
            <returns>Icon</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeOptions">
            <summary>
            Initialize the TextAlign
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeSizes">
            <summary>
            Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.ApplyFontSettings(System.String[])">
            <summary>
            Helps to apply the Font Settings to Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.ApplyFontSettings(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Helps to apply the Font Settings to built buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetButton(System.Windows.Forms.DialogResult)">
            <summary>
            Method to get the button
            </summary>
            <param name="btn"> Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>ButtonAdv</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.SetButonsPadding(System.Drawing.Size,System.Int32)">
            <summary>
            Sets the padding for the Button
            </summary>
            <param name="clientSize">Size of the Button</param>
            <param name="btnsWidth">Width of the Button</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetClientSize(System.Drawing.Size)">
            <summary>
            Returns the client size
            </summary>
            <param name="textSize">Size of the Text</param>
            <returns>Size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns>Width of the Button</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.GetLocString(System.Windows.Forms.DialogResult)">
            <summary>
            Returns the system defined strings
            </summary>
            <param name="btn">Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>String value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.SnapToDefault">
            <summary>
            Method to set the cursor position
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnClosing"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnHelpButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            This will be called in a "pure .net app".
            </summary>
            <param name="m"> Implements a Windows message.</param>
            <returns>true to filter the message and stop it from being dispatched; false to allow
                the message to continue to the next filter or control.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.IsImageShown">
            <summary>
            Gets or sets whether the image is showing 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.IsCancelable">
            <summary>
            Gets the button operations
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010StyleMessageBoxAdv.SystemLocStrings">
            <summary>
            Enumeration for system defined strings
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonExt">
            <summary>
            Class for ButtonAdv with Border customization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonExt.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonExt.m_CustomButton">
            <summary>
            Variable to define whether this is Custom Button
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonExt.m_BorderColor">
            <summary>
            Instance to hold the BorderColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonExt.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint Overrides
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonExt.CustomButton">
            <summary>
            Gets/Sets whether this is Custom Button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonExt.BorderColor">
            <summary>
            Gets/Sets option to customize the BorderColor
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv">
            <summary>
            Class for Office2013StyleMessageBoxAdv
            </summary>
            <summary>
            Class for Office2013StyleMessageBoxAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.c_nHorzPad">
            <summary>
            Gets the horizontal padding
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.c_nVertPad">
            <summary>
            Gets the vertical padding
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.#cctor">
            <summary>
            Initializes the new instance for Office2010StyleMessageBoxAdv class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.#ctor">
            <summary>
            Initializes the new instance for Office2013StyleMessageBoxAdv class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes the new instance for Office2013StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler)">
            <summary>
            Initializes the new instance for Office2013StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.btnHeight">
            <summary>
            Holds the Button height
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.details" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.ClickedIndex" -->
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomBtnCollection">
            <summary>
            Custom Button Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomButtonsForeColor">
            <summary>
            Defines the CustomButton ForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomButtonsBackColor">
            <summary>
            Defines the CustomButton BackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ok">
            <summary>
            Variable for ok ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_cancel">
            <summary>
            Variable for cancel ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_yes">
            <summary>
            Variable for yes ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ignore">
            <summary>
            Variable for ignore ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_retry">
            <summary>
            Variable for retry ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_abort">
            <summary>
            Variable for abort ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_no">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_text">
            <summary>
            Variable for Label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_buttons">
            <summary>
            Gets MessageBoxButtons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_custombuttons">
            <summary>
            Gets Custom MessageBox Buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_icon">
            <summary>
            Gets MessageBoxIcon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_defaultButton">
            <summary>
            Gets MessageBoxDefaultButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_options">
            <summary>
            Gets MessageBoxOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_owner">
            <summary>
            Variable for owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_helpButtonClicked">
            <summary>
            Variable for CancelEventHandler
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.s_buttons">
            <summary>
            Static variable for buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.s_buttonNames">
            <summary>
            Static variable for s_buttonNames
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.s_buttonLocIDs">
            <summary>
            Static variable for System defined strings
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomButtonsMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            CustomButtons Mouse Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomButtonsMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.CustomButtonsMouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.Initialize">
            <summary>
            Initialization of button names 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeCustomButtons(System.String[])">
            <summary>
            Custom Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Click Event for Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeButtons">
            <summary>
            Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetButtons">
            <summary>
            Returns the button for the dialog
            </summary>
            <returns>Returns value of the Dialog Box</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initialize image which is used in MessageBoxAdv
            </summary>
            <param name="image">Image which is used in MessageBoxAdv</param>
            <param name="sizeImage">Size of the Image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeSysIcon">
            <summary>
            Icon Initialization
            </summary>
            <returns>Icon</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeOptions">
            <summary>
            CustomButtons Mouse Down
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeCustomButtonSizes">
            <summary>
            Custom Button Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeSizes">
            <summary>
            Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.ApplyFontSettings(System.String[])">
            <summary>
            Helps to apply the Font Settings to Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.ApplyFontSettings(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Helps to apply the Font Settings to built buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetButton(System.Windows.Forms.DialogResult)">
            <summary>
            Method to get the button
            </summary>
            <param name="btn"> Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>ButtonAdv</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.SetButonsPadding(System.Drawing.Size,System.Int32)">
            <summary>
            Sets the padding for the Button
            </summary>
            <param name="clientSize">Size of the Button</param>
            <param name="btnsWidth">Width of the Button</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetClientSize(System.Drawing.Size)">
            <summary>
            Returns the client size
            </summary>
            <param name="textSize">Size of the Text</param>
            <returns>Size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetCustomButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.GetLocString(System.Windows.Forms.DialogResult)">
            <summary>
            Returns the system defined strings
            </summary>
            <param name="btn"> Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>String value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.SnapToDefault">
            <summary>
            Method to set the cursor position
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnClosing"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnHelpButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.s_office2013theme">
            <summary>
             Initializes the s_office2013theme variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            This will be called in a "pure .net app".
            </summary>
            <param name="m">Implements a Windows message.</param>
            <returns>true to filter the message and stop it from being dispatched; false to allow
                the message to continue to the next filter or control.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.bordercolor">
            <summary>
            Initializes the bordercolor variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ok_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_yes_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_abort_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_retry_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ignore_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_cancel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_no_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ok_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_yes_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_abort_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_retry_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ignore_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_no_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_cancel_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_details_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_details_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_details_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_details_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ok_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ok_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_yes_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_yes_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_abort_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_abort_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_retry_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_retry_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ignore_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_ignore_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_no_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_no_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_cancel_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.m_cancel_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.IsImageShown">
            <summary>
            Gets or sets whether the image is showing 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.IsCancelable">
            <summary>
            Gets the button operations
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.Office2013Theme">
            <summary>
            Gets or sets the Office2013 color theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2013StyleMessageBoxAdv.SystemLocStrings">
            <summary>
            Enumeration for system defined strings
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv">
            <summary>
            Class for Office2016StyleMessageBoxAdv.
            </summary>
            <summary>
            Class for Office2013StyleMessageBoxAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.c_nHorzPad">
            <summary>
            Gets the horizontal padding
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.c_nVertPad">
            <summary>
            Gets the vertical padding
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.#cctor">
            <summary>
            Initializes the new instance for Office2016StyleMessageBoxAdv class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.#ctor">
            <summary>
            Initializes the new instance for Office2016StyleMessageBoxAdv class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initializes the new instance for Office2016StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler)">
            <summary>
            Initializes the new instance for Office2013StyleMessageBoxAdv.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.btnHeight">
            <summary>
            Holds the Button height
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.details" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.ClickedIndex" -->
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomBtnCollection">
            <summary>
            Custom Button Collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomButtonsForeColor">
            <summary>
            Defines the CustomButton ForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomButtonsBackColor">
            <summary>
            Defines the CustomButton BackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ok">
            <summary>
            Variable for ok ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_cancel">
            <summary>
            Variable for cancel ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_yes">
            <summary>
            Variable for yes ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ignore">
            <summary>
            Variable for ignore ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_retry">
            <summary>
            Variable for retry ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_abort">
            <summary>
            Variable for abort ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_no">
            <summary>
            Variable for no ButtonAdv
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_text">
            <summary>
            Variable for Label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_buttons">
            <summary>
            Gets MessageBoxButtons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_custombuttons">
            <summary>
            Gets Custom MessageBox Buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_icon">
            <summary>
            Gets MessageBoxIcon
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_defaultButton">
            <summary>
            Gets MessageBoxDefaultButton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_options">
            <summary>
            Gets MessageBoxOptions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_owner">
            <summary>
            Variable for owner
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_helpButtonClicked">
            <summary>
            Variable for CancelEventHandler
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.s_buttons">
            <summary>
            Static variable for buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.s_buttonNames">
            <summary>
            Static variable for s_buttonNames
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.s_buttonLocIDs">
            <summary>
            Static variable for System defined strings
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomButtonsMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            CustomButtons Mouse Down
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomButtonsMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.CustomButtonsMouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.Initialize">
            <summary>
            Initialization of button names 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeCustomButtons(System.String[])">
            <summary>
            Custom Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Click Event for Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeButtons">
            <summary>
            Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetButtons">
            <summary>
            Returns the button for the dialog
            </summary>
            <returns>Returns value of the Dialog Box</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeImage(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Initialize image which is used in MessageBoxAdv
            </summary>
            <param name="image">Image which is used in MessageBoxAdv</param>
            <param name="sizeImage">Size of the Image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeSysIcon">
            <summary>
            Icon Initialization
            </summary>
            <returns>Icon</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeOptions">
            <summary>
            CustomButtons Mouse Down
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeCustomButtonSizes">
            <summary>
            Custom Button Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeSizes">
            <summary>
            Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.ApplyFontSettings(System.String[])">
            <summary>
            Helps to apply the Font Settings to Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.ApplyFontSettings(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Helps to apply the Font Settings to built buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetButton(System.Windows.Forms.DialogResult)">
            <summary>
            Method to get the button
            </summary>
            <param name="btn"> Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>ButtonAdv</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.SetButonsPadding(System.Drawing.Size,System.Int32)">
            <summary>
            Sets the padding for the Button
            </summary>
            <param name="clientSize">Size of the Button</param>
            <param name="btnsWidth">Width of the Button</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetClientSize(System.Drawing.Size)">
            <summary>
            Returns the client size
            </summary>
            <param name="textSize">Size of the Text</param>
            <returns>Size</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetCustomButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.GetLocString(System.Windows.Forms.DialogResult)">
            <summary>
            Returns the system defined strings
            </summary>
            <param name="btn"> Specifies identifiers to indicate the return value of a dialog box.</param>
            <returns>String value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.SnapToDefault">
            <summary>
            Method to set the cursor position
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnClosing"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.OnHelpButtonClicked(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.OnHelpButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.s_office2016theme">
            <summary>
             Initializes the s_office2016theme variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            This will be called in a "pure .net app".
            </summary>
            <param name="m">Implements a Windows message.</param>
            <returns>true to filter the message and stop it from being dispatched; false to allow
                the message to continue to the next filter or control.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">True if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.bordercolor">
            <summary>
            Initializes the bordercolor variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ok_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_yes_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_abort_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_retry_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ignore_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_cancel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_no_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ok_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_yes_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_abort_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_retry_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ignore_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_no_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_cancel_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_details_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
             Occurs when the mouse pointer is over the control and a mouse button is pressed.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">MouseEventArgs which contains Event Data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_details_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
             Occurs when the control is redrawn.
            </summary>
            <param name="sender">Object sender</param>
            <param name="e">PaintEventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_details_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_details_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ok_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ok_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_yes_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_yes_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_abort_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_abort_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_retry_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_retry_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ignore_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_ignore_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_no_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_no_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_cancel_MouseLeave(System.Object,System.EventArgs)">
            <summary>
            Occurs when the mouse pointer leaves the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.m_cancel_MouseEnter(System.Object,System.EventArgs)">
            <summary>
             Occurs when the mouse pointer enters the control.
            </summary>
            <param name="sender">sender object</param>
            <param name="e">EventArgs which contains EventData</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.IsImageShown">
            <summary>
            Gets or sets whether the image is showing 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.IsCancelable">
            <summary>
            Gets the button operations
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.Office2016Theme">
            <summary>
            Gets or sets the Office2016 color theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2016StyleMessageBoxAdv.SystemLocStrings">
            <summary>
            Enumeration for system defined strings
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage">
            <summary>
            Advanced caption image for Metro form
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.location">
            <summary>
            location for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.captionImage">
            <summary>
            image for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.size">
            <summary>
            size for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.backColor">
            <summary>
            backcolor for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.font">
            <summary>
            Font for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.foreColor">
            <summary>
            forecolor for CaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.#ctor">
            <summary>
            Constructor for FormCaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.#ctor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>     
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.Mousemove(System.Drawing.Point)">
            <summary>
            Mouse move event for CaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.Mouseleave(System.Drawing.Point)">
            <summary>
            Mouse leave event for CaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.Mouseenter(System.Drawing.Point)">
            <summary>
            Mouse enter event for CaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.Mousedown(System.Drawing.Point)">
            <summary>
            Mouse down event for CaptionImage
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.Mouseup(System.Drawing.Point)">
            <summary>
            Mouse up event for CaptionImage
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionImage.Owner">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ShouldSerializeBackColor">
            <summary>
            Indicates whether the current value of the backcolor property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ResetBackColor">
            <summary>
            Resets the BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ShouldSerializeForeColor">
            <summary>
            Indicates whether the current value of the forecolor property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ResetForeColor">
            <summary>
            Resets the BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ShouldSerializeSize">
            <summary>
            Indicates whether the current value of the Size property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ResetSize">
            <summary>
            Resets the Size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ShouldSerializeImage">
            <summary>
            Indicates whether the current value of the image property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ResetImage">
            <summary>
            Resets the image.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ShouldSerializeLocation">
            <summary>
            Indicates whether the current value of the location property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImage.ResetLocation">
            <summary>
            Resets the location.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionImage.ImageMouseMove">
            <summary>
            Mouse move event for CaptionImage
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionImage.ImageMouseLeave">
            <summary>
            Mouse leave event for CaptionImage
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionImage.ImageMouseEnter">
            <summary>
            Mouse enter event for CaptionImage
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionImage.ImageMouseDown">
            <summary>
            Mouse down delegate for CaptionImage
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionImage.ImageMouseUp">
            <summary>
            Mouse up delegate for CaptionImage
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImage.Location">
            <summary>
            Gets/sets the value for location
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImage.Image">
            <summary>
            Gets/Sets the value for Image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImage.Size">
            <summary>
            Gets/Sets the value for CaptionImage size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImage.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImage.Name">
            <summary>
            Gets or Sets the instance name
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage.MouseMove">
            <summary>
            Mouse move delegate for CaptionImage
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage.MouseLeave">
            <summary>
            Mouse leave delegate for CaptionImage
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage.MouseEnter">
            <summary>
            Mouse enter delegate for CaptionImage
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage.MouseDown">
            <summary>
            Mouse down delegate for CaptionImage
            </summary>
            <param name="FormCaptionImage"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImage.MouseUp">
            <summary>
             Mouse up delegate for CaptionImage
            </summary>
            <param name="FormCaptionImage"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionImageCollection">
            <summary>
             Collection of Images used in the Form Caption
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructor for CaptionImageCollection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.Contains(Syncfusion.Windows.Forms.CaptionImage)">
            <summary>
            Returns whether the list contains the CaptionImage type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.Add(Syncfusion.Windows.Forms.CaptionImage)">
            <summary>
            Adds the CaptionImage type to the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.Remove(Syncfusion.Windows.Forms.CaptionImage)">
             <summary>
            Removes the CaptionImage type from the list
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.Insert(System.Int32,Syncfusion.Windows.Forms.CaptionImage)">
            <summary>
            Inserts the CaptionImage type into the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.IndexOf(Syncfusion.Windows.Forms.CaptionImage)">
            <summary>
            Returns the index of the CaptionImage type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.FindByName(System.String)">
            <summary>
            searches the name in the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overrides the oninsert method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionImageCollection.GetUniqueName">
            <summary>
            Gets the unique name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionImageCollection.Item(System.Int32)">
            <summary>
            Gets the index of for the CaptionImage
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs">
            <summary>
            Mouse Move events for caption image
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionImage,System.Drawing.Image,System.Drawing.Color,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for ImageMouseLeaveEventArgs
            </summary>
            <param name="cImage">Owner for the events</param>
            <param name="iImage">Image for caption image</param>
            <param name="ibackColor">BackColor for caption image</param>
            <param name="iLocation">Location for caption image</param>
            <param name="iSize">Size of the caption image</param>
            <param name="iForeColor">ForeColor for caption image</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.image">
            <summary>
            ForeColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.size">
            <summary>
            Size of the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.backColor">
            <summary>
            BackColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.location">
            <summary>
            Location for the caption image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseLeaveEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionImage,System.Drawing.Image,System.Drawing.Color,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for ImageMouseEnterEventArgs
            </summary>
            <param name="cImage">Owner for the events</param>
            <param name="iImage">Image for caption image</param>
            <param name="ibackColor">BackColor for caption image</param>
            <param name="iLocation">Location for caption image</param>
            <param name="iSize">Size of the caption image</param>
            <param name="iForeColor">ForeColor for caption image</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.image">
            <summary>
            ForeColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.size">
            <summary>
            Size of the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.backColor">
            <summary>
            BackColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.location">
            <summary>
            Location for the caption image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseEnterEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionImage,System.Drawing.Image,System.Drawing.Color,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for ImageMouseMoveEventArgs
            </summary>
            <param name="cImage">Owner for the events</param>
            <param name="iImage">Image for caption image</param>
            <param name="ibackColor">BackColor for caption image</param>
            <param name="iLocation">Location for caption image</param>
            <param name="iSize">Size of the caption image</param>
            <param name="iForeColor">ForeColor for caption image</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.image">
            <summary>
            ForeColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.size">
            <summary>
            Size of the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.backColor">
            <summary>
            BackColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.location">
            <summary>
            Location for the caption image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseMoveEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ImageMouseUpEventArgs">
            <summary>
            Mouse Up events for caption image
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionImage,System.Drawing.Image,System.Drawing.Color,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for ImageMouseUpEventArgs
            </summary>
            <param name="cImage">Owner for the events</param>
            <param name="iImage">Image for caption image</param>
            <param name="ibackColor">BackColor for caption image</param>
            <param name="iFont">Font for caption image</param>
            <param name="iLocation">Location for caption image</param>
            <param name="iSize">Size of the caption image</param>
            <param name="iForeColor">ForeColor for caption image</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.foreColor">
            <summary>
            ForeColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.size">
            <summary>
            Size of the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.backColor">
            <summary>
            BackColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.location">
            <summary>
            Location for the caption image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseUpEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ImageMouseDownEventArgs">
            <summary>
            Mouse Down events for caption image
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionImage,System.Drawing.Image,System.Drawing.Color,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for ImageMouseDownEventArgs
            </summary>
            <param name="cImage">Owner for the events</param>
            <param name="iImage">Image for caption image</param>
            <param name="ibackColor">BackColor for caption image</param>
            <param name="iLocation">Location for caption image</param>
            <param name="iSize">Size of the caption image</param>
            <param name="iForeColor">ForeColor for caption image</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.image">
            <summary>
            Image for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.foreColor">
            <summary>
            ForeColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.size">
            <summary>
            Size of the caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.backColor">
            <summary>
            BackColor for caption image
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.location">
            <summary>
            Location for the caption image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.Image">
            <summary>
            Gets/Sets the value for Image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ImageMouseDownEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel">
            <summary>
            Advanced caption label for Metro form
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.labelText">
            <summary>
            value for label text
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.location">
            <summary>
            value for label location
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.labelSize">
            <summary>
            value for label size
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.labelBackColor">
            <summary>
            value for label backcolor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.labelFont">
            <summary>
            value for label font
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.foreColor">
            <summary>
            value for label forecolor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.#ctor">
            <summary>
            constructor for CaptionLabel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.#ctor(System.Drawing.Color)">
            <summary>
            constructor for CaptionLabel
            </summary>label
            <param name="color"></param>      
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.Mousemove(System.Drawing.Point)">
             <summary>
            Mouse move event invoking
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.Mouseenter(System.Drawing.Point)">
            <summary>
            Mouse enter event invoking
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.Mouseleave(System.Drawing.Point)">
            <summary>
            Mouse leave event invoking
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.Mousedown(System.Drawing.Point)">
             <summary>
            Mouse down event invoking
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.Mouseup(System.Drawing.Point)">
             <summary>
            Mouse up event invoking
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CaptionLabel.Owner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.SetOwner(System.Windows.Forms.Form)">
            <summary>
            Specifies the owner of the label
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeBackColor">
            <summary>
            Indicates whether the current value of the backcolor property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetBackColor">
            <summary>
            Resets the BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeForeColor">
            <summary>
            Indicates whether the current value of the forecolor property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetForeColor">
            <summary>
            Resets the BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeFont">
            <summary>
            Indicates whether the current value of the font property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetFont">
            <summary>
            Resets the BackColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeSize">
            <summary>
            Indicates whether the current value of the Size property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetSize">
            <summary>
            Resets the Size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeLocation">
            <summary>
            Indicates whether the current value of the location property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetLocation">
            <summary>
            Resets the location.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ShouldSerializeText">
            <summary>
            Indicates whether the current value of the text property is to be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabel.ResetText">
            <summary>
            Resets the Text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.Text">
            <summary>
            Gets/Sets the value for Label text
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionLabel.LabelMouseMove">
            <summary>
            Mouse move event for CaptionLabel
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionLabel.LabelMouseLeave">
            <summary>
            Mouse leave event for CaptionLabel
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionLabel.LabelMouseEnter">
            <summary>
            Mouse enter event for CaptionLabel
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionLabel.LabelMouseDown">
            <summary>
            Mouse down event for CaptionLabel
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.CaptionLabel.LabelMouseUp">
            <summary>
            Mouse up event for CaptionLabel
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.Location">
            <summary>
            Gets/Sets the value for label location
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.Size">
            <summary>
            Gets/Sets the value for label size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.BackColor">
            <summary>
            Gets/Sets the value for label backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.Font">
            <summary>
            Gets/Sets the value for label font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.Name">
            <summary>
            Gets or Sets the instance label name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabel.ForeColor">
            <summary>
            Gets or Sets the Forecolor of the CaptionLabel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel.MouseMove">
            <summary>
            Mouse move delegate for CaptionLabel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel.MouseLeave">
            <summary>
            Mouse leave delegate for CaptionLabel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel.MouseEnter">
            <summary>
            Mouse enter delegate for CaptionLabel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel.MouseDown">
            <summary>
            Mouse down delegate for CaptionLabel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabel.MouseUp">
            <summary>
            Mouse up delegate for CaptionLabel
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CaptionLabelCollection">
            <summary>
            Collection of Labels used in the Form Caption
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.#ctor(System.Windows.Forms.Form)">
            <summary>
            Constructor for CaptionLabelCollection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.Contains(Syncfusion.Windows.Forms.CaptionLabel)">
            <summary>
            Returns whether the list contains the label type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.Add(Syncfusion.Windows.Forms.CaptionLabel)">
            <summary>
            Adds the label type to the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.Remove(Syncfusion.Windows.Forms.CaptionLabel)">
             <summary>
            Removes the label type from the list
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.Insert(System.Int32,Syncfusion.Windows.Forms.CaptionLabel)">
            <summary>
            Inserts the label type into the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.IndexOf(Syncfusion.Windows.Forms.CaptionLabel)">
            <summary>
            Returns the index of the label type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.FindByName(System.String)">
            <summary>
            searches the name in the list
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overrides the oninsert method
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CaptionLabelCollection.GetUniqueName">
            <summary>
            Gets the unique name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CaptionLabelCollection.Item(System.Int32)">
            <summary>
            Gets the index of for the label
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs">
            <summary>
            Mouse Move events for caption label
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionLabel,System.Drawing.Color,System.Drawing.Font,System.String,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for LabelMouseMoveEventArgs
            </summary>
            <param name="label">Owner for the events</param>
            <param name="lbackColor">BackColor for caption label</param>
            <param name="lFont">Font for caption label</param>
            <param name="lText">Text for caption label</param>
            <param name="lLocation">Location for caption label</param>
            <param name="lSize">Size of the caption label</param>
            <param name="lForeColoe">ForeColor for caption label</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.foreColor">
            <summary>
            ForeColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.size">
            <summary>
            Size of the caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.backColor">
            <summary>
            BackColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.font">
            <summary>
            Font for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.text">
            <summary>
            Text for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.location">
            <summary>
            Location for the caption label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.Font">
            <summary>
            Gets/Sets the value for Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.Text">
            <summary>
            Gets/Sets the value for Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseMoveEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionLabel,System.Drawing.Color,System.Drawing.Font,System.String,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for LabelMouseLeaveEventArgs
            </summary>
            <param name="label">Owner for the events</param>
            <param name="lbackColor">BackColor for caption label</param>
            <param name="lFont">Font for caption label</param>
            <param name="lText">Text for caption label</param>
            <param name="lLocation">Location for caption label</param>
            <param name="lSize">Size of the caption label</param>
            <param name="lForeColoe">ForeColor for caption label</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.foreColor">
            <summary>
            ForeColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.size">
            <summary>
            Size of the caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.backColor">
            <summary>
            BackColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.font">
            <summary>
            Font for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.text">
            <summary>
            Text for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.location">
            <summary>
            Location for the caption label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.Font">
            <summary>
            Gets/Sets the value for Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.Text">
            <summary>
            Gets/Sets the value for Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseLeaveEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionLabel,System.Drawing.Color,System.Drawing.Font,System.String,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for LabelMouseEnterEventArgs
            </summary>
            <param name="label">Owner for the events</param>
            <param name="lbackColor">BackColor for caption label</param>
            <param name="lFont">Font for caption label</param>
            <param name="lText">Text for caption label</param>
            <param name="lLocation">Location for caption label</param>
            <param name="lSize">Size of the caption label</param>
            <param name="lForeColoe">ForeColor for caption label</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.foreColor">
            <summary>
            ForeColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.size">
            <summary>
            Size of the caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.backColor">
            <summary>
            BackColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.font">
            <summary>
            Font for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.text">
            <summary>
            Text for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.location">
            <summary>
            Location for the caption label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.Font">
            <summary>
            Gets/Sets the value for Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.Text">
            <summary>
            Gets/Sets the value for Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseEnterEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelMouseUpEventArgs">
            <summary>
            Mouse Up events for caption label
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionLabel,System.Drawing.Color,System.Drawing.Font,System.String,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for LabelMouseUpEventArgs
            </summary>
            <param name="label">Owner for the events</param>
            <param name="lbackColor">BackColor for caption label</param>
            <param name="lFont">Font for caption label</param>
            <param name="lText">Text for caption label</param>
            <param name="lLocation">Location for caption label</param>
            <param name="lSize">Size of the caption label</param>
            <param name="lForeColoe">ForeColor for caption label</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.foreColor">
            <summary>
            ForeColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.size">
            <summary>
            Size of the caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.backColor">
            <summary>
            BackColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.font">
            <summary>
            Font for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.text">
            <summary>
            Text for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.location">
            <summary>
            Location for the caption label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.Font">
            <summary>
            Gets/Sets the value for Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.Text">
            <summary>
            Gets/Sets the value for Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseUpEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelMouseDownEventArgs">
            <summary>
            Mouse Down events for caption label
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.#ctor(Syncfusion.Windows.Forms.CaptionLabel,System.Drawing.Color,System.Drawing.Font,System.String,System.Drawing.Point,System.Drawing.Size,System.Drawing.Color,System.Windows.Forms.MouseButtons,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for LabelMouseDownEventArgs
            </summary>
            <param name="label">Owner for the events</param>
            <param name="lbackColor">BackColor for caption label</param>
            <param name="lFont">Font for caption label</param>
            <param name="lText">Text for caption label</param>
            <param name="lLocation">Location for caption label</param>
            <param name="lSize">Size of the caption label</param>
            <param name="lForeColoe">ForeColor for caption label</param>
            <param name="x">Mouse points in X-co ordinate</param>
            <param name="y">Mouse points in Y-co ordinate</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.owner">
            <summary>
            Owner for the events
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.foreColor">
            <summary>
            ForeColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.size">
            <summary>
            Size of the caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.backColor">
            <summary>
            BackColor for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.font">
            <summary>
            Font for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.text">
            <summary>
            Text for caption label
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.location">
            <summary>
            Location for the caption label
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.ForeColor">
            <summary>
            Gets/Sets the value for forecolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.Size">
            <summary>
            Gets/Sets the value for size
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.BackColor">
            <summary>
            Gets/Sets the value for backcolor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.Font">
            <summary>
            Gets/Sets the value for Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.Text">
            <summary>
            Gets/Sets the value for Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelMouseDownEventArgs.Location">
            <summary>
            Gets/Sets the value for Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroFormAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroFormAccessibility.m_MetroForm">
            <summary>
            MetroForm
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroFormAccessibility.#ctor(Syncfusion.Windows.Forms.MetroForm)">
            <summary>
            Constructor
            </summary>
            <param name="MetroForm">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroFormAccessibility.GetChildCount">
            <summary>
            Gets the parent of an accessible object.
            </summary>
            <returns>An RibbonControlAdvAccessibility that represents the parent of an accessible object, or null if there is no parent object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroFormAccessibility.GetFocused">
            <summary>
            Retrieves the object that has the focus.
            </summary>
            <returns>>An RibbonControlAdvAccessibility that specifies the currently focused child.
            This method returns the calling object if the object itself is focused. Returns null if no object has focus.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.State">
            <summary>
            Gets the state of this accessible object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Help">
            <summary>
            Gets the description of what the object does or how the object is used.
            </summary>
            <returns>The description of what the object does or how the object is used.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroFormAccessibility.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.VerticalAlignment">
            <summary>
            Vertical Alignment
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VerticalAlignment.Top">
            <summary>
            Top 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VerticalAlignment.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VerticalAlignment.Bottom">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010FormAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010FormAccessibility.m_Office2010Form">
            <summary>
            Office2010Form
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010FormAccessibility.#ctor(Syncfusion.Windows.Forms.Office2010Form)">
            <summary>
            Constructor
            </summary>
            <param name="Office2010Form">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010FormAccessibility.GetChildCount">
            <summary>
            Retrieves the number of children in the accessible object.
            </summary>
            <returns>Number of Child.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010FormAccessibility.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the index.
            </summary>
            <param name="index">Index</param>
            <returns>Child specified to the index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010FormAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010FormAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010FormAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010FormAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010FormAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the ClockActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.InitializeActionList">
            <summary>
            Overrridden InitializeActionList.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.Style">
            <summary>
            Gets or sets the Progressbar style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.Textstyle">
            <summary>
            Gets or sets the Text style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.Textalignment">
            <summary>
            Gets or sets the Text style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvActionLists.Textorientation">
            <summary>
            Gets or sets the Text orientation.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.IColorTableOffice2010Creator">
            <summary>
            Interface to create an Office 2010 color table.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010">
            <summary>
            Color table for Office 2010 like scroll bars.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.#cctor">
            <summary>
            Constructor for Office2010 color table which is used to register the color style of each theme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.#ctor">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.GetAlphaBlendedColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>Get the Alpha blended color. </summary>
            <param name="src">Source color</param>
            <param name="dest">destination color</param>
            <param name="alpha">alpha color</param>
            <returns>returns the alpha blended color</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.GetColorTable(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2010ColorScheme)">
            <summary>
            Retrieves color table according to style and scheme.
            </summary>
            <param name="style">Office2010 style.</param>
            <param name="scheme">Office2010 color scheme.</param>
            <returns>Color table.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.RegisterColorTable(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2010ColorScheme,Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010)">
            <summary>
            Registers color table within internal collection.
            </summary>
            <param name="style">Office2010 style.</param>
            <param name="scheme">Office2010 scheme.</param>
            <param name="colorTable">Color table itself.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.UpdateColors(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,System.Drawing.Color)">
            <summary>
            Updates the styles of the scrollbars related to Office2010 colors.
            </summary>
            <param name="basicColor">base color.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.UpdateScheme(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2010ColorScheme)">
            <summary>
            Updates the Office2010 scrollbar color schemes.
            </summary>
            <param name="style">Custom scrollbar draw style.</param>
            <param name="scheme">Office2010 color scheme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ApplyManagedColors(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,System.Drawing.Color)">
            <summary>
            Applies colors for managed scheme.
            </summary>
            <param name="style">Custom scrollbar draw style.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ApplyManagedScheme(System.Windows.Forms.Form,Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2010ColorScheme)">
            <summary>
             Applies scheme for managed theme.
            </summary>
            <param name="form">Container form.</param>
            <param name="style">Custom scrollbar draw style.</param>
            <param name="scheme">Office2010 color scheme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ManagedColorsApplied(Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs)">
            <summary>
            Applies managed colors
            </summary>
            <param name="args">base color <see cref="!:ManagedColorsAppliedEventArgs"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OnManagedColorApplied(System.Drawing.Color)">
            <summary>
            Called when <see cref="!:ManagedColorsAppliedEvent"/> is risen.
            </summary>
            <param name="baseColor">base color for managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.InitColors(System.Drawing.Color[]@)">
            <summary>
            Initialize scroll bar color fields.
            </summary>
            <param name="colors">Scroll bar color references.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.m_office2010Colors">
            <summary>
            Office 2010 color array.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.s_colorTables">
            <summary>
            Registered color tables.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.Syncfusion#Windows#Forms#Renderers#IColorTableOffice2010Creator#Create">
            <summary>
            Interface to create a Office2010 color table.
            </summary>
            <returns>returns office2010 color table</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerGradientBegin">
            <summary>
            Specifies the ScrollerGradientBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerGradientEnd">
            <summary>
            Specifies the ScrollerGradientEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientBegin">
            <summary>
            Specifies the ArrowButtonGradientBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientEnd">
            <summary>
            Specifies the ArrowButtonGradientEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientSelectedBegin">
            <summary>
            Specifies the ArrowButtonGradientSelectedBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientSelectedEnd">
            <summary>
            Specifies the ArrowButtonGradientSelectedEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientPressedBegin">
            <summary>
            Specifies the ArrowButtonGradientPressedBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonGradientPressedEnd">
            <summary>
            Specifies the ArrowButtonGradientPressedEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderDark">
            <summary>
            Specifies the ArrowButtonBorderDark color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderLight">
            <summary>
            Specifies the ArrowButtonBorderLight color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderSelectedDark">
            <summary>
            Specifies the ArrowButtonBorderSelectedDark color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderSelectedLight">
            <summary>
            Specifies the ArrowButtonBorderSelectedLight color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderPressedDark">
            <summary>
            Specifies the ArrowButtonBorderPressedDark color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowButtonBorderPressedLight">
            <summary>
            Specifies the ArrowButtonBorderPressedLight color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowGradientBegin">
            <summary>
            Specifies the ArrowGradientBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowGradientEnd">
            <summary>
            Specifies the ArrowGradientEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowGradientNormalBegin">
            <summary>
            Specifies the ArrowGradientNormalBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ArrowGradientNormalEnd">
            <summary>
            Specifies the ArrowGradientNormalEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ThumbLinesGradientBegin">
            <summary>
            Specifies the ThumbLinesGradientBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ThumbLinesGradientEnd">
            <summary>
            Specifies the ThumbLinesGradientEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ThumbPressedBackgroundGradientBegin">
            <summary>
            Specifies the ThumbPressedBackgroundGradientBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ThumbPressedBackgroundGradientEnd">
            <summary>
            Specifies the ThumbPressedBackgroundGradientEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerBorderBegin">
            <summary>
            Specifies the ScrollerBorderBegin color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerBorderEnd">
            <summary>
            Specifies the ScrollerBorderEnd color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerGripDark">
            <summary>
            Specifies the ScrollerGripDark color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerGripLight">
            <summary>
            Specifies the ScrollerGripLight color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ScrollerGripBackGround">
            <summary>
            Specifies the ScrollerGripBackGround color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OfficeColors">
            <summary>
            Specifies the color of the Office2010 scroll bars
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR">
            <summary>
            Color references for Office2010.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowGradientNormalBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowGradientNormalEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.thumbLinesGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.thumbLinesGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerBorderBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerBorderEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerGripDark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerGripLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.scrollerGripBackGround">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientSelectedBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientSelectedEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientPressedBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonGradientPressedEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderSelectedDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderSelectedLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderPressedDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.arrowButtonBorderPressedLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.thumbPressedBackgroundGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.OFFICE2010COLOR.thumbPressedBackgroundGradientEnd">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ColorTableKey">
            <Internal/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ColorTableKey.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2010ColorScheme)">
            <summary>
            Constructor for color Table key.
            </summary>
            <param name="style">Custom scrollbar draw style.</param>
            <param name="scheme">Office2010 color scheme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ColorTableKey.System#IComparable#CompareTo(System.Object)">
            <summary>
            Compare the color table keys through <see cref="T:System.IComparable"/>.
            </summary>
            <param name="obj">Object of the ColorTableKey.</param>
            <returns>Returns 1 if color key is less. Otherwise returns 0.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ColorTableKey.Less(Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010.ColorTableKey)">
            <summary>
            Compares the color table keys.
            </summary>
            <param name="key">A color table key.</param>
            <returns>returns true if passed one is less. Otherwise return false</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Blue">
            <summary>
            Provides attributes and methods for Office2010 blue color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Blue.#ctor">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Blue.Syncfusion#Windows#Forms#Renderers#IColorTableOffice2010Creator#Create">
            <summary>
            Interface to create an office2010 blue color table.
            </summary>
            <returns>returns office2010 blue color table.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Silver">
            <summary>
            Provides attributes and methods for Office2010 Silver color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Silver.#ctor">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Silver.InitColors(System.Drawing.Color[]@)">
            <summary>
            Initialize scroll bar color fields for silver color.
            </summary>
            <param name="colors">Scroll bar color references.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Silver.Syncfusion#Windows#Forms#Renderers#IColorTableOffice2010Creator#Create">
            <summary>
            Interface to create an office2010 Silver color table.
            </summary>
            <returns>returns office2010 silver color table</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Black">
            <summary>
            Provides attributes and methods for Office2010 Black color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Black.#ctor">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Black.InitColors(System.Drawing.Color[]@)">
            <summary>
            Initialize scroll bar color fields for black color.
            </summary>
            <param name="colors">Scroll bar color references.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010Black.Syncfusion#Windows#Forms#Renderers#IColorTableOffice2010Creator#Create">
            <summary>
            Interface to create an office2010 Black color table.
            </summary>
            <returns>returns Office2010 black color table</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.Office2010Renderer">
            <summary>Provides renderer for Office2010 theme.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ClassicRenderer">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.BasicRenderer">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.IRenderer">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.IRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.IRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.IRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.BasicRenderer.m_parent">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.BasicRenderer.m_isVerticalScroll">
            <summary>
            Indicates whether scroll is vertical or horizontal
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.#ctor(System.Boolean)">
            <summary></summary>
            <param name="isVerticalScrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary></summary>
            <param name="parent"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.BasicRenderer.Parent">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.BasicRenderer.IsVerticalScrollBar">
            <summary>
            Indicates whether scrollBar is vertical or horizontal.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.BasicRenderer.Bitmaps">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.BasicRenderer.Bitmaps.#ctor(System.Int32)">
            <summary></summary>
            <param name="capacity"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.BasicRenderer.Bitmaps.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.BORDER_WIDTH">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.m_hImages">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.#ctor(System.Boolean)">
            <summary></summary>
            <param name="isVerticalScrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary></summary>
            <param name="parent"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll.
            </summary>
            <param name="g"></param>
            <param name="rcArrow"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll.
            </summary>
            <param name="g"></param>
            <param name="rcBackground"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll.
            </summary>
            <param name="g"></param>
            <param name="rcThumb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="type"></param>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawArrowPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rcArrow"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rcBackground"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rcBackground"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.DrawThumbArrowBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rcThumb"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetBackgroundImage">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetBackgroundPressedImage">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetOfficeRightArrow(System.Int32,System.Int32)">
            <summary> Right office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetOfficeLeftArrow(System.Int32,System.Int32)">
            <summary> Left office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetOfficeDownArrow(System.Int32,System.Int32)">
            <summary> Down office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.GetOfficeUpArrow(System.Int32,System.Int32)">
            <summary> Up office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE.eiDownArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE.eiRightArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE.eiLeftArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE.eiUpArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ClassicRenderer.EIMAGE.MAX">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.MIN_THUMB_LENGTH_FOR_LINES">
            <summary>
            Scroll Bar min thumb length for lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.THUMB_LINE_LENGTH">
            <summary>
            Scroll thumb line length.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_colorTable">
            <summary>
            Office2010 color table.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blBackGround">
            <summary>
            Blended background color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blBackGroundBlack">
            <summary>
            Blended background black color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blArrowButton">
            <summary>
            Blended arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blArrowButtonSelected">
            <summary>
            Blended selected arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blArrowButtonSelectedSilverBlack">
            <summary>
            Blended arrow button silver and black selected colors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_blThumbBackGround">
            <summary>
            Blend for thumb background.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.m_hImages">
            <summary>
            Bitmap for scroll images
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.#cctor">
            <summary>
            Constructor for Office2010 renderers.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw,Syncfusion.Windows.Forms.Renderers.ColorTableOffice2010)">
            <summary>
            Initialize new instance of Office2010Renderer
            </summary>
            <param name="parent">custom scrollbar.</param>
            <param name="colorTable">Color Table.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g">graphics for arrow buttons.</param>
            <param name="rcArrow">Arrow bounds.</param>
            <param name="type">type of the scroll button.</param>
            <param name="state">Scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g">graphics for arrow buttons background.</param>
            <param name="rcBackground">arrow button background bounds</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g">graphics for scroll thumb.</param>
            <param name="rcThumb">scroll thimb bounds.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Draw scroll bar background.</summary>
            <param name="g">graphics for scroll bar backgrounds.</param>
            <param name="rc">scroll background bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Draw pushed scroll background.</summary>
            <param name="g">Graphics for pushed scroll background</param>
            <param name="rc">Scroll bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawArrowBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>Draw scroll bar arrow background.</summary>
            <param name="g">Graphics for Arrow background.</param>
            <param name="rc">Arrow bounds.</param>
            <param name="type">type of the scroll button.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawThumbBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>Draw scroll thumb background.</summary>
            <param name="g">Graphics for thumb background.</param>
            <param name="rc">Scroll thumb bounds.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>Draw scroll arrow.</summary>
            <param name="g">Graphics for scroll arrow.</param>
            <param name="rc">Arrow bounds.</param>
            <param name="type">type of scroll button.</param>
            <param name="state">Button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.DrawLines(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>Draw scroll lines</summary>
            <param name="g">Graphics.</param>
            <param name="rc">Scroll bounds.</param>
            <param name="isVerticalScrollBar">true if the scroll bar is vertical scrollbar.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetBackgroundBrushHorizontal(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Get the horizontal scroll background brush.
            </summary>
            <param name="width">ScrollBar width.</param>
            <param name="clBegin"> scroll begin color.</param>
            <param name="clEnd">scroll bar end color.</param>
            <returns>Returns the gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetBackgroundBrushVertical(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Get the Vertical scroll background brush.
            </summary>
            <param name="height"> ScrollBar height.</param>
            <param name="clBegin"> scroll begin color.</param>
            <param name="clEnd">scroll bar end color.</param>
            <returns>Returns the gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetVerticalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            gets the vertical scroll brush.
            </summary>
            <param name="rc">bounds.</param>
            <param name="cl1">Gradient top color.</param>
            <param name="cl2">Gradient bottom color.</param>
            <returns>Returns the Linear gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetVerticalBrush(System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            gets the vertical scroll brush.
            </summary>
            <param name="top">top of the scroll bar rectangle</param>
            <param name="height">Height of the scroll bar rectangle</param>
            <param name="cl1">Gradient top color.</param>
            <param name="cl2">Gradient bottom color.</param>
            <returns>Returns the Linear gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetHorizontalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            gets the horizontal scroll brush.
            </summary>
            <param name="rc">bounds.</param>
            <param name="cl1">Gradient top color.</param>
            <param name="cl2">Gradient bottom color.</param>
            <returns>the Linear gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetRoundedPolygon(System.Drawing.Rectangle,System.Int32)">
            <summary>
            gets the rounded polygon.
            </summary>
            <param name="rc">Bounds.</param>
            <param name="iRadius">Radius of the polygon.</param>
            <returns>the edge points.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeRightArrow(System.Int32,System.Int32)">
            <summary> Right office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeLeftArrow(System.Int32,System.Int32)">
            <summary> Left office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeDownArrow(System.Int32,System.Int32)">
            <summary> Down office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeUpArrow(System.Int32,System.Int32)">
            <summary> Up office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeRightArrowNormal(System.Int32,System.Int32)">
            <summary> Right Normal office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeLeftArrowNormal(System.Int32,System.Int32)">
            <summary> Left Normal office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeDownArrowNormal(System.Int32,System.Int32)">
            <summary> Down Normal office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeUpArrowNormal(System.Int32,System.Int32)">
            <summary> Up Normal office arrow. </summary>
            <returns>the bitmap.</returns>
            <param name="width">Arrow width.</param>
            <param name="height">Arrow height.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeThumbLinesVertical">
            <summary> Vertical thumb lines. </summary>
            <returns>the bitmap of the scroll thumb.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.GetOfficeThumbLinesHorizontal">
            <summary> Horizontal thumb lines. </summary>
            <returns>the horizontal thumb lines' Bitmap.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE">
            <summary>
            Enumeration for scroll bar fields.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiDownArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiRightArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiLeftArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiUpArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiDownArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiRightArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiLeftArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiUpArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiThumbLinesVertical">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.eiThumbLinesHorizontal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2010Renderer.EIMAGE.MAX">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ScrollerFrameActionList">
            <summary>
            RadioButtonAdvActionList Class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ScrollerFrameActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the RadioButtonAdvActionList class.
            </summary>
            <param name="component">Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ScrollerFrameActionList.InitializeActionList">
            <summary>
            InitializeActionList method
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ScrollerFrameActionList.Sizegripper">
            <summary>
            Gets or sets thumb color.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.VisualTheme">
            <summary>
            Holds the option for the VisualTheme
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SkinManager.control">
            <summary>
            Contains a  control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SkinManager.component">
            <summary>
            Contains a component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SkinManager.visualTheme">
            <summary>
            Get or Set the VisualTheme for the control.
            </summary>
             
        </member>
        <member name="F:Syncfusion.Windows.Forms.SkinManager.ContainsSkinManager">
            <summary>
            Constructor
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SkinManager.SetVisualStyle(System.Windows.Forms.Control,Syncfusion.Windows.Forms.VisualTheme)">
            <summary>
            Set the VisualTheme for them for the parent control by Control and Visual Theme.
            </summary>
            <param name="control"></param>
            <param name="visualTheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SkinManager.SetVisualStyle(System.Windows.Forms.Control,System.String)">
            <summary>
            Set the VisualTheme for them for the parent control.
            </summary>
            <param name="control"></param>
            <param name="visualTheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SkinManager.IterateControls(System.Windows.Forms.Control,System.String)">
            <summary>
            Iterations for the VisualTheme for the child control and components.
            </summary>
            <param name="control"></param>
            <param name="visualStyle"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SkinManager.IterateComponents(System.Windows.Forms.Control,System.String)">
            <summary>
            Iterations for the VisualTheme for the Components.
            </summary>
            <param name="ctrl"></param>
            <param name="visualStyle"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SkinManager.Controls">
            <summary>
            Get or Set the control to Change the skin.
            </summary>
             
        </member>
        <member name="T:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper">
            <summary>
            Helper class for handling corner radius of control region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper"/> class.
            </summary>
            <param name="owner">The owner control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper.GetPath(System.Drawing.RectangleF)">
            <summary>
            Gets the graphics path for region border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper.UpdateRegion">
            <summary>
            Updates and sets control's region.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper.GetMinimalSize(System.Drawing.Size)">
            <summary>
            Retrieves the minimal size of the owner control.
            </summary>
            <param name="currentMinimalSize">Current minimal size.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Utils.CornerRadiusHelper.CornerRadius">
            <summary>
            Gets or sets corner radius.
            </summary>
            <remarks>Radius has to be not less than zero or half of minimum dimension (width or height) of control.
            If radius is zero, region has rectangular appearance.
            </remarks>
        </member>
        <member name="T:Syncfusion.Drawing.IconPaint">
            <summary>
            IconPaint is a helper class for drawing and caching bitmaps from a resource manifest with a given forecolor.
            </summary>
            <remarks>
            The bitmaps are loaded from the manifest and cached. The PaintIcon routine
            will substitute black pixels of the original bitmap and draw them with a 
            specified forecolor.
            </remarks>
        </member>
        <member name="F:Syncfusion.Drawing.IconPaint.bitmaps">
            <summary>
            The bitmap cache.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.IconPaint.manifestPrefix">
            <summary>
            The manifest to load from. The bitmaps should be saved in the Resources
            tree in the Visual Studio project with the build action set to "Embedded Resource".
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.IconPaint.assembly">
            <summary>
            The assembly to load from. The bitmaps should be saved in the Resources
            tree in Visual Studio project with the build action set to "Embedded Resource".
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Drawing.IconPaint"/> object with manifestPrefix and a reference to the assembly
            to load bitmaps from. You should save this object in a static variable.
            </summary>
            <param name="manifestPrefix"> The manifest to load from. The bitmaps should be saved in the Resources
            tree in the Visual Studio project with the build action set to "Embedded Resource".</param>
            <param name="ass">The assembly to load from. The bitmaps should be saved in the Resources
            tree in Visual Studio project with the build action set to "Embedded Resource".</param>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint._GetBitmap(System.String)">
            <summary>
            Loads bitmap from manifest.
            </summary>
            <param name="bitmapName">The bitmap name.</param>
            <returns>Reference to bitmap; NULL if bitmap failed to load.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint.GetBitmap(System.String)">
            <summary>
            Returns bitmap from cache or loads bitmap from manifest on first use.
            </summary>
            <param name="bitmapName">The bitmap name.</param>
            <returns>Reference to bitmap; NULL if bitmap failed to load.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint.CenterInRect(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Calculates coordinates for a centered rectangle.
            </summary>
            <param name="rect">The existing bounds.</param>
            <param name="size">The size of the rectangle to be centered.</param>
            <returns>A rectangle inside the specified bounds.</returns>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint.PaintIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Paints the specified bitmap substituting black pixels with a new color.
            </summary>
            <param name="g">A Graphics object used to draw the bitmap.</param>
            <param name="bounds">A Rectangle which contains the boundary data of the rectangle.</param>
            <param name="offset">A Point that specifies pixels to offset the bitmap from its origin point.</param>
            <param name="bmp">The bitmap to be drawn on the screen.</param>
            <param name="foreColor">The new color used to substitute black pixels.</param>
            <returns>A Rectangle which contains the boundary data of the drawn bitmap.</returns>
            <remarks>
            The PaintIcon routine
            will substitute black pixels of the original bitmap and draw them with the
            specified forecolor. The bitmap is centered inside the specified bounds. 
            Use the offset if you want to display a "pressed button" state. If the button is
            pressed, specify offset = new Point(1, 1).
            </remarks>
        </member>
        <member name="M:Syncfusion.Drawing.IconPaint.PaintIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.String,System.Drawing.Color)">
            <summary>
            Loads the bitmap from the manifest and paints it substituting black pixels with a new color.
            </summary>
            <param name="g">A Graphics object used to draw the bitmap.</param>
            <param name="bounds">A Rectangle which contains the boundary data of the rectangle.</param>
            <param name="offset">A Point that specifies pixel to offset the bitmap from its origin point.</param>
            <param name="bitmapName">The name of the bitmap.</param>
            <param name="foreColor">The new color used to substitute black pixels.</param>
            <returns>A Rectangle which contains the boundary data of the drawn bitmap.</returns>
            <remarks>
            The PaintIcon routine
            will substitute black pixels of the original bitmap and draw them with the
            specified forecolor. The bitmap is centered inside the specified bounds. 
            Use the offset if you want to display a "pressed button" state. If the button is
            pressed, specify offset = new Point(1, 1).
            </remarks>
        </member>
        <member name="T:Syncfusion.Drawing.PatternStyle">
            <summary>
            Specifies the pattern style used in <see cref="P:Syncfusion.Drawing.BrushInfo.PatternStyle"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Horizontal">
            <summary>
               <para>
                  A pattern of horizontal lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Vertical">
            <summary>
               <para>
                  A pattern of vertical lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.ForwardDiagonal">
            <summary>
               <para>
                  A pattern of lines on a diagonal from top-left to bottom-right.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.BackwardDiagonal">
            <summary>
               A pattern of lines on a diagonal from
               top-right to bottom-left.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Cross">
            <summary>
               <para>
                  A pattern of criss-cross horizontal and vertical lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DiagonalCross">
            <summary>
               <para>
                  A pattern of criss-cross diagonal lines.
               </para>
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent05">
            <summary>
            Specifies a 5-percent hatch. The ratio of foreground color to background color is 5:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent10">
            <summary>
            Specifies a 10-percent hatch. The ratio of foreground color to background color is 10:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent20">
            <summary>
            Specifies a 20-percent hatch. The ratio of foreground color to background color is 20:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent25">
            <summary>
            Specifies a 25-percent hatch. The ratio of foreground color to background color is 25:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent30">
            <summary>
            Specifies a 30-percent hatch. The ratio of foreground color to background color is 30:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent40">
            <summary>
            Specifies a 40-percent hatch. The ratio of foreground color to background color is 40:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent50">
            <summary>
            Specifies a 50-percent hatch. The ratio of foreground color to background color is 50:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent60">
            <summary>
            Specifies a 60-percent hatch. The ratio of foreground color to background color is 60:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent70">
            <summary>
            Specifies a 70-percent hatch. The ratio of foreground color to background color is 70:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent75">
            <summary>
            Specifies a 75-percent hatch. The ratio of foreground color to background color is 75:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent80">
            <summary>
            Specifies a 80-percent hatch. The ratio of foreground color to background color is 80:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Percent90">
            <summary>
            Specifies a 90-percent hatch. The ratio of foreground color to background color is 90:100.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LightDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LightUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points and are spaced 50 percent closer together than BackwardDiagonal, but they are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DarkDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, are spaced 50 percent closer together than, and are twice the width of ForwardDiagonal. This hatch pattern is not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DarkUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, are spaced 50 percent closer together than BackwardDiagonal and are twice its width, but the lines are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.WideDownwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the right from top points to bottom points, have the same spacing as hatch style ForwardDiagonal and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.WideUpwardDiagonal">
            <summary>
            Specifies diagonal lines that slant to the left from top points to bottom points, have the same spacing as hatch style BackwardDiagonal and are triple its width, but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LightVertical">
            <summary>
            Specifies light vertical lines. 
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LightHorizontal">
            <summary>
            Specifies light horizontal lines. 
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.NarrowVertical">
            <summary>
            Specifies narrow vertical lines .
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.NarrowHorizontal">
            <summary>
            Specifies narrow horizontal lines 
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DarkVertical">
            <summary>
            Specifies vertical lines that are spaced 50 percent closer together than Vertical and are twice its width.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DarkHorizontal">
            <summary>
            Specifies horizontal lines that are spaced 50 percent closer together than Horizontal and are twice the width of HatchStyleHorizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DashedDownwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DashedUpwardDiagonal">
            <summary>
            Specifies dashed diagonal lines, that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DashedHorizontal">
            <summary>
            Specifies dashed horizontal lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DashedVertical">
            <summary>
            Specifies dashed vertical lines.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.SmallConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LargeConfetti">
            <summary>
            Specifies a hatch that has the appearance of confetti and is composed of larger pieces than SmallConfetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.ZigZag">
            <summary>
            Specifies horizontal lines that are composed of zigzags.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Wave">
            <summary>
            Specifies horizontal lines that are composed of tildes.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DiagonalBrick">
            <summary>
            Specifies a hatch that has the appearance of layered bricks that slant to the left from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.HorizontalBrick">
            <summary>
            Specifies a hatch that has the appearance of horizontally layered bricks.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Weave">
            <summary>
            Specifies a hatch that has the appearance of a woven material.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Plaid">
            <summary>
            Specifies a hatch that has the appearance of a plaid material.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Divot">
            <summary>
            Specifies a hatch that has the appearance of divots.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DottedGrid">
            <summary>
            Specifies horizontal and vertical lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.DottedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines, each of which is composed of dots, that cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Shingle">
            <summary>
            Specifies a hatch that has the appearance of diagonally-layered shingles that slant to the right from top points to bottom points.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Trellis">
            <summary>
            Specifies a hatch that has the appearance of a trellis.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.Sphere">
            <summary>
            Specifies a hatch that has the appearance of spheres laid adjacent to one another.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.SmallGrid">
            <summary>
            Specifies horizontal and vertical lines that cross and are spaced 50 percent closer together than hatch style Cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.SmallCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.LargeCheckerBoard">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard with squares that are twice the size of SmallCheckerBoard.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.OutlinedDiamond">
            <summary>
            Specifies forward diagonal and backward diagonal lines that cross but are not antialiased.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.PatternStyle.SolidDiamond">
            <summary>
            Specifies a hatch that has the appearance of a checkerboard placed diagonally.
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.PatternStyleEditor">
            <summary>
               Provides a <see cref="T:System.Drawing.Design.UITypeEditor"/> for the <see cref="T:Syncfusion.Drawing.PatternStyle"/> enumeration.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.PatternStyleEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <override/>
        </member>
        <member name="M:Syncfusion.Drawing.PatternStyleEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <override/>
        </member>
        <member name="T:Syncfusion.Drawing.RichTextPaint">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.PaintStatic(System.Drawing.Graphics,System.Windows.Forms.RichTextBox,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.DrawRichText(System.Drawing.Graphics,System.Windows.Forms.RichTextBox,System.String,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.DrawRichText(System.Drawing.Graphics,System.Windows.Forms.RichTextBox,System.String,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Boolean,System.Int32,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.DrawRichText(System.Drawing.Graphics,System.String,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.DrawRichText(System.Drawing.Graphics,System.String,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean,System.Int32,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.IsValidRtf(System.String)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RichTextPaint.ConvertInchesToTwips(System.Int32)">
            <summary>
            Convert between inches and twips (1/1440 inch, used by Win32 API calls).
            </summary>
            <param name="n">Value in inches.</param>
            <returns>Value in twips.</returns>
        </member>
        <member name="T:Syncfusion.Drawing.RotatePaint">
            <summary>
            Helper routines for drawing rotated text.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotatePoint(System.Drawing.Point,System.Double)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotatePoint(System.Drawing.Point,System.Double,System.Drawing.Point)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotateRectangle(System.Drawing.Rectangle,System.Double)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotateRectangle(System.Drawing.Rectangle,System.Double,System.Drawing.Point)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CalcOutsideRect(System.Drawing.Rectangle,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CalcInsideRect(System.Drawing.Rectangle,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CenterInRect(System.Drawing.Rectangle,System.Drawing.Size)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.DrawRotatedString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Rectangle,System.Drawing.StringFormat,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotatePoint(System.Drawing.PointF,System.Double)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotatePoint(System.Drawing.PointF,System.Double,System.Drawing.PointF)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotateRectangle(System.Drawing.RectangleF,System.Double)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.RotateRectangle(System.Drawing.RectangleF,System.Double,System.Drawing.PointF)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CalcOutsideRect(System.Drawing.RectangleF,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CalcInsideRect(System.Drawing.RectangleF,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.MeasureStringBounds(System.Drawing.SizeF,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.MeasureStringBounds(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Drawing.StringFormat,System.Single)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.CenterInRect(System.Drawing.RectangleF,System.Drawing.SizeF)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Drawing.RotatePaint.DrawRotatedString(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.Drawing.StringFormat,System.Single)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupRelativeAlignment">
            <summary>
            Specifies the relative alignment of a popup child about its parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.TopLeft">
            <summary>
            The child will be aligned to the parent's top-left corner
            and drawn upwards and to the right of the parent's left border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.TopRight">
            <summary>
            The child will be aligned to the parent's top-right corner
            and drawn upwards and to the left of the parent's right border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.RightTop">
            <summary>
            The child will be aligned to the parent's top-right corner
            and drawn downwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.RightBottom">
            <summary>
            The child will be aligned to the parent's bottom-right corner
            and drawn upwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.BottomLeft">
            <summary>
            The child will be aligned to the parent's bottom-left corner
            and drawn downwards and to the right of the parent's left border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.BottomRight">
            <summary>
            The child will be aligned to the parent's bottom-right corner
            and drawn downwards and to the left of the parent's right border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.LeftTop">
            <summary>
            The child will be aligned to the parent's top-left corner
            and drawn downwards and to the left of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.LeftBottom">
            <summary>
            The child will be aligned to the parent's bottom-left corner
            and drawn downwards and to the right of the parent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.Default">
            <summary>
            Does not indicate any of the above alignments.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IPopupItem">
            <summary>
            A generic interface for any control that wants to participate 
            in the Popup framework.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupItem.GetPopupParentControl">
            <summary>
            Returns the popup's control parent.
            </summary>
            <remarks>
            If such a control exists, then the Popup framework will use
            it in its popup activation logic.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupItem.IsRelatedControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Indicates whether a specified control is part of the
            popup hierarchy.
            </summary>
            <param name="control">A control instance.</param>
            <param name="askPopupParent">True indicates this query should
            be passed to the IPopupParent, if any; False indicates you 
            should not query the popup parent.</param>
            <returns>True if the control is part of the Popup hierarchy;
            False otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupCloseType">
            <summary>
            Specifies the way in which a popup was closed.
            </summary>
            <remarks>
            This information is usually provided in a 
            PopupControlContainer's <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event.
            You can use it to determine, in some cases, whether or not
            to use the updated data in a popup.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupCloseType.Done">
            <summary>
            The user wants the changes made in the popup to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupCloseType.Canceled">
            <summary>
            The user canceled the popup and expects the changes, if any, to be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupCloseType.Deactivated">
            <summary>
            The popup was deactivated due to the user clicking in some
            other window, a different application getting focus, etc.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IPopupParent">
            <summary>
            A generic interface that defines a popup parent, that will
            control the alignment of a popup, etc.
            </summary>
            <remarks><para>Any object / control that wants to act as a popup's parent
            and participate in the popup framework should implement this interface.</para>
            <para>Take a look at the PopupsInDepth sample under the Tools\Samples\Editors Package\PopupControlContainer\Advanced
            folder for an implementation of this interface.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupParent.ChildClosing(Syncfusion.Windows.Forms.IPopupChild,Syncfusion.Windows.Forms.PopupCloseType)">
            <summary>
            Will be called to indicate that the popup child was closed
            in the specified mode.
            </summary>
            <param name="childUI">The child that was closed.</param>
            <param name="popupCloseType">A <see cref="T:Syncfusion.Windows.Forms.PopupCloseType"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupParent.GetLocationForPopupAlignment(Syncfusion.Windows.Forms.PopupRelativeAlignment,Syncfusion.Windows.Forms.PopupRelativeAlignment@)">
            <summary>
            Returns the location for popup, given the preferred relative
            alignments.
            </summary>
            <remarks>
            <para>This method allows you to provide 8 different preferred positions for
            your popup, in any order.</para>
            <para>Different preferred positions are necessary because some positions
            may not be ideal for the popup as there may not be enough screen space
            for the popup when shown in that position.</para>
            <para>The popup will first call this method with prevAlignment set to
            <see cref="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.Default"/>. You should then return a location and
            designate this location as one of the 8 positions in the <see cref="T:Syncfusion.Windows.Forms.PopupRelativeAlignment"/>
            enumeration using the newAlignment reference. </para>
            <para>The popup will then check if there is enough space in the screen
            to draw at this location. If not, it will call this method again with
            prevAlignment set to newAlignment from the previous call.</para>
            <para>
            This goes on until you return a location that the popup finds acceptable.
            However, if you run out of locations before the popup can find an acceptable location,
            then you should set newAlignment to <see cref="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.Default"/>. The popup will then assume
            that you don't have any more positions to supply and do the best it can
            with the supplied location.
            </para>
            </remarks>
            <param name="prevAlignment">The previous alignment.</param>
            <param name="newAlignment">The new alignment designated for the returned location.</param>
            <returns>
            An ideal location for popup designated by one of the <see cref="T:Syncfusion.Windows.Forms.PopupRelativeAlignment"/> values in
            newAlignment. Or returns a Point.Empty and set newAlignment to <see cref="F:Syncfusion.Windows.Forms.PopupRelativeAlignment.Default"/>
            if you do not intend to provide multiple preferred locations.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupParent.GetBorderOverlapCue(Syncfusion.Windows.Forms.PopupRelativeAlignment)">
            <summary>
            Returns a line (defined by 2 points) in screen co-ordinates that indicates the
            border overlap between the child and parent.
            </summary>
            <param name="relativeAlignment">The preferred alignment selected using the
            <see cref="M:Syncfusion.Windows.Forms.IPopupParent.GetLocationForPopupAlignment(Syncfusion.Windows.Forms.PopupRelativeAlignment,Syncfusion.Windows.Forms.PopupRelativeAlignment@)"/> method.</param>
            <remarks>
            If a valid line is provided, the popup child in that
            area will be drawn in an overlap style.
            </remarks>
            <returns>
            An array of 2 points representing a line (in screen co-ordinates)
            where the overlap takes place. NULL if no overlap is desired.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IPopupParent.IsRightToLeft">
            <summary>
            Indicates whether control's elements should be rendered right-to-left.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IPopupChild">
            <summary>
            Defines a generic interface which when implemented will allow
            that object / control to participate in the popup framework.
            </summary>
            <remarks>
            This interface should be implemented by an object / control that 
            acts like a popup window and wants to participate in the popup framework.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupChild.HidePopup(Syncfusion.Windows.Forms.PopupCloseType)">
            <summary>
            Hides the popup window.
            </summary>
            <param name="popupCloseType">The PopupCloseType value that indicates
            the mode in which this popup should be closed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupChild.IsShowing">
            <summary>
            Indicates whether a popup is currently active / open.
            </summary>
            <returns>True if it is open; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IPopupChild.PopupParent">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/> parent.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/> interface.</value>
            <remarks>
            The Popup framework can handle a hierarchy of popups (like
            in a menu) for which it requires each popup child to provide
            a reference to its popup parent.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupClosedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A PopupClosedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupClosedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupClosedEventArgs.#ctor(Syncfusion.Windows.Forms.PopupCloseType)">
            <summary>
            Creates an instance of the PopupClosedEventArgs class.
            </summary>
            <param name="popupCloseType">A PopupCloseType value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupClosedEventArgs.PopupCloseType">
            <summary>
            Returns the PopupCloseType value indicating the way in which 
            the popup was closed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IProvideCustomContextMenuPositionalInformation">
            <summary>
            Implement this interface to provide context menu location in your control when 
            the context menu is invoked by a keyboard key.
            </summary>
            <remarks>Used by the XPMenus framework (when using PopupMenus in Essential Tools) to determine the context menu location
            for a control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IProvideCustomContextMenuPositionalInformation.GetMenuPositionForKeyboardInvoke">
            <summary>
            Returns a point in client coordinates of the control.
            </summary>
            <remarks>
            <para>This method will be called when the context menu is being
            invoked due to a key like Shift + F10. The control that implements this
            interface should then return a point in client coordinates of the
            control where the context menus should be shown. </para>
            <para>If the control were a
            TreeView for example, it should then return a location beside the current
            selected node.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MessageFilterEntryHelperWeakContainer">
            <summary>
            Summary description for MessageFilterEntryHelperWeakContainer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.KeyboardProcHooker.MessageHookProc(System.Int32,System.Int32,System.Int32)">
            <summary>
                HookProc used for catch mouse messages.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GetMsgProcHooker.MessageHookProc(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
                HookProc used for catch mouse messages.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WndProcHooker.MessageHookProc(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
                HookProc used for catch mouse messages.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseProcHookerUtil.MessageHookProc(System.Int32,System.Int32,System.Int32)">
            <summary>
                HookProc used for catch mouse messages.
            </summary>
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IIgnoreWorkingArea">
            <summary>
            Provides information, whether popup is ignoring
            working area of the display before showing.
            This interface should be implemented by classes,
            that contain ot use popups.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IIgnoreWorkingArea.IgnoreWorkingArea">
            <summary>
            Indicates whether derived class ignores working area of the display before showing popup windows.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IFindParentForm">
            <summary>
            Provides a FindParentForm method that returns the parent form. Use this interface
            instead of Control.FindForm when you want to support nested windowless grid as used
            in GridGroupingControl. See also <see cref="M:Syncfusion.Windows.Forms.FindFormHelper.FindForm(System.Windows.Forms.Control)"/> of the <see cref="T:Syncfusion.Windows.Forms.FindFormHelper"/>
            class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IFindParentForm.FindParentForm">
            <summary>
            Returns the parent form of the control. Use this
            instead of Control.FindForm when you want to support nested windowless grid as used
            in GridGroupingControl. See also <see cref="M:Syncfusion.Windows.Forms.FindFormHelper.FindForm(System.Windows.Forms.Control)"/> of the <see cref="T:Syncfusion.Windows.Forms.FindFormHelper"/>
            class.
            </summary>
            <returns>The parent form.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FindFormHelper">
            <summary>
            Provides a FindFormHelper.FindForm(Control) method that supports the IFindParentForm interface. Use this instead of calling
            Control.FindForm.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FindFormHelper.FindForm(System.Windows.Forms.Control)">
            <summary>
            Provides a FindFormHelper.FindForm(Control) method that you can use instead of calling
            Control.FindForm.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IPopupControlContainer">
            <summary>
            Defines an interface that a <see cref="P:Syncfusion.Windows.Forms.IPopupControlContainer.PopupHost"/> can take and parent itself to.
            </summary>
            <remarks>
            <para>
            <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> provides a default implementation that should be useful for all
            practical purposes.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IPopupControlContainer.GetPreferredLocation(Syncfusion.Windows.Forms.PopupRelativeAlignment,Syncfusion.Windows.Forms.PopupRelativeAlignment@)">
            <summary>
            Provides the appropriate location to the popup given the alignment preferences.
            </summary>
            <remarks>
            <para>
            This method is usually called to determine whether the open popup should be closed
            due to some action in a different control. If this different control is a "related" control,
            the popup framework will not close the popup.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IPopupControlContainer.PopupHost">
            <summary>
            Gets / sets the <see cref="P:Syncfusion.Windows.Forms.IPopupControlContainer.PopupHost"/> this container is parented to.
            </summary>
            <value>
            An instance of the <see cref="P:Syncfusion.Windows.Forms.IPopupControlContainer.PopupHost"/> class.
            </value>
            <remarks>
            If this is a control, you would set it to be a child of
            the <see cref="P:Syncfusion.Windows.Forms.IPopupControlContainer.PopupHost"/> and position it appropriately in the set property.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DropDownWindow">
            <summary>
            A generic window that can be used for drop-down behavior, with WS_EX_TOOLWINDOW and CS_SAVEBITS styles.
            </summary>
            <remarks>
            Internally used by the PopupHost class.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TopLevelWindow">
            <summary>
            A form-derived class that can be derived to create custom top-level 
            windows like ToolTips, a splash window, etc.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TopLevelWindow.#ctor">
            <summary>
            Creates a new instance of the TopLevelWindow class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TopLevelWindow.ShowWindowTopMost">
            <summary>
            Shows the window as the top-level window without activating it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TopLevelWindow.OnHandleCreated(System.EventArgs)">
            <summary>
            Overridden to ignore Win32Exception.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ShadowWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupHost">
            <summary>
            The top level form-derived class that hosts a <see cref="P:Syncfusion.Windows.Forms.PopupHost.PopupControlContainer"/>
            when it is dropped-down.
            </summary>
            <remarks>
            <para>You will normally not have to use this class or refer to
            an instance of this class. An instance of this class will
            be automatically generated by the <see cref="P:Syncfusion.Windows.Forms.PopupHost.PopupControlContainer"/> which
            will then set this as its parent when <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/> is called on it.</para>
            <para>
            However, you can for example access an instance of this
            class from the PopupControlContainer and change certain properties.
            </para>
            <para>
            You can include a shadow in your popups by setting the NeedShadow property.
            </para>
            </remarks>
            <example>
            Take a look at PopupControlContainer.PopupHost property reference for an example
            on how to access and modify the PopupHost's properties during run-time.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.#ctor">
            <summary>
            Creates a new instance of the PopupHost class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.WndProc"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupHost.m_bIgnoreWorkingArea">
            <summary>
            Ignore working area when menu begin popup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.OnVisibleChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnVisibleChanged"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.OnSizeChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSizeChanged"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.ShowPopup">
            <summary>
            Shows the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.UpdateVisibility">
            <summary>
            Updates popup host visibility and z-order.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.ComputeLayout">
            <summary>
            Computes size and position of popup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupHost.HidePopup">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupHost.NeedShadow">
            <summary>
            Indicates whether a shadow should
            be drawn around the popup window.
            </summary>
            <value>True if a shadow is needed; False otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupHost.PopupControlContainer">
            <summary>
            Gets / sets the PopupControlContainer that this PopupHost
            will host.
            </summary>
            <value>
            An implementation of the <see cref="T:Syncfusion.Windows.Forms.IPopupControlContainer"/> interface.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupHost.CurrentRAlign">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.PopupRelativeAlignment"/> value indicating
            the current alignment of the popup window.
            </summary>
            <value>
            A <see cref="T:Syncfusion.Windows.Forms.PopupRelativeAlignment"/> value.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupHost.OverlapBorderColor">
            <summary>
            Gets / sets the overlap border color with which this top-level form should be drawn.
            </summary>
            <value>A color value.</value>
            <remarks>
            <para>This color will be used by this form only when the <see cref="T:System.Windows.Forms.FormBorderStyle"/> is set to None.</para>
            <para>The form will draw a custom single-line border with this color and also draw
            the overlapped look, if overlapped borders are available.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupHost.IgnoreWorkingArea">
            <summary>
            Gets or sets ignore working area when menu begin popup.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupControlContainer">
             <summary>
             A panel-derived class that will let you design custom popups
             within a form's designer.
             </summary>
             <remarks>
             <para>To design a custom popup, drag-and-drop it off the toolbox
             into a form during design-time. Then populate it with
             appropriate controls just like you would any other panel.
             You can mark it as invisible (Visible = false) so that it
             will not interfere with the form's layout mechanism. It's also recommended that
             you unparent it from the design-time parent in your form constructor code, as shown in the sample code below.</para>
             <para>
             When you are ready to popup, call this class's <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/> method. This will show
             the popup at the specified location.
             </para>
             <para>
             There are different configurations in which you can use this
             PopupControlContainer.
             <list type="bullet">
             <item><description>When you specify a Parent Control using
             <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.ParentControl"/> and pass a Point.Empty location to
             <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/>, the popup location will be dynamically determined
             based on the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.ParentControl"/>'s bounds and the screen area.</description>
             </item>
             <item>
             For even more control over the alignment and positioning
             of the popup, you should implement an <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/> interface
             and assign that to the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupParent"/> property (this you would
             do instead of the above PopupControl-based alignment.).
             </item>
             </list>
             </para>
             <para>When the popup is showing, the PopupControlContainer,
             in the ProcessDialogKey override will look for Alt, Enter, Tab, Esc, F4,
             and F2 keys and either cancel or close the popup. If you want
             to prevent this, then set <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.IgnoreDialogKey"/> to False. You should
             then make sure to close the popup manually whenever appropriate using
             <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.HidePopup(Syncfusion.Windows.Forms.PopupCloseType)"/>. </para>
             <para>The PopupControlContainer also fires the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforePopup"/>, <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.Popup"/>(after popup)
             and <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> events that you can handle. You could for example
             set the focus on a control within the PopupControlContainer in the
             popup event handler.</para>
             </remarks>
             <example>
             The following example has a PopupControlContainer that gets shown when the
             user does an Alt+DownArrow on a text box.
             <coderef file="Tools\Samples\Editors Package\PopupControlContainer\PopupControlContainerDemo\cs\Form1.cs" name="PopupControlContainer Initialization" lang="C#"><code lang="C#">
            			public Form1()
            			{
            				InitializeComponent();
            				// It's recommended that you keep the PopupControlContainer unparented by
            				// any control on the form (which will be the default case as set up during design-time).
            				// Otherwise, the Form won't close sometimes after dropping down this popup!
            				this.popupControlContainer1.Parent.Controls.Remove(this.popupControlContainer1);
            			}
                     #region Windows Form Designer generated code
                     private void InitializeComponent()
                     {
                         System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(Form1));
                         this.popupControlContainer1 = new Syncfusion.Windows.Forms.PopupControlContainer();
                         this.cancel = new System.Windows.Forms.Button();
                         this.OK = new System.Windows.Forms.Button();
                         this.popupTextBox = new System.Windows.Forms.TextBox();
                         this.label1 = new System.Windows.Forms.Label();
                         this.sourceTextBox = new System.Windows.Forms.TextBox();
                         this.groupBox1 = new System.Windows.Forms.GroupBox();
                         this.dropDownBtn = new System.Windows.Forms.Button();
                         this.mainMenu1 = new System.Windows.Forms.MainMenu();
                         this.menuItem1 = new System.Windows.Forms.MenuItem();
                         this.menuItem2 = new System.Windows.Forms.MenuItem();
                         this.popupControlContainer1.SuspendLayout();
                         this.groupBox1.SuspendLayout();
                         this.SuspendLayout();
                         //
                         // popupControlContainer1
                         //
                         this.popupControlContainer1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                         this.popupControlContainer1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                                              this.cancel,
                                                                                                              this.OK,
                                                                                                              this.popupTextBox});
                         this.popupControlContainer1.Location = new System.Drawing.Point(80, 128);
                         this.popupControlContainer1.Name = "popupControlContainer1";
                         this.popupControlContainer1.Size = new System.Drawing.Size(120, 128);
                         this.popupControlContainer1.TabIndex = 0;
                         this.popupControlContainer1.Visible = false;
                         this.popupControlContainer1.Popup += new System.EventHandler(this.popupControlContainer1_Popup);
                         this.popupControlContainer1.CloseUp += new Syncfusion.Windows.Forms.PopupClosedEventHandler(this.popupControlContainer1_CloseUp);
                         this.popupControlContainer1.BeforePopup += new System.ComponentModel.CancelEventHandler(this.popupControlContainer1_BeforePopup);
                         //
                         // cancel
                         //
                         this.cancel.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                             | System.Windows.Forms.AnchorStyles.Left)
                             | System.Windows.Forms.AnchorStyles.Right);
                         this.cancel.Location = new System.Drawing.Point(64, 96);
                         this.cancel.Name = "cancel";
                         this.cancel.Size = new System.Drawing.Size(48, 24);
                         this.cancel.TabIndex = 2;
                         this.cancel.Text = "Cancel";
                         this.cancel.Click += new System.EventHandler(this.cancelButton_Click);
                         //
                         // OK
                         //
                         this.OK.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                             | System.Windows.Forms.AnchorStyles.Left)
                             | System.Windows.Forms.AnchorStyles.Right);
                         this.OK.Location = new System.Drawing.Point(8, 96);
                         this.OK.Name = "OK";
                         this.OK.Size = new System.Drawing.Size(48, 24);
                         this.OK.TabIndex = 1;
                         this.OK.Text = "OK";
                         this.OK.Click += new System.EventHandler(this.OK_Click);
                         //
                         // popupTextBox
                         //
                         this.popupTextBox.Multiline = true;
                         this.popupTextBox.Name = "popupTextBox";
                         this.popupTextBox.Size = new System.Drawing.Size(118, 90);
                         this.popupTextBox.TabIndex = 0;
                         this.popupTextBox.Text = "";
                         //
                         // label1
                         //
                         this.label1.Font = new System.Drawing.Font("Microsoft Sans Serif", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((System.Byte)(0)));
                         this.label1.Location = new System.Drawing.Point(16, 56);
                         this.label1.Name = "label1";
                         this.label1.Size = new System.Drawing.Size(256, 64);
                         this.label1.TabIndex = 1;
                         this.label1.Text = "Associate a PopupControlContainer with this TextBox. And also transfer data back " +
                             "and forth between the popup and the TextBox.";
                         //
                         // sourceTextBox
                         //
                         this.sourceTextBox.Location = new System.Drawing.Point(40, 128);
                         this.sourceTextBox.Name = "sourceTextBox";
                         this.sourceTextBox.Size = new System.Drawing.Size(200, 20);
                         this.sourceTextBox.TabIndex = 2;
                         this.sourceTextBox.Text = "Alt+DownArrow for popup";
                         this.sourceTextBox.KeyDown += new System.Windows.Forms.KeyEventHandler(this.textBoxPopupParent_KeyDown);
                         //
                         // groupBox1
                         //
                         this.groupBox1.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                                 this.dropDownBtn});
                         this.groupBox1.Location = new System.Drawing.Point(8, 32);
                         this.groupBox1.Name = "groupBox1";
                         this.groupBox1.Size = new System.Drawing.Size(280, 128);
                         this.groupBox1.TabIndex = 3;
                         this.groupBox1.TabStop = false;
                         this.groupBox1.Text = "PopupControlContainer demo";
                         //
                         // dropDownBtn
                         //
                         this.dropDownBtn.Image = ((System.Drawing.Bitmap)(resources.GetObject("dropDownBtn.Image")));
                         this.dropDownBtn.Location = new System.Drawing.Point(240, 96);
                         this.dropDownBtn.Name = "dropDownBtn";
                         this.dropDownBtn.Size = new System.Drawing.Size(26, 20);
                         this.dropDownBtn.TabIndex = 0;
                         this.dropDownBtn.Click += new System.EventHandler(this.dropDownBtn_Click);
                         //
                         // mainMenu1
                         //
                         this.mainMenu1.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                                                   this.menuItem1});
                         //
                         // menuItem1
                         //
                         this.menuItem1.Index = 0;
                         this.menuItem1.MenuItems.AddRange(new System.Windows.Forms.MenuItem[] {
                                                                                                   this.menuItem2});
                         this.menuItem1.Text = "Help";
                         //
                         // menuItem2
                         //
                         this.menuItem2.Index = 0;
                         this.menuItem2.Text = "About Syncfusion";
                         this.menuItem2.Click += new System.EventHandler(this.menuItem2_Click);
                         //
                         // Form1
                         //
                         this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
                         this.ClientSize = new System.Drawing.Size(292, 273);
                         this.Controls.AddRange(new System.Windows.Forms.Control[] {
                                                                                       this.sourceTextBox,
                                                                                       this.label1,
                                                                                       this.popupControlContainer1,
                                                                                       this.groupBox1});
                         this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
                         this.Menu = this.mainMenu1;
                         this.Name = "Form1";
                         this.Text = "Custom Popups Dialog";
                         this.popupControlContainer1.ResumeLayout(false);
                         this.groupBox1.ResumeLayout(false);
                         this.ResumeLayout(false);
            
                     }
                     #endregion
            
                     [STAThread]
                     public static void Main()
                     {
                         Application.Run(new Form1());
                     }
            
                     #region OpenClosePopup
                     private void textBoxPopupParent_KeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
                     {
                         // Using this unconventional if statement syntax to avoid "and" symbol (documentation restriction, please ignore).
            
                         // If user pressed key down, then show the popup.
                         if(e.Alt)
                             if(e.KeyCode == Keys.Down)
                                 if(!this.popupControlContainer1.IsShowing())
                                 {
                                     // Let the popup align around the source textBox.
                                     this.popupControlContainer1.ParentControl = this.sourceTextBox;
                                     // Passing Point.Empty will align it automatically around the above ParentControl.
                                     this.popupControlContainer1.ShowPopup(Point.Empty);
            
                                     e.Handled = true;
                                 }
                         // Escape should close the popup.
                         if(e.KeyCode == Keys.Escape)
                             if(this.popupControlContainer1.IsShowing())
                                 this.popupControlContainer1.HidePopup(PopupCloseType.Canceled);
                     }
            
                     private void OK_Click(object sender, System.EventArgs e)
                     {
                         this.popupControlContainer1.HidePopup(PopupCloseType.Done);
                     }
            
                     private void cancelButton_Click(object sender, System.EventArgs e)
                     {
                         this.popupControlContainer1.HidePopup(PopupCloseType.Canceled);
                     }
                     #endregion OpenClosePopup
            
                     #region PopupEvents
                     private void popupControlContainer1_BeforePopup(object sender, System.ComponentModel.CancelEventArgs e)
                     {
                         // Set the text to be edited with the text in the form text box.
                         this.popupTextBox.Text = this.sourceTextBox.Text;
                     }
            
                     private void popupControlContainer1_Popup(object sender, System.EventArgs e)
                     {
                         // Set the focus on the text box inside the popup after it is open.
                         this.popupTextBox.Focus();
                         this.popupTextBox.SelectionStart = 0;
                         this.popupTextBox.SelectionLength = 0;
                     }
            
                     private void popupControlContainer1_CloseUp(object sender, Syncfusion.Windows.Forms.PopupClosedEventArgs args)
                     {
                         // Transfer data from the popup.
                         if(args.PopupCloseType == PopupCloseType.Done)
                         {
                             this.sourceTextBox.Text = this.popupTextBox.Text;
                         }
                         // Set focus back to textbox.
                         if(args.PopupCloseType == PopupCloseType.Done
                             || args.PopupCloseType == PopupCloseType.Canceled)
                             this.sourceTextBox.Focus();
                     }
                     #endregion PopupEvents</code></coderef>
             <coderef file="Tools\Samples\Editors Package\PopupControlContainer\PopupControlContainerDemo\vb\Form1.vb" name="PopupControlContainer Initialization" lang="VB"><code lang="VB">
            			Public Sub New()
            				MyBase.New()
            				InitializeComponent()
            				' It's recommended that you keep the PopupControlContainer unparented by
            				' any Control on the Form (which will be the default case as set up during design-time).
            				' Otherwise, the Form wouldn't close sometimes, after dropping down this popup!
            				Me.popupControlContainer1.Parent.Controls.Remove(Me.popupControlContainer1)
            			End Sub
            
                    Private Sub InitializeComponent()
            
                        Dim resources As System.Resources.ResourceManager = New System.Resources.ResourceManager(GetType(Form1))
                        Me.popupControlContainer1 = New Syncfusion.Windows.Forms.PopupControlContainer()
                        Me.cancel = New System.Windows.Forms.Button()
                        Me.OK = New System.Windows.Forms.Button()
                        Me.popupTextBox = New System.Windows.Forms.TextBox()
                        Me.label1 = New System.Windows.Forms.Label()
                        Me.sourceTextBox = New System.Windows.Forms.TextBox()
                        Me.groupBox1 = New System.Windows.Forms.GroupBox()
                        Me.dropDownBtn = New System.Windows.Forms.Button()
                        Me.mainMenu1 = New System.Windows.Forms.MainMenu()
                        Me.menuItem1 = New System.Windows.Forms.MenuItem()
                        Me.menuItem2 = New System.Windows.Forms.MenuItem()
                        Me.popupControlContainer1.SuspendLayout()
                        Me.groupBox1.SuspendLayout()
                        Me.SuspendLayout()
                        '
                        ' popupControlContainer1
                        '
                        Me.popupControlContainer1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle
                        Me.popupControlContainer1.Controls.AddRange(New System.Windows.Forms.Control() {Me.cancel, Me.OK, Me.popupTextBox})
                        Me.popupControlContainer1.Location = New System.Drawing.Point(80, 128)
                        Me.popupControlContainer1.Name = "popupControlContainer1"
                        Me.popupControlContainer1.Size = New System.Drawing.Size(120, 128)
                        Me.popupControlContainer1.TabIndex = 0
                        Me.popupControlContainer1.Visible = False
                        AddHandler Me.popupControlContainer1.Popup, New System.EventHandler(AddressOf popupControlContainer1_Popup)
                        AddHandler Me.popupControlContainer1.CloseUp, New Syncfusion.Windows.Forms.PopupClosedEventHandler(AddressOf popupControlContainer1_CloseUp)
                        AddHandler Me.popupControlContainer1.BeforePopup, New System.ComponentModel.CancelEventHandler(AddressOf popupControlContainer1_BeforePopup)
                        '
                        ' cancel
                        '
                        Me.cancel.Anchor = (((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                                    Or System.Windows.Forms.AnchorStyles.Left) _
                                    Or System.Windows.Forms.AnchorStyles.Right)
                        Me.cancel.Location = New System.Drawing.Point(64, 96)
                        Me.cancel.Name = "cancel"
                        Me.cancel.Size = New System.Drawing.Size(48, 24)
                        Me.cancel.TabIndex = 2
                        Me.cancel.Text = "Cancel"
                        AddHandler Me.cancel.Click, New System.EventHandler(AddressOf cancelButton_Click)
                        '
                        ' OK
                        '
                        Me.OK.Anchor = (((System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom) _
                                    Or System.Windows.Forms.AnchorStyles.Left) _
                                    Or System.Windows.Forms.AnchorStyles.Right)
                        Me.OK.Location = New System.Drawing.Point(8, 96)
                        Me.OK.Name = "OK"
                        Me.OK.Size = New System.Drawing.Size(48, 24)
                        Me.OK.TabIndex = 1
                        Me.OK.Text = "OK"
                        AddHandler Me.OK.Click, New System.EventHandler(AddressOf OK_Click)
                        '
                        ' popupTextBox
                        '
                        Me.popupTextBox.Multiline = True
                        Me.popupTextBox.Name = "popupTextBox"
                        Me.popupTextBox.Size = New System.Drawing.Size(118, 90)
                        Me.popupTextBox.TabIndex = 0
                        Me.popupTextBox.Text = ""
                        '
                        ' label1
                        '
                        Me.label1.Font = New System.Drawing.Font("Microsoft Sans Serif", 10.0!, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, CType(0, Byte))
                        Me.label1.Location = New System.Drawing.Point(16, 56)
                        Me.label1.Name = "label1"
                        Me.label1.Size = New System.Drawing.Size(256, 64)
                        Me.label1.TabIndex = 1
                        Me.label1.Text = ("Associate a PopupControlContainer with this TextBox. And also transfer data back " + "and forth between the popup and the TextBox.")
                        '
                        ' sourceTextBox
                        '
                        Me.sourceTextBox.Location = New System.Drawing.Point(40, 128)
                        Me.sourceTextBox.Name = "sourceTextBox"
                        Me.sourceTextBox.Size = New System.Drawing.Size(200, 20)
                        Me.sourceTextBox.TabIndex = 2
                        Me.sourceTextBox.Text = "Alt+DownArrow for popup"
                        AddHandler Me.sourceTextBox.KeyDown, New System.Windows.Forms.KeyEventHandler(AddressOf textBoxPopupParent_KeyDown)
                        '
                        ' groupBox1
                        '
                        Me.groupBox1.Controls.AddRange(New System.Windows.Forms.Control() {Me.dropDownBtn})
                        Me.groupBox1.Location = New System.Drawing.Point(8, 32)
                        Me.groupBox1.Name = "groupBox1"
                        Me.groupBox1.Size = New System.Drawing.Size(280, 128)
                        Me.groupBox1.TabIndex = 3
                        Me.groupBox1.TabStop = False
                        Me.groupBox1.Text = "PopupControlContainer demo"
                        '
                        ' dropDownBtn
                        '
                        Me.dropDownBtn.Image = CType(resources.GetObject("dropDownBtn.Image"), System.Drawing.Bitmap)
                        Me.dropDownBtn.Location = New System.Drawing.Point(240, 96)
                        Me.dropDownBtn.Name = "dropDownBtn"
                        Me.dropDownBtn.Size = New System.Drawing.Size(26, 20)
                        Me.dropDownBtn.TabIndex = 0
                        AddHandler Me.dropDownBtn.Click, New System.EventHandler(AddressOf dropDownBtn_Click)
                        '
                        ' mainMenu1
                        '
                        Me.mainMenu1.MenuItems.AddRange(New System.Windows.Forms.MenuItem() {Me.menuItem1})
                        '
                        ' menuItem1
                        '
                        Me.menuItem1.Index = 0
                        Me.menuItem1.MenuItems.AddRange(New System.Windows.Forms.MenuItem() {Me.menuItem2})
                        Me.menuItem1.Text = "Help"
                        '
                        ' menuItem2
                        '
                        Me.menuItem2.Index = 0
                        Me.menuItem2.Text = "About Syncfusion"
                        AddHandler Me.menuItem2.Click, New System.EventHandler(AddressOf menuItem2_Click)
                        '
                        ' Form1
                        '
                        Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)
                        Me.ClientSize = New System.Drawing.Size(292, 273)
                        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.sourceTextBox, Me.label1, Me.popupControlContainer1, Me.groupBox1})
                        Me.Icon = CType(resources.GetObject("$this.Icon"), System.Drawing.Icon)
                        Me.Menu = Me.mainMenu1
                        Me.Name = "Form1"
                        Me.Text = "Custom Popups Dialog"
                        Me.popupControlContainer1.ResumeLayout(False)
                        Me.groupBox1.ResumeLayout(False)
                        Me.ResumeLayout(False)
            
                    End Sub
            
                    Private Sub textBoxPopupParent_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
            
                        ' Using this unconventional if statement syntax to avoid "and" symbol (documentation restriction, please ignore).
                        ' If user pressed key down, then show the popup.
                        ' Escape should close the popup.
                        If e.Alt Then
                            If (e.KeyCode = Keys.Down) Then
                                If Not (Me.popupControlContainer1.IsShowing) Then
                                    ' Let the popup align around the source textBox.
                                    Me.popupControlContainer1.ParentControl = Me.sourceTextBox
                                    ' Passing Point.Empty will align it automatically around the above ParentControl.
                                    Me.popupControlContainer1.ShowPopup(Point.Empty)
                                    e.Handled = True
                                End If
                            End If
                        End If
                        If (e.KeyCode = Keys.Escape) Then
                            If Me.popupControlContainer1.IsShowing Then
                                Me.popupControlContainer1.HidePopup(PopupCloseType.Canceled)
                            End If
                        End If
            
                    End Sub
                    Private Sub OK_Click(ByVal sender As Object, ByVal e As EventArgs)
            
                        Me.popupControlContainer1.HidePopup(PopupCloseType.Done)
            
                    End Sub
                    Private Sub cancelButton_Click(ByVal sender As Object, ByVal e As EventArgs)
            
                        Me.popupControlContainer1.HidePopup(PopupCloseType.Canceled)
            
                    End Sub
                    Private Sub popupControlContainer1_BeforePopup(ByVal sender As Object, ByVal e As CancelEventArgs)
            
                        ' Set the text to be edited with the text in the form text box.
                        Me.popupTextBox.Text = Me.sourceTextBox.Text
            
                    End Sub
                    Private Sub popupControlContainer1_Popup(ByVal sender As Object, ByVal e As EventArgs)
            
                        ' Set the focus on the text box inside the popup after its open.
                        Me.popupTextBox.Focus()
                        Me.popupTextBox.SelectionStart = 0
                        Me.popupTextBox.SelectionLength = 0
            
                    End Sub
                    Private Sub popupControlContainer1_CloseUp(ByVal sender As Object, ByVal args As PopupClosedEventArgs)
            
                        ' Transfer data from the popup.
                        ' Set focus back to textbox.
                        If (args.PopupCloseType = PopupCloseType.Done) Then
                            Me.sourceTextBox.Text = Me.popupTextBox.Text
                        End If
                        If ((args.PopupCloseType = PopupCloseType.Done) _
                                    OrElse (args.PopupCloseType = PopupCloseType.Canceled)) Then
                            Me.sourceTextBox.Focus()
                        End If
            
                    End Sub</code></coderef>
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupControlContainer.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.EnsurePopupHost">
            <summary>
            Ensures that the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupHost"/> property returns a valid PopupHost.
            </summary>
            <remarks>
            <para>
            Normally the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupHost"/> property will return a non-NULL value only when
            the popup was displayed at least once. Calling this method will ensure that the property
            returns a non-NULL value.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> class with a specified container.
            </summary>
            <param name="container">A <see cref="T:System.ComponentModel.IContainer"/> that represents the container of the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.</param>
            <remarks>
            <para>Containers are objects that encapsulate and track zero or more components. In this context, containment refers to logical containment, not visual containment. 
            You can use components and containers in a variety of scenarios, including scenarios that are both visual and not visual.</para>
            <para><bold>Note to Implementers:</bold>  To be a container, the class must implement the IContainer interface, which supports methods for adding, removing and retrieving components.</para>
            <para>Unlike other controls, a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> is not a direct child of your form (though this is the case during design-time).
            This requires you to explicitly dispose of this control before the form gets destroyed.
            With this constructor override, the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> automatically plugs itself into a form's
            default component-containment pattern (through the IContainer member) during design-time. If you create this class in code, then you have to set it up manually.</para>
            <para>The implementation simply adds the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> instance into the container.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.GetPreferredLocation(Syncfusion.Windows.Forms.PopupRelativeAlignment,Syncfusion.Windows.Forms.PopupRelativeAlignment@)">
            <summary>
            Gets preferred location.
            </summary>
            <param name="prevAlignment"></param>
            <param name="newAlignment"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupControlContainer.args">
            <summary>
            Shows the popup at the specified location.
            </summary>
            <param name="location">A point in screen coordinates.
            Can be Point.Empty.</param>
            <remarks>
            <para>A popup's position is determined as follows.</para>
            <para>First, if an <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/> interface is associated (using
            the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupParent"/> property), then it is queried for the preferred
            position. If there is no such interface, the location
            specified in the <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/> method call is used. If ShowPopup
            was called with Point.Empty, then the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.ParentControl"/>'s bounds are used
            to determine an appropriate position to drop-down.</para>
            <para>This will throw a <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforePopup"/> followed by a <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.Popup"/> event.</para>
            <para>Use <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.HidePopup(Syncfusion.Windows.Forms.PopupCloseType)"/> to hide the popup in code.</para>
            <para>
            When the popup is closed either programmatically or by the user,
            the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event will be thrown that will indicate
            whether the popup was closed or canceled.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.HidePopup">
            <summary>
            Hides a popup that is open.
            </summary>
            <remarks>
            <para>This method will hide the popup with the <see cref="F:Syncfusion.Windows.Forms.PopupCloseType.Canceled"/> mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.ConfirmDeactivate">
            <summary>
            This method is called from the BarManager class when the parent form is deactivated.
            It checks whether the user clicked inside a child control of this PopupControlContainer.
            If this is not the case (e.g. user clicked on another window on the desktop) then the popup gets hidden.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.HidePopup(Syncfusion.Windows.Forms.PopupCloseType)">
            <summary>
            Hides a popup with the specified <see cref="T:Syncfusion.Windows.Forms.PopupCloseType"/> mode.
            </summary>
            <param name="popupCloseType">A PopupCloseType value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.ProcessDialogKey"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overridden. <see cref="M:System.Windows.Forms.Control.WndProc"/>.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.FocusParent">
            <summary>
            Sets focus on the popup parent control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.FocusFirstVisibleParent">
            <summary>
            Focuses first visible parent.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.IsInSetFocus">
            <summary>
            Specifies whether the control is in set focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.ShouldSerializeEnableTouchMode">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.ApplyScaleToControl(System.Single)">
             <summary>
            applies the scaling
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.OnFontChanged(System.EventArgs)">
             <summary>
            font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.IsRelatedControl(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Checks whether the control is a related control.
            </summary>
            <param name="control"></param>
            <param name="askPopupParent"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.IsShowing">
            <summary>
            Indicates whether the popup is currently dropped down.
            </summary>
            <returns>True indicates popup is dropped down; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.OnBeforePopup(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforePopup event.
            </summary>
            <param name="args">A CancelEventArgs that contains the event data.</param>
            <remarks>
            <para>The OnBeforePopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors:  When overriding OnBeforePopup in a derived
            class, be sure to call the base class's OnBeforePopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.OnCloseUp(Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.PopupClosedEventArgs"/> instance containing
            data pertaining to this event.</param>
            <remarks>
            <para>The OnCloseUp method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Note to Inheritors:  When overriding OnCloseUp in a derived
            class, be sure to call the base class's OnCloseUp method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainer.OnPopup(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.Popup"/> event.
            </summary>
            <param name="args">An EventArgs instance containing
            data pertaining to this event.</param>
            <remarks>
            <para>The OnPopup method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class. </para>
            <para>Note to Inheritors:  When overriding OnPopup in a derived
            class, be sure to call the base class's OnPopup method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.DesignMode">
            <summary>
            Indicates whether the control is in design-mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.FakeFocus">
            <summary>
            Indicates whether the popup should send a kill focus message
            to the control with focus when the popup was shown.
            </summary>
            <value>True to send a KillFocus message; False otherwise. Default value
            is False.</value>
            <remarks>
            <para>Faking focus is only necessary when the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>
            doesn't take the focus but you want it to look like it
            took the focus.</para>
            <para>
            When this property is True, a KillFocus message will be
            sent to the control that currently has the focus after the
            PopupControlContainer is dropped down and a SetFocus message
            will be sent to the control with focus when the popup is
            closed.
            </para>
            <para>
            Again, you will probably not need this functionality in
            most of the cases, since you will probably set the focus
            on some control with this PopupControlContainer as soon
            as it pops up (from within the popup event handler).
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupHost">
             <summary>
             Gets or sets a reference to the PopupHost that will be
             used to host this PopupControlContainer when dropped down.
             </summary>
             <value>The PopupHost object that will host this PopupControlContainer.</value>
             <remarks>
             <para>PopupHost is the top level form-based control that hosts
             this PopupControlContainer when dropped down.</para>
             <para>
             The PopupControlContainer usually creates a custom
             PopupHost when it is asked to drop down. However, you
             can provide your own PopupHost if you have a customized
             version.
             </para>
             <para>
             You can also get a reference to the <see cref="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupHost"/>
             that the PopupControlContainer uses by default and make
             changes to it. The PopupControlContainer creates a
             default PopupHost when there is no PopupHost supplied
             to it, but <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.ShowPopup(System.Drawing.Point)"/> gets called to show the popup.
             Hence, the best place to get the default PopupHost
             associated with this PopupControlContainer is in the
             <see cref="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforePopup"/> handler. Or call <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.EnsurePopupHost"/> to
             create the default PopupHost if it is not yet created.
             </para>
             </remarks>
             <example>
             <para>The following example shows how to make the PopupHost's border style resizable to create a resizable popup.</para>
             <coderef file="\Tools\Editors Package\PopupControlContainer\PopupControlContainerDemo\CS\Form1.cs" name="Resizable Popup sample" lang="C#"><code lang="C#">
                     // The PopupControlContainer's BeforePopup event handler
                     private void popupControlContainer1_BeforePopup(object sender, System.ComponentModel.CancelEventArgs e)
                     {
                         // Create a Popup, that can be resized.
            
                         // Make the popup host's border style resizable.
                         this.popupControlContainer1.PopupHost.FormBorderStyle = FormBorderStyle.SizableToolWindow;
                         this.popupControlContainer1.PopupHost.BackColor = this.BackColor;
            
                         // Necessary to set the host's client size every time, especially since the
                         // popup's Dock style is set to DockStyle.Fill.
                         if(!(this.popupControlContainer1.PopupHost.Size.Width &gt;= 140))
                             this.popupControlContainer1.PopupHost.Size = new System.Drawing.Size(140, 150);
            
                         // So that the popup container will fill the entire popup host when resized.
                         this.popupControlContainer1.Dock = DockStyle.Fill;
                     }</code></coderef>
             <coderef file="\Tools\Editors Package\PopupControlContainer\PopupControlContainerDemo\VB\Form1.vb" name="Resizable Popup sample" lang="VB"><code lang="VB">
                    ' The PopupControlContainer's BeforePopup event handler
                    Private Sub popupControlContainer1_BeforePopup(ByVal sender As Object, ByVal e As CancelEventArgs)
            
                        ' Create a popup that can be resized.
                        ' Make the popup host's border style resizable.
                        Me.popupControlContainer1.PopupHost.FormBorderStyle = FormBorderStyle.SizableToolWindow
                        Me.popupControlContainer1.PopupHost.BackColor = Me.BackColor
                        ' Necessary to set the host's client size every time, especially since the
                        ' popup's dock style is set to DockStyle.Fill.
                        ' So that the popup container will fill the entire popup host when resized.
                        If Not ((Me.popupControlContainer1.PopupHost.Size.Width &gt;= 140)) Then
                            Me.popupControlContainer1.PopupHost.Size = New System.Drawing.Size(140, 150)
                        End If
                        Me.popupControlContainer1.Dock = DockStyle.Fill
            
                    End Sub</code></coderef>
             </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.DiscreetLocation">
            <summary>
            Gets or sets the discreet location.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.ParentControl">
            <summary>
            Specifies the PopupControlContainer's control parent.
            </summary>
            <value>A control instance.</value>
            <remarks>
            <para>The Parent-Child relationship in this case is NOT similar
            to the one in the control hierarchy.</para>
            <para>
            When you specify a Parent Control via
            ParentControl and pass a Point.Empty location to
            ShowPopup, the popup location will be dynamically determined
            based on the ParentControl bounds and the screen area.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.PopupParent">
            <summary>
            Specifies the <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/> parent.
            </summary>
            <value>An instance that implements <see cref="T:Syncfusion.Windows.Forms.IPopupParent"/>.</value>
            <remarks>
            <para>When you associate an IPopupParent interface with the PopupControlContainer
            you get even more control over the alignment and positioning
            of the Popup, (this you would
            do instead of the PopupControl based parenting).</para>
            <para>When you provide this interface, the alignment and
            positioning logic is delegated to this interface.</para>
            </remarks>
            <example>
            Take a look at our PopupsInDepth sample under the Tools/Samples/In Depth folder
            for sample usage.
            </example>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.IgnoreDialogKey">
            <summary>
            Indicates whether to ignore dialog keys.
            </summary>
            <value>True to ignore dialog keys; False if not to. Default is False.</value>
            <remarks>
            When the popup is showing, the PopupControlContainer
            in the ProcessDialogKey override will look for Alt, Enter, Tab, Esc, F4,
            and F2 keys and either cancel or close the popup. If you want
            to prevent this, set IgnoreDialogKey = False. You should
            then listen for the above keys and make sure to close the popup manually whenever appropriate using
            HidePopup.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.IgnoreMouseMessages">
            <summary>
            Indicates whether to ignore all mouse messages.
            </summary>
            <value>True to ignore all mouse messages; False otherwise. Default is False.</value>
            <remarks>
            <para>When the popup is showing it will "swallow" all the mouse messages that are sent to
            controls not in the popup-hierarchy. When showing, the popup will also listen to
            mouse messages to determine if the popup should be closed (for mouse down
            outside the popup-hierarchy, for example).</para>
            <para>
            To prevent this behavior, set this property to True.</para>
            <para>When set to True, the popup will close only when you call
            the <see cref="M:Syncfusion.Windows.Forms.PopupControlContainer.HidePopup(Syncfusion.Windows.Forms.PopupCloseType)"/> method or when a new popup gets shown.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.IgnoreKeys">
            <summary>
            Indicates whether to ignore all keys.
            </summary>
            <value>True to ignore all keys; False otherwise. Default is False.</value>
            <remarks>
            When the popup is showing, it will "swallow" all the WM_KEYDOWN and WM_CHAR
            messages. To prevent it, set this property to True.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforeCloseUp">
            <summary>
            Occurs before a popup is closed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.CloseOnTab">
            <summary>
            Specifies whether the drop down need to be closed on pressing tab on the last item and shift tab on the first item in the drop down.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.EnableTouchMode">
            <summary>
            gets or sets the touchmode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainer.CurrentPopupChild">
             <summary>
             Gets or sets the current popup child in the popup hierarchy.
             </summary>
             <value>An instance of <see cref="T:Syncfusion.Windows.Forms.IPopupChild"/> interface.</value>
             <remarks>When you want to show a parent-child hierarchy of popups,
             call this property on the parent popup before showing the child popup.
             </remarks>
             <example>
             For example:
             <code lang="C#">
             // While the parent PopupControlContainer is showing, you might want to show another child
             // PopupControlContainer. You can do so as follows:
             // Set up parent-child relationship.
             parentPopupControlContainer.CurrentPopupChild = childPopupControlContainer;
             childPopupControlContainer.PopupParent = parentPopupControlContainer;
            
             // Now show the child popup.
             childPopupControlContainer.ShowPopup();
             </code>
             <code lang="VB">
             ' While the parent PopupControlContainer is showing, you might want to show another child
            	' PopupControlContainer. You can do so as follows:
             ' Set up parent-child relationship
             parentPopupControlContainer.CurrentPopupChild = childPopupControlContainer
             childPopupControlContainer.PopupParent = parentPopupControlContainer
            
             ' Now show the child popup.
             childPopupControlContainer.ShowPopup()
             </code>
             </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.PopupControlContainer.CloseUp">
            <summary>
            Occurs when a popup is closed.
            </summary>
            <remarks>
            Handling this event will tell you whether the popup was
            closed or canceled by the user. This, in some cases, will then let you
            know whether or not you should accept changes in the popup.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.PopupControlContainer.BeforePopup">
            <summary>
            Occurs when the popup is about to be shown.
            </summary>
            <remarks>
            You may choose to cancel drop-down in this handler.
            This is also a good place, for example, to access the PopupControlContainer's
            PopupHost and make changes to it.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.PopupControlContainer.Popup">
            <summary>
            Occurs after the popup has been dropped down and made visible.
            </summary>
            <remarks>This is a good place, for example, to set the
            focus on a control in the popup.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PopupControlContainerAccessibility">
            <summary>
            Accessibility class to provide Coded UI support.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.m_PopupControlContainer">
            <summary>
            Variable for PopupControlContainer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.#ctor(Syncfusion.Windows.Forms.PopupControlContainer)">
            <summary>
            Constructor.
            </summary>
            <param name="carousel">PopupControlContainer</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.GetFocused">
            <summary>
            Retrieves the object that has the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.GetSelected">
            <summary>
            Retrieves the currently selected child.
            </summary>
            <returns>Child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y"> The vertical screen coordinate</param>
            <returns>An System.Windows.Forms.AccessibleObject that represents the child object
                at the given screen coordinates. </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Role">
            <summary>
            Gets the role for the PopupControlContainer. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Description">
            <summary>
            Gets the description of the Control.ControlAccessibleObject
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.State">
            <summary>
            Gets the state of the accessible object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Help">
            <summary>
            Gets the description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.PopupControlContainerAccessibility.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageFilterEntryHelper.Suspend(System.Object)">
            <summary>
            Suspends applying filters by tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageFilterEntryHelper.Resume(System.Object)">
            <summary>
            Resumes applying filters by tag.
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageFilterEntryHelper.AddMessageFilter(System.Windows.Forms.IMessageFilter,System.Boolean)">
            <summary>
            Utility to help you filter messages in both a .NET and Native app.
            </summary>
            <param name="filter">The interface that will receive messages for filtering in a .NET app.</param>
            <param name="ontop">Specifies whether or not this filter should be inserted on top (with highest priority).</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageFilterEntryHelper.DisableReleaseHook">
            <summary>
            Gets/sets whether to disable release hook or not
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer">
            <summary>
            Modified PopupControlContainer that takes a child control and
            adds a sizable grip so that the window can be sized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.childControl">
            <summary>
            The child control that is to be embedded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.isInitialized">
            <summary>
            Indicates whether the container has already been initialized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.m_bFitToChildSize">
            <summary>
            Indicates whether size is dependant of child control size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an object of type SizablePopupControlContainer.
            </summary>
            <param name="childControl"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.ShowPopup(System.Drawing.Point)">
            <summary>
            Displays the popup control.
            </summary>
            <param name="location">The location at which the popup's left top position will appear.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.InitializeContainer">
            <summary>
            Initializes the container control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.AdjustPopupHostBounds">
            <summary>
            Adjusts bounds of the popupHost.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SizablePopupControlContainer.FitToChildControlSize">
            <summary>
            Indicates whether size is dependant of child control size.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SizablePopupHost">
            <summary>
            Derives from the PopupHost class and adds a gripper label and
            makes the form sizable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.c_nOffsetY">
            <summary>
            Used when ShowGripper or ShowCloseButton property is set to true;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.gripperLabel">
            <summary>
            Label for the gripper.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.closeBtn">
            <summary>
            The close button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.childControl">
            <summary>
            The embedded child control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.currentSize">
            <summary>
            The current size - used when resizing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.isResizing">
            <summary>
            Indicates whether the window is being resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.hostRect">
            <summary>
            The host rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.isInitialized">
            <summary>
            Internal initialization state of drop-down window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.lastSize">
            <summary>
            The last size of the window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.m_bShowGripper">
            <summary>
            Indicates whether to show gripper.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SizablePopupHost.m_bShowCloseButton">
            <summary>
            Indicates whether to show close bytton.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.#ctor(System.Windows.Forms.Control)">
            <summary>
            Create an object of type SizablePopupHost.
            </summary>
            <param name="childControl"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HidePopup">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.ComputeMySize">
            <summary>
            Overrides PopupHost.ComputeMySize.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleGripperMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseDown event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleGripperMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles the MouseUp event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleGripperMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handler for the MouseMove event of the gripper label.
            </summary>
            <param name="sender">The gripper label.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleCloseBtnMouseEnter(System.Object,System.EventArgs)">
            <summary>
            Handler for the MouseEnter event of the Close Button.
            </summary>
            <param name="sender">The close button.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleCloseBtnMouseLeave(System.Object,System.EventArgs)">
            <summary>
            Handler for the MouseLeave event of the Close Button.
            </summary>
            <param name="sender">The close button.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SizablePopupHost.HandleCloseBtnClick(System.Object,System.EventArgs)">
            <summary>
            Handler for the Click event of the close button.
            Closes the popup window.
            </summary>
            <param name="sender">The close button.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SizablePopupHost.LastSize">
            <summary>
            Last size property.
            </summary>
            <remarks>For AutoComplete DropDownSize persistance</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SizablePopupHost.ShowCloseButton">
            <summary>
            Returns/sets the visibility of the close button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SizablePopupHost.ShowGripper">
            <summary>
            Indicates whether a gripper will be shown that can used for resizing
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CloseButton">
            <summary>
            The close button used in SizablePopupHost.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CloseButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Override OnPaint.
            </summary>
            <param name="pe">The event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CloseButton.Text">
            <summary>
            Gets / sets the text property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IEditControlsEmbed">
            <summary>
            Implement this interface in a class if the class embeds one or more
            edit controls (text boxes, combo boxes). Implementing this interface
            provides a way for external classes to access the embedded edit
            control(s).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IEditControlsEmbed.GetActiveEditControl(Syncfusion.Windows.Forms.IEditControlsEmbedListener)">
            <summary>
            Returns the active edit control (text box, combo box).
            </summary>
            <param name="listener">The IEditControlsEmbedListener based auto complete control.</param>
            <remarks>
            The implementation of this method will let the AutoComplete
            control provide a link back to it so that it can be informed
            of any changes in the active edit control.
            <para>
            This is used when there are more than one edit controls on one 
            composite control. In this case, the AutoComplete control
            will be informed when there is a change in focus between
            the different edit controls. This is assuming that the AutoComplete
            control is not able to sense the change in focus.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BorderPanel">
            <summary>
            The BorderPanel is a control that can be used to wrap other controls inside improving its visual appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BorderPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BorderPanel.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.BorderPanel.InitializeComponent">
            <summary> 
            Required method for designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.Background">
            <summary>
            Gets / sets the background information of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.InnerColor">
            <summary>
            Gets / sets the color of the background of the inner surface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.Dimensions">
            <summary>
            Gets / sets the sizes of the sides of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.Control">
            <summary>
            Gets / sets the control to be displayed inside the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.InnerCornerRadius">
            <summary>
            Gets / sets the round corner radii of the inner surface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.InnerBorderWidth">
            <summary>
            Gets / sets the width of the border of the inner surface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.OuterBorderWidth">
            <summary>
            Gets / sets the width of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.CornerRadius">
            <summary>
            Gets / sets the round corner radii of the outer shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.InnerState">
            <summary>
            Gets / sets the height state of the inner surface.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanel.OuterState">
            <summary>
            Gets / sets the height state of the outer surface.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BorderPanelState">
            <summary>
            Indicates the states of the two borders of the BorderPanel.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BorderPanelCornerSettings">
            <summary>
            Holds information about the rounded corners of the BorderPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.Default">
            <summary>
            The default settings of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.BottomRight">
            <summary>
            Gets / sets the BottomRight round corner radius.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.BottomLeft">
            <summary>
            Gets / sets the BottomLeft round corner radius.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.TopRight">
            <summary>
            Gets / sets the TopRight round corner radius.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.TopLeft">
            <summary>
            Gets / sets the TopLeft round corner radius.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelCornerSettings.All">
            <summary>
            Gets / sets all the other values to the specified value.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BorderPanelDimensions">
            <summary>
            Holds information about the sides of the borders of the BorderPanel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.Default">
            <summary>
            The default dimension settings.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.All">
            <summary>
            Gets / sets all the other members to the specified value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.Bottom">
            <summary>
            Gets / sets the bottom border side's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.Right">
            <summary>
            Gets / sets the right border side's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.Left">
            <summary>
            Gets / sets the left border side's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.BorderPanelDimensions.Top">
            <summary>
            Gets / sets the top border side's width.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm">
            <summary>
            Summary description for GradienPanelExtPrimitivesEditorForm.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.m_ownerControl">
            <summary>
            Reference to owner control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.m_arrAddedPrimitives">
            <summary>
            Collection of the primitives when added.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.m_arrRemovedPrimitives">
            <summary>
            Collection of the primitives when removed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.FillListBoxPrimitives(Syncfusion.Windows.Forms.Tools.PrimitiveCollection)">
            <summary>
            Fills ListBox of primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.FillTypesPrimitive">
            <summary>
            Fills cbPrimitives of types prmitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradienPanelExtCollectioEditorForm.CreatePrimitive(Syncfusion.Windows.Forms.Tools.PrimitiveTypes)">
            <summary>
            Creates primitive.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientPanel">
            <summary>
            The GradientPanel is a <see cref="T:System.Windows.Forms.Panel"/>-derived class that has numerous border styles and has a background composed of a multiple gradient brush.
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IThemedControl">
            <summary>
            Implement this interface in a <see cref="T:System.Windows.Forms.Control"/> derived class to start supporting themes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IThemedControl.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanel.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.Dispose(System.Boolean)">
            <summary> 
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.InitializeComponent">
            <summary> 
            Required method for designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.ApplyScaleToControl(System.Single)">
             <summary>
            Applies the scaling for controls
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanel.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderStyleChanged">
            <summary>
            Occurs when border style is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.Border3DStyleChanged">
            <summary>
            Occurs when border's 3D style is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderSingleChanged">
            <summary>
            Occurs when border's 2D style is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderColorChanged">
            <summary>
            Occurs when border color is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.GradientBackgroundChanged">
            <summary>
            Occurs when gradient background is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.VerticalGradientChanged">
            <summary>
            Occurs when vertical gradient is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.GradientColorsChanged">
            <summary>
            Occurs when gradient colors are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderSidesChanged">
            <summary>
            Occurs when border sides are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanel.ThemeChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanel.ThemesEnabled"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.IgnoreThemeBackground">
            <summary>
            Indicates whether the control will ignore the theme's background color and draw the backcolor instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.ThemesEnabled">
            <summary>
            Indicates whether the control is themed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderSides">
            <summary>
            Gets or sets the border sides of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BackgroundColor">
            <summary>
            The background color, gradient and other styles can be set through 
            this property.
            </summary>
            <remarks>
            The GradientPanel control provides this property to enable specialized
            custom gradient backgrounds.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.UseCustomScrollerFrame">
            <summary>
            Gets or Sets whether to have custom scrollbar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.GradientColors">
            <summary>
            Gets or sets the color array that defines the gradient.
            </summary>
            <remarks>
            This property will be removed in the future. Please use the BackgroundColor property instead.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.VerticalGradient">
            <summary>
            Indicates whether the gradient is vertical.
            </summary>
            <remarks>
            This property will be removed in the future. Please use the BackgroundColor property instead.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.GradientBackground">
            <summary>
            Indicates whether the background will be drawn with the gradient.
            </summary>
            <remarks>
            This property will be removed in the future. Please use the BackgroundColor property instead.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderColor">
            <summary>
            Gets or sets the color of the 2D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderColorInternal">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderSingle">
            <summary>
            Gets or sets the 2D border style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.BorderStyle">
            <summary>
            Gets or sets the border style of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.Border3DStyle">
            <summary>
            Gets or sets the style of the 3D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.ScrollerFrame">
            <summary>
            Gets the ScrollerFrame
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanel.EnableTouchMode">
             <summary>
            Gets or Sets the touch mode
             </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility">
            <summary>
            Accessibility class to provide Coded UI support.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.m_gradientpanel">
            <summary>
            Variable for GradientPanel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.GradientPanel)">
            <summary>
            Constructor.
            </summary>
            <param name="carousel">GradientPanel</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.GetFocused">
            <summary>
            Retrieves the object that has the focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.GetSelected">
            <summary>
            Retrieves the currently selected child.
            </summary>
            <returns>Child</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate</param>
            <param name="y"> The vertical screen coordinate</param>
            <returns>An System.Windows.Forms.AccessibleObject that represents the child object
                at the given screen coordinates. </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Role">
            <summary>
            Gets the role for the GradientPanel. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Description">
            <summary>
            Gets the description of the Control.ControlAccessibleObject
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.State">
            <summary>
            Gets the state of the accessible object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Help">
            <summary>
            Gets the description of what the object does or how the object is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Parent">
            <summary>
            Gets the parent of an accessible object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelAccessibility.Value">
            <summary>
            Gets or sets the value of an accessible object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientPanelExt">
            <summary>
            Represents panel that has border and collection of <see cref="T:Syncfusion.Windows.Forms.Tools.Primitive"/>
            that can be drawn on border. Control perhaps has rounded or right corner.
            </summary>
            <remarks>
            <para>For setting rounded corner, assign <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CornerRadius"/> property. 
            You can set space between the bounds of the control and border 
            using <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.BorderGap"/> property. Control has two states: collapse or expand.
            For change this state use <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Collapsed"/> property.</para>
            <para>Collapse/Expand state can be used with animation. For using animation, you 
            must set <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Animated"/> as true. For specifying speed animation 
            use <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.AnimationSpeed"/>. To specify delay for animation use
            <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.AnimationDelay"/>.</para>
            <para>Control can contain <see cref="T:Syncfusion.Windows.Forms.Tools.Primitive"/>, see <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Primitives"/>.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_PRIMITIVE_CONTROL_GAP">
            <summary>
            Gap between primitive and bounds control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_MIN_LENGHT_BORDER">
            <summary>
            Minimum lenght for border where draw primitives.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_CORNER_RADIUS">
            <summary>
            Default corner radius.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_BORDER_GAP">
            <summary>
            Gap between border and bounds control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_WIDTH_PEN">
            <summary>
            Width for pent which draws light line for border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_PRIMITIMVE_BORDER_GAP">
            <summary>
            Gap between border and side of the primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_BORDER_OFFSET">
            <summary>
            Offset for border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_COLLAPSE_OFFSET">
            <summary>
            Offset for border when control is collapse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANIMATION_DELAY">
            <summary>
            Delay for timer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANIMATION_SPEED">
            <summary>
            Animation speed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANGLE_0">
            <summary>
            Angle degree 0.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANGLE_45">
            <summary>
            Angle degree 45.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANGLE_90">
            <summary>
            Angle degree 90;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANGLE_180">
            <summary>
            Angle degree 180;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DEF_ANGLE_270">
            <summary>
            Angle degree 270;
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_bCollapsed">
            <summary>
            Indicate that control is collapse or expande.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_cornerRadius">
            <summary>
            Radius truncation of the corner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_borderGap">
            <summary>
            Space between the bound of the control and the border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.pBorderGap">
            <summary>
            Padding like space between the bounds of the control and the borders.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_backColor">
            <summary>
            Background color for control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_clienPath">
            <summary>
            Graphics path which represent client area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_controlPath">
            <summary>
            Graphics path which represent control area.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_arrPrimitive">
            <summary>
            Collection of the Primitives.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_expandSize">
            <summary>
            Size of the control for expande state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_expandLocation">
            <summary>
            Location of the control for expande state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_enCollapseAlignment">
            <summary>
            Alignment collapse control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_lastAlignment">
            <summary>
            Last alignment of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_bPerformingCorrectionsLocation">
            <summary>
            Use for sets correctly location control regarding client path.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_bAnimated">
            <summary>
            A value indicating whether the control uses animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CollapseSize">
            <summary>
            Collapsed size of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_minSize">
            <summary>
            Mimimal controls size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_rectangleForBorder">
            <summary>
            Rectangle which contains border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_animator">
            <summary>
            Uses for animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_bCollapsedPerforming">
            <summary>
            Indicate that control in process of collapse.
            Uses by redraw.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_animationDelay">
            <summary>
            Delay for animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_animationSpeed">
            <summary>
            Speed of animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.m_bIsRedrawCollapsedControl">
            <summary>
            Indicate that control need redraw.
            Uses by redraw before animation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.InitializemAnimator">
            <summary>
            Initialize animation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.InitializeControlStyle">
            <summary>
            Initialize control's style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.InitializeControlColor">
            <summary>
            Initialize control's colors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.InitializePrimitives">
            <summary>
            Initialize primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ApplyScaleToControl(System.Single)">
             <summary>
            Applies the scaling
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnFontChanged(System.EventArgs)">
             <summary>
            Font Chnaged
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.PaintTransparentBackground(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Draws transparent background.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetCountAnimationPosition(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Calculates count position of animation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.StartAnimation">
            <summary>
            Initiate animation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Collapse">
            <summary>
            Collapsing control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Expand">
            <summary>
            Expanding control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CheckPositionControl(System.Windows.Forms.Control)">
            <summary>
            Check position added control regarding client path.
            </summary>
            <returns>True if control contains within client area, otherwise False. </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RefreshPath">
            <summary>
            Refresh control path and client path.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RefreshPrimitives">
            <summary>
            Refresh location for all primitives
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RefreshCorrectPosition">
            <summary>
            Refresh correctly position and size for all controls
            which contain in GradinetPanelExt.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RefreshSizes">
            <summary>
            Refresh work sizes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetClientRectangle">
            <summary>
            Gets inscribed rectangle in rounded path.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetRect(System.Int32,Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets rectangle which drawing control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetRect(System.Windows.Forms.Padding,Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets rectangle which drawing control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetPath(System.Int32,System.Int32,Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets rounded path.		
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetControlPath(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets graphics path which represent control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetClientPath(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets graphics path which represent client area of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetPrimitiveRectangle(Syncfusion.Windows.Forms.Tools.Primitive)">
            <summary>
            Gets rectangle which primitive is drawing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetStartPosition(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets start point position primitive from given side.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetEndPosition(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets end point position of the primitive from given side.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetCollapseSize">
            <summary>
            Gets size collapsed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMaxPrimitivesSize">
            <summary>
            Find maximum size of the primitive in the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMaxPrimitivesSize(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Find maximum size of the primitive in the collection for a specific side.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMinBorderGap">
            <summary>
            Gets minimum border gap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMinBorderGap(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets minimum border gap for a specific side.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMaxBorderGap">
            <summary>
            Gets maximum border gap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMaxBorderGap(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets maximum border gap for the specified side.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CheckPBorderGap(System.Windows.Forms.Padding)">
            <summary>
            Ensures if the PBorderGap can be set
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMaxRadius">
            <summary>
            Gets maximum radius.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMinSize">
            <summary>
            Gets minimum size of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMinSizeFromPrimitive">
            <summary>
            Gets minimum size of the control relative to Primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetMinSizeFromControl">
            <summary>
            Gets minimum size of the control relative to controls when contains control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetNonBorderLine">
            <summary>
            Gets lines which dont contained in border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetIDesignerHost">
            <summary>
            Gets IDesignerHost interface.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetNonDrawClip">
            <summary>
            Gets region when dont draw.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawControl(System.Drawing.Graphics)">
            <summary>
            Draws control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawNonRectBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws non-rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawLightLines(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws light lines for non-rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawDarkLines(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws dark lines for non-rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawLightArcs(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws light arcs for non-rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawDarkArcs(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws dark arcs for non-rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawRectBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws rectangle border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawCollapseLine(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws lines for collapsed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawCollapseLineLight(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws light line for collapsed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.DrawCollapseLineDark(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws dark line for collapsed control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ChangeSizeControl(System.Drawing.Rectangle)">
            <summary>
            Changes size of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ChangeLocationControl(System.Drawing.Rectangle)">
            <summary>
            Changes location of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetCorrectPosition(System.Windows.Forms.Control)">
            <summary>
            Sets correctly position of the control regarding client path.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.IsControlHostControl(System.Windows.Forms.Control)">
            <summary>
            Determines whether the control is the HostControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetCorrectRadius(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Sets correctly corner radius.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetCorrectBorderGap(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Sets correctly border gap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetCorrectPrimitivePosition(Syncfusion.Windows.Forms.Tools.Primitive)">
            <summary>
            Sets correctly position of the primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetCorrectSize(System.Drawing.Rectangle,Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Gets correct size of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetPositionControl(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Sets position of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.HidePrimitive(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Hide primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ShowPrimitive(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Show primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.SetSizeControl(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Sets size of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.HideControls">
            <summary>
            Hide all controls which contains this control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ShowControls">
            <summary>
            Show all controls which contains this control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetAnimationRect(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets bound of the control when doing animation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetAnimationRedrawRect(Syncfusion.Windows.Forms.Tools.Alignment,System.Boolean)">
            <summary>
            Gets rectangle for redwaw when doing animation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetDarkPen">
            <summary>
            Gets dark pen for border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.GetLightPen">
            <summary>
            Gets light pen for border.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ChangePrimitiveState(System.Boolean)">
            <summary>
            Changes collapse state for each CollapsePrimitive from <see cref="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Primitives"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.AnimationDelay">
            <summary>
            Gets or sets delay for animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.AnimationSpeed">
            <summary>
            Gets or sets speed of animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ExpandLocation">
            <summary>
            Location expanded control. 
            When control expanded it is Empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ExpandSize">
            <summary>
            Size expanded control. 
            When control expanded it is Empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Animated">
            <summary>
            Gets or sets a value indicating whether the control uses animation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Collapsed">
            <summary>
            Gets or sets state of the control, collapsed or expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CollapseAlignment">
            <summary>
            Gets or sets alignment collapsed control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CornerRadius">
            <summary>
            Gets or sets radius truncation corner of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Border">
            <summary>
            Gets or sets border gap. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.BorderGap">
            <summary>
            Gets or sets border gap. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ClientPath">
            <summary>
            Gets or sets graphics path which represent client area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.ControlPath">
            <summary>
            Gets or sets graphics path which represent control area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.Primitives">
            <summary>
            Gets collection of the primitives.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RealRectangle">
            <summary>
            Gets bounds for expanded control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RealSize">
            <summary>
            Gets size for expanded control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.RealLocation">
            <summary>
            Get location for expanded control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExt.EnableTouchMode">
             <summary>
            Gets or Sets the touchmode
             </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CornerRadiusChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnCornerRadiusChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanelExt.BorderGapChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnBorderGapChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CollapseAlignmentChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnCollapseAlignmentChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanelExt.CollapsedChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnCollapsedChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GradientPanelExt.PrimitivesChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.GradientPanelExt.OnPrimitivesChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Line">
            <summary>
            Represent line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Line.m_point1">
            <summary>
            Start point of the line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Line.m_point2">
            <summary>
            End point of the line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Line.Empty">
            <summary>
            Represents a null Line.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Line.GetSize">
            <summary>
            Gets size of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Line.Point1">
            <summary>
            Gets or sets start point of the line.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Line.Point2">
            <summary>
            Gets or set end point of the line.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientPanelExtCollectionEditor">
            <summary>
            Summary description for GradientPanelExtCollectionEditor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner">
            <summary>
            Summary description for GradientPanelExtDesigner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.m_selectedPrimitve">
            <summary>
            Selected primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.MouseOffset">
            <summary>
            Distance from a mouse and bounds of the primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.GetLocationRect(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets rectangle where can location primitives.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.SetAlignmentPrimitive(Syncfusion.Windows.Forms.Tools.Primitive,System.Drawing.Point)">
            <summary>
            Sets alignment of primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.SetPositionPrimitive(Syncfusion.Windows.Forms.Tools.Primitive,System.Drawing.Point)">
            <summary>
            Sets position of primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.GetDragPrimitive(System.Int32,System.Int32)">
            <summary>
            Gets draged primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.SelectedPrimitive">
            <summary>
            Gets or sets selected primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GradientPanelExtDesigner.OwnerControl">
            <summary>
            Gets owner control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Primitive">
            <summary>
            Represents primitive that can be displayed in <see cref="T:Syncfusion.Windows.Forms.Tools.GradientPanelExt"/>.
            </summary>
            <remarks>
            <para>In order to display the Primitive, you must add it to the <see cref="T:Syncfusion.Windows.Forms.Tools.Primitive"/>
            property of <see cref="T:Syncfusion.Windows.Forms.Tools.GradientPanelExt"/>. This is normally achieved using simple drag-and-drop 
            during design-time.</para>
            <para>The Primitive class provides properties that enable you to configure the
            appearance, behavior abd layoutof a primitive. For selecting a primitive you must click on it.
            You can change <see cref="P:Syncfusion.Windows.Forms.Tools.Primitive.BorderColor"/>,<see cref="P:Syncfusion.Windows.Forms.Tools.Primitive.BackColor"/> 
            and <see cref="P:Syncfusion.Windows.Forms.Tools.Primitive.PrimitiveBorderStyle"/>. You can define <see cref="P:Syncfusion.Windows.Forms.Tools.Primitive.Position"/> 
            of the Primitive in <see cref="T:Syncfusion.Windows.Forms.Tools.GradientPanel"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.Primitive.Alignment"/>
            inside <see cref="T:Syncfusion.Windows.Forms.Tools.GradientPanelExt"/>.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.DEF_OFFSET">
            <summary>
            Offset for select rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.DEF_BORDER_OFFSET">
            <summary>
            Offset for redraw primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.DEF_START_POSITION">
            <summary>
            Start position for primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.DEF_SELECTED_COLOR">
            <summary>
            Color which uses for drawing border selected primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.c_primitiveSize">
            <summary>
            Default size for primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_size">
            <summary>
            Size of the primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_position">
            <summary>
            Reprecent position of the primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_clrBorder">
            <summary>
            Border color for primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_clrBackGround">
            <summary>
            Background color for primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_enPrimitiveBorderStyle">
            <summary>
            Border style for primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_ownerControl">
            <summary>
            Control which contains this primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_bounds">
            <summary>
            Size and location of the primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_clientRect">
            <summary>
            Rectangle which drawing primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_previousBounds">
            <summary>
            Rectangle which drew primitive on previous position.
            Uses for redraw previous position of the primitives.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_enAlignment">
            <summary>
            Alignment primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_bVisible">
            <summary>
            A value indicating whether the primitive is displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Primitive.m_bSelected">
            <summary>
            Indicate that primitive is selectes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.Draw(System.Drawing.Graphics)">
            <summary>
            Draws primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.Invalidate">
            <summary>
            Redraws primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.DrawBorder(System.Drawing.Graphics,Syncfusion.Windows.Forms.Tools.PrimitiveBorderStyle)">
            <summary>
            Draws border for primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draws primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.DrawSelectedBorder(System.Drawing.Graphics)">
            <summary>
            Draws border for selected primitive in the designer.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.GetSelectedRect">
            <summary>
            Gets rectangle for selected primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.GetClientRect">
            <summary>
            Gets rectangle which drawing primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.GetCenter">
            <summary>
            Gets center of the primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.GetCountPosition(Syncfusion.Windows.Forms.Tools.Alignment)">
            <summary>
            Gets count position of the primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Primitive.GetCorrectPosition">
            <summary>
            Gets correctly position of the primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Selected">
            <summary>
            Gets or sets value indicate that primitive is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Visible">
            <summary>
            Gets or sets a value indicating whether the primitive is displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Alignment">
            <summary>
            Gets or set alignment of the primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Size">
            <summary>
            Gets or sets size of the primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.BorderColor">
            <summary>
            Gets or sets border color for primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.BackColor">
            <summary>
            Gets or sets background color for primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.PrimitiveBorderStyle">
            <summary>
            Gets or sets border style for primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Position">
            <summary>
            Gets or sets position of the primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.OwnerControl">
            <summary>
            Gets control which contains this primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.Bounds">
            <summary>
            Gets or sets the size and location of the primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Primitive.ClientRect">
            <summary>
            Gets rectangle of drawing primitive.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.SelectedChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnSelectedChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.SizeChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnSizeChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.BorderColorChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnBorderColorChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.BackColorChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnBackColorChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.PrimitiveBorderStyleChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnPrimitiveBorderStyleChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.PositionChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnPositionChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.PropertyChanged">
            <summary>
            Raise by <see cref="!:OnPropertyChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.BoundsChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnBoundsChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.AlignmentChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnAlignmentChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.VisibleChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnVisibleChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.MouseMove">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.MouseDown">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.Primitive.OwnerControlChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.Primitive.OnOwnerControlChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CollapsePrimitive">
            <summary>
            Represents a collapse/expand primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.m_bIsCollapse">
            <summary>
            Indicate that primitive is collapse.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.m_collapseImage">
            <summary>
            Image for collapsed primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.m_expandeImage">
            <summary>
            Image for expanded primitive.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.SetCollapseState(System.Boolean)">
            <summary>
            Sets collapse state. Don't raise <see cref="E:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.CollapsedChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.DrawBackground(System.Drawing.Graphics)">
            <summary>
            Draws plus/minus primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.CollapseImage">
            <summary>
            Gets or sets image for collapsed primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.ExpandImage">
            <summary>
            Gets or sets image for expanded primitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.Collapsed">
            <summary>
            Gets or sets value which indicate that primitive is collapse.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.CollapsedChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.OnCollapsedChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.CollpaseImageChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.OnCollapseImageChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.CollapseImageChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.OnCollapseImageChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.ExpandImageChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.CollapsePrimitive.OnExpandImageChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextPrimitive">
            <summary>
            Represents a text primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextPrimitive.DEF_ANGLE_ROTATE">
            <summary>
            Angle of rotation for text primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextPrimitive.m_text">
            <summary>
            Displayed text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextPrimitive.m_textFont">
            <summary>
            Font for displayed text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextPrimitive.m_textColor">
            <summary>
            Color of the displayed text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextPrimitive.Text">
            <summary>
            Gets or sets displayed text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextPrimitive.TextFont">
            <summary>
            Gets or sets font for displayed text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextPrimitive.TextColor">
            <summary>
            Gets or sets color of the displayed text.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextPrimitive.TextChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.TextPrimitive.OnTextChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextPrimitive.TextFontChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.TextPrimitive.OnTextFontChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.TextPrimitive.TextColorChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.TextPrimitive.OnTextColorChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImagePrimitive">
            <summary>
            Represents an image primitive.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImagePrimitive.m_image">
            <summary>
            Displayed image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImagePrimitive.m_rotateImage">
            <summary>
            Rotated image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImagePrimitive.m_bRotate">
            <summary>
            A value indicating whether the primitive is rotated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImagePrimitive.Image">
            <summary>
            Gets or set displayed image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImagePrimitive.Rotate">
            <summary>
            Gets or sets a value indicating whether the primitive is rotated.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ImagePrimitive.ImageChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.ImagePrimitive.OnImageChanged"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ImagePrimitive.RotateChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.ImagePrimitive.OnRotateChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.HostPrimitive">
            <summary>
            Represents a primitive which contain any control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.HostPrimitive.m_hostControl">
            <summary>
            Control which displaying.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.HostPrimitive.RefreshHostControlLoyaut">
            <summary>
            Refresh location and size for host control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.HostPrimitive.IsContainControl(System.Windows.Forms.Control)">
            <summary>
            Determines if a primitive contains control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.HostPrimitive.HostControl">
            <summary>
            Gets or set control which displaying inside the primitive.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.HostPrimitive.HostControlChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.HostPrimitive.OnHostControlChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PrimitiveBorderStyle">
            <summary>
            Border style for Primitive.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Alignment">
            <summary>
            Alignment primitive within control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PrimitiveTypes">
            <summary>
            Types of the Primitives.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PrimitiveCollection">
            <summary>
            A collection that stores <see cref="T:Syncfusion.Windows.Forms.Tools.Primitive"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.#ctor">
            <summary>
            Initializes a new instance of 'PrimitiveCollection'.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.Add(Syncfusion.Windows.Forms.Tools.Primitive)">
            <summary>
            Adds primitive to collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.AddRange(Syncfusion.Windows.Forms.Tools.Primitive[])">
            <summary>
            Adds primitives to collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.Remove(Syncfusion.Windows.Forms.Tools.Primitive)">
            <summary>
            Removes primitive from collection.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.CollectionChanged">
            <summary>
            Raise by <see cref="M:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)"/> method.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PrimitiveCollection.Item(System.Int32)">
            <summary>
            Indexer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.BorderColors">
            <summary>
            Specifies the colors used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control's client rectangle borders.
            </summary>
            <remarks>
            The BorderColors structure is used by the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> objects in a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            to specify the set of colors used for drawing the borders around the client control. The 
            BorderColors value is set through the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ClientBorderColors"/> property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderColors.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.BorderColors"/> class with the specified colors.
            </summary>
            <param name="left">Left border color.</param>
            <param name="top">Top border color.</param>
            <param name="right">Right border color.</param>
            <param name="bottom">Bottom border color.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Left">
            <summary>
            Gets / sets the color used to draw the left border.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Top">
            <summary>
            Gets / sets the color used to draw the top border.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Right">
            <summary>
            Gets / sets the color used to draw the right border.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Bottom">
            <summary>
            Gets / sets the color used to draw the bottom border.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Empty">
            <summary>
            Represents a <see cref="T:Syncfusion.Windows.Forms.Tools.BorderColors"/> instance with empty color values.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderColors.Default">
            <summary>
            Represents a <see cref="T:Syncfusion.Windows.Forms.Tools.BorderColors"/> instance with the default color values.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarItem">
            <summary>
            Represents an item in the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.GroupBar"/> control.
            </summary>
            <remarks>
            The GroupBar control is composed of a number of selectable groups or items each of which is 
            associated with a client control. Each of these items is an instance of the GroupBarItem type. 
            The collection of items present in the GroupBar can be accessed through the control's 
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> property.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItem.iNavPaneImage">
            <summary>
            The image representing the item in the GroupBar's navigation pane.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItem.m_padding">
            <summary>
            Padding provides spacing between the icons (images) and the text in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.ResetFont">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Font"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.ShouldSerializeForeColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.ResetForeColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.ResetBackColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.BackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.ResetClientBorderColors">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ClientBorderColors"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItem.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.ComponentModel.Component.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Bounds">
            <summary>
            Gets/Sets the Control Bounds
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.LargeImageMode">
            <summary>
            Indicates whether all types of images can be used or not
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Text">
            <summary>
            Gets / sets the text displayed on the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Padding">
            <summary>
            Gets or sets padding for <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Client">
            <summary>
            Gets / sets the client control associated with the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Image">
            <summary>
            Gets / sets the image displayed on the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>. 
            </summary>
            <value>An <see cref="T:System.Drawing.Icon"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Icon">
            <summary>
            Gets / sets the icon displayed on the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>. 
            </summary>
            <value>An <see cref="T:System.Drawing.Icon"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Enabled">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is enabled / disabled.
            </summary>
            <value>False if the item is disabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Visible">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is visible.
            </summary>
            <value>False if the item is hidden. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Font">
            <summary>
            Gets / sets the font used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> text.
            </summary>
            <value>A <see cref="T:System.Drawing.Font"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ForeColor">
            <summary>
            Gets / sets the foreground color used to paint the text in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.BackColor">
            <summary>
            Gets / sets the color used to fill the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> background.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.BackgroundBrush">
            <summary>
            Gets / sets the brush used for painting the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> background.
            </summary>
            <value>A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ClientBorderColors">
            <summary>
            Gets / sets the colors used to draw the borders around the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>'s client 
            control.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.BorderColors"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.Tag">
            <summary>
            Gets / sets the object that contains data about the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>
            A <see cref="T:System.Object"/> value that contains data about the control. 
            The default is a NULL reference (Nothing in Visual Basic).
            </value>
            <remarks>
            Any type derived from the Object class can be assigned 
            to this property. If the Tag property is set through 
            the Windows Forms designer, only text may be assigned.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.GroupBar">
            <summary>
            Returns the GroupBar control that the item is assigned to.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.GroupBar"/> that represents the parent GroupBar control that the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is assigned to.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.InNavigationPane">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> should be added to the navigation pane.
            </summary>
            <remarks>
            This property is valid only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.GroupBar"/> control is in the stacked mode.
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/>
            </remarks>
            <value>TRUE if the item should be added to the navigation pane. The default is FALSE.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.NavigationPaneIcon">
            <summary>
            Gets / sets the icon representing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> in the navigation pane. 
            </summary>
            <remarks>
            This property is valid only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.GroupBar"/> control is in the stacked mode.
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/>
            </remarks>
            <value>An <see cref="T:System.Drawing.Icon"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.NavigationPaneImage">
            <summary>
            Gets / sets image representing the item in the GroupBar's navigation pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ForeColorInternal">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextAlignment">
            <summary>
            Specifies an alignment value for the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> text.
            </summary>
            <remarks>
            The TextAlignment enum is used for specifying a value for the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            control's <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.TextAlign"/> property.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextAlignment.Left">
            <summary>
            The text is aligned to the left.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextAlignment.Center">
            <summary>
            The text is horizontally centered.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextAlignment.Right">
            <summary>
            The text is aligned to the right.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ProvideGroupBarItemBrush"/> event.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control uses the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ProvideGroupBarItemBrush"/> event to 
            obtain a custom brush from the application to draw the background region of a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>. 	
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventHandler"/>	
            </remarks>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs.#ctor(System.Int32,System.Drawing.Rectangle)">
            <summary>
            Creates an instance of the ProvideBrushEventArgs class.
            </summary>
            <param name="bounds">The bounds for which a brush is requested.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs.Item">
            <summary>
            Returns the index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> being drawn.
            </summary>
            <value>An Integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs.Bounds">
            <summary>
            Returns the bounds for which a brush is requested.
            </summary>
            <value>The Rectangle specifying the bounds.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs.BackgroundBrush">
            <summary>
            Gets / sets the brush that will be used to draw the specified bounds.
            </summary>
            <value>A brush object.</value>
            <remarks>The event handler should set this property for it
            to be used while drawing the specified bounds.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ProvideGroupBarItemBrush"/> event 
            in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemAdded"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRemoved"/> events.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control uses the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemAdded"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRemoved"/> 
            events to notify users of a change in its <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> collection.
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventHandler"/>	
            </remarks>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> class.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to store in this event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs.Item">
            <summary>
            Returns the GroupBarItem used by this event.
            </summary>
            <value>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> object used by the event.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemAdded"/> and <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRemoved"/> 
            events in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> that contains the event data.</param>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneDropDownClick"/> event.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control uses the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneDropDownClick"/> event to 
            allow users to cancel or change the context menu displayed when the drop-down button is clicked.
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventHandler"/>	
            </remarks>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs.#ctor(Syncfusion.Windows.Forms.IContextMenuProvider)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs"/> class.
            </summary>
            <param name="provider">The <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> implementing the context menu.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs.ContextMenuProvider">
            <summary>
            Returns the menu provider object used by <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> for creating its context menu.
            </summary>
            <value>The <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> object.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneDropDownClick"/> event in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs"/> that contains the event data.</param>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelectionChanging"/> event.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control uses the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelectionChanging"/> event to 
            allow users to cancel bar item selection.
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventHandler"/>	
            </remarks>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GroupBarItemSelectionChangingEventArgs"/> class.
            </summary>
            <param name="nNewSelected">The newly selected item index.</param>
            <param name="nOldSelected">The old selected item index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs.NewSelected">
            <summary>
            Returns the newly selected index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs.OldSelected">
            <summary>
            Returns the previously selected index.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelectionChanging"/> event in the 
            <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs"/> that contains the event data.</param>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBar">
             <summary>
             Displays a set of related controls as selectable groups or tabs.
             </summary>
             <remarks>
             <p>
             The GroupBar class implements a container that can serve as a host for other controls.
             The control is functionally similar to the Windows Forms <see cref="T:System.Windows.Forms.TabControl"/>
             and provides a tab user-interface that will display only one control, the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.SelectedItem"/>, 
             at any given time.
             </p>
             <p>
             Each control in the GroupBar is associated with a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> and the
             various GroupBarItems are arranged in a vertical stack. Clicking on a GroupBarItem will make 
             it the current selected item and the client control tied to that item will be displayed 
             within the GroupBar's client region. The collection of GroupBarItems in the control is 
             implemented as an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection"/> type and 
             can be accessed and manipulated through the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> property.
             </p>
             <p>
             The GroupBar can be used in combination with the Syncfusion <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control
             to implement composite controls with user interfaces similar to the Outlook Bar in
             Microsoft Outlook and the toolbox window present in the Visual Studio.NET development environment.
             </p>
             </remarks>	
             <seealso cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/>
             <example>
             The sample code shows how to create a GroupBar, create and add two GroupBarBarItems, and 
             assign client controls to each of the GroupBarItems. 
             <coderef file="Tools\Samples\GroupBar Package\GroupBarDemo\CS\GroupBarForm.cs" name="GroupBar" lang="C#"><code lang="C#">
            		private void InitializeGroupBar()
            		{
            			// Create the GroupBar control.
            			this.gbOutlook = new Syncfusion.Windows.Forms.Tools.GroupBar();
            
            			// Create and initialize the GroupBarItems that belong to this GroupBar.
            			this.gbiPersonal = new Syncfusion.Windows.Forms.Tools.GroupBarItem();			
            			// Assign the gvcPersonal client control to this GroupBarItem.
            			this.gbiPersonal.Client = this.gvcPersonal;
            			this.gbiPersonal.Text = "Personal";
            
            			this.gbiWork = new Syncfusion.Windows.Forms.Tools.GroupBarItem();
            			// Assign the gvcWork client control to this GroupBarItem.
            			this.gbiWork.Client = this.gvcWork;
            			this.gbiWork.Text = "Work";		
            			
            			// Add the GroupBarItems to the GroupBar.
            			this.gbOutlook.GroupBarItems.Add(this.gbiPersonal);
            			this.gbOutlook.GroupBarItems.Add(this.gbiWork);
            
            			// Set the GroupBar's initially selected index.
            			this.gbOutlook.SelectedItem = 1;
            		}</code></coderef>
            		
            		
             <coderef file="Tools\Samples\GroupBar Package\GroupBarDemo\VB\GroupBarForm.vb" name="GroupBar" lang="VB"><code lang="VB">
                    Private Sub InitializeGroupBar()
            
                        ' Create the GroupBar control.
                        Me.gbOutlook = New Syncfusion.Windows.Forms.Tools.GroupBar()
            
                        ' Create and initialize the GroupBarItems that belong to this GroupBar.
                        Me.gbiPersonal = New Syncfusion.Windows.Forms.Tools.GroupBarItem()
                        ' Assign the gvcPersonal client control to this GroupBarItem.
                        Me.gbiPersonal.Client = Me.gvcPersonal
                        Me.gbiPersonal.Text = "Personal"
            
                        Me.gbiWork = New Syncfusion.Windows.Forms.Tools.GroupBarItem()
                        ' Assign the gvcWork client control to this GroupBarItem.
                        Me.gbiWork.Client = Me.gvcWork
                        Me.gbiWork.Text = "Work"
            
                        ' Add the GroupBarItems to the GroupBar.
                        Me.gbOutlook.GroupBarItems.Add(Me.gbiPersonal)
                        Me.gbOutlook.GroupBarItems.Add(Me.gbiWork)
            
                        ' Set the GroupBar's initially selected index.
                        Me.gbOutlook.SelectedItem = 1
            
                    End Sub</code></coderef>
             
             </example>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollControl">
            <summary>
            Defines a base class for custom controls that support scrolling behavior.
            </summary>
            <remarks>
            The ScrollControl class acts as a base class for controls that require the
            ability to scroll. To allow a control to display scrollbars as needed,
            set the AutoScroll property to True. To select which scrollbars should be visible,
            set the VScroll and HScroll properties. <para/>
            You can also associate stand-alone scrollbars with the ScrollControl. The VertScrollBar
            and HorizScrollBar properties allow you to associate external scrollbars. This is of benefit
            if you want to share one scrollbar with a parent control. For example, if the ScrollControl
            is a view inside a workbook or dynamic splitter frame.<para/>
            ScrollControl supports automatic scrolling when the user drags the mouse. In a grid
            when the user starts selecting cells the user can drag the mouse outside the grid
            area and the grid will automatically scroll. To enable auto scrolling, override the
            OnMouseDown event in your derived control and initialize the AutoScrolling, AutoScrollBounds
            and InsideScrollBounds properties.<para/>
            When the user scrolls your control and holds down the mouse on the down or up arrow
            of the scrollbar, the scrolling speed will accelerate.<para/>
            The FixRenderOrigin method will ensure correct initialization of the rendering origin
            for brushes and patterns. You can call FixRenderOrigin from your control's OnPaint method.
            ScrollControl supports scrolling with the mouse wheel and also cooperates fine with
            with the IntelliMouseDragScroll class.<para/>
            If you want to provide context information about your control and change the cursor on
            the fly while the user moves the mouse, set the OverrideCursor property to the cursor
            you want to show. Instead, you can also implement IMouseController and add the object
            to MouseControllerDispatcher.<para/></remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ICancelModeProvider">
            <summary>
            ICancelModeProvider provides an interface for the CancelMode event.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ICancelModeProvider.CancelMode">
            <summary>
            Occurs when the window receives a WM_CANCELMODE message.
            </summary>
            <remarks>
            WM_CANCELMODE is sent to cancel certain modes, such as mouse capture. 
            For example, the system sends this message to the active window when a 
            dialog box or message box is displayed. Certain functions also send this 
            message explicitly to the specified window regardless of whether it is the 
            active window. For example, the EnableWindow function sends this message 
            when disabling the specified window. 
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISplitterPaneSupport">
            <summary>
            Provides a <see cref="P:Syncfusion.Windows.Forms.ISplitterPaneSupport.FillSplitterPane"/> property support for using the control
            inside a dynamic splitter window and sharing scrollbars
            with the parent window.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISplitterPaneSupport.PaneClosing">
            <summary>
            Indicates that the splitter control is closing the pane with this control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISplitterPaneSupport.PaneClosed">
            <summary>
            Indicates that the splitter control has closed the pane with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISplitterPaneSupport.FillSplitterPane">
            <summary>
            Toggles support for using the control inside a dynamic splitter window and sharing scrollbars
            with the parent window.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISplitterPaneSupport.IsSplitterPaneClosing">
            <summary>
            Indicates whether the splitter control is closing the pane with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISplitterPaneSupport.IsSplitterPaneClosed">
            <summary>
            Indicates whether the splitter control has closed the pane with this control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IScrollBarWrapperContainer">
            <summary>
            This interface provides properties for accessing a vertical and horizontal <see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/>
            and an <see cref="M:Syncfusion.Windows.Forms.IScrollBarWrapperContainer.UpdateScrollBars"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IScrollBarWrapperContainer.UpdateScrollBars">
            <summary>
            Updates scrollbars to reflect recent changes in scroll position, minimum and maximum scroll position values.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBarWrapperContainer.VScrollBar">
            <summary>
            Returns a reference to an object with vertical scrollbar settings of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBarWrapperContainer.HScrollBar">
            <summary>
            Returns a reference to an object with horizontal scrollbar settings of the control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportUpdating">
            <summary>
            Defines an interface for classes that support a BeginUpdate / EndUpdate pattern.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISupportUpdating.BeginUpdate">
            <summary>
            Suspends updating the component. An internal counter will be increased if called multiple times.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISupportUpdating.EndUpdate">
            <summary>
            Resumes updating the component. If <see cref="M:Syncfusion.Windows.Forms.ISupportUpdating.BeginUpdate"/> was called multiple times, an internal counter is decreased.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISupportUpdating.Updating">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.ISupportUpdating.BeginUpdate"/> was called.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportIntelliMouse">
            <summary>
            Provides a property that lets you toggle support for Intelli-Mouse panning.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISupportIntelliMouse.EnableIntelliMouse">
            <summary>
            Toggles support for Intelli-Mouse panning. When the user presses the middle mouse button and drags the mouse,
            the window will scroll.
            </summary>
            <remarks>
            The latest Intelli-Mouse drivers have also built-in </remarks>.
        </member>
        <member name="T:Syncfusion.Windows.Forms.IQueryFocusInside">
            <summary>
            Provides support for <see cref="M:Syncfusion.Windows.Forms.IQueryFocusInside.QueryFocusInside"/> method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IQueryFocusInside.QueryFocusInside">
            <summary>
            Indicates whether this control contains focus. Override this method if you
            want to show drop-down windows and indicate the control has not lost focus when
            the drop-down is shown.
            </summary>
            <returns>True if the control or any child control has focus; false otherwise.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hasDoubleBufferSurface">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.allowIncreaseSmallChange">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isPaneClosed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.elapsedSemaphor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.startstopSemaphor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.lastMouseTick">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hScrollBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.vScrollBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.vScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.repeatScrollEventTimer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.autoScrolling">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.repeatScrollMessage">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.repeatScrollEventType">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.repeatScrollBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.disableAutoScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.savedHValue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.savedVValue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.fillSplitterPane">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.overrideCursor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.autoScrollBounds">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.imm">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.disableScrollWindow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.updateCount">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.paintPending">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.lockScrollBars">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.mouseControllerDispatcher">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.updateOptions">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.renderOriginPoint">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.useSharedScrollBars">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.supportsThumbTrack">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.borderStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.scrollTip">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isThumbTracking">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.thumbBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.scrollTipFormat">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.insideScrollMargins">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.ignoreUICues">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.mousePosition">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.wiredParentForm">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.discardPaintMessagesAfterBeginUpdate">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.inDispose">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.nTimerCount">
            <summary>
            Internal only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.nDelayScrollTimer">
            <summary>
            Internal only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl._themedDrawing">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl._themedScrollBarDrawing">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isPaneClosing">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.vScrollIncrement">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hScrollIncrement">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isOnMouseWheel">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.smoothMouseWheelScrolling">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.mouseWheelScrollLines">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.inMouseDragScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.sizeBox">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.mouseEventException">
            <internalonly/>
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.cachedRgn">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.accStartInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.accStepInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.accMinInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.accDelayScrollTimer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.accelerateScrolling">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.showSizeGrip">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.allowSizeGrip">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.forceSizeBox">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.smartSizeBox">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isActiveControl">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isValidating">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isDeactivatedCalled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hasControlFocus">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isValidated">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isMousePressed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.doubleBufferSurface">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.savedBounds">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.allowRaiseMouseMoveInOnDragOver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.inOleDragOver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.onPaintCalled">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.preJitPaint">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.m_bUpdatingStyles">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.vScrollShared">
            <summary>
            Indicates the shared behavior of the vertical scrollbar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.hScrollShared">
            <summary>
            Indicate the shared behavior of the horizontal scrollbar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.IgnoreSizeGripStyleHideShow">
            <summary>
            The SizeGripStyle behavior has been changed after version 6.1. 
            For old behavior set this to true. Default value is false.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.Dispose">
            <summary>
            Disposes the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.Dispose(System.Boolean)">
            <override/>
            <summary></summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ResetMouseController">
            <summary>
            Raises a CancelMode for the active mouse controller for this control.
            </summary>
            <remarks><see cref="P:Syncfusion.Windows.Forms.ScrollControl.MouseControllerDispatcher"/> holds a collection of mouse controllers.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeFillSplitterPane">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeBorderStyle">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeHScroll">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeVScroll">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeMouseWheelScrollLines">
            <summary>
            Indicates whether serialize <see cref="P:Syncfusion.Windows.Forms.ScrollControl.MouseWheelScrollLines"/> property value or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeInsideScrollMargins">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeSize">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldSerializeTabIndex">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HIWORD(System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="n"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.MAKELPARAM(System.Int32,System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="low"/>
            <param name="high"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.LOWORD(System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="n"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.LOWORD(System.IntPtr)">
            <summary></summary>
            <returns></returns>
            <param name="n"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OffsetRenderOriginPoint(System.Int32,System.Int32)">
            <exclude/>
            <summary>
            Offsets the <see cref="P:System.Drawing.Graphics.RenderingOrigin"/> point.
            </summary>
            <param name="x"/>
            <param name="y"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.LastMousePositionToClient">
            <summary>
            Returns PointToClient(LastMousePosition).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HitTest(System.Drawing.Point)">
            <overload>
            Returns a value indicating the context at a given mouse position.
            </overload>
            <summary>
            Returns a value indicating the context at a given mouse position.
            </summary>
            <param name="point">The mouse position in client coordinates.</param>
            <returns>A <see cref="T:System.Int32"/> value indicating the context at a given mouse position; zero if no context found.</returns>
            <remarks>
            Any Mouse Controller needs to implement the IMouseController interface.<para/>
            In its implementation of MouseController.HitTest the mouse controller determines whether it
            wants to handle the mouse events for the current mouse position.<para/>
            MouseControllerDispatcher will call HitTest for each Mouse Controller that has been registered with
            Add(IMouseController). The Mouse Controller that wins the vote will be returned together with the
            context value its HitTest implementation returned.<para/></remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.ScrollControl.MouseControllerDispatcher"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Returns a value indicating the context at a given mouse position.
            </summary>
            <param name="point">The mouse position in client coordinates.</param>
            <param name="mouseButton">Indicates which mouse button was pressed.</param>
            <returns>A <see cref="T:System.Int32"/> value indicating the context at a given mouse position; 0 if no context found.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons,Syncfusion.Windows.Forms.IMouseController@)">
            <summary>
            Returns a value indicating the context at a given mouse position.
            </summary>
            <param name="point">The mouse position in client coordinates.</param>
            <param name="mouseButton">Indicates which mouse button was pressed.</param>
            <param name="controller">A place holder where the controller is returned that won the vote.</param>
            <returns>A <see cref="T:System.Int32"/> value indicating the context at a given mouse position; 0 if no context found.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons,System.Int32,Syncfusion.Windows.Forms.IMouseController@)">
            <summary>
            Returns a value indicating the context at a given mouse position.
            </summary>
            <param name="point">The mouse position in client coordinates.</param>
            <param name="mouseButton">Indicates which mouse button was pressed.</param>
            <param name="clicks">Specifies the number of times the mouse button was pressed and released.</param>
            <param name="controller">A place holder where the controller is returned that won the vote.</param>
            <returns>A <see cref="T:System.Int32"/> value indicating the context at a given mouse position; 0 if no context found.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WndProc(System.Windows.Forms.Message@)">
            <override/>
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmNcCalcSize(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmNcPaint(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmPaint(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
                Handles the WM_SETCURSOR message
            </summary>
            <internalonly/>
            <param name="m"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmHScroll(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="m"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmVScroll(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="m"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmMouseDown(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WmMouseUp(System.Windows.Forms.Message@)">
            <summary></summary>
            <param name="msg"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.verticalScrollValue">
            <summary>
            Initialize the last vertical scroll value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.horizontalScrollValue">
            <summary>
            Initialize the last horizontal scroll value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.touchStartPoint">
            <summary>
            Used to save the touch start position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.enableTouchMode">
            <summary>
            Used to check the touch mode is enabled or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isTouchOverHScrollBar">
            <summary>
            Used to check touch on the Horizontal scroll bar or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.isTouchOverVScrollBar">
            <summary>
            Used to check touch on the Vertical scroll bar or not.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.touch">
            <summary>
            Used to save the object for MultiTouch to configure the touch. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.DisableGesture">
            <summary>
            Used to disable the Gesture.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.DecodeGesture(System.Windows.Forms.Message@)">
            <summary>
            Decode the touch messages to do corresponding operations
            </summary>
            <param name="msg">windows touch messages</param>
            <returns>return true when the message properly handled otherwise it will be false</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnOffice2007ScrollBarsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBarsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnOffice2007ScrollBarsColorSchemeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnOffice2007ScrollBarsColorSchemeChanged(System.EventArgs)"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnOffice2010ScrollBarsColorSchemeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnOffice2010ScrollBarsColorSchemeChanged(System.EventArgs)"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnOfficeScrollBarsChanged(Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsChanged"/> event
            </summary>
            <param name="e"> Office scrollbar type </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnParentChanged(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handles mouse wheel processing for our scrollbars.
            </summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnSplitterPaneClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.SplitterPaneClosed"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnSplitterPaneClosing(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.SplitterPaneClosing"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnFillSplitterPaneChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.FillSplitterPaneChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollbarsVisibleChanged(System.EventArgs)">
            <summary>
            Fires the ScrollbarsVisibleChanged event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseWheelZoom(Syncfusion.Windows.Forms.MouseWheelZoomEventArgs)">
            <summary>
            Override this method to implement zooming in your derived control.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlMouseDown(Syncfusion.Windows.Forms.CancelMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.CancelMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlMouseMove(Syncfusion.Windows.Forms.CancelMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.CancelMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlMouseUp(Syncfusion.Windows.Forms.CancelMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.CancelMouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlHandledMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlHandledMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseMove"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollControlHandledMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnTouchPanBegin(System.Drawing.Point)">
            <summary>
             Initially save the current scrollbar values when begin the panning operation
            </summary>
            <param name="touchBeginPoint">Touch begin position</param>
            <returns>return true</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnTouchPan(System.Drawing.Point,System.Boolean)">
            <summary>
            Adjust the HScrollBar and VScrollBar values based on current touch position
            </summary>
            <param name="currentTouchPoint"> Current touch position</param>
            <param name="isSwipeScroll">Used to decide the doing swipe operation or pan operation</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnTouchPanEnd(System.Drawing.Point)">
            <summary>
            After panning operation completes save the current scroll bar values
            </summary>
            <param name="touchEndPoint">touch end position</param>
            <returns>return true</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnStartAutoScrolling(Syncfusion.Windows.Forms.StartAutoScrollingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrolling"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnSetCursor(System.Windows.Forms.Message@)">
            <internalonly/>
            <summary></summary>
            <param name="m"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnMouseHover(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnHScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.ScrollBarWrapper.ValueChanged"/> of the horizontal scrollbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnVScrollBarValueChanged(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.ScrollBarWrapper.ValueChanged"/> of the vertical scrollbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnHorizontalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.HorizontalScroll"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnVerticalScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.VerticalScroll"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnHScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary><para>
                  Listens for the horizontal scrollbar's scroll event.
               </para></summary>
            <param name="sender">
               A <see cref="T:System.Object"/> that contains data about the control.
            </param>
            <param name="se">
               A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnVScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary><para>
                  Listens for the vertical scrollbar's scroll event.
               </para></summary>
            <param name="sender">
               A <see cref="T:System.Object"/> that contains data about the control.
            </param>
            <param name="se">
               A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnShowContextMenu(Syncfusion.Windows.Forms.ShowContextMenuEventArgs)">
            <remarks>
            Raises the ShowContextMenu event when the user right-clicks inside
            the control.
            <para/>
            You can cancel showing a content menu when
            you assign True to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.<para/></remarks>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnCancelMode(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.CancelMode"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnIntelliMouseDragScrolling(Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.IntelliMouseDragScrolling"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnNcCalcSize(System.Drawing.Rectangle@)">
            <summary>
            Method calculate new client area size. If you want to increase Non-Client
            area for control and draw on it then this is method especially for you.
            </summary>
            <param name="client">Rectangle of the control client area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnScrollTipFeedback(Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs)">
            <summary>
            Raises the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.ScrollTip"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnCreateScrollTipWindow">
            <summary>
            Factory method that creates a <see cref="T:Syncfusion.Windows.Forms.ScrollTipWindow"/> for displaying ScrollTips.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateScrollTips(System.Windows.Forms.ScrollEventArgs)">
            <internalonly/>
            <summary></summary>
            <param name="se"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnAutoScrollingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.AutoScrollingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnUpdatingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.UpdatingChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks>
            The event handler for this event can check <see cref="P:Syncfusion.Windows.Forms.ScrollControl.Updating"/>
            to determine if <see cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate"/> or <see cref="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate"/>
            was called.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
              Overridden. See the<see cref="E:System.Windows.Forms.Control.Invalidated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnWindowScrolled(Syncfusion.Windows.Forms.ScrollWindowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.WindowScrolled"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.ScrollWindowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnWindowScrolling(Syncfusion.Windows.Forms.ScrollWindowEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.WindowScrolling"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.ScrollWindowEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnEnter(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnLeave(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnValidated(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnLostFocus(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnGotFocus(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.Deactivated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnSizeChanged(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnLocationChanged(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnHandleCreated(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnVisibleChanged(System.EventArgs)">
            <override/>
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnControlGotFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. This method is called when the control
            or any child control gets focus and this control did not have focus before.
            </summary>
            <remarks>
            Inheriting classes should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlGotFocus"/> is also called when child controls get focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnControlLostFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event. This method is called when the control
            or any child control loses focus and the new focused control is not a child of this control.
            </summary>
            <remarks>
            Inheriting classes should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlLostFocus"/> is also called when child controls lose focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnValidatingLostFocus">
            <summary>
            This method is called if the control's <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlLostFocus"/> notification occurs
            while handling a <see cref="E:System.Windows.Forms.Control.Validating"/> event. This typically occurs if a
            message box is displayed from a <see cref="E:System.Windows.Forms.Control.Validating"/> event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnEnsurePaintCodeJitted">
            <summary>
            Minimizes the time the first time the control is drawn. Calling
            OnPaint before the control is made visible ensures that all relevant code for drawing
            has been jitted.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnAccelerateScrollingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.AccelerateScrollingChanged"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <override/>
            <summary></summary>
            <param name="drgevent"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.wiredParentForm_Enter(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.WireScrollEvents">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UnwireScrollEvents">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.Syncfusion#Windows#Forms#ISplitterPaneSupport#PaneClosing">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.Syncfusion#Windows#Forms#ISplitterPaneSupport#PaneClosed">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.GetScrollBarFrameOfComponent(System.Object)">
            <summary>
                Given a component, this retrieves the <see cref="T:Syncfusion.Windows.Forms.IScrollBarFrame"/> that it is parented to;
                NULL if it is not parented to any <see cref="T:Syncfusion.Windows.Forms.IScrollBarFrame"/>.
            </summary>
            <param name="comp">
                The component to check.
            </param>
            <returns>
                A <see cref="T:Syncfusion.Windows.Forms.IScrollBarFrame"/> that the component is parented to; NULL if
                no such interface exists. This will return the component if it
                is an instance of <see cref="T:Syncfusion.Windows.Forms.IScrollBarFrame"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.GetDynamicSplitterFrameOfComponent(System.Object)">
            <summary>
                Given a component, this retrieves the <see cref="T:Syncfusion.Windows.Forms.IDynamicSplitterFrame"/> that it is parented to;
                NULL if it is not parented to any <see cref="T:Syncfusion.Windows.Forms.IDynamicSplitterFrame"/>.
            </summary>
            <param name="comp">
                The component to check.
            </param>
            <returns>
                An <see cref="T:Syncfusion.Windows.Forms.IDynamicSplitterFrame"/> that the component is parented to; NULL if
                no such interface exists. This will return the component if it
                is an instance of <see cref="T:Syncfusion.Windows.Forms.IDynamicSplitterFrame"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ProcessMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Delegates the MouseWheelEvent from a child control.
            </summary>
            <param name="e">A MouseEventArgs that holds event data.</param>
            <remarks><code>
            public class GridTextBox: RichTextBox
            {
            	private GridTextBoxCell parent;
            	protected override void OnMouseWheel(MouseEventArgs e)
            	{
            		parent.Grid.ProcessMouseWheel(e);
            	}
            }
            </code></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateVScrollBar">
            <summary>
            Invalidate the vertical scrollbar 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateHScrollBar">
            <summary>
            Invalidate the horizontal scrollbar 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SyncReflectScrollBars">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.DpiScrollBehavior(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>
            The scrollbar height and width will be increased, when the DPI of system is increased.
            </summary>
            <param name="scrollBar"></param>
            <returns>ScrollBarCustomDraw</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SetVisibleScrollbars(System.Boolean,System.Boolean)">
            <summary>
                Displays / hides the horizontal and vertical autoscrollbars. This will
                also adjust the values of formState to reflect the new state.
            </summary>
            <param name="horiz">
                True if the horizontal scrollbar should be displayed.
            </param>
            <param name="vert">
                True if the vertical scrollbar should be displayed.
            </param>
            <returns>
                True if the form needs to be layed out again.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ResetMouseWheelScrollLines">
            <summary>
            Resets the <see cref="!:MouseWhellScrollLines"/> property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.RaiseCancelMouseEvent(System.Windows.Forms.MouseEventArgs,Syncfusion.Windows.Forms.ScrollControl.CancelMouseDelegate)">
            <summary>
            Raises the specified mouse event and catches any exception. If an exception is caught, NotifyCancelMode
            is called. Returns False if event should be ignored by the grid.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
            <param name="d">A delegate that handles the event.</param>
            <returns>False if CancelMouseEventArgs.Cancel is True; True otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.IntelliMouseDragScrollEvent(System.Object,Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.InvalidateNc">
            <summary>Method force to invalidate Non Client area of control.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.InvalidateNc(System.Drawing.Rectangle)">
            <summary>Invalidate specified rectangle in Non Client area.</summary>
            <param name="rc">Rectangle to Invalidate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateNc">
            <summary>Invalidate and wait till area update on Non Client area.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnNCPaint(Syncfusion.Windows.Forms.NCPaintEventArgs)">
            <summary>
             Method draws non-client area of an ScrollControl.
            </summary>
            <param name="ncEventArgs"> EventArgs with Non-client info for drawing. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.Syncfusion#Drawing#INonClientPaintingSupport#NonClientPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary></summary>
            <returns></returns>
            <param name="e"/>
            <param name="displayRect"/>
            <param name="windowRectInScreen"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.NotifyCancelMode">
            <summary>
            Raises a <see cref="E:Syncfusion.Windows.Forms.ScrollControl.CancelMode"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.IncreaseSmallChange(Syncfusion.Windows.Forms.ScrollBarWrapper,System.Int64)">
            <exclude/>
            <summary>
            Increases small change of the ScrollBar.
            </summary>
            <param name="scrollBar"/>
            <param name="nTimerCount"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ScrollTipFeedbacks">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.HideScrollTips">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ResetInsideScrollMargins">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.InsideScrollMargins"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrollTimer(Syncfusion.Windows.Forms.ScrollBarWrapper,System.Windows.Forms.ScrollEventType)">
            <summary>
            Starts the AutoScroll timer.
            </summary>
            <param name="scrollBar">The scrollbar to be automatically scrolled.</param>
            <param name="saType">The event to be sent to this scrollbar.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrollTimer(System.Windows.Forms.Message)">
            <overload>
            Starts the AutoScroll timer.
            </overload>
            <summary>
            Starts the AutoScroll timer.
            </summary>
            <param name="m">The message to be sent to the current control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl._ApplyAccelerateScrolling">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrollTimer(System.Windows.Forms.Message,System.Int32)">
            <summary>
            Starts the AutoScroll timer.
            </summary>
            <param name="m">The message to be sent to the current control.</param>
            <param name="interval">The initial interval for sending messages.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SlowAutoScrollTimer">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.StopAutoScrollTimer">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.repeatScrollEventTimer_Elapsed(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="source"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SendMessage(System.Int32,System.IntPtr,System.IntPtr)">
            <summary></summary>
            <returns></returns>
            <param name="msg"/>
            <param name="wparam"/>
            <param name="lparam"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SendMessage(System.Int32,System.IntPtr,System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="msg"/>
            <param name="wparam"/>
            <param name="lparam"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SendMessage(System.Int32,System.Int32,System.IntPtr)">
            <summary></summary>
            <returns></returns>
            <param name="msg"/>
            <param name="wparam"/>
            <param name="lparam"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.SendMessage(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="msg"/>
            <param name="wparam"/>
            <param name="lparam"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.FixRenderOrigin(System.Drawing.Graphics)">
            <summary>
            Call this method from your control's OnPaint method to ensure correct
            rendering origin for brushes and patterns.
            </summary>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateScrollBars">
            <summary>
            Updates scrollbars to reflect recent changes in scroll position, minimum and maximum scroll position values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldPrepareUpdate">
            <summary>
            Call this method to check if you should do any update calculations for the view in your control and to notify scroll control
            that the control's content needs to be updated.
            </summary>
            <returns>True if you should invalidate areas that need to be redrawn; False if a complete Refresh for the control is pending
            and therefore invalidating the view is not necessary.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ShouldPrepareUpdate(System.Boolean)">
            <summary>
            Call this method to check if you should do any update calculations for the view in your control and to notify scroll control
            that the control's content needs to be updated.
            </summary>
            <param name="markPaintPending">If markPaintPending is True, ScrollControl will assume the control needs to be repainted in a subsequent EndUpdate call.</param>
            <returns>True if you should Invalidate regions to be repainted in your control. It will return False if a complete Refresh of
            the control is pending and you don't need to invalidate individual regions of your control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate">
            <summary>
            Suspends the painting of the control until the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate"/> method is called.
            </summary>
            <remarks>
            When many paints are made to the appearance of a control, you should invoke the
            BeginUpdate method to temporarily freeze the drawing of the control. This results
            in less distraction to the user and a performance gain. After all updates have
            been made, invoke the EndUpdate method to resume drawing of the control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate(Syncfusion.Windows.Forms.BeginUpdateOptions)">
            <summary>
            Suspends the painting of the control until the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate"/> method is called.
            </summary>
            <param name="options">Specifies the painting support during the BeginUpdate, EndUpdate batch.</param>
            <remarks><para>When many paints are made to the appearance of a control, you should invoke the
            BeginUpdate method to temporarily freeze the drawing of the control. This results
            in less distraction to the user and a performance gain. After all updates have
            been made, invoke the EndUpdate method to resume drawing of the control.</para><para>
            Pass BeginUpdateOptions if you do not want to do a complete Refresh of the control and instead
            want to have certain regions of your control be invalidated or scroll the contents of control.</para>
            If you call BeginUpdate() and then later EndUpdate(), the control will know if a paint is pending and only
            refresh the control if a paint is pending. Calling ShouldPrepareUpdate, Invalidate or a WM_PAINT message during
            the BeginUpdate EndUpdate block will signal the control that a paint is pending.
            </remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.ShouldPrepareUpdate"/>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnBeginUpdateScrollBars">
            <summary>
            Calls <see cref="M:Syncfusion.Windows.Forms.ScrollBarWrapper.BeginUpdate"/> for both scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnEndUpdateScrollBars">
            <summary>
            Calls <see cref="M:Syncfusion.Windows.Forms.ScrollBarWrapper.EndUpdate"/> for both scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate">
            <summary>
            Resumes the painting of the control suspended by calling the BeginUpdate method.
            </summary>
            <remarks>
            When many paints are made to the appearance of a control, you should invoke the
            BeginUpdate method to temporarily freeze the drawing of the control. This results
            in less distraction to the user and a performance gain. After all updates have
            been made, invoke the EndUpdate method to resume drawing of the control.
            </remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.CancelUpdate">
            <summary>
            Cancels any prior <see cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate"/> calls.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollControl.initial">
            <summary>
            Resumes the painting of the control suspended by calling the BeginUpdate method.
            </summary>
            <remarks>
            When many paint are made to the appearance of a control you should invoke the
            BeginUpdate method to temporarily freeze the drawing of the control. This results
            in less distraction to the user, and a performance gain. After all updates have
            been made, invoke the EndUpdate method to resume drawing of the control.
            </remarks>
            <param name="update"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ScrollWindow(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Scrolls the contents of the control similar to the ScrollWindow Windows API.
            </summary>
            <remarks>
            The method will raise a WindowScrolling event before the contents are scrolled and a WindowScrolled event after
            the contents have been scrolled.
            <para>If DisableScrollWindow is True, any calls to the ScrollWindow method will simply invalidate the affect region. The rendering origin will
            still be recorded correctly and WindowScrolling and WindowScrolled events will be raised.</para><para>If DisableScrollWindow is False, ScrollWindow will scroll the contents of the control.
            </para></remarks>
            <returns></returns>
            <param name="xAmount"/>
            <param name="yAmount"/>
            <param name="rect"/>
            <param name="clipRect"/>
            <param name="allowUpdate"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ScrollWindowInvalidate(System.Drawing.Rectangle)">
            <exclude/>
            <summary></summary>
            <param name="r"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.DiscardPaintMessages">
            <exclude/>
            <summary>
            Discards paint messages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ChildGotFocus(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.ChildLostFocus(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.QueryFocusInside">
            <summary>
            Indicates whether this control contains focus. Override this method if you
            want to show drop-down windows and indicate the control has not lost focus when
            the drop-down is shown.
            </summary>
            <returns>True if the control or any child control has focus; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.RaiseControlGotFocus">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.RaiseControlLostFocus">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnRightToLeftChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.AdjustSizeBox">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.EnsurePaintCodeJitted(System.Boolean)">
            <summary>
            Checks if the control is visible and a window handle has been created.
            If it has not been drawn before, it calls <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnsurePaintCodeJitted"/>.
            </summary>
            <param name="ignoreVisible">Set this True if you want to force a call to
            <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnsurePaintCodeJitted"/> even if the control is not visible and / or
            no window handle has been created.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.EnableDoubleBufferSurface">
            <summary>
            Enables the DoubleBufferSurface for this control. The DoubleBufferSurface buffering
            is different from the automatic .NET double buffering and also a bit slower but
            it reduces flicker if lots of scrolling is used and gdi drawing for individual cells
            in a grid.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OnPrepareDoubleBufferSurfaceGraphics(System.Drawing.Graphics)">
            <summary></summary>
            <param name="gr"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.UpdateStyles">
            <summary>
            Forces the assigned styles to be reapplied to the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.PreJitPaint">
            <summary>
            Indicates whether the time the first time the control is drawn should be optimized
            by calling OnPaint before the control is made visible and so that all relevant code for drawing
            has been jitted (Just in Time)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AutoScrolling">
            <summary>
            Disables or specifies the direction for automatic scrolling when the user drags
            the mouse cursor out of the scrolling area.
            </summary>
            <remarks><list type=""><item>ScrollBars.None will disable scrolling.</item><item>ScrollBars.Horizontal will enable horizontal scrolling.</item><item>ScrollBars.Vertical will enable vertical scrolling.</item><item>ScrollBars.Horizontal|ScrollBars.Vertical will enable both horizontal and vertical scrolling.</item></list></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.DisableScrollWindow">
            <summary>
            Lets you check or specify the setting if the window should be scrolled when ScrollWindow is called.
            </summary>
            <remarks><para>If DisableScrollWindow is True, any calls to the ScrollWindow method will simply invalidate the affect region. The rendering origin will
            still be recorded correctly and WindowScrolling and WindowScrolled events will be raised.</para><para>If DisableScrollWindow is False, the ScrollWindow will scroll the contents of the control.
            </para><para>DisableScrollWindow will return True if BeginUpdate was called without the BeginUpdateOptions.ScrollWindow option.
            </para></remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate"/>
            <seealso cref="P:Syncfusion.Windows.Forms.ScrollControl.Updating"/>
            <seealso cref="M:Syncfusion.Windows.Forms.ScrollControl.ScrollWindow(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.SupportsThumbTrack">
            <summary>
            Indicates whether the control should scroll while the user is dragging a scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.VerticalThumbTrack">
            <summary>
            Indicates whether the control should scroll while the user is dragging a vertical scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HorizontalThumbTrack">
            <summary>
            Indicates whether the control should scroll while the user is dragging a horizontal scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.VerticalScrollTips">
            <summary>
            Indicates whether the control should show ScrollTips while the user is dragging a vertical scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HorizontalScrollTips">
            <summary>
            Indicates whether the control should show ScrollTips while the user is dragging a horizontal scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.SizeGripStyle">
            <summary>
            Gets or sets a size grip that should be drawn at the bottom-right corner if both scrollbars
            are visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AllowSizeGrip">
            <summary>
            Indicates whether a size grip can be drawn inside the SizeBox and if the <see cref="P:System.Windows.Forms.Form.SizeGripStyle"/>
            of the parent form is allowed to be changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ForceSizeBox">
            <summary>
            Indicates whether the size box should always be drawn when both scrollbars are visible. This
            property differs from <see cref="P:Syncfusion.Windows.Forms.ScrollControl.SmartSizeBox"/> such that the control will not
            check the docking state and parent form to determine whether to show the size box.
            Note: Another better solution is drawing NonClientArea
            ourselves. See SizeGripStyle which implements this newer solution.
            </summary>
            <remarks>
            Showing the size box works around a problem with .NET controls because by
            default the area at the bottom right is not drawn and that can cause
            drawing glitches. Note: Another better solution is drawing the NonClientArea
            ourselves. See SizeGripStyle which implements this newer solution.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.SmartSizeBox">
            <summary>
            Indicates whether the size box should be drawn when both scrollbars are visible
            and the control is not a docked window in an MDIChild window. Note: Another better solution is drawing the NonClientArea
            ourselves. See SizeGripStyle which implements this newer solution.
            </summary>
            <remarks>
            Showing the size box works around a problem with .NET controls because by
            default the the area at the bottom right is not drawn and that can cause
            drawing glitches. Note: Another better solution is drawing NonClientArea
            ourselves. See SizeGripStyle which implements this newer solution.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AutoScrollTimerEnable">
            <summary>
            Indicates whether the control is currently scrolling and the user drags
            the mouse outside the inner scrolling area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.VScrollBar">
            <summary>
            Returns a reference to an object with vertical scrollbar settings of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HScrollBar">
            <summary>
            Returns a reference to an object with horizontal scrollbar settings of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsThumbTracking">
            <summary>
            Internal only. Toggles thumb track mode. See ScrollBarWrapper.IsThumbTracking for a public getter for this state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AllowIncreaseSmallChange">
            <summary>
            Indicates whether the scroll control can increase the <see cref="P:System.Windows.Forms.ScrollBar.SmallChange"/>
            property while doing accelerated scrolling. If this is True, the <see cref="P:System.Windows.Forms.ScrollBar.SmallChange"/>
            will be set to 3 after 40 rows and to 5 after 80 rows.
            </summary>
            <remarks>
            By default the scroll control will increase the scrolling step after a while. Set this to
            False if you want to enforce scrolling only one row at a time even with accelerated scrolling.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AutoScrollBounds">
            <summary>
            Gets or sets the outer scrolling area. Typically the client area of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.InsideScrollBounds">
            <summary>
            Returns the inside scrolling area. The control will scroll if the user drags
            the mouse outside this area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.InsideScrollMargins">
            <summary>
            Gets or sets the default margins for the scrolling area when the user moves the mouse to the
            margin between InsideScrollBounds and AutoScrollBounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ScrollTip">
            <summary>
            Returns a reference to the <see cref="T:Syncfusion.Windows.Forms.ScrollTipWindow"/> for this control. Can be NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ScrollTipFormat">
            <summary>
            Gets or sets the text to be displayed in the ScrollTip window with a place holder for scroll position . For example, " Position {0} "
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.OverrideCursor">
            <summary>
            Immediately changes the shown cursor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsMousePressed">
            <summary>
            Indicates whether the control is handling a <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsValidating">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnValidating(System.ComponentModel.CancelEventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsValidated">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnValidated(System.EventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsActiveControl">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnter(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnLeave(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsDeactivated">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnDeactivated(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HasControlFocus">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlGotFocus"/> has been called. <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlLostFocus"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IgnoreUICues">
            <summary>
            ScrollControlMouseController checks this to see if it should cancel
            existing mouse operation and call ScrollControlMouseController.CancelMode
            when a UICuesChanged event is sent. That can happen when user activates
            another application or simply when styles for a child window have changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.PaneDesc">
            <summary>
            Returns the Pane information.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.MouseWheelScrollLines">
            <summary>
            Lets you override the scroll behavior for rolling the mouse wheel. Default is SystemInformation.MouseWheelScrollLines.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.SmoothMouseWheelScrolling">
            <summary>
            Indicates whether the control should perform one scroll command (faster) or
            if it should perform multiple scroll commands with smaller increments (smoother)
            when user rolls mouse wheel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.VScrollIncrement">
            <summary>
            Gets or sets the multiplier for mouse wheel scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HScrollIncrement">
            <summary>
            Gets or sets the multiplier for mouse wheel scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.UseSharedScrollBars">
            <summary>
            Enables shared scrollbars. Use this if the control is not embedded in a container control
            that implements IScrollBarFrame and you want to provide your own scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.BorderStyle">
            <summary><para>Gets / sets the border style of the control.</para></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HScroll">
            <summary><para>
                 Indicates whether the horizontal scroll bar is visible.
               </para></summary>
            <value><para><see langword="True"/> if the horizontal scroll bar is
                  visible; <see langword="False"/> otherwise.
               </para></value>
            <seealso cref="P:System.Windows.Forms.ScrollableControl.HScroll"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.VScroll">
            <summary><para>
                  Indicates whether the vertical scroll bar is visible.
               </para></summary>
            <value><para><see langword="True"/> if the vertical scroll bar is
                  visible; <see langword="False"/> otherwise.
               </para></value>
            <seealso cref="P:System.Windows.Forms.ScrollableControl.HScroll"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsSplitterPaneClosed">
            <summary>
            Indicates whether the splitter control has closed the pane with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.MouseControllerDispatcher">
            <summary>
            MouseControllerDispatcher coordinates mouse events among competing mouse controllers. Based on
            the position of the mouse and context of the control every registered controller's HitTest method
            is called to determine the best controller for the following mouse action. This controller will then
            receive mouse events.
            </summary>
            <remarks>
            See <see cref="T:Syncfusion.Windows.Forms.MouseControllerDispatcher"/> for more information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ActiveController">
            <summary>
            Returns a reference to the active mouse controller that is receiving MouseDown, MouseMove, MouseUp messages when the user
            has pressed a mouse button.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.ScrollControl.MouseControllerDispatcher"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Syncfusion#Windows#Forms#ISplitterPaneSupport#FillSplitterPane">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.FillSplitterPane">
            <summary>
            Toggles support for using the control inside a dynamic splitter window and sharing scrollbars
            with the parent window.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsSplitterPaneClosing">
            <summary>
            Indicates whether the splitter control is closing the pane with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.EnableIntelliMouse">
            <summary>
            Toggles support for Intelli-Mouse panning. When the user presses the middle mouse button and drags the mouse,
            the window will scroll.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.themedDrawing">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.themedScrollBarDrawing">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.DiscardPaintMessagesAfterBeginUpdate">
            <summary>
            When you call BeginUpdate(), the control by default does not handle WM_PAINT messages. Only
            once you call EndUpdate they will be processed. If this causes problems in your application, you can
            set this static property to True. In such cases, WM_PAINT messages will be simply discarded and
            any invalid regions will be validated.
            </summary>
            <remarks>
            There is a problem with the default implementation of BeginUpdate. If a screen region is marked
            invalid, the WndProc will be repeatedly called with WM_PAINT at the the top of the WndProc
            until EndUpdate is called. This can cause your application to freeze if another window gets created
            or if you make a web service call and WndProc messages need to be processed.<para/>
            Setting DiscardPaintMessagesAfterBeginUpdate to True will help avoid these scenarios.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.IsDisposing">
            <summary>
            Returns true if object is executing <see cref="M:Syncfusion.Windows.Forms.ScrollControl.Dispose(System.Boolean)"/> method call.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.LastMousePosition">
            <summary>
            Property MousePosition (Point) - cached Control.MousePosition. The variable is set
            before any WM_MOUSE* messages being processed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AccelerateScrolling">
            <summary>
            Gets or sets the acceleration behavior for scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.AllowRaiseMouseMoveInOnDragOver">
            <summary>
            Indicates whether OnMouseMove should be called from OnDragOver.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Size">
            <override/>
            <summary>
            Gets or sets the control's size. Size is overridden here to prevent Code Generation in Designer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Bounds">
            <override/>
            <summary>
            Gets or sets the control's bounds. Size is overridden here to prevent Code Generation in Designer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.TabIndex">
            <override/>
            <summary>Gets or sets the TabIndex.
            TabIndex is overridden here to prevent Code Generation in Designer.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.UpdateOptions">
            <summary>
            Returns the settings for the current BeginUpdate option.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Syncfusion#Windows#Forms#ISupportUpdating#Updating">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Updating">
            <summary>
            Indicates whether BeginUpdate() has been called and the painting for a control is suspended.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.PaintPending">
            <summary>
            Indicates whether there are updates pending for the control when painting is suspended by BeginUpdate.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.HasDoubleBufferSurface">
            <summary>
            Determines if EnableDoubleBufferSurface method was called and double buffering
            using the DoubleBufferSurface is enabled. The DoubleBufferSurface buffering
            is different from the automatic .NET double buffering and also a bit slower but
            it reduces flicker if lots of scrolling is used and gdi drawing for individual cells
            in a grid.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.DoubleBufferSurface">
            <summary>
            Returns the DoubleBufferSurface if EnableDoubleBufferSurface() was called. Otherwise
            the method returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.UpdatingStyles">
            <summary>
            Indicates whether <see cref="M:System.Windows.Forms.Control.UpdateStyles"/> is internally called.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.Deactivated">
            <summary>
            Occurs when both <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnControlLostFocus"/> and <see cref="M:Syncfusion.Windows.Forms.ScrollControl.OnLeave(System.EventArgs)"/> occur.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.AccelerateScrollingChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.AccelerateScrolling"/> property has been changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.VerticalScroll">
            <summary>
            Occurs when vertical scrollbar is moved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.HorizontalScroll">
            <summary>
            Occurs when horizontal scrollbar is moved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.IntelliMouseDragScrolling">
            <summary>
            Occurs when the user presses the mouse wheel and drags the mouse.
            </summary>
            <remarks>
            Set <see cref="P:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs.Scrolled"/> of <see cref="T:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs"/>
            to True if you provide customized scrolling in your event handler.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ShowContextMenu">
            <summary>
            The ShowContextMenu event occurs when the user right-clicks inside
            the control.
            </summary>
            <remarks>
            <para/>
            You can cancel showing a content menu when
            you assign True to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.
            <para/>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrolling">
            <summary>
            Occurs when accelerated scrollbar scrolling or mouse drag-scrolling starts.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.SplitterPaneClosed">
            <summary>
            Occurs when the splitter control has closed the pane with this control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.SplitterPaneClosing">
            <summary>
            Occurs when the splitter control is closing the pane with this control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollTipFeedback">
            <summary>
            Occurs when the user is dragging the scrollbar thumb.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollbarsVisibleChanged">
            <summary>
            Occurs when scrollbars are hidden or shown.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.MouseWheelZoom">
            <summary>
            Occurs when the user holds the Control Key and rolls the mouse wheel.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.FillSplitterPaneChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.FillSplitterPane"/> value has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.UpdatingChanged">
            <summary>
            Occurs when <see cref="M:Syncfusion.Windows.Forms.ScrollControl.BeginUpdate(Syncfusion.Windows.Forms.BeginUpdateOptions)"/> has been called the first time or <see cref="M:Syncfusion.Windows.Forms.ScrollControl.EndUpdate(System.Boolean)"/>
            has been called the last time.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.WindowScrolled">
            <summary>
            Occurs after the window has been scrolled.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.WindowScrolling">
            <summary>
            Occurs while the window is being scrolled.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseDown">
            <summary>
            Occurs before a <see cref="E:System.Windows.Forms.Control.MouseDown"/> is raised and allows you to cancel the mouse event.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseDown">
            <summary>
            Occurs after a <see cref="E:System.Windows.Forms.Control.MouseDown"/> is raised.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseMove">
            <summary>
            Occurs before a <see cref="E:System.Windows.Forms.Control.MouseMove"/> is raised and allows you to cancel the mouse event.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseMove">
            <summary>
            Occurs after a <see cref="E:System.Windows.Forms.Control.MouseMove"/> event is raised and after auto-scrolling.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlMouseUp">
            <summary>
            Occurs before a <see cref="E:System.Windows.Forms.Control.MouseUp"/> is raised and allows you to cancel the mouse event.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.ScrollControlHandledMouseUp">
            <summary>
            Occurs after a <see cref="E:System.Windows.Forms.Control.MouseUp"/> event is raised.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.CancelMode">
            <summary>
            Occurs when the window receives a WM_CANCELMODE message.
            </summary>
            <remarks>
            WM_CANCELMODE is sent to cancel certain modes, such as mouse capture.
            For example, the system sends this message to the active window when a
            dialog box or message box is displayed. Certain functions also send this
            message explicitly to the specified window regardless of whether it is the
            active window. For example, the EnableWindow function sends this message
            when disabling the specified window.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.AutoScrollingChanged">
            <summary>
            Occurs when the AutoScrolling property is changed.
            </summary>
            <remarks>
            If you want to prevent autoscrolling, you should handle this event
            and reset the AutoScrolling property to ScrollBars.None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.CreateParams">
            <summary>
            Overridden. Changes <see cref="P:System.Windows.Forms.CreateParams.Style"/> to show or hide scrollbars and also consider the control's
            <see cref="P:Syncfusion.Windows.Forms.ScrollControl.BorderStyle"/> setting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.EnableTouchMode">
            <summary>
            Gets or sets the touch mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBars">
            <summary>
            Toggles between standard and Office2007 scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBarsColorScheme">
            <summary>
            Gets or sets the style of Office2007 scroll bars.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.Office2010ScrollBarsColorSchemeChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.Office2010ScrollBarsColorScheme"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsChanged">
            <summary>
            Occurs when the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsChanged"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBarsColorSchemeChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBarsColorScheme"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.Office2007ScrollBars"/> property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the control. If custom
            scroll bars (ScrollBarCustomDraw, Office2007 style) are shown in the client area, then
            this method will remove the area occupied by the scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.ClientSize">
            <summary>
            Gets or sets the height and width of the client area of the control. If custom
            scroll bars (ScrollBarCustomDraw, Office2007 style) are shown the client area, then
            this method will remove the area occupied by the scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.GridOfficeScrollBars">
            <summary>
            Gets or sets the Office like scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.Office2010ScrollBarsColorScheme">
            <summary>
            Gets or sets the style of MS Office2010 scroll bars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.DpiAware">
            <summary>
            Gets or sets the boolean value for enhanching the apperance settings for DpiAware enabled Application.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsEventArgs">
            <summary>
            Provides the data about <see cref="E:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsChanged"/> event of a <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsEventArgs.#ctor(Syncfusion.Windows.Forms.OfficeScrollBars)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs"/>.
            </summary>
            <param name="record">The record index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollControl.OfficeScrollBarsEventArgs.GridOfficeScrollBars">
            <summary>
            Gets or sets the Office scroll bars
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollControl.CancelMouseDelegate">
            <summary>
            Delegate for ScrollControlMouseDown, OnBeforeMouseMove and ScrollControlMouseUp methods.
            </summary>
            <returns></returns>
            <param name="e"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.isScrollBarNeeded">
            <summary>
            Indicates whether ScrollBar is displayed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.AutoScrollPosition">
            <summary>
            Scroll Position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.frame">
            <summary>
            ScrollerFrame 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.bShowChevron">
            <summary>
            Indicates whether to show the chevron button on the Navigation Panel 
            in the stacked GroupBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_visibleGroupBarItems">
            <summary>
            Collection of visible group bar items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.splittercolor">
            <summary>
            Gets or sets the color of the splitter in GroupBar if GroupBar is in stacked mode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.enableSplittercolorCustomization">
            <summary>
            Enable to change the color of the splitter in stacked mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_office2007ColorTable">
            <summary>
            Colors for Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_office2010ColorTable">
            <summary>
            Colors for Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.CbuttonSIZE">
            <summary>
            Default size of the collapsebutton
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderFONT">
             <summary>
            Header font
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.GBIheight">
             <summary>
            barItem height
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.GHeaderHeight">
             <summary>
            Header height
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.GBCWidth">
             <summary>
            Collapsedwidth
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetSplittercolor">
            <summary>
            Resets the Splittercolor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeSplittercolor">
            <summary>
            ShouldSerialize the AddButtonHoverColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetEnableSplittercolorCustomization">
            <summary>
            Resets the EnableSplittercolorCustomization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeEnableSplittercolorCustomization">
            <summary>
            ShouldSerialize the EnableSplittercolorCustomization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetHeaderFont">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderFont"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetHeaderForeColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderForeColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetHeaderBackColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderBackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeBorderColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetBorderColor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ApplyScaleToControl(System.Single)">
             <summary>
            Applies the scaling
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.InplaceRenameItem(System.Int32)">
            <summary>
            Starts an in-place edit of the specified <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> text. 
            </summary>
            <remarks>Invoking this method will create an editable text box and and populates it with 
            the item text. Editing the text box contents and selecting ENTER will update the GroupBarItem text. 
            Selecting ESC will cancel the edit.</remarks>
            <param name="nindex">The zero-based index of the item to be renamed.</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupBar.CancelInplaceRenameItem"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.CancelInplaceRenameItem">
            <summary>
            Cancels an in-place edit that is in progress.
            </summary>		
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupBar.InplaceRenameItem(System.Int32)"/>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnGroupBarItemSelected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelected"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnGroupBarItemSelectionChanging(Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelectionChanging"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemSelectionChangingEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnGroupBarItemAdded(Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemAdded"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnGroupBarItemRemoved(Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRemoved"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnGroupBarItemRenamed(Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRenamed"/> event.
            </summary>
            <param name="arg">An <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnShowContextMenu(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ShowContextMenu"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnProvideGroupBarItemBrush(Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ProvideGroupBarItemBrush"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawRegularGroupBar(System.Drawing.Graphics)">
            <summary>
            Draws the group bar control.
            </summary>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawStackedGroupBar(System.Drawing.Graphics)">
            <summary>
            Draws the stacked group bar.
            </summary>
            <param name="gph">The GPH.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawHeader(System.Drawing.Graphics)">
            <summary>
            Draws the Header for <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint the specified GroupBar Header.
            Override this method to customize the GroupBar Header drawing.
            </remarks>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawGroupBarItem(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> object.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint the specified GroupBarItem.
            Override this method to customize the GroupBar drawing.
            </remarks>
            <param name="gfxTarget">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="nindex">The zero-based index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to be drawn.</param>
            <param name="rcbar">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupBarItem bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawSelectedGroupClientBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a border around the selected client control.
            </summary>
            <remarks>The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint a border around the 
            the current selected client control. Override this method to customize the GroupBar drawing.
            </remarks>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rcclient">A <see cref="T:System.Drawing.Rectangle"/> value specifying the client control bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawGroupBarImage(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> icon.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint the specified 
            GroupBarItem's icon. Override this method to customize the GroupBar drawing.
            </remarks>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="nindex">The zero-based index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> for which the icon is drawn.</param>
            <param name="rcbar">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupBarItem bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawGroupBarIcon(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> icon.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint the specified 
            GroupBarItem's icon. Override this method to customize the GroupBar drawing.
            </remarks>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="nindex">The zero-based index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> for which the icon is drawn.</param>
            <param name="rcbar">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupBarItem bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawGroupBarText(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> text.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control calls this method to paint the specified 
            GroupBarItem's text. Override this method to customize the GroupBar drawing.
            </remarks>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="nindex">The zero-based index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> for which the text is drawn.</param>
            <param name="rcbar">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupBarItem bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawNevigationItemIcon(System.Drawing.Graphics,Syncfusion.Windows.Forms.Tools.GroupBarItem,System.Drawing.Rectangle)">
            <summary>
            Draws icon\image in navigation panel.
            </summary>
            <param name="gph"></param>
            <param name="item"></param>
            <param name="rcbutton"></param>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.DrawDropdownButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the drop down button.
            </summary>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rcbutton">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupBarItem bounds.</param>
            <param name="bIsMirrored">If set to <c>true</c> button is mirrored for RTL.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.indexOnVisibleItems">
            <summary>
            Gets or Sets a value indicating whether selection logic includes visible items alone for SelectedItem calculation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnVisibleChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overrides the MouseWheel event
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GetItemIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="virtualSelctedItem">Index of selected item is VisibleGroupBarItems</param>
            <returns>Index of selected item is GroupBarItems collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GetItemFromPoint(System.Drawing.Point)">
            <summary>
            Gets the GroupBarItem from the corresponding mouse point.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.PointToItem(System.Int32,System.Int32)">
            <summary>
            Overloaded. Returns the GroupBarItem at the specified point in client coordinates.
            </summary>
            <param name="x">X - coordinate of the item.</param>
            <param name="y">Y - coordinate of the item.</param>
            <returns>GroupBarItem, whose area contains the specified point; Null, if nothing is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.PointToItem(System.Drawing.Point)">
            <summary>
            Returns GroupBarItem at specified point in client coordinates.
            </summary>
            <param name="pt">Point to search GroupBarItem at.</param>
            <returns>GroupBarItem, whose area contains the specified point; Null, if nothing is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShowDropDownMenu">
            <summary>
            Creates and displays the drop-down button context menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.InitializeNavigationButtonMenu(Syncfusion.Windows.Forms.IContextMenuProvider)">
            <summary>
            Initializes the navigation button menu.
            </summary>
            <param name="menu">The context menu provider used to create the menus.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnNavigationPaneButtonClick(Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs)">
            <summary>
            Raises the navigation pane button click event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnMoreButtons_Click(System.Object,System.EventArgs)">
            <summary>
            Called when more buttons menuitem is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.OnFewerButtons_Click(System.Object,System.EventArgs)">
            <summary>
            Called when fewer buttons menuitem is clicked.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GetIsMirrored">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ApplyScrollersFrameStyle">
            <summary>
            Helps to apply the Visual Style for Scroll Bar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.UpdateItemBounds">
            <summary>
            Helps to update the Bounds of GroupBarItems
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ReduceItemBounds(System.Int32)">
            <summary>
            Helps to update the Bounds of GroupBarItems, when Scrolling action is performed
            </summary>
            <param name="heightToBeReduced">AutoScrollPosition</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.c_nCollapseButtonWidth">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.c_nCollapseButtonHeight">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bCollapsed">
            <summary>
            Indicates whether <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> is collapsed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bCollapsedInitValue">
            <summary>
            Stores <see cref="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bCollapsed"/> value while <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bAllowCollapse">
            <summary>
            Indicates whether <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> can be collapsed.
            </summary>		
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_nCollapsedWidth">
            <summary>
            Width of the collapsed <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_nExpandedWidth">
            <summary>
            Width of the expanded <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_nItemPopupHeigth">
            <summary>
            Item popup's client heigth.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_sCollapsedText">
            <summary>
            Text shown in collapsed client area of GroupBar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_collapseButtonState">
            <summary>
            Collapse button's state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_collapsedClientAreaState">
            <summary>
            Collapsed client area's state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_collapseImage">
            <summary>
            Collapse button's image in expanded state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_expandImage">
            <summary>
            Collapse button's image in collapsed state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_sMinimizeButtonToolTip">
            <summary>
            Collapse button's tooltip, when control is expanded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_sExpandButtonToolTip">
            <summary>
            Group Bar  button's tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_sGroupBarDropDownToolTip">
            <summary>
            GroupBarDropDownTooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_sNavigationPaneTooltip">
            <summary>
            Navigation pane's tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_itemPopup">
            <summary>
            <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>'s popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bAllowItemPopup">
            <summary>
            Indicates whether item popup is allowed to be opened.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_ilNavMenu">
            <summary>
            Image list for navigation menu in collapsed mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_ilAddRemove">
            <summary>
            Image list for navigation menu for add/remove sub menu.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_popupClientSize">
            <summary>
            Size of the popup for GroupBarItem client.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_htPopupSize">
            <summary>
            <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> item to its popup size mapping.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bShowPopupGripper">
            <summary>
            Indicates whether to show <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> popup's gripper.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_popupResizeMode">
            <summary>
            Popup's resize mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bPopupLocationFlippedX">
            <summary>
            Indicates whether popup is shown to the left of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bPopupLocationFlippedY">
            <summary>
            Indicates whether popup is shown to the top of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.m_bPopupAutoClose">
            <summary>
            Indicates whether popup is closed after clicking on item.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_sfCollapsedText">
            <summary>
            <see cref="T:System.Drawing.StringFormat"/> for drawing <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapsedText"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_defaultCollapseImage">
            <summary>
            Default collapse button's image in expanded state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_defaultExpandImage">
            <summary>
            Default collapse button's image in collapsed state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_sExpandButtonToolTip">
            <summary>
            Group Bar  button's tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_sMinimizeButtonToolTip">
            <summary>
            Collapse button's tooltip, when <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> is expanded.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_sNavigationPaneTooltip">
            <summary>
            Collapsed client area's tooltip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.s_sAddRemoveButton">
            <summary>
            Caption for add/remove parent menu item in navgation menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetCollapsedText">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapsedText"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetApplyDefaultVisualStyleColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ApplyDefaultVisualStyleColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeCollapsedText">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapsedText"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShoulSerailizeApplyDefaultVisualStyleColor">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ApplyDefaultVisualStyleColor"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetCollapseImage">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapseImage"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeCollapseImage">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapseImage"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetExpandImage">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapseImage"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeExpandImage">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapseImage"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetMinimizeButtonToolTip">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.MinimizeButtonToolTip"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeMinimizeButtonToolTip">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.MinimizeButtonToolTip"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeExpandButtonToolTip">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ExpandButtonToolTip"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetExpandButtonToolTip">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ExpandButtonToolTip"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetGroupBarDropDownToolTip">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarDropDownToolTip"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeGroupBarDropDownToolTip">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarDropDownToolTip"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ResetNavigationPaneTooltip">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneTooltip"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShouldSerializeNavigationPaneTooltip">
            <summary>
            Indicates whether <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.MinimizeButtonToolTip"/> property should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.ShowItemPopup(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Shows the item popup when the Group bar is Collapsed
            </summary>
            <param name="barItem">
            GroupBar Item for which Popup to be shown
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.HidePopup">
            <summary>
            Hides the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>'s popup.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelected">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control 
            is selected.
            </summary>
            <remarks>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.SelectedItem"/> property to get the index of the newly 
            selected item.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemSelectionChanging">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control is being selected.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRenamed">
            <summary>
            Occurs after a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> has been renamed by an in-place edit operation. 
            </summary>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventHandler"/>.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupBar.InplaceRenameItem(System.Int32)"/>.
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemAdded">
            <summary>
            Occurs after a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> has been added to the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> collection. 
            </summary>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventHandler"/>.
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRemoved">
            <summary>
            Occurs after a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> has been removed from the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> collection. 
            </summary>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItemEventHandler"/>.
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.ShowContextMenu">
            <summary>
            Occurs when the right mouse button is clicked over the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ContextMenuItem"/> property will provide the index 
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> over which the mouse was clicked.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.ProvideGroupBarItemBrush">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is about to be drawn. 
            </summary>
            <remarks>
            Handle this event to provide a custom brush for painting the GroupBarItem background.
            </remarks>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideGroupBarItemBrushEventHandler"/>.	
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneDropDownClick">
            <summary>
            Occurs when the user clicks on the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control's navigation pane drop-down button. 
            </summary>
            <remarks>
            This GroupBar control displays the navigation pane only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.NavigationPaneDropDownClickEventHandler"/>.
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.IconRenderingMode">
            <summary>        
            Specifies the type of rendering done to icons
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItems">
            <summary>
            Returns the collection of visible group bar items.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems">
            <summary>
            Returns the collection of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>s in the control.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection"/> type.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.TextAlign">
            <summary>
            Gets / sets the alignment of the text displayed on the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.TextAlignment"/> value. The default value is TextAlignment.Center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ApplyDefaultVisualStyleColor">
            <summary>
            Indicates whether applying the default forecolor for GroupBar as per the visual style
            </summary>
            <value>True if highlighting is enabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BarHighlight">
            <summary>
            Indicates whether moving the mouse cursor over a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> will highlight it.
            </summary>
            <value>True if highlighting is enabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.AnimatedSelection">
            <summary>
            Indicates whether switching between different <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>s is animated.
            </summary>
            <value>True if animated selection is enabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.SelectedItem">
            <summary>
            Gets / sets an integer that represents the index of the current selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>.
            </summary>
            <value>An integer value that specifies the zero-based index of the GroupBarItem.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HighlightItem">
            <summary>
            Returns the index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> that is currently under the mouse cursor.
            </summary>
            <value>An integer value that specifies the zero-based index of the GroupBarItem.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ContextMenuItem">
            <summary>
            Returns the index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> that triggered the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.ShowContextMenu"/> event.
            </summary>
            <value>The zero-based index of the item.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemHeight">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> height. 
            </summary>
            <value>An integer value that specifies the item height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.IntegratedScrolling">
            <summary>
            Indicates whether integrated scroll buttons are to be used.
            </summary>
            <remarks>This option is primarily intended for use with the Syncfusion <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control. 
            When this flag is set, the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> provides the scroll buttons for the current 
            selected GroupView control and interacts with it to achieve seamless scrolling behavior.
            </remarks>
            <value>True to enable integrated scrolling. The default is False.</value>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupView.IntegratedScrolling"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BorderStyle">
            <summary>
            Gets / sets the border style of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.BorderStyle"/> value. The default is BorderStyle.Fixed3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ThemesEnabled">
            <summary>
            Indicates whether XP Themes (visual styles) should be used for drawing the control.
            </summary>
            <value>True to turn on themes; the default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.FlatLook">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control is displayed with a flat look.
            </summary>		
            <value>True to display in flat mode. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.VisualStyle">
            <summary>
            Indicates the style to be used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>		
            <value>A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value; the default is VisualStyle.OfficeXP.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.Office2007Theme">
            <summary>
            Indicates the Office2007 theme used for drawing the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.Office2010Theme">
            <summary>
            Indicates the Office2010 theme used for drawing the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.Cursor">
            <summary>
            Gets / sets the cursor that is displayed when the mouse pointer is over the control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> object.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCursor">
            <summary>
            Gets / sets the cursor that is displayed when the mouse pointer is over the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>s.
            </summary>		
            <value>A <see cref="T:System.Windows.Forms.Cursor"/> object.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>s are displayed in a stack.
            </summary>
            <remarks>
            <p>When the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set, the GroupBarItems are stacked at 
            the bottom of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control on top of a navigation pane. The stack size can be increased 
            or decreased by moving items to and from the navigation pane.</p>
            NOTE: The StackedMode interface is similar to the Navigation Pane in Microsoft Outlook 2003.
            </remarks>		
            <value>True to set the stacked mode. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderHeight">
            <summary>
            Gets / sets the height of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> header. 
            </summary>
            <remarks>
            The GroupBar header is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>An integer value that specifies the header height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderFont">
            <summary>
            Gets / sets the font of the text displayed in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> header. 
            </summary>
            <remarks>
            The GroupBar header is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>A <see cref="T:System.Drawing.Font"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderForeColor">
            <summary>
            Gets / sets the forecolor for the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> header. 
            </summary>
            <remarks>
            The GroupBar header is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderBackColor">
            <summary>
            Gets / sets the backcolor for the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> header. 
            </summary>
            <remarks>
            The GroupBar header is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneHeight">
            <summary>
            Gets / sets the height of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> navigation pane. 
            </summary>
            <remarks>
            The navigation pane is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>An integer value that specifies the height.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneButtonWidth">
            <summary>
            Gets / sets the width of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>s shown in the navigation pane. 
            </summary>
            <remarks>
            The navigation pane is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
            <value>An integer value that specifies the GroupBarItem width.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.DrawClientBorder">
            <summary>
            Indicates whether a border is drawn around the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>'s client window. 
            </summary>
            <remarks>
            The border colors for each <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> can be individually specified using the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBarItem.ClientBorderColors"/> property.
            </remarks>
            <value>A boolean value; the default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ContextMenuProvider">
            <summary>
            Gets / sets the menu provider object that will implement the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>'s contextmenu. 
            </summary>
            <remarks>
            The GroupBar control automatically initializes this property depending on the presence of the Syncfusion Essential Tools library.
            If Essential Tools is available, then the menu provider object will be an instance of the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.ContextMenuProvider"/> 
            type. If not, the <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/> class is used for implementing the standard .NET context menu.
            <p>The GroupBar's automatic initialization should suffice for most applications and you should explicitly set this property 
            only when you want to override the default menu provider assignment.</p>
            </remarks>
            <value>A <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> implementation; the default is <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ShowChevron">
            <summary>
            Indicates whether the Chevron button on the  
            Navigation Panel is shown in the Stacked GroupBar.
            </summary>
            <remarks>
            The navigation pane is shown only when the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.StackedMode"/> property is set.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ShowItemImageInHeader">
            <summary>
            Indicates whether the selected item's image is shown in header in the Stacked GroupBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BorderColor">
            <summary>
            Indicates the color of the 2D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.EnableTouchMode">
             <summary>
            Gets or Sets the touchmode
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.TextStringFormat">
            <summary>
            Returns the String format for text drawing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.HeaderStringFormat">
            <summary>
            Returns the string format object for header drawing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.IsClientSetting">
            <summary>
            Indicates, if process of setting client for <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.IndexOnVisibleItems">
            <summary>
            Gets or Sets a value indicating whether selection logic includes visible items alone for SelectedItem calculation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.IsInitializing">
            <summary>
            Get is control initializing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.Collapsed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> is collapsed.
            </summary>
            <remarks>
            Works only <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> is in stacked mode.
            </remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.AllowCollapse"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.AllowCollapse">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> can be collapsed.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.Collapsed"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapsedWidth">
            <summary>
            Gets or sets the width of the collapsed <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapsedText">
            <summary>
            Gets or sets the text shown in collapsed client area of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.CollapseImage">
            <summary>
            Gets or sets the image of the collapse button in expanded state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ExpandImage">
            <summary>
            Gets or sets the image of the collapse button in collapsed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.PopupClientSize">
            <summary>
            Gets or sets the initial size of the popup for <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> client.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ShowPopupGripper">
            <summary>
            Gets or sets a value indicating whether to show <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> popup's gripper.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.PopupResizeMode">
            <summary>
            Gets or sets the popup's resize mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.MinimizeButtonToolTip">
            <summary>
            Gets or sets the tooltip for collapse button, when control is expanded.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.ExpandButtonToolTip">
            <summary>
            Gets or sets the tooltip for collapse button, when control is collapsed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarDropDownToolTip">
            <summary>
            Gets or sets the tooltip for GroupBarDropDownToolTip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.NavigationPaneTooltip">
            <summary>
            Gets or sets the navigation pane's tooltip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.PopupAutoClose">
            <summary>
            Gets or sets a value indicating whether popup is closed after clicking on item.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.StateChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.Collapsed"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.StateChanging">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.Collapsed"/> property is about to be changed.
            </summary>
            <remarks>Can cancel state changing.</remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopup">
            <summary>
            Occurs when before <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>'s popup is shown.
            </summary>
            <remarks>Can cancel popup showing.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection">
            <summary>
            The collection of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> objects in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>	
            <remarks>
            Each group in the GroupBar is an instance of the GroupBarItem type and 
            the collection of these groups is represented by an instance of the 
            GroupBarItemCollection class. GroupBarItems may be added or removed using the 
            IList and ICollection interface methods implemented by the GroupBarItemCollection. 
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/>					
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.#ctor(Syncfusion.Windows.Forms.Tools.GroupBar)">
            <summary>
            Creates an instance of the GroupBarItemCollection class.
            </summary>
            <param name="groupbar">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control that contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.Add(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Adds the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to be added.</param>
            <returns>The index of the new item within the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Inserts the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> specified by the index parameter.
            </summary>
            <param name="index">A zero-based index specifying the GroupBarItem to be removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.Remove(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Removes the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> from the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to be removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.AddRange(Syncfusion.Windows.Forms.Tools.GroupBarItem[])">
            <summary>
            Adds an array of GroupBarItems to the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control's <see cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItems"/> collection.
            </summary>
            <param name="items">An array of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> objects.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.Contains(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Indicates whether the specified <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> is present in the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to locate in the collection.</param>
            <returns>True if the item is present; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.IndexOf(Syncfusion.Windows.Forms.Tools.GroupBarItem)">
            <summary>
            Returns the zero-based index of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> in the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> to locate in the collection.</param>
            <returns>The zero-based index of the item; -1 if the item is not present.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemCollection.Item(System.Int32)">
            <summary>
            Gets / sets a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> in the collection.
            </summary>
            <param name="index">The zero-based index of the GroupBarItem to get / set.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection">
            <summary>
            Collection of visible <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.m_barItems">
            <summary>
            Visible group bar items array list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.GetEnumerator">
            <summary>
            Returns the enumerator that iterates through the item collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.VisibleGroupBarItemsCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopup"/> event.
            </summary>
            <remarks>The collapsed <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control uses the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopup"/> events to notify users,
            that <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/>'s popup is about to be shown.
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventHandler"/>	
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.m_item">
            <summary>
            Item that popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.m_popupBounds">
            <summary>
            Popup's bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.m_bFlippedX">
            <summary>
            Indicates whether popup is shown to the left of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.m_bFlippedY">
            <summary>
            Indicates whether popup is shown to the top of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.GroupBarItem,System.Drawing.Rectangle,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs"/> class.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> item.</param>
            <param name="popupBounds">The popup's bounds.</param>
            <param name="cancel"><c>true</c> to cancel the event; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.GroupBarItem,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs"/> class.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> item.</param>
            <param name="popupBounds">The popup's bounds.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.Item">
            <summary>
            The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBarItem"/> that popups.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.PopupBounds">
            <summary>
            Gets or sets the popup's bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.FlippedX">
            <summary>
            Indicates whether popup is shown to the left of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs.FlippedY">
            <summary>
            Indicates whether popup is shown to the top of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopup"/> event in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs"/> that contains the event data.</param>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupBarControlAccessibleObject">
            <summary>
            ControlAccessibleObject derived class that implements the Accessibility object for the GroupBar control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarControlAccessibleObject.#ctor(Syncfusion.Windows.Forms.Tools.GroupBar)">
            <summary>
            Initializes a new instance of the <see cref="T:GroupBarControlAccessibleObject"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemAccessibleObjectsIndexer.#ctor(Syncfusion.Windows.Forms.Tools.GroupBar)">
            <summary>
            Initializes a new instance of the <see cref="T:GroupBarItemAccessibleObjectsIndexer"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs">
            <summary>
            Provides data about the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRenamed"/> and 
            <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemRenamed"/> events.
            </summary>
            <remarks>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>, <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/>, and <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventHandler"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Creates a new instance of the GroupItemRenamedEventArgs class.
            </summary>
            <param name="nindex">The zero-based index of the renamed item.</param>
            <param name="oldtext">The old item text.</param>
            <param name="newtext">The new item text.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs.Index">
            <summary>
            Returns the zero-based index of the renamed item.
            </summary>
            <value>An integer representing the item index.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs.NewLabel">
            <summary>
            Returns the new text of the item.
            </summary>
            <remarks>A String value.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs.OldLabel">
            <summary>
            Returns the old text of the item.
            </summary>
            <remarks>A String value.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventHandler">
            <summary>
            Delegate representing the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBar.GroupBarItemRenamed"/> and 
            <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemRenamed"/> events.
            </summary>
            <param name="obj"> The source of the event.</param>
            <param name="arg"> A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs"/> value that contains the event data.</param>	
        </member>
        <!-- Badly formed XML comment ignored for member "T:Syncfusion.Windows.Forms.Tools.PopupResizeMode" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupResizeMode.None">
            <summary>
            Resize is not allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupResizeMode.Horizontal">
            <summary>
            Horizontal resize is allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupResizeMode.Vertical">
            <summary>
            Vertical resize is allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PopupResizeMode.Both">
            <summary>
            Both horizontal and vertical resize are allowed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.m_owner">
            <summary>
            Owner control of the popup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.m_hook">
            <summary>
            CallWnd hook.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.m_bOpened">
            <summary>
            Popup visibility.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.m_bFlippedX">
            <summary>
            Indicates whether popup is shown to the left of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.m_bFlippedY">
            <summary>
            Indicates whether popup is shown to the top of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages.
            </summary>
            <param name="m">The Windows <see cref="T:System.Windows.Forms.Message"/> to process.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.Show(System.Boolean,Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs)">
            <summary>
            Shows the popup.
            </summary>
            <param name="bShow">if set to <c>true</c> shows the popup; hides overwise.</param>
            <param name="args">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar.BeforePopupEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.Hide">
            <summary>
            Hides the popup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.Hide(System.Drawing.Point)">
            <summary>
            Hides the popup.
            </summary>
            <param name="pt">Allows to determine whether to clsoe popup in <see cref="E:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.BeforeClose"/> event handler.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.Opened">
            <summary>
            Gets or sets a value indicating whether the popup is displayed.
            </summary>
            <returns>true if the popup is displayed; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupBarItemPopup.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
            <value></value>
            <returns>A <see cref="T:System.Windows.Forms.CreateParams"/> that contains the required creation parameters when the handle to the control is created.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ToolTipForm.m_bOnloadCalled">
            <summary>
            Specifies whether OnLoad was called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ToolTipForm.m_bVisible">
            <summary>
            Specifies whether form is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ToolTipForm.m_bInactive">
            <summary>
            Indicates whether form must be inactive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ToolTipForm.Visible">
            <summary>
            Gets or sets bool specifying whether form is visible.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ToolTipForm.ParentFormSubClass">
            <summary>
            Class for subclassing parent form and prevent it from blinking.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ToolTipForm.ParentFormSubClass.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Catches WM_NCACTIVATE message if needed.
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupViewItem">
            <summary>
            Represents an item in the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> control.
            </summary>
            <remarks>
            Each item in a GroupView control is an instance of the GroupViewItem type. The 
            collection of GroupViewItems in the control can be accessed through the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItems"/> property.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupViewItem.nItemXSpacing">
            <summary>
            Gets or Sets the value to change the Text Position of the GroupViewItem
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.ShouldSerializeItemXSpacing">
             <summary>
            Serializes the ItemXSpacing property value.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.ResetItemXSpacing">
            <summary>
            Resets the ItemXSpacing property to its default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupViewItem.nItemYSpacing">
            <summary>
            Gets / sets the height between adjacent GroupViewItems.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupViewItem.m_bVisible">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> is visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupViewItem.m_bounds">
            <summary>
            Item bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor">
            <summary>
            Overloaded. Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
            <param name="enabled">A boolean value representing the item's enabled / disabled state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
            <param name="tagObject">An Object value that contains data about the GroupViewItem.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32,System.Boolean,System.Object)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
            <param name="enabled">A boolean value representing the item's enabled / disabled state.</param>
            <param name="tagObject">An Object value that contains data about the GroupViewItem.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32,System.Boolean,System.Object,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
            <param name="enabled">A boolean value representing the item's enabled / disabled state.</param>
            <param name="tagObject">An Object value that contains data about the GroupViewItem.</param>
            <param name="tooltipText">A String value representing the GroupViewItem tooltiptext.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItem.#ctor(System.String,System.Int32,System.Boolean,System.Object,System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class with the specified attributes.
            </summary>
            <param name="name">A String value representing the GroupViewItem text.</param>
            <param name="image">An integer value representing a zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> 
            control's small and large imagelists.</param>
            <param name="tagObject">An Object value that contains data about the GroupViewItem.</param>
            <param name="bVisible">A boolean value representing the item's show/hide the GroupViewItems.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.ToolTipText">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>'s tooltiptext.
            </summary>
            <value>A string value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.ItemXSpacing">
            <summary>
            Gets or Sets the value to change the Text Position of the GroupViewItem
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.ItemYSpacing">
            <summary>
            Gets / sets the height between adjacent <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>s.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Bounds">
            <summary>
            Gets or sets item bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Visible">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> is visible.
            </summary>
            <value>False if the item is hidden. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Text">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>'s text.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.ImageIndex">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>'s image index.
            </summary>
            <value>An integer value.</value>
            <remarks> A zero-based index into the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> control's 
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.LargeImageList"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageList"/> property values.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Enabled">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> is enabled / disabled.
            </summary>
            <value>False if the item is disabled. The default is True.</value>		
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Tag">
            <summary>
            Gets / sets an object that contains data about the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>.
            </summary>
            <value>
            An <see cref="T:System.Object"/> value that contains data about the GroupViewItem. 
            The default is a NULL reference (Nothing in Visual Basic).
            </value>
            <remarks>
            Any type derived from the Object class can be assigned 
            to this property. If the Tag property is set through 
            the Windows Forms designer, only text may be assigned.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView">
            <summary>
            Returns the GroupView control that the item is assigned to.
            </summary>
            <value>
            A <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.GroupView"/> that represents the parent GroupView control that the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> is assigned to.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupView">
             <summary>
             Represents a control that can display a list of items.
             </summary>
             <remarks>
             <p>
             The GroupView control implements a list type control that can display a set of items where 
             each item is represented by an image and a descriptor. Items are implemented as 
             instances of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> class. The collection of GroupViewItems in the 
             control can be accessed through the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItems"/> property that returns
             a reference to the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection"/> object maintained
             by the control.
             </p>
             <p>
             The GroupView control is capable of displaying items with large or small icons in various
             combinable styles such as the default selectable style, button-type selection, full-item select
             and an icon-only flowview mode. All styles are available in the regular 3D or a FlatLook mode.
             The control also implements an IntegratedScrolling option that allows scrolling to 
             be delegated to its parent container.
             </p>
             <p>
             The GroupView control can be used in conjunction with the Essential Tools <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control
             to implement composite controls such as the Microsoft OutlookBar and the Visual Studio.NET toolbox window. 
             The latter scenario makes use of the IntegratedScrolling feature supported by the two controls.
             </p>
             </remarks>
             <seealso cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/>
             <example>
             The sample code shows how to create a GroupView control and initialize the Behavior and Appearance properties 
             to resemble the Visual Studio.NET toolbox window. A handler for the GroupView.GroupViewItemSelected event 
             is also shown.
             
             <coderef file="Tools\Samples\GroupBar Package\GroupViewDemo\CS\GroupViewDemoForm.cs" name="GroupView" lang="C#"><code lang="C#">
            		private void InitializeGroupView()
            		{
            			// Create the GroupView control.
            			this.gvcWinForms = new Syncfusion.Windows.Forms.Tools.GroupView();
            
            			// Set the large and small ImageLists.
            			this.gvcWinForms.LargeImageList = this.ilGroupBarLarge;
            			this.gvcWinForms.SmallImageList = this.ilGroupBarSmall;
            			
            			// Set the GroupView properties to display as a VS.NET tool box type window.
            			this.gvcWinForms.SmallImageView = true;
            			this.gvcWinForms.HighlightText = true;
            			this.gvcWinForms.ButtonView = true;
            			this.gvcWinForms.FlowView = false;
            			this.gvcWinForms.FlatLook = false;
            			this.gvcWinForms.TextWrap = false;
            
            			this.gvcWinForms.ImageSpacing = 2;
            			this.gvcWinForms.ItemXSpacing = 8;
            			this.gvcWinForms.ItemYSpacing = 1;
            
            			this.gvcWinForms.BackColor = SystemColors.Control;
            			this.gvcWinForms.ForeColor = SystemColors.ControlText;
            
            			this.gvcWinForms.HighlightItemColor = SystemColors.Control;
            			this.gvcWinForms.SelectingItemColor = ControlPaint.Light(SystemColors.ControlLight);
            			this.gvcWinForms.SelectedItemColor = ControlPaint.Light(SystemColors.ControlLight);
            			this.gvcWinForms.SelectedHighlightItemColor = SystemColors.Control;
            
            			this.gvcWinForms.SelectingTextColor = SystemColors.ControlText;
            			this.gvcWinForms.SelectedHighlightTextColor = SystemColors.ControlText;																				 
            		
            			// Create and add the GroupViewItem objects.
            			this.gvcWinForms.GroupViewItems.AddRange(
            				new Syncfusion.Windows.Forms.Tools.GroupViewItem[] {
            																	   new Syncfusion.Windows.Forms.Tools.GroupViewItem("Pointer", 11),
            																	   new Syncfusion.Windows.Forms.Tools.GroupViewItem("Label", 12),
            																	   new Syncfusion.Windows.Forms.Tools.GroupViewItem("LinkLabel", 13)});
            																	   
            			// Provide a handler for the GroupView.GroupViewItemSelected event.
            			this.gvcWinForms.GroupViewItemSelected += new System.EventHandler(this.gvcWinForms_GroupViewItemSelected);																	   
            		}
            		
            		// GroupView.GroupViewItemSelected event handler.
            		private void gvcWinForms_GroupViewItemSelected(object sender, System.EventArgs e)
            		{
            			MessageBox.Show(String.Concat("Selected Item Index = ", this.gvcWinForms.SelectedItem.ToString())); 
            		}</code></coderef>
             
             
             <coderef file="Tools\Samples\GroupBar Package\GroupViewDemo\VB\GroupViewDemoForm.vb" name="GroupView" lang="VB"><code lang="VB">
                    Private Sub InitializeGroupView()
            
            				' Create the GroupView control
            				Me.gvcWinForms = New Syncfusion.Windows.Forms.Tools.GroupView()
            
            				' Set the large and small ImageLists
            				Me.gvcWinForms.LargeImageList = Me.ilGroupBarLarge
            				Me.gvcWinForms.SmallImageList = Me.ilGroupBarSmall
            
            				' Set the GroupView properties to display as a VS.NET Toolbox type window
            				Me.gvcWinForms.SmallImageView = True
            				Me.gvcWinForms.HighlightText = True
            				Me.gvcWinForms.ButtonView = True
            				Me.gvcWinForms.FlowView = False
            				Me.gvcWinForms.FlatLook = False
            				Me.gvcWinForms.TextWrap = False
            
            				Me.gvcWinForms.ImageSpacing = 2
            				Me.gvcWinForms.ItemXSpacing = 8
            				Me.gvcWinForms.ItemYSpacing = 1
            
            				Me.gvcWinForms.BackColor = SystemColors.Control
            				Me.gvcWinForms.ForeColor = SystemColors.ControlText
            
            				Me.gvcWinForms.HighlightItemColor = SystemColors.Control
            				Me.gvcWinForms.SelectingItemColor = ControlPaint.Light(SystemColors.ControlLight)
            				Me.gvcWinForms.SelectedItemColor = ControlPaint.Light(SystemColors.ControlLight)
            				Me.gvcWinForms.SelectedHighlightItemColor = SystemColors.Control
            
            				Me.gvcWinForms.SelectingTextColor = SystemColors.ControlText
            				Me.gvcWinForms.SelectedHighlightTextColor = SystemColors.ControlText																				 
            
                         ' Create and add the GroupViewItem objects.
                         Me.gvcWinForms.GroupViewItems.AddRange(New Syncfusion.Windows.Forms.Tools.GroupViewItem() {New Syncfusion.Windows.Forms.Tools.GroupViewItem("Pointer", 11), New Syncfusion.Windows.Forms.Tools.GroupViewItem("Label", 12), New Syncfusion.Windows.Forms.Tools.GroupViewItem("LinkLabel", 13)})
            
                         ' Handle the GroupView.GroupViewItemSelected event.
                         AddHandler Me.gvcWinForms.GroupViewItemSelected, New System.EventHandler(AddressOf gvcWinForms_GroupViewItemSelected)
            
                    End Sub
            
                    ' GroupView.GroupViewItemSelected event handler.
                    Private Sub gvcWinForms_GroupViewItemSelected(ByVal sender As Object, ByVal e As System.EventArgs)
            
                         MessageBox.Show([String].Concat("Selected Item Index = ", Me.gvcWinForms.SelectedItem.ToString()))
            
                    End Sub 'gvcWinForms_GroupViewItemSelected</code></coderef>
            
             </example>	
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewFormatName">
            <summary>
            Specifies the name of the custom <see cref="T:System.Windows.Forms.DataFormats.Format"/> type used for <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> drag-and-drop.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bShowTooltips">
            <summary>
            Indicates whether the <see cref="!:Syncfusion.Windows.Forms.Tools.GroupViewItem.ToolTip"/> is enabled / disabled.
            </summary>
            <value>True if the ToolTip is enabled. The default is False.</value>	
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bSelecting">
            <summary>
            Indicates whether the items being selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bFlowViewChanged">
            <summary>
            Indicates whether FlowView value was changed during renaming.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_prevHitItemIndex">
            <summary>
            Store index of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> which was hitted before current
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bIsGroupViewItemSelecting">
            <summary>
            Indicate whether <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> is under mouse pointer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bShouldShowToolTipFirstTime">
            <summary>
            Indicate  whether <see cref="!:Syncfusion.Windows.Forms.Tools.GroupViewItem.ToolTip"/> is showing for the first time
            </summary>
            <value>False if the ToolTip isn't showing. The default is True.</value>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.InitTimer">
            <summary>
            Initialize Timer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.InitToolTip">
            <summary>
            Initialize ToolTip
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ShowToolTip(System.String)">
            <summary>
            Shows ToolTip
            </summary>
            <param name="text">A string value representing ToolTip's text</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GetItemAt(System.Drawing.Point)">
            <summary>
            Get <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> which is under mouse pointer
            </summary>
            <param name="pt">Represent mouse pointer </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.StartShowingToolTip(System.Int32)">
            <summary>
            Start showing tooltips
            </summary>
            <param name="interval">Representint interval before showing ToolTip</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.StopShowingToolTip">
            <summary>
            Stops showing tooltips
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ApplyScaleToControl(System.Single)">
             <summary>
            Applies the scaling
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_mbToolTipMouseButtonsDowned">
            <summary>
            ToolTip last mouse buttons downed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_dtToolTipLastMouseDownedTime">
            <summary>
            ToolTip last mouse downed time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_dtToolTipLastMouseDownedPoint">
            <summary>
            ToolTip last mouse downed point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bShowFlowViewText">
            <summary>
            Indicates whether control should show GroupViewItem text in FlowView mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_flowViewTextLength">
            <summary>
            Stores <see cref="P:Syncfusion.Windows.Forms.Tools.GroupViewItem.Text"/> length in FlowView mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_orientation">
            <summary>
            GroupViev orientation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.SetFlowItemBounds(System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
            Gets the GroupViewItem Bounds.
            </summary>
            <param name="nindex">GroupViewItem index</param>
            <param name="ItemYSpacing">Padding between the GroupViewItem</param>
            <param name="rchighlight">Bounds</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.SetNonFlowItemBounds(System.Int32,System.Int32,System.Drawing.Rectangle@)">
            <summary>
            Gets the GroupViewItem Bounds.
            </summary>
            <param name="nindex">GroupViewItem index</param>
            <param name="ItemYSpacing">Padding between the GroupViewItem</param>
            <param name="rchighlight">Bounds</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.DEF_PROPERTY_NAME_VISIBLE">
            <summary>
            Name visible property for PropertyChangedEventArgs
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_arrVisibleItems">
            <summary>
            ArrayList visible items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetHighlightImageOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightImageOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetHighlightTextOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightTextOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetStyle">
            <summary>
            Reset the Style
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ShouldSerializeStyle">
            <summary>
            Serializes the Style
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnStyleChanged">
            <summary>
            Occurs when the style changes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedImageOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedImageOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedTextOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedTextOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedHighlightImageOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightImageOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedHighlightTextOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightTextOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectingImageOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingImageOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectingTextOffset">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingTextOffset"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetHighlightItemColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightItemColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedItemColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItemColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedHighlightItemColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightItemColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectingItemColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingItemColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetHighlightTextColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightTextColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedTextColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedTextColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectedHighlightTextColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightTextColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetSelectingTextColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingTextColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.ResetMetroBorderColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.MetroBorderColor"/> property to its default value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupView.m_bAllowDragAnyObject">
            <summary>
            Allow drag any object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.InplaceRenameItem(System.Int32)">
            <summary>
            Starts an in-place edit of the specified <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text. 
            </summary>
            <remarks>
            Invoking this method will create an editable text box and and populate it with 
            the item text. Editing the textbox contents and selecting ENTER will update the item text. 
            Selecting ESC will cancel the edit.
            </remarks>
            <param name="nindex">The zero-based index of the item to be renamed.</param>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupView.CancelInplaceRenameItem"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.CancelInplaceRenameItem">
            <summary>
            Cancels an inplace renaming that is in progress.
            </summary>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupView.InplaceRenameItem(System.Int32)"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.BringItemIntoView(System.Int32)">
            <summary>
            Brings the specified <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> into the visible area of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control.
            </summary>
            <param name="nindex">The zero-based index of the item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnGroupViewItemSelected(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemSelected"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnGroupViewItemDoubleClick(Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventArgs)">
            <summary>
            Raises the GroupView Item double click event.
            </summary>
            <param name="arg">GroupViewItemDoubleClickEventArgs</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnGroupViewItemHighlighted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemHighlighted"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnGroupViewItemRenamed(Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemRenamed"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnGroupViewItemsReordered(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemsReordered"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnShowContextMenu(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.ShowContextMenu"/> event.
            </summary>
            <param name="arg">A <see cref="T:System.EventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnBackColorChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnForeColorChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnSizeChanged(System.EventArgs)">
             <summary>
            Size changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnVisibleChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnDragLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnMouseHover(System.EventArgs)">
            <summary>
            Called by the tab control when mouse hovers on the control.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.PointToItem(System.Int32,System.Int32)">
            <summary>
            Overloaded. Returns the GroupViewItem at the specified point in client coordinates.
            </summary>
            <param name="x">X - coordinate of the item.</param>
            <param name="y">Y- coordinate of the item.</param>
            <returns>GroupViewItem, whose area contains specified point; null, if nothing is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.PointToItem(System.Drawing.Point)">
            <summary>
            Returns GroupViewItem at the specified point in client coordinates.
            </summary>
            <param name="pt">Point where the GroupViewItem is located.</param>
            <returns>GroupViewItem, whose area contains specified point; Null, if nothing is found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.DrawItemHighlight(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,Syncfusion.Windows.Forms.Tools.GroupView.ItemState)">
            <summary>
            Draws the highlighting of GroupViewitem.
            </summary>
            <param name="gph">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="nindex">The index of the groupViewItem.</param>
            <param name="rcitem">A <see cref="T:System.Drawing.Rectangle"/> value specifying the GroupViewItem bounds.</param>
            <param name="state">The state of the item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ShowToolTips">
            <summary>
            Gets or sets whether tooltips for GroupViewItems should be shown or not.
            Use <see cref="!:Syncfusion.Windows.Forms.Tools.GroupViewItem.ToolTip"/> property to get\set ToolTip text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.EnableTouchMode">
             <summary>
            Gets or Sets the touchmode
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.Orientation">
            <summary>
            Gets or sets GroupViev orientation.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ToolTipMouseButtonsDowned">
            <summary>
            Gets or sets ToolTip last mouse buttons downed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ToolTipLastMouseDownedTime">
            <summary>
            Gets or sets ToolTip last mouse downed time.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ToolTipLastMouseDownedPoint">
            <summary>
            Gets or sets ToolTip last mouse downed point.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.VisibleItems">
            <summary>
            Gets ArrayList visible items.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemSelected">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> 
            control is selected.
            </summary>
            <remarks>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItem"/> property to get the index of the newly 
            selected item.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemDoubleClick">
            <summary>
            Occurs when a GroupViewItem is double clicked.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemHighlighted">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> in the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control is highlighted.
            </summary>
            <remarks>
            Use the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightedItem"/> property to get the index of the newly 
            selected item.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemsReordered">
            <summary>
            Occurs after the items in a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control have been reordered by a 
            drag-and-drop operation.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemRenamed">
            <summary>
            Occurs after a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> has been renamed by an in-place edit operation. 
            </summary>
            <remarks>
            See <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventArgs"/> and <see cref="T:Syncfusion.Windows.Forms.Tools.GroupItemRenamedEventHandler"/>.
            </remarks>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.GroupView.InplaceRenameItem(System.Int32)"/>.
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.ShowContextMenu">
            <summary>
            Occurs when the right mouse button is clicked over the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control.
            </summary>
            <remarks>The <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.ContextMenuItem"/> property will provide the index 
            of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> over which the mouse was clicked.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItems">
            <summary>
            Gets / sets the collection of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> objects in the control.
            </summary>
            <value>An instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection"/> type.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ImageSpacing">
            <summary>
            Gets or sets the height between the highlighted edge of a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> and the image.
            </summary>
            <remarks>
            In <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.FlowView"/> mode, the ImageSpacing value also 
            dictates the horizontal distance between the highlighted edge and the image.
            </remarks>		
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.TextSpacing">
            <summary>
            Gets / sets the distance between the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image and the text.
            </summary>
            <remarks>
            In large icon mode, this attribute represents the vertical distance between the GroupViewItem image and the text, 
            while in small icon mode, it represents the horizontal distance between the two.
            </remarks>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ItemXSpacing">
            <summary>
            Gets / sets the horizontal distance between a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> and the control's left border.
            </summary>
            <value>An integer value.</value>
            <remarks>
            This attribute is valid only when <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageView"/> is True. In large image view, the items are drawn centered. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ItemYSpacing">
            <summary>
            Gets / sets the height between adjacent <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>s.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.FlowViewItemTextLength">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>'s text length in FlowView mode.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightImageOffset">
            <summary>
            Gets or sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image is offset when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightTextOffset">
            <summary>
            Gets or sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is offset when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.Style">
            <summary>
            Indicates the current style of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedImageOffset">
            <summary>
            Gets / sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image is offset when it is selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedTextOffset">
            <summary>
            Gets / sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is offset when it is selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightImageOffset">
            <summary>
            Gets / sets the distance by which the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image is offset when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightTextOffset">
            <summary>
            Gets / sets the distance by which the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is offset when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingImageOffset">
            <summary>
            Gets / sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image is offset when it is being selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingTextOffset">
            <summary>
            Gets / sets the distance by which the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is offset when it is being selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Point"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.LargeImageList">
            <summary>
            Gets / sets the image list containing the large (32x32) images.
            </summary>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageList"/>
            </remarks>
            <value>An ImageList type.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageList">
            <summary>
            Gets / sets the image list containing the small (16x16) images.
            </summary>
            <value>An ImageList type.</value>
            <remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupView.LargeImageList"/>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageView">
            <summary>
            Indicates whether the control displays items using the images in the <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.SmallImageList"/>.
            </summary>
            <value>True if the small image mode is set. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ButtonView">
            <summary>
            Indicates whether items are drawn with a button-type flat look upon selection.
            </summary>
            <value>True if the button-type selection is set. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.FlowView">
            <summary>
            Indicates whether the flow view display mode is set.
            </summary>
            <remarks>
            In the default display mode, the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control items are arranged top-down in list form. 
            In the flow mode, however, item images are arranged side by side for the full width of the control. 
            Resizing the control will wrap the images. Text will not be displayed in this mode, 
            unless the ShowFlowViewItemText property set to True.
            </remarks>
            <value>True if flow view is set. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ShowFlowViewItemText">
            <summary>
            Indicates whether control should show GroupViewItem text in FlowView mode.
            </summary>
            <remarks>
            <value>True if should show text. The default is False.</value>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.IntegratedScrolling">
            <summary>
            Indicates whether scrolling should be delegated to the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control's parent.
            </summary>
            <remarks>
            This option is primarily intended for use with the Syncfusion <see cref="T:Syncfusion.Windows.Forms.Tools.GroupBar"/> control. 
            When this option is set, the GroupView control delegates scrolling behavior to the 
            parent GroupBar control. When IntegratedScrolling is set to False, the control provides its own scroll buttons.
            </remarks>
            <value>True to enable integrated scrolling. The default is False.</value>
            <seealso cref="P:Syncfusion.Windows.Forms.Tools.GroupBar.IntegratedScrolling"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItem">
            <summary>
            Gets / sets the index of the currently selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>.
            </summary>
            <value>The zero-based index of the selected item. -1 if a selected item is not available.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightedItem">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> over which the mouse cursor is hovering.
            </summary>
            <value>The zero-based index of the item under the cursor. -1 if no item is being highlighted.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ContextMenuItem">
            <summary>
            Returns the index of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> that triggered the <see cref="E:Syncfusion.Windows.Forms.Tools.GroupView.ShowContextMenu"/> event.
            </summary>
            <value>The zero-based index of the item.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightImage">
            <summary>
            Gets / sets a value indicating whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> image is highlighted when the mouse is moved over it.
            </summary>
            <value>False if image highlighting is disabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightText">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is highlighted when the mouse is moved over it.
            </summary>
            <value>False if text highlighting is disabled. The default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.TextUnderline">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text is underlined when the mouse is moved over it.
            </summary>
            <value>True if text underlining is enabled. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightItemColor">
            <summary>
            Gets or sets the color used for drawing the background of a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItemColor">
            <summary>
            Gets / sets the color used for drawing the background of the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightItemColor">
            <summary>
            Gets / sets the color used for drawing the background of the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingItemColor">
            <summary>
            Gets / sets the color used for drawing the background of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> being selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightTextColor">
            <summary>
            Gets or sets the color used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedTextColor">
            <summary>
            Gets / sets the color used for drawing the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedHighlightTextColor">
            <summary>
            Gets / sets the color used for drawing the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text when the mouse is moved over it.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingTextColor">
            <summary>
            Gets / sets the color used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text while it is being selected.
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.BackGroundBrush">
            <summary>
            Gets or sets the brush used for drawing the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control background. 
            </summary>
            <value> A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.MetroBorderColor">
            <summary>
            Gets / sets the color used for drawing the Metro style border <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> 
            </summary>
            <value>A <see cref="T:System.Drawing.Color"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItemBrush">
            <summary>
            Gets or sets the brush used for drawing the background of the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>. 
            </summary>
            <value> A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectedItemHighlightBrush">
            <summary>
            Gets or sets the brush used for drawing the background of the selected <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> 
            when the mouse is moved over it. 
            </summary>
            <value> A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.HighlightItemBrush">
            <summary>
            Gets or sets the brush used for drawing the background of the highlighted <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/>. 
            </summary>
            <value> A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.SelectingItemBrush">
            <summary>
            Gets or sets the brush used for drawing the background of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> being selected. 
            </summary>
            <value> A <see cref="T:System.Drawing.Brush"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.BorderStyle">
            <summary>
            Gets or sets the border style of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.BorderStyle"/> value. The default is BorderStyle.Fixed3D.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.TextWrap">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> text should be wrapped.
            </summary>
            <remarks>
            Text wrapping is available only with the large icon display mode.
            </remarks>
            <value>True to turn on wrapping. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.FlatLook">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control is displayed with a flat look.
            </summary>		
            <value>True to display in flat mode. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ThemesEnabled">
            <summary>
            Indicates whether XP Themes (visual styles) should be used for drawing the control.
            </summary>
            <value>True to turn on themes; the default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.AllowDrop">
            <summary>
            Gets a value indicating whether the control supports drop.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.AllowDragDrop">
            <summary>
            Indicates whether the control supports drag-and-drop of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.AllowDragAnyObject">
            <summary>
            Gets or sets allow drag any object. For use this property AllowDragDrop must be true.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ClipSelectionBounds">
            <summary>
            Indicates whether the selection bounds of a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> are clipped around its image and text.
            </summary>
            <value>A Boolean value. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.ItemTextHeight">
            <summary>
            Gets the Height of the Item's Text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection">
            <summary>
            The collection of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> objects present in the GroupView control.
            </summary>	
            <remarks>
            Each item in a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control is an instance of a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> 
            type and the collection is represented by the GroupViewItemCollection class. 
            The GroupViewItemCollection class implements the IList and ICollection interfaces.
            <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItems"/>
            </remarks>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.OnCollectioChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the collection changed event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.#ctor(Syncfusion.Windows.Forms.Tools.GroupView)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection"/> class.
            </summary>
            <param name="ctrl">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control that contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.Add(Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Adds the GroupViewItem to the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> to be added.</param>
            <returns>The zero-based index of the new item within the collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Inserts the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.Remove(Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Removes the GroupViewItem from the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> to be removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.AddRange(Syncfusion.Windows.Forms.Tools.GroupViewItem[])">
            <summary>
            Adds an array of GroupViewItems to the <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView"/> control's <see cref="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItems"/> collection.
            </summary>
            <param name="items">An array of <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> objects.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.Contains(Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Indicates whether the specified GroupViewItem is present in the collection.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> to locate in the collection.</param>
            <returns>True if the item is present; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.IndexOf(Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Returns the zero-based index of the GroupViewItem.
            </summary>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> to locate in the collection.</param>
            <returns>The zero-based index of the item; -1 if the item cannot be found.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.CollectionChanged">
            <summary>
            Occurs when a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection"/> is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupView.GroupViewItemCollection.Item(System.Int32)">
            <summary>
            Gets / sets a <see cref="T:Syncfusion.Windows.Forms.Tools.GroupViewItem"/> in the collection.
            </summary>
            <param name="index">The zero-based index of the GroupViewItem to get or set.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventHandler">
            <summary>
            Event handler for Double click event for GroupViewItem.
            </summary>
            <param name="sender">Sender as GroupView</param>
            <param name="e">GroupViewItemDoubleClickEventArgs</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventArgs">
            <summary>
            Event args for Double click in GroupViewItem.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventArgs.m_value">
            <summary>
            GroupView Item
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventArgs.#ctor(Syncfusion.Windows.Forms.Tools.GroupViewItem)">
            <summary>
            Constructor
            </summary>
            <param name="item">GroupView Item</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GroupViewItemDoubleClickEventArgs.SelectedItem">
            <summary>
            Gets/ Sets the currently selected item.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GroupViewControlAccessibleObject">
            <summary>
            ControlAccessibleObject derived class that implements the Accessibility object for the GroupView control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection">
            <summary>
            Collection of images for ImageListAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Add(System.Drawing.Icon)">
            <summary>
            Adds icon to the collection.
            </summary>
            <param name="value">Icon to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Add(System.Drawing.Image)">
            <summary>
            Adds image to the collection.
            </summary>
            <param name="value">Image to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Contains(System.Drawing.Image)">
            <summary>
            Checks whether collection contains given image.
            </summary>
            <param name="image">Image to be checked.</param>
            <returns>True if collection contains given image; otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.IndexOf(System.Drawing.Image)">
            <summary>
            Gets index of given image.
            </summary>
            <param name="image">Image to get index of.</param>
            <returns>Index of given image or -1 if image doesn't exist in collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Remove(System.Drawing.Image)">
            <summary>
            Removes given image from collection.
            </summary>
            <param name="image">Image to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Add(System.String,System.Drawing.Icon)">
            <summary>
            Adds icon with specified key to collection.
            </summary>
            <param name="key">Key of the icon.</param>
            <param name="icon">Icon to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.Add(System.String,System.Drawing.Image)">
            <summary>
            Adds image with specified key to collection.
            </summary>
            <param name="key">Key of the image.</param>
            <param name="image">Image to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.AddRange(System.Drawing.Image[])">
            <summary>
            Adds array of images to collection.
            </summary>
            <param name="images">Array of images to add.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ContainsKey(System.String)">
            <summary>
            Checks whether given key exists in collection.
            </summary>
            <param name="key">Key to be checked.</param>
            <returns>True if given key exists in collection; otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.GetEnumerator">
            <summary>
            Gets enumerator for collection.
            </summary>
            <returns>Enumerator for collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.IndexOfKey(System.String)">
            <summary>
            Gets index of given key.
            </summary>
            <param name="key">Key to get index of.</param>
            <returns>Index if given key or -1 if key doesn't exist in collection.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.RemoveByKey(System.String)">
            <summary>
            Removes image with specified key.
            </summary>
            <param name="key">Key of image to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.SetKeyName(System.Int32,System.String)">
            <summary>
            Sets new name to specified key.
            </summary>
            <param name="index">Index of key to set new name to.</param>
            <param name="name">New name of specified key.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="dest">The one-dimensional Array that is the destination of the elements copied from ICollection.
            The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="value">The Object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the IList contains a specific value.
            </summary>
            <param name="image">The Object to locate in the IList.</param>
            <returns>True if the Object is found in the IList; otherwise, false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the IList.
            </summary>
            <param name="image">The Object to locate in the IList.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the IList at the specified position.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The Object to insert into the IList.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the IList.
            </summary>
            <param name="image">The Object to remove from the IList.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.Empty">
            <summary>
            Gets value indicating whether collection is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.IsReadOnly">
            <summary>
            Added for compatibility reasons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.Item(System.Int32)">
            <summary>
            Gets or sets image at specified index.
            </summary>
            <param name="index">Index of image.</param>
            <returns>Image at specified index</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.Item(System.String)">
            <summary>
            Gets or sets image with specified key.
            </summary>
            <param name="key">Key of image.</param>
            <returns>Image with specified key.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.Keys">
            <summary>
            Gets collection of keys.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor">
            <summary>
            Custom type descriptor for <see cref="T:System.Drawing.Image"/> class.
            <remarks>Filters our <see cref="P:System.Drawing.Image.Tag"/> property</remarks>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor"/> class.
            </summary>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor.GetProperties">
            <summary>
            Returns a collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Returns a filtered collection of property descriptors for the object represented by this type descriptor.
            </summary>
            <param name="attributes">An array of attributes to use as a filter. This can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> containing the property descriptions for the object represented by this type descriptor. The default is <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.CustomImageTypeDescriptor.FilterProperties(System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            Filters the properties.
            </summary>
            <param name="props">The initial collection of property descriptors.</param>
            <returns>The filtered collection of property descriptors.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageTypeDescriptionProvider">
            <summary>
            Custom rpovider of custom type descriptor for <see cref="T:System.Drawing.Image"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageTypeDescriptionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageTypeDescriptionProvider"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"/>.</param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor">
            <summary>
            Editor for ImageCollection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.s_editor">
            <summary>
            Static instance of <see cref="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.s_imageTypeDescProvider">
            <summary>
            Static instance of custom <see cref="T:System.ComponentModel.TypeDescriptionProvider"/> for <see cref="T:System.Drawing.Image"/>s.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.#cctor">
            <summary>
            Initializes the <see cref="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor"/> class.
            </summary>
            <param name="type">The type of the collection for this editor to edit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Creates the instance.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.GetObjectsFromInstance(System.Object)">
            <summary>
            Returns a list containing the given object
            </summary>
            <param name="instance">An <see cref="T:System.Collections.ArrayList"/> returned as an object.</param>
            <returns>
            An <see cref="T:System.Collections.ArrayList"/> which contains the individual objects to be created.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.DestroyInstance(System.Object)">
            <summary>
            Destroys the specified instance of the object.
            </summary>
            <param name="instance">The object to destroy.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the specified service provider and context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that can be used to gain additional context information.</param>
            <param name="provider">A service provider object through which editing services can be obtained.</param>
            <param name="value">The object to edit the value of.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
            <exception cref="T:System.ComponentModel.Design.CheckoutException">
            An attempt to check out a file that is checked into a source code management program did not succeed.
            </exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv">
            <summary>
            Editor for images in ImageListAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv.m_fileDialog">
            <summary>
            FileDialog for selecting images.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv.m_imageExtenders">
            <summary>
            Array of image editors of different types. Used in building string of file extensions.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv.#cctor">
            <summary>
            Initializes static members.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageEditorAdv.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object value using the edit style provided by GetEditStyle.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information.</param>
            <param name="provider">A service provider object through which editing services can be obtained.</param>
            <param name="value">An instance of the value being edited.</param>
            <returns>The new value of the object. If the value of the object has not changed,
            this method should return the same object passed to it.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo">
            <summary>
            Class containing info about image: the image itself and string key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo.m_image">
            <summary>
            Image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo.m_key">
            <summary>
            Key.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo.#ctor(System.Drawing.Image,System.String)">
            <summary>
            Creates new ImageInfo.
            </summary>
            <param name="image">Image.</param>
            <param name="key">Key.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo.Image">
            <summary>
            Gets or sets image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageCollection.ImageInfo.Key">
            <summary>
            Gets or sets key.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageListAdv">
            <summary>
            ImageList with support for images of different sizes and transparency.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdv.IMAGE_SIZE">
            <summary>
            Default image size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdv.m_images">
            <summary>
            Collection of images.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdv.m_imageSize">
            <summary>
            Size of images. Used in drawing and for compatibility reasons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdv.m_bUseImageSize">
            <summary>
            Indicates whether images should be drawn using ImageSize property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdv.m_tag">
            <summary>
            Tag object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.#ctor">
            <summary>
            Creates and initializes new ImageListAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates and initializes new ImageListAdv.
            </summary>
            <param name="container">Container to add component to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.Draw(System.Drawing.Graphics,System.Drawing.Point,System.Int32)">
            <summary>
            Draws selected image to specified Graphics. If UseImageSize property is set to true, image is drawn using ImageSize property;
            otherwise it's drawn using original size.
            </summary>
            <param name="g">Graphics to draw to.</param>
            <param name="pt">Point to draw image at.</param>
            <param name="index">Index of image to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws selected image to specified Graphics. If UseImageSize property is set to true, image is drawn using ImageSize property;
            otherwise it's drawn using original size.
            </summary>
            <param name="g">Graphics to draw to.</param>
            <param name="x">X coordinate of point to draw image at.</param>
            <param name="y">Y coordinate of point to draw image at.</param>
            <param name="index">Index of image to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.Draw(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws selected image to specified Graphics using given size.
            </summary>
            <param name="g">Graphics to draw to.</param>
            <param name="x">X coordinate of point to draw image at.</param>
            <param name="y">Y coordinate of point to draw image at.</param>
            <param name="width">Width of rectangle to draw image to.</param>
            <param name="height">Height of rectangle to draw image to.</param>
            <param name="index">Index of image to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.op_Explicit(System.Windows.Forms.ImageList)~Syncfusion.Windows.Forms.Tools.ImageListAdv">
            <summary>
            Explicitly converts ImageList to ImageListAdv.
            </summary>
            <param name="list">ImageList to convert.</param>
            <returns>ImageListAdv with images from given ImageList.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.op_Explicit(Syncfusion.Windows.Forms.Tools.ImageListAdv)~System.Windows.Forms.ImageList">
            <summary>
            Explicitly converts ImageListAdv to ImageList.
            </summary>
            <param name="list">ImageListAdv to convert.</param>
            <returns>ImageList with images from given ImageListAdv.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.ToImageList">
            <summary>
            Converts ImageListAdv to ImageList.
            </summary>
            <returns>ImageList with images from ImageListAdv.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.FromImageList(System.Windows.Forms.ImageList)">
            <summary>
            creates ImageListAdv from ImageList.
            </summary>
            <param name="list">ImageList to create ImageListAdv from.</param>
            <returns>Created ImageListAdv.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.IconToImageAlphaCorrect(System.Drawing.Icon)">
            <summary>
            Converts Icon to Image with correction of alpha channel.
            </summary>
            <param name="icon">Icon to convert.</param>
            <returns>Resulting Image.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.BitmapHasAlpha(System.Drawing.Imaging.BitmapData)">
            <summary>
            Checks whether Bitmap has	alpha channel.
            </summary>
            <param name="bmpData">BitmapData to check.</param>
            <returns>True if bitmap has alpha channel; otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.ToString">
            <summary>
            Creates string with info about ImageListAdv.
            </summary>
            <returns>String with info about ImageListAdv</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.ShouldSerializeImageSize">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.ResetImageSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdv.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdv.Images">
            <summary>
            Gets collection of images.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdv.ImageSize">
            <summary>
            Gets or sets size of images. Used in drawing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdv.UseImageSize">
            <summary>
            Gets or sets value indicating whether images should be drawn using ImageSize property.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdv.Tag">
            <summary>
            Gets or sets tag object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ImageListAdvDesigner">
            <summary>
            ImageListAdv Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ImageListAdvDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ImageListAdvDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ImageListAdvDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Design.IGetMsgProcListener">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.Design.ThreadHooks.IgnoreWndProcNcodeZero">
            <summary>
            Workaround for incident 35141. When calling Timer.Stop in GridGroupDropArea
            this ends up calling MdiSysMenuProvider.MsgHook 
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.RuntimeEnvironment">
            <summary>
            Provides some utility methods regarding the runtime.
            </summary>
        </member>
        <member name="P:Syncfusion.Runtime.InteropServices.RuntimeEnvironment.MajorRuntimeVersion">
            <summary>
            Returns the major runtime version.
            </summary>
        </member>
        <member name="P:Syncfusion.Runtime.InteropServices.RuntimeEnvironment.MinorRuntimeVersion">
            <summary>
            Returns the minor runtime version.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.SystemInformationExt">
            <summary>
            This class will provide more information that the .Net equivalent ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Runtime.InteropServices.SystemInformationExt.KeyboardCuesAlwaysOn">
            <summary>
            Indicates whether menu access keys are always underlined.
            </summary>
        </member>
        <member name="P:Syncfusion.Runtime.InteropServices.SystemInformationExt.IsDotNetApp">
            <summary>
            Indicates whether the current application is a .Net application.
            </summary>
            <value>True if .Net; false otherwise.</value>
            <remarks>
            By default, this method will automatically determine whether or not the current active
            app is a .Net app or a native app. However, to speed up performance (by a fraction of a second),
            you can set this value appropriately at the beginning of your app. Note that
            an incorrect setting would cause unforeseen behavior.
            </remarks>
        </member>
        <member name="P:Syncfusion.Runtime.InteropServices.SystemInformationExt.IsDevStudio">
            <summary>
            Indicates whether the component is used inside developer studio.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.GetUserDefaultLCID">
            <summary>
            Interop call to get the LCID of the current culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.SetGraphicsMode(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            Sets the advanced graphics mode.
            </summary>
            <param name="hdc">Handler to device context.</param>
            <param name="iMode">New graphics mode.</param>
            <returns>If the function succeeds, the return value is the old graphics
             mode. If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.ModifyWorldTransform(System.IntPtr,Syncfusion.Runtime.InteropServices.NativeMethods.XFORM@,System.Int32)">
            <summary>
            Changes the world transformation for a device context using
            the specified mode.
            </summary>
            <param name="hdc">Handler to device context.</param>
            <param name="lpXform">Transformation data.</param>
            <param name="iMode">Modification mode.</param>
            <returns>If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.</returns>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.SetWorldTransform(System.IntPtr,Syncfusion.Runtime.InteropServices.NativeMethods.XFORM@)">
            <summary>
            Sets a two-dimensional linear transformation between world space and
            page space for the specified device context.
            </summary>
            <param name="hdc">Handler to the device context. </param>
            <param name="lpXform">Pointer to an XFORM structure that contains the transformation data.</param>
            <returns>TRUE if success; false otherwise.</returns>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StateSystem.STATE_SYSTEM_INVISIBLE">
            <summary>
            For the scroll bar itself, indicates the specified vertical or horizontal scroll bar does not exist.
            For the page up or page down regions, indicates the thumb is positioned such that the region does not exist.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StateSystem.STATE_SYSTEM_OFFSCREEN">
            <summary>
            For the scroll bar itself, indicates the window is sized such that the specified vertical or horizontal scroll bar is not currently displayed.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StateSystem.STATE_SYSTEM_PRESSED">
            <summary>
            The arrow button or page region is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethods.StateSystem.STATE_SYSTEM_UNAVAILABLE">
            <summary>
            The component is disabled.
            </summary> 
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethods.Util.GetPInvokeStringLength(System.String)">
            <summary>
            Computes the string size that should be passed to a typical Win32 call.
            This will be the character count under NT and the ubyte count for Win95.
            </summary>
            <param EntryPoint="s">
            The string whose size to compute.
            </param>
            <returns>
            The count of characters or bytes, depending on what the pinvoke
            all wants
            </returns>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethods.XFORM">
            <summary>
            Native Matrix Object.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.InteropServices.NativeMethodsHelper">
            <summary>
            The NativeMethodsHelper class is a wrapper over some Interop calls that are exposed using static methods
            in this class.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.redrawWindowCallCountMap">
            <summary>
            Keeps track of the number of times Suspend and Resume redraw window is called for a particular window.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.SuspendRedrawWindow(System.IntPtr)">
            <summary>
            Sends the WM_SETREDRAW to the handle of the Control to prevent drawing of the control.
            </summary>
            <param name="ctlHandle">The handle of the control that is to be suspended.</param>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.ResumeRedrawWindow(System.IntPtr)">
            <summary>
            Resumes redrawing of the window.
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.ResumeRedrawWindow(System.IntPtr,System.Boolean)">
            <summary>
            Resumes redrawing of the window.
            </summary>
            <param name="ctlHandle"></param>
            <param name="bRedraw"></param>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.SetRedrawWindow(System.IntPtr,System.Boolean,System.Boolean)">
            <summary>
            Sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn
            or to prevent changes in that window from being redrawn.
            </summary>
            <param name="hWnd">Handle to the native window.</param>
            <param name="bRedraw">Indicates the redraw state.
            If this parameter is true, the content can be redrawn after a change.
            If this parameter is false, the content cannot be redrawn after a change.</param>
            <param name="bForceRedraw">Forces redraw of the window using <see cref="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.RedrawWindow(System.IntPtr,System.Int32)"/>.
            Works only if <c>bRedraw</c> is <c>true</c>.</param>
        </member>
        <member name="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.SetRedrawWindow(System.IntPtr,System.Boolean)">
            <summary>
            Overload of <see cref="M:Syncfusion.Runtime.InteropServices.NativeMethodsHelper.SetRedrawWindow(System.IntPtr,System.Boolean,System.Boolean)"/>
            Forcefully redraws window if redraw is enabled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Interop.NativeWindowEx">
            <summary>Subclass window that allowing attaching of
            message filters classes into Message processing.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Interop.NativeWindowEx.InvalidHandle">
            <summary>Value that represent invalid window handle.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Interop.NativeWindowEx.m_messageFilter">
            <summary>Reference on message filter instance.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Interop.NativeWindowEx.#ctor(System.IntPtr)">
            <summary>Default constructor that subclass window by it handle automatically.</summary>
            <param name="hWnd">Window Handle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Interop.NativeWindowEx.WndProc(System.Windows.Forms.Message@)">
            <summary>Override of WndProc function.</summary>
            <param name="m">Reference on message processed by Window.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Interop.NativeWindowEx.MessageFilter">
            <summary>Gets and Sets reference on message filter instance.</summary>
        </member>
        <member name="T:Syncfusion.Win32.RegistryEntry">
            <summary>
            A structure that represents a location in the registry.
            </summary>
            <remarks>
            This is a simple structure that refers to a Registry location
            through the root RegistryKey and the subkey.
            </remarks>
        </member>
        <member name="M:Syncfusion.Win32.RegistryEntry.#ctor(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a new instance of the RegistryEntry class and
            initializes it with the root RegistryKey and subkey.
            </summary>
            <param name="key">The root RegistryKey.</param>
            <param name="subkey">The subkey string.</param>
        </member>
        <member name="P:Syncfusion.Win32.RegistryEntry.SourceRegistryKey">
            <summary>
            Gets / sets the root RegistryKey.
            </summary>
            <value>A RegistryKey value.</value>
        </member>
        <member name="P:Syncfusion.Win32.RegistryEntry.SourceRegistrySubKey">
            <summary>
            Gets /sets the subkey under the root RegistryKey.
            </summary>
            <value>A string value representing the subkey.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoLabelPosition">
            <summary>
            Specifies the relative position of an <see cref="T:Syncfusion.Windows.Forms.Tools.AutoLabel"/> control to that of the 
            control it labels.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabelPosition.Custom">
            <summary>
            The relative AutoLabel position can be set manually.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabelPosition.Left">
            <summary>
            Left has been replaced with side, to take into account RightToLeft configs. Please use side instead.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabelPosition.Top">
            <summary>
            The AutoLabel is always positioned to the top of the labeled control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabelPosition.Side">
            <summary>
            The AutoLabel is always positioned to the left (or right if the parent control is RTL enabled) of the labeled control.
            Replaces Left.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoLabel">
            <summary>
            A <see cref="T:System.Windows.Forms.Label"/> derived class that lets you label any control with it.
            </summary>
            <remarks>
            <para>Once a control is labeled by an instance of AutoLabel (through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoLabel.LabeledControl"/> property, 
            the label gets moved around as the labeled control moves around 
            automatically, preserving the relative positions. The relative positions can 
            also be configured to be left, top or custom through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoLabel.Position"/> property.</para>
            <para>
            Note that the <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayout"/> manager will treat the label and its control as a 
            pair, always laying them out together as if they were one single control.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabel.DEF_WITH_BORDERS">
            <summary>
            Value for PreferredHeight adding when borders are present.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AutoLabel.DEF_WITHOUT_BORDERS">
            <summary>
            Value for PreferredHeight adding when borders are absent.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnPropertyChanged(Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> object containing data pertaining to this event.
            </param>
            <remarks>
            The OnPropertyChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. 
            <para>Note to Inheritors: When overriding OnPropertyChanged in a derived 
            class, be sure to call the base class's OnPropertyChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnLocationChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnSizeChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnParentRightToLeftChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnRightToLeftChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.UpdatePosition">
            <summary>
            Updates the position of the AutoLabel when the parameters that affect
            the relative positions have changed (like the LabeledControl's position, size, etc.).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnAttachLabeledControl(System.Windows.Forms.Control)">
            <summary>
            Called when a new control is getting labeled (when set through the <see cref="P:Syncfusion.Windows.Forms.Tools.AutoLabel.LabeledControl"/> property.
            </summary>
            <param name="labeledControl">The control that is being labeled.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.OnDetachLabeledControl(System.Windows.Forms.Control)">
            <summary>
            Called when an exisiting label is getting unlabeled.
            </summary>
            <param name="labeledControl">The control that is being unlabeled.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoLabel.MesureText(System.String,System.Drawing.Font)">
            <summary>
            Calculates the size of the label's text.
            </summary>
            <param name="text">Text for measuring.</param>
            <param name="font">Current font.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.AutoLabel.PropertyChanged">
            <summary>
            Fired when the LabeledControl, Gap and Position properties of this class changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized
                to display its entire contents.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.LabeledControl">
            <summary>
            Gets or sets the control that is being labeled.
            </summary>
            <value>A control instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.Position">
            <summary>
            Gets / sets the relative position of the control and the AutoLabel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.PreferredHeight">
            <summary>
            Returns the preferred height of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.Gap">
            <summary>
            Gets or sets the horizontal and vertical gap to use when computing the relative position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.DX">
            <summary>
            Gets or sets the effective horizontal distance between the left of the AutoLabel and its labeled control.
            </summary>
            <remarks>When RightToLeft == Yes DX is the distance between the right of the labeled control
            and the right of the AutoLabel.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoLabel.DY">
            <summary>
            Gets or sets the effective vertical distance between the top of the AutoLabel and its labeled control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.BorderLayout">
            <summary>
            Represents the layout manager that lays out the children along the borders and
            at the center, very similar to the Windows Form's control docking behavior.
            </summary>
            <remarks>
            <para>
            This layout manager will dock up to five controls along the four borders and the
            center. This is very similar to the control docking behavior exhibited by the
            DockStyle setting of a control.
            </para>
            <para>The <see cref="M:Syncfusion.Windows.Forms.Tools.BorderLayout.GetPosition(System.Windows.Forms.Control)"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.BorderLayout.SetPosition(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.BorderPosition)"/> methods
            let you specify a <see cref="T:Syncfusion.Windows.Forms.Tools.BorderPosition"/> for a child control and also
            act as an extended property during design-time for the child controls.</para>
            <para>Here are some of the differences between Windows Forms style docking and the
            BorderLayout.</para>
            <list type="bullet">
            <item>
            <term>When using <b>BorderLayout</b>, there can be only a single control that 
            can be docked to a border.</term>
            </item>
            <item>
            <term>When using <b>BorderLayout</b> and the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.CustomLayoutBounds"/> setting, 
            the bounds for layout can be customized to be something different from the control's client
            rectangle.</term>
            </item>
            <item>
            <term>Just like our other <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutManager"/>s, you can layout non-control
            based items when using the <b>BorderLayout</b>.</term>
            </item>
            </list>
            </remarks>
            <example>
            <para>Here is some sample code that tells you how to initialize a CardLayout manager.</para>
            <coderef file="\Tools\Samples\Layout Manager Package\LayoutManagers\cs\BorderLayout.cs" name="Initializing BorderLayout" lang="C#"><code lang="C#">
            		// Binding a control to the CardLayout manager programmatically.
            		this.borderLayout1 = new BorderLayout();
            		this.borderLayout1.ContainerControl = this;
            		
            		// Set the border-position of the button.
            		this.borderLayout1.SetPosition(this.btnNorth, BorderPosition.North);
            		this.borderLayout1.SetPosition(this.btnSouth, BorderPosition.South);
            		this.borderLayout1.SetPosition(this.btnCenter, BorderPosition.Center);
            		this.borderLayout1.SetPosition(this.btnEast, BorderPosition.East);
            		this.borderLayout1.SetPosition(this.btnWest, BorderPosition.West);</code></coderef>
            <coderef file="\Tools\Samples\Layout Manager Package\LayoutManagers\VB\BorderLayout.vb" name="Initializing BorderLayout" lang="VB"><code lang="VB">
                       ' Binding a Control to the CardLayout manager programmatically.
                       Me.borderLayout1 = New BorderLayout()
                       
                       Me.borderLayout1.ContainerControl = Me
                       
                       ' Set the border-position of the button.
                       Me.borderLayout1.SetPosition(Me.btnNorth, BorderPosition.North)
                       Me.borderLayout1.SetPosition(Me.btnSouth, BorderPosition.South)
                       Me.borderLayout1.SetPosition(Me.btnCenter, BorderPosition.Center)
                       Me.borderLayout1.SetPosition(Me.btnEast, BorderPosition.East)
                       Me.borderLayout1.SetPosition(Me.btnWest, BorderPosition.West)</code></coderef>
            <para>Also, take a look at the project in Tools/Samples/Layout Manager Package/LayoutManagers for an example.</para>
            </example>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.LayoutManager">
            <summary>
            Defines the base class for Layout Managers.
            </summary>
            <remarks>
            <para>The <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayout"/>, <see cref="T:Syncfusion.Windows.Forms.Tools.CardLayout"/>, <see cref="T:Syncfusion.Windows.Forms.Tools.GridLayout"/>, and <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/> classes derive from this
            base class.</para>
            <para>Use one of the above classes to include layout management support in your forms / controls.</para>
            <para>The layout manager can be configured to operate in different modes.</para> <para>By default, <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.AutoLayout"/> mode
            layout will be automatically triggered when the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.ContainerControl"/> fires a <see cref="E:System.Windows.Forms.Control.Layout"/> event. If not in
            this mode, then you can call the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/> method to trigger a layout.</para>
            <para>By default, the ContainerControl's ClientRectangle will be used as the bounds for the
            layout. But, if the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.CustomLayoutBounds"/> property is set to a value other than Rectangle.Empty
            then that rectangle area will be used as the layout bounds.</para>
            <para>You can also lay out non-control based components as long as they derive from
            the <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutItemBase"/> class. The LayoutItemBase derived object can be used in any 
            method call that expects a control instance because the LayoutItemBase has an implicit type-conversion operator
            that can convert itself to a control (use the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.ToControl"/> method in VB).</para>
            <para>You can also specify / provide preferred and minimum sizes for the child components.
            The default layout logic uses the component's preferred size to lay them out.
            The LayoutManager also has the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/> methods
            that will let you query for the corresponding sizes.</para>
            <para>There are different ways in which you can provide the preferred and minimum sizes
            for a component. The manager will first look for the <see cref="T:Syncfusion.Windows.Forms.Tools.IProvideLayoutInformation"/> interface
            in your child component, which if found, will be used to obtain the sizes. Second, the
            manager will throw a <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation"/> event for a specific child component, which if
            handled will then be used to obtain the sizes, if provided. Third, the sizes provided
            using the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)"/> / <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetMinimumSize(System.Windows.Forms.Control,System.Drawing.Size)"/> method will be used to obtain the sizes. However
            if SetPreferredSize / SetMinimumSize was never called, the framework will call them
            with the current size of the component as the preferred / minimum size.</para>
            <para>Take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutItemBase"/> class documentation for sample code on how to
            create non-control based classes that can participate in Layout management.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnContainerControlChanged(System.EventArgs)">
            <summary>
            Raises the ContainerControlChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnContainerControlChanged method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. </para>
            <para>Note to Inheritors: When overriding OnContainerControlChanged in a derived 
            class, be sure to call the base class's OnContainerControlChanged method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetCustomLayoutBounds">
            <summary>
            Sets the CustomLayoutBounds property to Rectangle.Empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ShouldSerializeCustomLayoutBounds">
            <summary>
            Indicates whether the CustomLayoutBounds property is a value other than Rectangle.Empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.#ctor">
            <summary>
            Constructor to be called by derived classes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.BeginInit">
            <summary>
            Starts designer initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.EndInit">
            <summary>
            Ends designer initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Retrieves the preferred size associated with the specified control.
            </summary>
            <param name="control">The control for which to retrieve the preferred size.</param>
            <returns>The preferred size for the specified control.</returns>
            <remarks>
            Take a look at the LayoutManager class documentation for information on the
            different ways in which the manager obtains and you can specify the preferred and minimum size information
            for a child component.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetStaticPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Returns the preferred size provided with a call to SetPreferredSize.
            </summary>
            <param name="control">The control whose preferred size is to be known.</param>
            <returns>The size, if any, provided or the current control size.</returns>
            <remarks>
            <para>Unlike GetPreferredSize, this does not throw an event or look for IProvideLayoutInformation
            in the child controls.</para>
            <para>Calling this will in turn call SetPreferredSize with the current control size, if there is no size available.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Associates a preferred size with the specified control.
            </summary>
            <param name="control">The control to associate the preferred size with.</param>
            <param name="value">The preferred size of the control.</param>
            <remarks>
            Take a look at the LayoutManager class documentation for information on the
            different ways in which the manager obtains and you can specify the preferred and minimum size information
            for a child component.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ForcePreferredAndMinimumsSize">
            <summary>
            Makes the current sizes of the child controls their minimum and preferred sizes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ShouldSerializePreferredSize(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the PreferredSize property is a value other than Rectangle.Empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Removes any custom preferred size set for the specified control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Retrieves the minimum size associated with the specified control.
            </summary>
            <param name="control">The control for which to retrieve the minimum size.</param>
            <returns>The minimum size for the specified control.</returns>
            <remarks>
            Take a look at the LayoutManager class documentation for information on the
            different ways in which the manager obtains and you can specify the preferred and minimum size information
            for a child component.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetStaticMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Returns the minimum size provided with a call to SetMinimumSize.
            </summary>
            <param name="control">The control whose minimum size is to be known.</param>
            <returns>The size, if any provided, or the current control size.</returns>
            <remarks>
            <para>Unlike GetMinimumSize, this does not throw an event or look for IProvideLayoutInformation
            in the child controls.</para>
            <para>Calling this will in turn call SetMinimumSize with the current control size, if there is no size available.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetMinimumSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Associates a minimum size with the specified control.
            </summary>
            <param name="control">The control to associate the minimum size with.</param>
            <param name="value">The minimum size of the control.</param>
            <remarks>
            Take a look at the LayoutManager class documentation for information on the
            different ways in which the manager obtains, and you can specify, the preferred and minimum size information
            for a child component.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ShouldSerializeMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the MinimumSize property is a value other than Rectangle.Empty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Removes any custom minimum size set for the specified control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetDynamicSize(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.LayoutInformationType,System.Drawing.Size@)">
            <summary>
            Returns the dynamic preferred or minimum size of a child component.
            </summary>
            <param name="control">The child control.</param>
            <param name="type">The type of size required, preferred or minimum.</param>
            <param name="size">A reference value through which the size should be returned to the caller.</param>
            <returns>True to indicate a dynamic size was found and that the size argument has a valid value. False otherwise.</returns>
            <remarks>
            <para>This function will first check if the child control has an <see cref="T:Syncfusion.Windows.Forms.Tools.IProvideLayoutInformation"/>
            interface and if so returns the size provided by that interface.
            If not, it throws a <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation"/> to obtain the dynamic size. The handlers,
            if any, for that event may provide the dynamic size which will be returned.</para>
            <para>If none of the above cases succeeds then False will be returned.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnProvideLayoutInformation(Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation"/> event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs"/> that contains the event data.</param>
            <remarks>
            <para>The OnProvideLayoutInformation method also allows derived classes to handle the event 
            without attaching a delegate. This is the preferred technique for 
            handling the event in a derived class. </para>
            <para>Note to Inheritors: When overriding OnProvideLayoutInformation in a derived 
            class, be sure to call the base class's OnProvideLayoutInformation method so that 
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            The handler for the container's ControlAdded event.
            </summary>
            <param name="sender">The container into which a control was added.</param>
            <param name="e">An ControlEventArgs that contains the event data.</param>
            <remarks>
            This is an easy way for the derived classes to know when a child gets added to the ContainerControl.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnControlRemoved(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            The handler for the container's ControlRemoved event.
            </summary>
            <param name="sender">The container into which a control was added.</param>
            <param name="e">An ControlEventArgs that contains the event data.</param>
            <remarks>
            This is an easy way for the derived classes to know when a child gets removed from the ContainerControl.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.AddLayoutComponent(System.Windows.Forms.Control,System.Object)">
            <summary>
            Adds a child component to the layout list with the specified constraints.
            </summary>
            <param name="childControl">The control to add to the list.</param>
            <param name="constraints">The associated constraints.</param>
            <remarks>
            <para>The type of constraints to be passed varies based on the layout manager.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.CardLayout"/> for example expects a string type while the <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/> expects
            a <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagConstraints"/> type. The <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayout"/> and the <see cref="T:Syncfusion.Windows.Forms.Tools.GridLayout"/> do not expect anything
            which means you can specify NULL. Take a look at the individual layout manager's documentation 
            for the type of constraints expected. The individual managers also provide custom type safe methods
            to let you specify the appropriate constraints.</para>
            <para>
            You can also pass a <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutItemBase"/> derived class as the first argument because
            it has an implicit type-conversion operator that will provide its corresponding
            control object (a place-holder control that allows the LayoutItemBase to seamlessly participate
            in the layout framework). In VB, use the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.ToControl"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.RemoveLayoutComponent(System.Windows.Forms.Control)">
            <summary>
            Removes a child component from the layout list.
            </summary>
            <param name="childControl">The control to be removed.</param>
            <remarks>
            <para>
            You can also pass a LayoutItemBase derived class as the first argument because
            it has an implicit type-conversion operator that will provide its corresponding
            control object (a place-holder control that allows the LayoutItemBase to participate
            in the layout framework seemlessly). In VB, use the LayoutItemBase.ToControl method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetLayoutInfo">
            <summary>
            Removes any references to the container control and handlers for events in that
            control. Will also remove references to the child control.
            </summary>
            <remarks>
            Will be called when the user sets the ContainerControl to NULL and from Dispose.
            Make sure to call the base class to perform normal operations when you override
            this method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize">
            <summary>
            Returns the minimum size for the ContainerControl.
            </summary>
            <returns>A size value representing the minimum size required.</returns>
            <remarks>
            This value is calculated based on the minimum size requirement for the child controls.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize">
            <summary>
            Returns the preferred size for the ContainerControl.
            </summary>
            <returns>A size value representing the preferred size.</returns>
            <remarks>
            This value is calculated based on the preferred size requirement for the child controls.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer">
            <summary>
            Triggers a layout of the child components.
            </summary>
            <remarks>
            Use this when you want to manually trigger a layout. This will automatically 
            be called by the framework when <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.AutoLayout"/> is True and a Layout event occurs on the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.ContainerControl"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetControls">
            <summary>
            Returns the child components that participate in the layout.
            </summary>
            <returns>
            The child control list.
            </returns>
            <remarks>
            The order of child controls in the returned list will take into account the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.UseControlCollectionPosition"/> property value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetBounds">
            <summary>
            Returns the layout bounds within which to perform layout.
            </summary>
            <returns>The Rectangle specifying the layout bounds.</returns>
            <remarks>
            This takes into account the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.CustomLayoutBounds"/> value, if not empty.
            If empty, the bounds are calculated based on the Container Control's ClientRectangle 
            and the margins specified.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.IsVisible(System.Windows.Forms.Control)">
            <summary>
            Indicates the Visible state of the child control or LayoutItemBase.
            </summary>
            <param name="control">The control whose visibility is to be determined.</param>
            <returns>The visibility state.</returns>
            <remarks>
            Use this instead of checking the Visible property of the control directly, because
            if this control is a place-holder control for a LayoutItemBase, the Visibility
            state will be stored elsewhere.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutManager.IsInit">
            <summary>
            Indicates whether the layout manager is in a state where it can start laying out
            components.
            </summary>
            <returns>True indicates its ready for layout; False otherwise.</returns>
            <remarks>
            This will return True if it has a valid ContainerControl and at least one child component
            to be laid out.
            If you override this method, make sure to call the base class.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ContainerControlChanged">
            <summary>
            This event is triggered when the ContainerControl property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation">
            <summary>
            This event is triggered to obtain preferred size information for a child control
            during layout.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.DesignerHost">
            <summary>
            Gets or sets the designer host.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.ComponentDesigner">
            <summary>
            Gets or sets the component designer.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.ContainerControl">
            <summary>
            Gets or sets the container control that this manager will lay out.
            </summary>
            <value>A control object.</value>
            <remarks>
            Changing this property will raise the ContainerControlChanged event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.CustomLayoutBounds">
            <summary>
            Gets or sets the custom layout bounds, if any, to be used for layout calculation
            instead of the container control's ClientRectangle.
            </summary>
            <value>A Rectangle specifying the custom bounds. Default is Rectangle.Empty.</value>
            <remarks>
            <para>If this value is Rectangle.Empty, then the manager will use the container control's
            ClientRectangle. If other than Rectangle.Empty, then that value will be used.</para>
            <para>When using CustomLayoutBounds, you might have to disable <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.AutoLayout"/> in
            most cases and instead manually reset CustomLayoutBounds and call <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/> in
            the container control's Layout event handler.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.UseControlCollectionPosition">
            <summary>
            Indicates whether the container control's <see cref="T:System.Windows.Forms.Control.ControlCollection"/>
            should be used as the order for laying out the child controls.
            </summary>
            <value>True to use the ControlCollection order; False to use the order in which
            the child components were added to the manager.
            Default value is true.</value>
            <remarks>
            <para>This property matters only when the corresponding layout manager relies on the 
            order of children in the child list in its layout logic. The FlowLayout, CardLayout
            and the GridLayout managers rely on the order, while the GridBagLayout managers do not.</para>
            <para>Note that if you have both control-based and <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutItemBase"/>-based child components
            participating in the layout and this property is True, then the LayoutItemBase based
            child components will always be at the bottom of the list when layout is performed.
            In this case, if you want more control on the child order, set this property to False
            and use the LayoutControls list to modify the exisiting order.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutControls">
            <summary>
            Returns the list of child components participating in layout.
            </summary>
            <value>An ArrayList containing the child components.</value>
            <remarks>
            <para>There are very specific cases when you have to access this list.</para>
            <para>You should access this list to modify the position of the children in the child
            components list only when <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutManager.UseControlCollectionPosition"/> property is False and
            you are laying out both control-based and LayoutItemBase-based components in 
            the manager. Take a look at the UseControlCollectionPosition property documentation
            for information on this issue.</para>
            <para>However, you should only use this property to change the position of child
            components, but never to effectively add or remove components (use the 
            methods provided by the respective managers).</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.AutoLayout">
            <summary>
            Indicates whether the manager should lay out automatically on Layout event.
            </summary>
            <value>True indicates auto layout; False otherwise. Default is True.</value>
            <remarks>
            If True, the manager will listen to the ContainerControl control's Layout event and perform layout
            automatically. If False, you should call the manager's <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/> method to trigger
            layout.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.LeftMargin">
            <summary>
            This method has been replaced by HorzNearMargin. Please use that instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.HorzNearMargin">
            <summary>
            Gets or sets the left margin between the client rectangle and the layout rectangle.
            </summary>
            <value>An integer value in pixels. Default is 4 pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.RightMargin">
            <summary>
            This method has been replaced by HorzFarMargin. Please use that instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.HorzFarMargin">
            <summary>
            Gets or sets the right margin between the client rectangle and the layout rectangle.
            </summary>
            <value>An integer value in pixels. Default is 4 pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.TopMargin">
            <summary>
            Gets or sets the top margin between the client rectangle and the layout rectangle.
            </summary>
            <value>An integer value in pixels. Default is 4 pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutManager.BottomMargin">
            <summary>
            Gets or sets the bottom margin between the client rectangle and the layout rectangle.
            </summary>
            <value>An integer value in pixels. Default is 4 pixels.</value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderLayout.positionVsControls">
            <summary>
            Hashtable to maintain constraint to control mapping.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.#ctor">
            <summary>
            Overloaded. Creates an instance of the BorderLayout class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance of the GridLayout class and sets its ContainerControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the GridLayout class and sets its ContainerControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.SetPosition(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.BorderPosition)">
            <summary>
            Sets the <see cref="T:Syncfusion.Windows.Forms.Tools.BorderPosition"/> for a child component.
            </summary>
            <param name="control">The child component whose position is to be set.</param>
            <param name="position">The <see cref="T:Syncfusion.Windows.Forms.Tools.BorderPosition"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.RemoveLayoutComponent(System.Windows.Forms.Control)">
            <summary>
            Removes a child component from the layout list.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.RemoveLayoutComponent(System.Windows.Forms.Control)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.AddLayoutComponent(System.Windows.Forms.Control,System.Object)">
            <summary>
            Adds a child component to the layout list with the specified constraints.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.AddLayoutComponent(System.Windows.Forms.Control,System.Object)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.GetPosition(System.Windows.Forms.Control)">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.Tools.BorderPosition"/> of a child component.
            </summary>
            <param name="control">The child component whose position is to be retrieved.</param>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.Tools.BorderPosition"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.GetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Retrieves the preferred size associated with the specified control.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetPreferredSize(System.Windows.Forms.Control)"/>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.GetStaticPreferredSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.GetMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Retrieves the minimum size associated with the specified control.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetMinimumSize(System.Windows.Forms.Control)"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.PreferredLayoutSize">
            <summary>
            Returns the preferred size for the ContainerControl.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.MinimumLayoutSize">
            <summary>
            Returns the minimum size for the ContainerControl.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.BorderLayout.LayoutContainer">
            <summary>
            Triggers a layout of the child components.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderLayout.VGap">
            <summary>
            Gets or sets the vertical spacing between the layout border and the components. 
            </summary>
            <value>The vertical space in pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.BorderLayout.HGap">
            <summary>
            Gets or sets the horizontal spacing between the layout border and the components.
            </summary>
            <value>The horizontal space in pixels.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.BorderPosition">
            <summary>
            Specifies the position and the manner in which the control will be laid out
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.BorderLayout"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.None">
            <summary>
            The control is not laid out.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.North">
            <summary>
            The control's top edge is docked to the top of its containing control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.South">
            <summary>
            The control's bottom edge is docked to the bottom of its containing control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.East">
            <summary>
            The control's left edge is docked to the left edge of its containing control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.West">
            <summary>
            The control's right edge is docked to the right edge of its containing control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.BorderPosition.Center">
            <summary>
            The control is resized to fit the area between the controls laid out in the other borders.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CardLayoutMode">
            <summary>
            Specifies how the children will be laid out.
            </summary>
            <remarks>
            <para>In Default mode, the CardLayout manager will center the control within the 
            layout rectangle based on its preferred size, when there is enough space available. 
            When the space available is less than the preferred size, it will simply show the 
            child from the top / left of the layout rectangle, shrinking the size to fit the 
            layout rectangle, not going below the minimum size.</para>
            <para>In Fill mode, the preferred size of the control will be ignored and it will
            be made to fill the entire client area of the parent, taking into consideration the
            parent's DockPading parent(if the parent is a ScrollableControl).</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CardLayoutMode.Default">
            <summary>
            The child control is laid out based on its preferred size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CardLayoutMode.Fill">
            <summary>
            The child control is laid out to fill the parent.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CardLayout">
             <summary>
             Represents the layout manager that lays out the children as "Cards".
             </summary>
             <remarks>
             <para>Each child component is a "Card" with a name attached to it.
             The CardLayout will display only one Card at a time, allowing you
             to flip through it. Use the <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.First"/>, <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Last"/>, <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Next"/>, <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Previous"/>, and <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Show(System.String)"/> methods to do so.</para>
             <para>The <see cref="P:Syncfusion.Windows.Forms.Tools.CardLayout.LayoutMode"/> property lets you specify whether to lay out the children based on their
             preferred size or make them fill the parent's client rectangle.</para>
             <para>The <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.SetCardName(System.Windows.Forms.Control,System.String)"/> method will expect you to pass a string value
             indicating the name of the Card as the constraint.</para>
             <para>Setting the same Card name for more than one component will result in unforseen conflicts.</para>
             <para>During design-time, you can change the order of the child controls being laid out by moving them around
             using the "Bring to Front" and "Send to Back" verbs provided by the control designer.</para>
             <para>Take a look at the LayoutManager class documentation for more information on
             LayoutManagers in general.</para>
             </remarks>
             <example>
             <para>Here is some sample code that tells you how to initialize a CardLayout manager:</para>
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\CardLayoutForm.cs" name="Initializing CardLayout" lang="C#"><code lang="C#">
            			// Binding a Control to the CardLayout manager programmatically.
            			this.cardLayout1 = new CardLayout();
            		
            			// Set the container control; all the child controls of this container control are
            			// automatically registered as children with the manager and get default card names.
            			this.cardLayout1.ContainerControl = this.panel1;
            			// Set custom card names to replace default card names.
            			this.cardLayout1.SetCardName(this.label1, "MyCard1");
            
            			// To select a card manually, use the SelectedCard property.
            			this.cardLayout1.SelectedCard = "MyCard1";
            			
            			// Or move through the cards like this:
            			this.cardLayout1.Next();
            			this.cardLayout1.Previous();</code></coderef>
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\VB\CardLayoutForm.vb" name="Initializing CardLayout" lang="VB"><code lang="VB">
                        ' Binding a Control to the CardLayout manager programmatically.
                        Me.cardLayout1 = New CardLayout
                        ' Set the target control; all the child controls of this target control are
                        ' automatically registered as children with the manager and get default card names.
                        Me.cardLayout1.ContainerControl = Me.panel1
                        ' Set custom card names to replace default card names.
                        Me.cardLayout1.SetCardName(Me.label1, "MyCard1")
                        ' To select a card manually, use the SelectedCard property.
                        Me.cardLayout1.SelectedCard = "MyCard1"
                        ' Or move through the cards like this:
                        Me.cardLayout1.Next
                        Me.cardLayout1.Previous</code></coderef>
             <para>Also, take a look at the project in Tools/Samples/Quick Start/LayoutManagers for an example.</para>
             </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CardLayout.CardNameBase">
            <summary>
            Indicates the Base Name of the card.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.#ctor">
            <summary>
            Overloaded. Creates a new instance of the CardLayout class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the CardLayout class and adds itself to the specified container.
            </summary>
            <param name="container">The logical ContainerControl parent into which to add itself.</param>
            <remarks><para>This constructor is used by the design-time to add a component to the form's
            IContainer field so that it gets Disposed when the form gets Disposed.</para>
            <para>Note that this is not the same as the layout manager's container control.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the CardLayout class and sets its ContainerControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.EndInit">
            <summary>
            Ends designer initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetCardName(System.Windows.Forms.Control)">
            <summary>
            Returns the Card name of a child component.
            </summary>
            <param name="control">The child component whose Card name is to be retrieved.</param>
            <returns>The Card name as string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.SetCardName(System.Windows.Forms.Control,System.String)">
            <summary>
            Sets the Card name for a child component.
            </summary>
            <param name="control">The child component whose Card name is to be set.</param>
            <param name="value">The Card name as string.</param>
            <remarks>Use this method to change the card name of a component
            once set using <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.AddLayoutComponent(System.Windows.Forms.Control,System.Object)"/>. Setting a NULL or empty string
            will also remove the component from the layout list.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetMaintainAspectRatio(System.Windows.Forms.Control)">
            <summary>
            Returns the value for maintaining aspect ratio based on the control's PreferredSize.
            </summary>
            <param name="control">The control whose aspect ratio setting is to be known.</param>
            <returns>True if the aspect ratio should be maintained; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.SetMaintainAspectRatio(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the value for maintaining aspect ratio based on the control's PreferredSize.
            </summary>
            <param name="control">The control to associate the aspect ratio setting.</param>
            <param name="value">True to maintain aspect ratio. False otherwise.</param>
            <remarks>Use this method to specify whether or not the control will be drawn
            maintaining its aspect ratio based on the control's PreferredSize. Applicable only
            when the <see cref="P:Syncfusion.Windows.Forms.Tools.CardLayout.LayoutMode"/> property is set to CardLayoutMode.Default.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetNewCardName">
            <summary>
            Generates a new unique name for a card that could be added to this CardLayout.
            </summary>
            <returns>A card name unique within this layout manager.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.OnContainerControlChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnContainerControlChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.AddLayoutComponent(System.Windows.Forms.Control,System.Object)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.AddLayoutComponent(System.Windows.Forms.Control,System.Object)"/>.
            </summary>
            <param name="childControl"></param>
            <param name="constraints"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.RemoveLayoutComponent(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.RemoveLayoutComponent(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="childControl"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.ResetLayoutInfo">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetLayoutInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.PreferredLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.MinimumLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.ValidateHiddenStates">
            <summary>
            Validates hidden states.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.LayoutContainer">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetCurrentVisibleChild">
            <summary>
            Returns the current active Card.
            </summary>
            <returns>The control representing the card.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.First">
            <summary>
            Shows the first Card.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.Next">
            <summary>
            Shows the next Card in the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.Previous">
            <summary>
            Shows the previous Card in the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.Last">
            <summary>
            Shows the last Card in the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.Show(System.String)">
            <summary>
            Shows a Card by name.
            </summary>
            <param name="cardName">The Card's name.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetCardNames">
            <summary>
            Returns an array containing the Card names as strings.
            </summary>
            <returns>An ArrayList of Card names.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CardLayout.GetComponentFromName(System.String)">
            <summary>
            Returns an associated control given a Card name.
            </summary>
            <param name="cardName">The card name whose control to retrieve.</param>
            <returns>A control associated with the card name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CardLayout.LayoutMode">
            <summary>
            Gets or sets the layout mode.
            </summary>
            <value>The current CardLayoutMode. Default is CardLayoutMode.Default.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CardLayout.SelectedControl">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CardLayout.NextCardIndex">
            <summary>
            Returns the index of the next card that will be shown when the <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Next"/> method gets called.
            </summary>
            <value>A valid index into the list returned by the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetControls"/> method; -1 if 
            a next card is not available.</value>
            <remarks>This property will return the first card if the currently selected card is the last card.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CardLayout.PreviousCardIndex">
            <summary>
            Returns the index of the previous card that will be shown when the <see cref="M:Syncfusion.Windows.Forms.Tools.CardLayout.Previous"/> method gets called.
            </summary>
            <value>A valid index into the list returned by the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.GetControls"/> method; -1 if 
            a previous card is not available.</value>
            <remarks>This property will return the last card if the currently selected card is the first card.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CardLayout.SelectedCard">
            <summary>
            Gets or sets the current Card's name.
            </summary>
            <value>The current Card's name.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.CardLayout.RestoreChildPosition">
            <summary>
            This event is raised in LayoutContainer method before applying new bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CardLayout.RestoreChildPositionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.CardLayout.RestoreChildPosition"/> event of
            the CardLayout.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FlowAlignment">
            <summary>
            Specifies the alignment of layout components in the direction of flow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowAlignment.Center">
            <summary>
            Center the components within the parent's width (if vertical layout) or 
            height (if horizontal layout).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowAlignment.Near">
            <summary>
            Dock the components to the left border (if vertical layout) or 
            top border (if horizontal layout).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowAlignment.Far">
            <summary>
            Dock the components to the right border (if vertical layout) or 
            bottom border (if horizontal layout).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowAlignment.ChildConstraints">
            <summary>
            Refer to the child's <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints"/> to determine the alignment and layout.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FlowLayoutMode">
            <summary>
            Specifies whether the children should be laid out horizontally or vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowLayoutMode.Horizontal">
            <summary>
            Children will be laid out horizontally, left to right.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FlowLayoutMode.Vertical">
            <summary>
            Children will be laid out vertically, top to bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints">
            <summary>
            Specifies how child components will be positioned inside a container managed
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayout"/> manager.
            </summary>
            <remarks>
            <para>Flow Layout constraints are a set of properties that determine how a 
            child component will be horizontally and vertically aligned when laid out in 
            rows or columns.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Default">
            <summary>
            Returns a default FlowLayoutConstraints object (that is not empty).
            </summary>
            <returns>The default FlowLayoutConstraints object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.#ctor">
            <summary>
            Overloaded. Creates a new instance of the FlowLayoutConstraints class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.#ctor(System.Boolean,Syncfusion.Windows.Forms.Tools.HorzFlowAlign,Syncfusion.Windows.Forms.Tools.VertFlowAlign,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of the FlowLayoutConstraints class 
            with the specified values.
            </summary>
            <param name="active">True indicates this child should participate in layout; False otherwise.</param>
            <param name="halign">The <see cref="T:Syncfusion.Windows.Forms.Tools.HorzFlowAlign"/> mode in which child should be laid out (when in horizontal flow mode).</param>
            <param name="valign">The <see cref="T:Syncfusion.Windows.Forms.Tools.VertFlowAlign"/> mode in which child should be laid out (when in vertical flow mode).</param>
            <param name="newline">True indicates a line break when this child is encountered
            while laying out.</param>
            <param name="proportionalColWidth">True indicates that the width of the column the corresponding 
            child control occupies should be proportional to the laid out column's preferred width (when laid out vertically).</param>
            /// <param name="proportionalRowHeight">True indicates that the height of the row the corresponding 
            child control occupies should be proportional to the laid out row's preferred height (when laid out horizontally).</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Clone">
            <summary>
            Creates an exact copy of this FlowLayoutConstraints object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.op_Equality(Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints,Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Equals(System.Object)">
            	The basic == operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.op_Inequality(Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints,Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Equals(System.Object)">
            	The basic != operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	bool
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Active">
            <summary>
            Indicates whether the child should participate in layout.
            </summary>
            <value>True to indicate this child should participate in layout; False otherwise. Default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.HAlign">
            <summary>
            Specifies the mode in which the child should be laid out within a row.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.HorzFlowAlign"/> value. Default is HorzFlowAlign.Justify.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.VAlign">
            <summary>
            Specifies the mode in which the child should be laid out within a column.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.VertFlowAlign"/> value. Default is VertFlowAlign.Center.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.NewLine">
            <summary>
            Indicates whether this child should always be moved to the beginning of a new line when laid out.
            </summary>
            <value>True to move to a new line; False otherwise. Default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.ProportionalRowHeight">
            <summary>
            Indicates whether the effective height of the row the corresponding child control occupies should be 
            proportional to the laid out rows' preferred heights, for horizontal layout mode.
            </summary>
            <value>True for proportional height; False otherwise. Default is False.</value>
            <remarks>
            This property is in effect only when the layout mode is horizontal. When this property is on, the row
            this control occupies will be deemed to take proportional height. Then the remaining vertical space
            available will be split proportionally between such rows wanting proportional-height based on their preferred height.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.ProportionalColWidth">
            <summary>
            Indicates whether the effective width of the column the corresponding child control occupies should be 
            proportional to the laid out columns' preferred widths, for vertical layout mode.
            </summary>
            <value>True for proportional width; False otherwise. Default is False.</value>
            <remarks>
            This property is in effect only when the layout mode is vertical. When this property is on, the column
            this control occupies will be deemed to take proportional width. Then the remaining horizontal space
            available will be split proportionally between such columns wanting proportional-width based on their preferred width.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.IsEmpty">
            <summary>
            Gets / sets the FlowLayoutConstraints structure with its properties left uninitialized.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.HorzFlowAlign">
            <summary>
            Specifies the alignment of child components within a row when horizontally laid out.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.HorzFlowAlign.Left">
            <summary>
            The child component is left aligned within the row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.HorzFlowAlign.Right">
            <summary>
            The child component is right aligned within the row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.HorzFlowAlign.Center">
            <summary>
            The child component is centered within the row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.HorzFlowAlign.Justify">
            <summary>
            The child component will be expanded (or shrunk up to the MinimumSize) to fill any available extra width.
            </summary>
            <remarks>Justified components are positioned after the centered ones.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.VertFlowAlign">
            <summary>
            Specifies the alignment of child components within a column when vertically laid out.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.VertFlowAlign.Top">
            <summary>
            The child component is top aligned within the column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.VertFlowAlign.Bottom">
            <summary>
            The child component is bottom aligned within the column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.VertFlowAlign.Center">
            <summary>
            The child component is center aligned within the column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.VertFlowAlign.Justify">
            <summary>
            The child component will be expanded to fill any available extra height.
            </summary>
            <remarks>Justified components are positioned after the centered ones.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FlowLayout">
            <summary>
            Represents the layout manager that does a left to right or top to bottom
            layout.
            </summary>
            <remarks>
            <para>Arranges components horizontally (left to right) or vertically (top to bottom)
            (As specified in the <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.LayoutMode"/> property). When there is no more space
            in a line, it moves the components to the next line.</para>
            <para>By default, each line is centered. You can change this justification using
            the <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.Alignment"/> property.</para>
            <para>You can also set <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints"/> on each component for more control
            over the component's alignment and spacing within a row / column.</para>
            <para>You can control the component spacing, in pixels, through the <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.HGap"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.VGap"/> properties.</para>
            <para>When the FlowLayout's <see cref="T:System.Windows.Forms.ContainerControl"/> changes, it automatically assigns default FlowLayoutConstraints to the
            children, for convenience sake, so that you don't
            have to call <see cref="M:Syncfusion.Windows.Forms.Tools.FlowLayout.SetConstraints(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints)"/> for each child component. </para>
            <para>Take a look at the LayoutManager class documentation for more information on
            LayoutManagers in general.</para>
            </remarks>
            <example>
            The following example shows you how to initialize a FlowLayout manager with a container control:
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\FlowLayoutForm.cs" name="Initializing FlowLayout" lang="C#"><code lang="C#">
                        // Binding a control to the FlowLayout manager programmatically:
                        this.flowLayout1 = new FlowLayout();
            
                        // Set the container control; all the child controls of this container control are
                        // automatically registered as children with the manager:
                        this.flowLayout1.ContainerControl = this.panel1;
            
                        // Set some properties on the flowLayout manager:
                        this.flowLayout1.HGap = 20;
                        this.flowLayout1.Alignment = FlowAlignment.Near;
            
            			// You can prevent one or more child controls from being laid out, like this (the first argument for FlowLayoutConstraints should be False).
            			// This will have the same effect as calling RemoveLayoutComponent:
            			this.flowLayout1.SetConstraints(this.label10, new FlowLayoutConstraints(false, HorzFlowAlign.Left, VertFlowAlign.Center, false, false, false));
            
                        // You can prevent automatic layout during the layout event.
                        // If you decide to do so, make sure to call flowLayout.LayoutContainer manually:
                        // this.flowLayout1.AutoLayout = false;</code></coderef>
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\VB\FlowLayoutForm.vb" name="Initializing FlowLayout" lang="VB"><code lang="VB">
                       ' Binding a control to the FlowLayout manager programmatically:
                       Me.flowLayout1 = New FlowLayout
                       ' Set the target control; all the child controls of this target control are
                       ' automatically registered as children with the manager:
                       Me.flowLayout1.ContainerControl = Me.panel1
                       ' Set some properties on the flowLayout manager:
                       Me.flowLayout1.HGap = 20
                       Me.flowLayout1.Alignment = FlowAlignment.Near
                       ' You can ignore one or more child controls from being laid out, like this (the first argument for FlowLayoutConstraints should be False).
                       ' This will have the same effect as calling RemoveLayoutComponent:
                       Me.flowLayout1.SetConstraints(Me.label10, New FlowLayoutConstraints(False, HorzFlowAlign.Center, VertFlowAlign.Center, False, False, False))
                       ' You can prevent automatic layout during the layout event.
                       ' If you decide to do so, make sure to call flowLayout.LayoutContainer manually:
                       ' this.flowLayout1.AutoLayout = false;</code></coderef>
            Also take a look at the project in Tools/Samples/Quick Start/LayoutManagers for an example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.#ctor">
            <summary>
            Overloaded. Creates a new instance of the FlowLayout component and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the FlowLayout class and adds itself to the specified container.
            </summary>
            <param name="container">The logical ContainerControl parent into which to add itself.</param>
            <remarks><para>This constructor is used by the design-time to add a component to the form's
            IContainer field so that it gets Disposed when the form gets Disposed.</para>
            <para>Note that this is not the same as the layout manager's container control.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the FlowLayout component and sets its <see cref="T:System.Windows.Forms.ContainerControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.FlowLayoutMode,Syncfusion.Windows.Forms.Tools.FlowAlignment)">
            <summary>
            Creates a new instance of the FlowLayout component and sets its <see cref="T:System.Windows.Forms.ContainerControl"/>,
            layout mode and alignment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.FlowLayoutMode,Syncfusion.Windows.Forms.Tools.FlowAlignment,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the FlowLayout component and sets its <see cref="T:System.Windows.Forms.ContainerControl"/>,
            layout mode, alignment, horizontal gap and vertical gap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetStaticPreferredSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetStaticMinimumSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.SetConstraints(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints)">
            <summary>
            Specifies the constraints associated with the specified control.
            </summary>
            <param name="control">The control for which to set the constraints.</param>
            <param name="value">The constraints of the control. NULL to remove the control
            from the layout list.</param>
            <remarks>
            Passing a NULL value will actually remove the component from the layout list.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.SetParticipateInLayout(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Adds or removes the specified control from the layout list.
            </summary>
            <param name="control">The control to be added or removed.</param>
            <param name="value">True means the control will be added; False will remove it.</param>
            <remarks>
            This method will be removed in a future version. Instead, use the <see cref="M:Syncfusion.Windows.Forms.Tools.FlowLayout.SetConstraints(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints)"/> method passing in a
            <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints"/> instance with its <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Active"/>
            property set to the appropriate value.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetParticipateInLayout(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the component is in the layout list.
            </summary>
            <param name="control">The control whose participation needs to be verified.</param>
            <returns>True if it is in the layout list; False otherwise.</returns>
            <remarks>
            This method will be removed in a future version. Use the <see cref="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetConstraintsRef(System.Windows.Forms.Control)"/> method to get hold of the
            <see cref="T:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints"/> associated with this control and then check its <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayoutConstraints.Active"/>
            property instead.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetConstraintsRef(System.Windows.Forms.Control)">
            <summary>
            Returns a reference to the constraints associated with the specified control.
            </summary>
            <param name="control">The control with constraints to retrieve.</param>
            <returns>A reference to the actual constraints object.</returns>
            <remarks>This is the actual object where the manager stores the constraints for 
            the control. Hence, making changes to the returned object will affect the 
            layout logic.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetConstraints(System.Windows.Forms.Control)">
            <summary>
            Returns the constraints associated with the specified control.
            </summary>
            <param name="control">The control with constraints to retrieve.</param>
            <returns>A clone of the stored constraints object.</returns>
            <remarks>
            The returned value is a clone which can be used independently by itself.
            The changes made to the returned instance will not have any effect on the stored
            constraints. Use <see cref="M:Syncfusion.Windows.Forms.Tools.FlowLayout.GetConstraintsRef(System.Windows.Forms.Control)"/> to get hold of the actual constraints object
            that is used by the manager.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.ResetLayoutInfo">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetLayoutInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.ResetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetPreferredSize(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.ResetMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetMinimumSize(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.OnContainerControlChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnContainerControlChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.RemoveLayoutComponent(System.Windows.Forms.Control)">
            <summary>
            Removes a child component from the layout list.
            </summary>
            <param name="childControl">The control to be removed.</param>
            <remarks>
            <para>
            You can also pass a LayoutItemBase derived class as the first argument because
            it has an implicit type-conversion operator that will provide its corresponding
            control object (a place-holder control that allows the LayoutItemBase to participate
            in the layout framework seemlessly). In VB, use the LayoutItemBase.ToControl method.
            </para>
            </remarks>
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.PreferredLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/>.
            </summary>
            <returns>Returns the size with the preferred height (when laying out Horizontal)
            or size with the preferred width (when laying out Vertical).</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.MinimumLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FlowLayout.LayoutContainer">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.Alignment">
            <summary>
            Gets / sets the alignment of layout components in the direction of flow.
            </summary>
            <value>A FlowAlignment value specifying the justification.
            Default is FlowAlignment.Center.</value>
            <remarks>
            FlowAlignment.Near will be either left justified or top justified based on
            whether the layout mode is vertical or horizontal. And similarly,
            FlowAlignment.Far will be either right justified or top justified.
            FlowAlignment.ChildConstraints will make the manager refer to the child's constraints.
            </remarks> 
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.LayoutMode">
            <summary>
            Gets / sets the layout mode.
            </summary>
            <value>The current FlowLayoutMode. Default is FlowLayoutMode.Horizontal.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.ReverseRows">
            <summary>
            Indicates whether to lay out rows in the opposite direction (right to left or bottom to top).
            </summary>
            <value>False for regular layout; True for reverse layout. Default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.HGap">
            <summary>
            Gets / sets the horizontal spacing between the components.
            </summary>
            <value>The horizontal space in pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.AutoHeight">
            <summary>
            Indicates whether the container control should automatically grow in height when
            there is not enough space when in horizontal alignment mode.
            </summary>
            <value>True to automatically increase the height; False otherwise.</value>
            <remarks>
            This applies only in horizontal alignment mode.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FlowLayout.VGap">
            <summary>
            Gets / sets the vertical spacing between the layout border and the components.
            </summary>
            <value>The vertical space in pixels.</value>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.FlowLayout.HGapChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.HGap"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.FlowLayout.VGapChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Tools.FlowLayout.VGap"/> property is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.Insets">
            <summary>
            Specifies the inset padding, in pixels, for a component. Used by
            the <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/> manager.
            </summary>
            <remarks>
            This is the extra space that the manager adds around a component's preferred bounds before
            laying out the component.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Insets.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance on the Insets class.
            </summary>
            <param name="left">Number of pixels added to the left of the component.</param>
            <param name="top">Number of pixels added to the top of the component.</param>
            <param name="right">Number of pixels added to the right of the component.</param>
            <param name="bottom">Number of pixels added to the bottom of the component.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Insets.op_Equality(Syncfusion.Windows.Forms.Tools.Insets,Syncfusion.Windows.Forms.Tools.Insets)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.Insets.Equals(System.Object)">
            	The basic == operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.Insets.op_Inequality(Syncfusion.Windows.Forms.Tools.Insets,Syncfusion.Windows.Forms.Tools.Insets)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.Insets.Equals(System.Object)">
            	The basic != operator
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Insets.Left">
            <summary>
            Gets / sets the insets to the left of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Insets.Right">
            <summary>
            Gets / sets the insets to the right of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Insets.Top">
            <summary>
            Gets / sets the insets to the top of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.Insets.Bottom">
            <summary>
            Gets / sets the insets to the bottom of the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FillType">
            <summary>
            Specifies how to resize a component when the component's
            layout bounds are larger than its preferred size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FillType.None">
            <summary>
            The component is not resized.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FillType.Both">
            <summary>
            The component's width and height are both changed to fill the 
            entire available layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FillType.Horizontal">
            <summary>
            The component's width is changed to fill its layout bounds
            horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.FillType.Vertical">
            <summary>
            The component's height is changed to fill its layout bounds
            vertically.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AnchorTypes">
            <summary>
            Specifies how a layout component anchors to the edges of its layout bounds when managed
            by a <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/>.
            </summary>
            <remarks>
            A child component usually gets more space than its preferred size when being laid out.
            These values specify how to align such components within the layout bounds.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.Center">
            <summary>
            The child component is anchored to the center of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.North">
            <summary>
            The child component is anchored to the North of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.NorthEast">
            <summary>
            The child component is anchored to the NorthEast of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.East">
            <summary>
            The child component is anchored to the East of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.SouthEast">
            <summary>
            The child component is anchored to the SouthEast of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.South">
            <summary>
            The child component is anchored to the South of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.SouthWest">
            <summary>
            The child component is anchored to the SouthWest of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.West">
            <summary>
            The child component is anchored to the West of its layout bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.AnchorTypes.NorthWest">
            <summary>
            The child component is anchored to the NorthWest of its layout bounds.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GridBagConstraints">
            <summary>
            Specifies how components will be positioned inside a container managed
            by the <see cref="T:Syncfusion.Windows.Forms.Tools.GridBagLayout"/> manager.
            </summary>
            <remarks>
            <para>GridBagConstraints are a set of properties that determine how a 
            component will grow, shrink or reposition itself when its container is resized. </para>
            <para>Each component has its own GridBagConstraints which means that there is potential for
            unforseen size and boundary conflicts. Make sure to manually test the layout design
            to determine that it behaves appropriately.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Relative">
            <summary>
            Relative positioning preference.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Remainder">
            <summary>
            Makes the child component occupy the remainder of the row / column.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Default">
            <summary>
            Returns a default GridBagConstraint object that is also empty.
            </summary>
            <returns>The default GridBagConstraints object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.#ctor">
            <summary>
            Overloaded. Creates a new instance of the GridBagConstraints class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,Syncfusion.Windows.Forms.Tools.AnchorTypes,Syncfusion.Windows.Forms.Tools.FillType,Syncfusion.Windows.Forms.Tools.Insets,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the GridBagConstraints class 
            with the specified values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Clone">
            <summary>
            Creates an exact copy of this GridBagConstraints object.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.op_Equality(Syncfusion.Windows.Forms.Tools.GridBagConstraints,Syncfusion.Windows.Forms.Tools.GridBagConstraints)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Equals(System.Object)">
            	The basic == operator.
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.op_Inequality(Syncfusion.Windows.Forms.Tools.GridBagConstraints,Syncfusion.Windows.Forms.Tools.GridBagConstraints)">
            <summary cref="M:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Equals(System.Object)">
            	The basic != operator
            </summary>
            <param name="lhs">The left-hand side of the operator.</param>
            <param name="rhs">The right-hand side of the operator.</param>
            <returns>
            	Boolean value.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.GridPosX">
            <summary>
            Gets / sets the column in the virtual grid where the component's
            layout bounds begin.
            </summary>
            <value>A value specifying the beginning column. Can be -1.
            Default is -1.</value>
            <remarks>
            When -1, the positioning is relative, which means the component will
            be positioned immediately to the right of the component that was
            most recently added to the container.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.GridPosY">
            <summary>
            Gets / sets the row in the virtual grid where the component's
            layout bounds begin.
            </summary>
            <value>A value specifying the beginning row. Can be -1.
            Default is -1(GridBagConstraints.Relative).</value>
            <remarks>
            When -1, the positioning is relative, which means the component will
            be positioned immediately to the bottom of the component that was
            most recently added to the container.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.CellSpanX">
            <summary>
            Gets / sets the number of columns this component should span in the
            virtual grid.
            </summary>
            <value>The number of columns to span, default is 1. Can be zero (GridBagConstraints.Remainder).</value>
            <remarks>
            When value is zero, the component will be the last one in its row. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.CellSpanY">
            <summary>
            Gets / sets the number of rows this component should span in the
            virtual grid.
            </summary>
            <value>The number of rows to span, default is 1. Can be zero (GridBagConstraints.Remainder).</value>
            <remarks>
            When value is zero, the component will be the last one in its column. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.WeightX">
            <summary>
            Gets / sets the weight of this component in obtaining the extra
            horizontal space.
            </summary>
            <value>A double value representing the weight. Default is zero.</value>
            <remarks>
            <para>Specifies how to distribute extra horizontal space for a column.
            The weight of a column is calculated as the maximum WeightX of all 
            the components in that column.</para>
            <para>When there is extra horizontal space it is distributed to each column
            based on its weight. A component that has zero weight receives no
            extra space.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.WeightY">
            <summary>
            Gets / sets the weight of this component in obtaining the extra
            vertical space.
            </summary>
            <value>A double value representing the weight. Default is zero.</value>
            <remarks>
            <para>Specifies how to distribute extra vertical space for a row.
            The weight of a row is calculated as the maximum WeightY of all 
            the components in that row.</para>
            <para>When there is extra vertical space it is distributed to each row
            based on its weight. A component that has zero weight receives no
            extra space.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Anchor">
            <summary>
            Gets / sets the justification of a component within its available layout
            bounds (a cell in the virtual grid).
            </summary>
            <value>
            One of the AnchorTypes values. Default is center.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Fill">
            <summary>
            Gets / sets the fill type to resize a component when the component's
            layout bounds are larger than its preferred size.
            </summary>
            <value>One of the FillType values. The default is none.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.Insets">
            <summary>
            Gets / sets the extra space that the manager adds around a component's preferred bounds before
            laying out the component.
            </summary>
            <value>An Inset's instance. Default is zero inset padding on all sides.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.IpadX">
            <summary>
            Gets / sets the amount in pixels to add to the size of the component
            when determining its overall width.
            </summary>
            <value>The integer value representing the padding in pixels.
            Default is zero.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.IpadY">
            <summary>
            Gets / sets the amount in pixels to add to the size of the component
            when determining its overall height.
            </summary>
            <value>The integer value representing the padding in pixels.
            Default is zero.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridBagConstraints.IsEmpty">
            <summary>
            Gets / sets the GridBagConstraints structure with its properties left uninitialized.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GridBagLayout">
            <summary>
            Represents the layout manager that performs GridBag layout.
            </summary>
            <remarks>
            <para>The GridBagLayout manager creates and manages a grid within the
            container's layout bounds. Each column and row in this grid can be
            of different sizes and a component can span more than one cell.</para>
            <para>Each component can be assigned weights to determine how to distribute
            extra space between components. A component can also be anchored to a border / corner
            of its virtual grid cell. It can also fill its cell.</para>
            <para>
            Note that if you want the child components to be laid out purely based on their weights,
            set their preferred sizes to be (0,0), specify a non-zero weightX and weigthY,
            and set their Fill mode to FillMode.Both.
            </para>
            <para>The GridBagConstraints structure specifies all the above constraints associated
            with a component. Use the SetConstraints method to set the constraints for each component.
            To exclude a component from layout, call SetConstraints with NULL constraints.
            Each component has a constraint, which means that there is potential
            for conflicts in size and boundaries between components. Make
            sure to manually test the layout design to determine that it
            behaves appropriately.</para>
            </remarks>
            <example>
            The following example shows you how to initialize a GridBagLayout manager with a container control and its children:
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\GridBagLayoutForm.cs" name="Initializing GridBagLayout" lang="C#"><code lang="C#">
                        // Binding a control to the GridBagLayout manager programmatically:
                        this.gridBagLayout1 = new GridBagLayout();
            
                        // Set the container control; all the child controls of this container control are
                        // automatically registered as children with the manager:
                        this.gridBagLayout1.ContainerControl = this.panel1;
            
                        this.gridBagLayout1.SetConstraints(
                            this.button1,
                            new GridBagConstraints(0, 0, 3, 1, 1, 0.2, AnchorTypes.Center, FillType.Both, new Insets(0, 0, 0, 0), 0, 0, false)
                            );
                        this.gridBagLayout1.SetConstraints(
                            this.button2,
                            new GridBagConstraints(0, 1, 1, 3, 0.2, 0.6, AnchorTypes.Center, FillType.Both, new Insets(0, 0, 0, 0), 0, 0, false)
                            );
            
                        // Exclude button3 from layout:
                        this.gridBagLayout1.SetConstraints(this.button3, GridBagConstraints.Empty);
            
                        // Modify an exisiting constraint:
                        GridBagConstraints constraints1 = this.gridBagLayout1.GetConstraintsRef(this.button1);
                        constraints1.Fill = FillType.Horizontal;
            
                        // You can prevent automatic layout during the layout event.
                        // If you decide to do so, make sure to call gridBagLayout1.LayoutContainer manually:
                        // this.gridBagLayout1.AutoLayout = false;</code></coderef>
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\VB\GridBagLayoutForm.vb" name="Initializing GridBagLayout" lang="VB"><code lang="VB">
                       ' Binding a Control to the GridBagLayout manager programmatically:
                       Me.gridBagLayout1 = New GridBagLayout
                       ' Set the target control; all the child controls of this target control are
                       ' automatically registered as children with the manager:
                       Me.gridBagLayout1.ContainerControl = Me.panel1
                       Me.gridBagLayout1.SetConstraints(Me.button1, New GridBagConstraints(0, 0, 3, 1, 1, 0.2, AnchorTypes.Center, FillType.Both, New Insets(0, 0, 0, 0), 0, 0, false))
                       Me.gridBagLayout1.SetConstraints(Me.button2, New GridBagConstraints(0, 1, 1, 3, 0.2, 0.6, AnchorTypes.Center, FillType.Both, New Insets(0, 0, 0, 0), 0, 0, false))
                       ' Exclude button3 from layout:
                       Me.gridBagLayout1.SetConstraints(Me.button3, GridBagConstraints.Empty)
                       ' Modify an exisiting constraint:
                       Dim constraints1 As GridBagConstraints
                       constraints1 = Me.gridBagLayout1.GetConstraintsRef(Me.button1)
                       constraints1.Fill = FillType.Horizontal
                       ' You can prevent automatic layout during the layout event.
                       ' If you decide to do so, make sure to call gridBagLayout1.LayoutContainer manually:
                       ' this.gridBagLayout1.AutoLayout = false;</code></coderef>
            <para>Also take a look at the project in Tools/Samples/Quick Start/LayoutManagers for an example.</para>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagLayout.columnWidths">
            <summary>
            Largest minimum width in each column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagLayout.rowHeights">
            <summary>
            Largest minimum height in each row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagLayout.columnWeights">
            <summary>
            Largest weight in each column.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.GridBagLayout.rowWeights">
            <summary>
            Largest weight in each row.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.#ctor">
            <summary>
            Overloaded. Creates a new instance of the GridBagLayout class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the GridBagLayout class and adds itself to the specified container.
            </summary>
            <param name="container">The logical ContainerControl parent into which to add itself.</param>
            <remarks><para>This constructor is used by the design-time to add a component to the form's
            IContainer field so that it gets Disposed when the form gets Disposed.</para>
            <para>Note that this is not the same as the layout manager's ContainerControl.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the GridBagLayout class and sets its ContainerControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetStaticPreferredSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetStaticMinimumSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.ResetPreferredSize(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetPreferredSize(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.ResetMinimumSize(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetMinimumSize(System.Windows.Forms.Control)"/>.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.SetConstraints(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.GridBagConstraints)">
            <summary>
            Specifies the constraints associated with the specified control.
            </summary>
            <param name="control">The control for which to set the constraints.</param>
            <param name="value">The constraints of the control. Or NULL to remove the control
            from the layout list.</param>
            <remarks>
            Passing a NULL value will actually remove the component from the layout list.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.SetPreferredSize(System.Windows.Forms.Control,System.Drawing.Size)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetConstraints(System.Windows.Forms.Control)">
            <summary>
            Returns the constraints associated with the specified control.
            </summary>
            <param name="control">The control whose constraints to retrieve.</param>
            <returns>A clone of the stored constraints object.</returns>
            <remarks>
            The returned value is a clone which can be used independently by itself.
            The changes made to the returned instance will not have any effect on the stored
            constraints. Use <see cref="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetConstraintsRef(System.Windows.Forms.Control)"/> to get hold of the actual constraints object
            that is used by the manager.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetConstraintsRef(System.Windows.Forms.Control)">
            <summary>
            Returns a reference to the constraints associated with the specified control.
            </summary>
            <param name="control">The control with constraints to retrieve.</param>
            <returns>A reference to the actual constraints object.</returns>
            <remarks>This is the actual object where the manager stores the constraints for 
            the control. Hence, making changes to the returned object will affect the 
            layout logic.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetLayoutOrigin">
            <summary>
            Returns the top-left origin of the virtual grid in the current layout.
            </summary>
            <returns>A point representing the top-left position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetLayoutDimensions">
            <summary>
            Returns the row and column dimensions of the current layout.
            </summary>
            <returns>A 2D integer array containing the dimensions.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetLayoutWeights">
            <summary>
            Returns the row and column weights of the current layout.
            </summary>
            <returns>A 2D integer array containing the weights.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.GetLocation(System.Int32,System.Int32)">
            <summary>
            Returns the cell in the virtual grid (as a point) given a location.
            </summary>
            <param name="x">The x coordinate of the location.</param>
            <param name="y">The y coordinate of the location.</param>
            <returns>A Point representing the virtual grid cell.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.AddLayoutComponent(System.Windows.Forms.Control,System.Object)">
            <summary>
            Adds a component to the child layout list.
            </summary>
            <param name="control">The control to add to the layout list.</param>
            <param name="constraints">The GridBagConstraints associated with this component.</param>
            <remarks>If the second argument is not a GridBagConstraints, an exception will be thrown.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.RemoveLayoutComponent(System.Windows.Forms.Control)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.RemoveLayoutComponent(System.Windows.Forms.Control)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.PreferredLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.MinimumLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.ResetLayoutInfo">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.ResetLayoutInfo"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridBagLayout.LayoutContainer">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.GridLayout">
            <summary>
            Represents the layout manager that lays out the child components as a
            grid consisting of rows and columns.
            </summary>
            <remarks>
            <para>The layout manager divides the layout space into rows and columns based on the
            Rows and Columns properties and assigns each similar sized cell to a child component.</para>
            <para>You can control the component spacing, in pixels, through the HGap and VGap properties.</para>
            <para>You can remove or add child controls through the SetParticipateInLayout
            method. When the GridLayout's ContainerControl changes, it automatically includes all of its
            children in the layout component list, for convenience sake, so that you don't
            have to call SetParticipateInLayout for each child component. </para>
            <para>The <b>PreferredSize</b> and <b>MinimimumSize</b> settings for the children are ignored by 
            the GridLayout during layout, however the <see cref="M:Syncfusion.Windows.Forms.Tools.GridLayout.PreferredLayoutSize"/> and <see cref="M:Syncfusion.Windows.Forms.Tools.GridLayout.MinimumLayoutSize"/>
            methods do refer to the above settings to determine the sizes.</para>
            <para>Take a look at the LayoutManager class documentation for more information on
            LayoutManagers in general.</para>
            </remarks>
            <example>
            The following example shows you how to initialize a GridLayout manager with a container control:
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\GridLayoutForm.cs" name="Initializing GridLayout" lang="C#"><code lang="C#">
                        // Binding a Control to the GridLayout manager programmatically:
                        this.gridLayout1 = new Syncfusion.Windows.Forms.Tools.GridLayout();
            
                        // Set the container control; all the child controls of this container control are
                        // automatically registered as children with the manager:
                        this.gridLayout1.ContainerControl = this.innerPanel;
                        // Set some properties on the flowLayout manager:
                        this.gridLayout1.Columns = 4;
                        this.gridLayout1.Rows = 5;
                        this.gridLayout1.HGap = 4;
                        this.gridLayout1.VGap = 4;
            
                        // You can ignore one or more child Control from being laid out, like this.
                        // This will have the same effect as calling RemoveLayoutComponent:
                        //this.gridLayout1.SetParticipateInLayout(this.button1, false);
            
                        // You can prevent automatic layout during the layout event:
                        // If you decide to do so, make sure to call gridLayout1.LayoutContainer manually:
                        // this.gridLayout1.AutoLayout = false;</code></coderef>
            <coderef file="\Tools\Samples\Quick Start\LayoutManagers\VB\GridLayoutForm.vb" name="Initializing GridLayout" lang="VB"><code lang="VB">
                       ' Binding a Control to the GridLayout manager programmatically:
                       Me.gridLayout1 = New Syncfusion.Windows.Forms.Tools.GridLayout
                       ' Set the target control; all the child controls of this target control are
                       ' automatically registered as children with the manager:
                       Me.gridLayout1.ContainerControl = Me.innerPanel
                       ' Set some properties on the flowLayout manager:
                       Me.gridLayout1.Columns = 4
                       Me.gridLayout1.Rows = 5
                       Me.gridLayout1.HGap = 4
                       Me.gridLayout1.VGap = 4
                       ' You can ignore one or more child Control from being laid out, like this.
                       ' This will have the same effect as calling RemoveLayoutComponent:
                       'this.gridLayout1.SetParticipateInLayout(this.button1, false);
                       ' You can prevent automatic layout during the layout event.
                       ' If you decide to do so, make sure to call gridLayout1.LayoutContainer manually:
                       ' this.gridLayout1.AutoLayout = false;</code></coderef>
            Also take a look at the project in Tools/Samples/Quick Start/LayoutManagers for an example.
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.#ctor">
            <summary>
            Overloaded. Creates an instance of the GridLayout class and sets its defaults.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the GridLayout class and adds itself to the specified container.
            </summary>
            <param name="container">The logical ContainerControl parent into which to add itself.</param>
            <remarks><para>This constructor is used by the design-time to add a component to the form's
            IContainer field so that it gets Disposed when the form gets Disposed.</para>
            <para>Note that this is not the same as the layout manager's ContainerControl.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance of the GridLayout class and sets its ContainerControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the GridLayout class and sets its ContainerControl,
            rows and columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.#ctor(System.Windows.Forms.Control,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an instance of the GridLayout class and sets its ContainerControl,
            rows, columns, horizontal gap and vertical gap.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.GetParticipateInLayout(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the component is in the layout list.
            </summary>
            <param name="control">The control whose participation needs to be verified.</param>
            <returns>True if it is in the layout list; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.SetParticipateInLayout(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Adds or removes the specified control from the layout list.
            </summary>
            <param name="control">The control to be added or removed.</param>
            <param name="value">True means the control will be added; False will remove it.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnControlAdded(System.Object,System.Windows.Forms.ControlEventArgs)"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.OnContainerControlChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.OnContainerControlChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.GetPreferredSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.GetMinimumSize(System.Windows.Forms.Control)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.ResetLayoutInfo">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.PreferredLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.PreferredLayoutSize"/>.
            </summary>
            <returns>Returns the preferred layout size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.MinimumLayoutSize">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.MinimumLayoutSize"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.GridLayout.LayoutContainer">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutManager.LayoutContainer"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridLayout.Rows">
            <summary>
            Gets / sets the number of rows in the grid.
            </summary>
            <value>The number of rows. Default is 1.</value>
            <remarks>At least one Row or Column property should be greater than zero.
            If they are both set to zero, then the Rows property will be changed to 1.
            <para>If you try to set a negative value, this will instead be set to zero.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridLayout.Columns">
            <summary>
            Gets / sets the number of columns in the grid.
            </summary>
            <value>The number of columns. Default is 1.</value>
            <remarks><para>At least one Row or Column property should be greater than zero.
            If they are both set to zero, then the Row property will be changed to 1.</para>
            <para>If you try to set a negative value, this will instead be set to zero.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridLayout.HGap">
            <summary>
            Gets / sets the horizontal spacing between the layout border and the components. 
            </summary>
            <value>The horizontal space in pixels.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.GridLayout.VGap">
            <summary>
            Gets / sets the vertical spacing between the layout border and the components. 
            </summary>
            <value>The vertical space in pixels.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IProvideLayoutInformation">
            <summary>
            Defines a mechanism through which dynamic size information can be provided.
            </summary>
            <remarks>
            When a layout component implements this interface, the layout manager will obtain
            the size information through this interface whenever layout is performed. This allows
            you to provide dynamic layout information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IProvideLayoutInformation.PreferredSize">
            <summary>
            Returns the preferred size of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IProvideLayoutInformation.MinimumSize">
            <summary>
            Returns the minimum size of the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutItemPlaceHolderControl.SetVisibleCore(System.Boolean)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.LayoutItemBase">
             <summary>
             Represents a non-control based layout component.
             </summary>
             <remarks>
             <para>Derive your non-control based components from this class if you want them to
             participate in the layout management.</para>
             <para>You can add such components to the manager using the same methods as the control
             derived classes. You can pass a LayoutItemBase derived class to any method that
             expects a control type argument since the LayoutItemBase has an implicit type-conversion operator
             that can convert itself to a control. In VB, use the <see cref="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.ToControl"/> method to convert this instance to a control.</para>
             <para>In your derived class, you can find out the size set by the layout manager
             through the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.Bounds"/> property and the visibility through the Visible property (listening
             for the <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutItemBase.BoundsChanged"/> event should also help). You
             should also provide the preferred size and minimum size of your component through
             the <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.PreferredSize"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.MinimumSize"/> overrides.</para>
             </remarks>
             <example>
             This first example shows a sample LayoutItemBase derived class:
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\NonControlBasedComponents.cs" name="Sample LayoutItemBase Derived Class" lang="C#"><code lang="C#">
            	public class MyRectangle : LayoutItemBase
            	{
            		public static Size PrefSize = new Size(0, 0);
            		protected Control parent;
            		protected Color color;
            		protected string text;
            		public MyRectangle(Control parent, Color color, string text)
            		{
            			this.parent = parent;
            			this.color = color;
            			this.text = text;
            		}
            		public void OnPaint( PaintEventArgs e)
            		{
            			e.Graphics.FillRectangle(new SolidBrush(color), this.Bounds);
            			StringFormat sf = new StringFormat();
            			sf.Alignment = StringAlignment.Center;
            			sf.LineAlignment = StringAlignment.Center;
            			RectangleF r = new RectangleF(Bounds.Left, Bounds.Top,
            				Bounds.Width, Bounds.Height);
            			e.Graphics.DrawString(text, Control.DefaultFont, SystemBrushes.ControlText, r, sf);
            		}
            		// This override is a good place to repaint.
            		// Or you can listen to BoundsChanged event in LayoutItemBase.
            		protected override void OnBoundsChanged()
            		{
            			parent.Invalidate(new Rectangle(0, 0, this.parent.Width, this.parent.Height));
            		}
            
            		public override System.Drawing.Size MinimumSize
            		{
            			get	{	return MyRectangle.PrefSize;	}
            		}
            
            		public override System.Drawing.Size PreferredSize
            		{
            			get	
            			{
            				return MyRectangle.PrefSize;
            			}
            		}
            	}</code></coderef>
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\vb\MyRectangle.vb" name="Sample LayoutItemBase Derived Class" lang="VB"><code lang="VB">
                Public Class MyRectangle
                    Inherits LayoutItemBase
                    Protected WithEvents parent As Control
                    Protected color As color
                    Protected [text] As String
                    Public Shared PrefSize As Size
                    'Fields
                    'Constructors
                    'Events
                    'Methods
                    Shared Sub New()
                        'Warning: Implementation not found
                    End Sub
                    Public Sub New(ByVal parent As Control, ByVal color As color, ByVal [text] As String)
                        MyBase.New()
                        Me.parent = parent
                        Me.color = color
                        Me.text = [text]
            
                    End Sub
                    Public Overrides ReadOnly Property MinimumSize() As Size
                        Get
            
                            Return MyRectangle.PrefSize
            
                        End Get
                    End Property
                    Public Overrides ReadOnly Property PreferredSize() As Size
                        Get
            
                            Return MyRectangle.PrefSize
            
                        End Get
                    End Property
                    Protected Overloads Overrides Sub OnBoundsChanged()
            
                        parent.Invalidate(New Rectangle(0, 0, Me.parent.Width, Me.parent.Height))
            
                    End Sub
                    Public Sub OnPaint(ByVal e As PaintEventArgs)
            
                        e.Graphics.FillRectangle(New SolidBrush(color), Me.Bounds)
                        Dim sf As StringFormat
                        sf = New StringFormat()
                        sf.Alignment = StringAlignment.Center
                        sf.LineAlignment = StringAlignment.Center
                        Dim r As RectangleF
                        r = New RectangleF(Me.Bounds.Left, Me.Bounds.Top, Me.Bounds.Width, Me.Bounds.Height)
                        e.Graphics.DrawString([text], Control.DefaultFont, SystemBrushes.ControlText, r, sf)
            
                    End Sub
                End Class</code></coderef>
             <para>The above class can then participate in layout as follows. The example assumes
             that there is a GridBagLayout manager that is already bound to a container.</para>
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\cs\NonControlBasedComponents.cs" name="Initializing LayoutItemBase derived class" lang="C#"><code lang="C#">
            		private void Form1_Load(object sender, System.EventArgs e)
            		{
            			this.SuspendLayout();
            			// Current layout manager (Update every time you change the manager)
            			
            			// Layout Component 1:
            			this.myRect1 = new MyRectangle(this.gridBagLayout1.ContainerControl, Color.FromArgb(133, 191, 117), "Paint Area 1");
            			this.myRect1.Bounds = new Rectangle(10, 10, 80, 20);
            			this.myRect1.Visible = true;
            
            			// Layout Component 2:
            			this.myRect2 = new MyRectangle(this.gridBagLayout1.ContainerControl, Color.FromArgb(222, 100, 19), "Paint Area 2");
            			this.myRect2.Bounds = new Rectangle(10, 40, 80, 20);
            			this.myRect2.Visible = true;
            
            			// Layout Component 3:
            			this.myRect3 = new MyRectangle(this.gridBagLayout1.ContainerControl, Color.FromArgb(196, 214, 233), "Paint Area 3");
            			this.myRect3.Bounds = new Rectangle(10, 70, 80, 20);
            			this.myRect3.Visible = true;
            
            
            			// Sample GridBagConstraints:
            			GridBagConstraints gbc1 = new GridBagConstraints();
            			GridBagConstraints gbc2 = new GridBagConstraints();
            			GridBagConstraints gbc3 = new GridBagConstraints();
            
            			gbc1.Fill = FillType.Both;
            			gbc1.WeightX = 0.2;
            			gbc1.WeightY = 0.5;
            			gbc1.GridPosX = 0;
            			gbc1.GridPosY = 0;
            
            			gbc2.Fill = FillType.Both;
            			gbc2.WeightX = 0.2;
            			gbc2.WeightY = 0.5;
            			gbc2.GridPosX = 1;
            			gbc2.GridPosY = 0;
            
            			gbc3.Fill = FillType.Both;
            			gbc3.WeightX = 0.4;
            			gbc3.WeightY = 0.5;
            			gbc3.GridPosX = 0;
            			gbc3.GridPosY = 1;
            			gbc3.CellSpanX = 2;
            
            			// Add all the components that are to participate in Layout Management.
            			
            			// For GridBagLayouts pass gbcs for GridBagLayouts:
            			this.gridBagLayout1.SetConstraints(this.myRect1.ToControl(), gbc1);	
            			this.gridBagLayout1.SetConstraints(this.myRect2.ToControl(), gbc2);
            			this.gridBagLayout1.SetConstraints(this.myRect3.ToControl(), gbc3);
            
            			this.ResumeLayout(true);
            		}</code></coderef>
             <coderef file="\Tools\Samples\Quick Start\LayoutManagers\vb\NonControlBasedComponents.vb" name="Initializing LayoutItemBase derived class" lang="VB"><code lang="VB">
                    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load
            
                        Me.SuspendLayout()
                        ' Current layout manager (Update every time you change the manager)
                        ' Layout Component 1:
                        Me.myRect1 = New MyRectangle(Me.gridBagLayout1.ContainerControl, Color.FromArgb(133, 191, 117), "Paint Area 1")
                        Me.myRect1.Bounds = New Rectangle(10, 10, 80, 20)
                        Me.myRect1.Visible = True
                        ' Layout Component 2:
                        Me.myRect2 = New MyRectangle(Me.gridBagLayout1.ContainerControl, Color.FromArgb(222, 100, 19), "Paint Area 2")
                        Me.myRect2.Bounds = New Rectangle(10, 40, 80, 20)
                        Me.myRect2.Visible = True
                        ' Layout Component 3:
                        Me.myRect3 = New MyRectangle(Me.gridBagLayout1.ContainerControl, Color.FromArgb(196, 214, 233), "Paint Area 3")
                        Me.myRect3.Bounds = New Rectangle(10, 70, 80, 20)
                        Me.myRect3.Visible = True
                        ' Sample GridBagConstraints:
                        Dim gbc1 As GridBagConstraints
                        gbc1 = New GridBagConstraints()
                        Dim gbc2 As GridBagConstraints
                        gbc2 = New GridBagConstraints()
                        Dim gbc3 As GridBagConstraints
                        gbc3 = New GridBagConstraints()
                        gbc1.Fill = FillType.Both
                        gbc1.WeightX = 0.2
                        gbc1.WeightY = 0.5
                        gbc1.GridPosX = 0
                        gbc1.GridPosY = 0
                        gbc2.Fill = FillType.Both
                        gbc2.WeightX = 0.2
                        gbc2.WeightY = 0.5
                        gbc2.GridPosX = 1
                        gbc2.GridPosY = 0
                        gbc3.Fill = FillType.Both
                        gbc3.WeightX = 0.4
                        gbc3.WeightY = 0.5
                        gbc3.GridPosX = 0
                        gbc3.GridPosY = 1
                        gbc3.CellSpanX = 2
                        ' Add all the components that are to participate in Layout Management.
                        ' For GridBagLayouts pass gbcs for GridBagLayouts:
                        Me.gridBagLayout1.SetConstraints(Me.myRect1.ToControl, gbc1)
                        Me.gridBagLayout1.SetConstraints(Me.myRect2.ToControl, gbc2)
                        Me.gridBagLayout1.SetConstraints(Me.myRect3.ToControl, gbc3)
                        Me.ResumeLayout(True)
            
                    End Sub</code></coderef>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.#ctor">
            <summary>
            Creates an instance of the LayoutItemBase.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.op_Implicit(Syncfusion.Windows.Forms.Tools.LayoutItemBase)~System.Windows.Forms.Control">
            <summary>
            Returns the place holder control corresponding to the LayoutItemBase that lets
            the LayoutItemBase participate in the LayoutManager framework.
            </summary>
            <param name="lm">The LayoutItemBase object.</param>
            <returns>The corresponding place holder control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.LayoutItemBase.ToControl">
            <summary>
            Returns the place holder control corresponding to this LayoutItemBase that lets
            the LayoutItemBase participate in the LayoutManager framework.
            </summary>
            <returns>The corresponding place holder control.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.LayoutItemBase.BoundsChanged">
            <summary>
            Called when the Bounds property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.PreferredSize">
            <summary>
            Returns the preferred size of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.MinimumSize">
            <summary>
            Returns the minimum size of the component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.Visible">
            <summary>
            Indicates whether the component should be drawn visible.
            </summary>
            <value>True for visible; False for hidden.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.LayoutItemBase.Bounds">
            <summary>
            Gets / sets the bounds of the component in the corresponding layout manager's
            ContainerControl's client co-ordinates.
            </summary>
            <value>The rectangle within the parent control, in client co-ordinates.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.LayoutInformationType">
            <summary>
            Specifies the type of size information requested.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.LayoutInformationType.PreferredSize">
            <summary>
            The preferred size of the component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.LayoutInformationType.MinimumSize">
            <summary>
            The minimum size of the component.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation"/> event of
            the LayoutManager.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.LayoutManager.ProvideLayoutInformation"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.LayoutInformationType)">
            <summary>
            Creates a new instance of the ProvideLayoutInformationEventArgs class.
            </summary>
            <param name="control">The control for which the layout information is requested.</param>
            <param name="requested">The type of information requested.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs.Requested">
            <summary>
            Returns the type of information requested.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.Tools.LayoutInformationType"/> enum.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs.Control">
            <summary>
            Returns the control for which the layout information is requested.
            </summary>
            <value>A control instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs.Size">
            <summary>
            Gets / sets the size to be returned.
            </summary>
            <value>A size value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProvideLayoutInformationEventArgs.Handled">
            <summary>
            Indicates whether this event was handled and a value provided.
            </summary>
            <value>True to indicate a value was provided; False otherwise.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.RTLMatrix">
            <summary>
            Helps transform points from LTR to RTL co-ordinates and vice versa.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Localization.SR">
            <summary>
               SR provides localized access to string resources specific 
               from the assembly manifest Syncfusion.Windows.Forms.Localization.SR.resources
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Localization.SRCategoryAttribute">
            <summary>
            Specifies the category in which the property or event will be displayed in a visual designer.
            </summary>
            <remarks>
            This is a localized version of CategoryAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Windows.Forms.Localization.SR.resources
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Localization.SRDescriptionAttribute">
            <summary>
            Specifies a description for a property or event.
            </summary>
            <remarks>
            This is a localized version of DescriptionAttribute. The localized string will be loaded from the 
            assembly manifest Syncfusion.Windows.Forms.Localization.SR.resources
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ILocalizationProvider">
            <summary>
            Defines a <see cref="T:Syncfusion.Windows.Forms.ILocalizationProvider"/> interface.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LocalizationProvider">
            <summary>
            Provides static methods and properties to localize the UI.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ResourceIdentifiers">
            <summary>
            ResourceIdentifiers contains resource Ids specific to the Syncfusion.Shared.Base assembly. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox">
            <summary>
            The MaskedEditBox control provides restricted data input as well
            as formatted data output. This control supplies visual cues about
            the type of data being entered or displayed.
            </summary>
            <remarks>
            The MaskedEditBox is derived from <see cref="T:System.Windows.Forms.TextBox"/>
            and is fully compatible with the textbox control.
            <para>
            The MaskedEditBox control generally behaves as a textbox control with
            enhancements for optional masked input and formatted output. If you do
            not use an input mask, the MaskedEditBox control behaves much like a
            textbox.
            </para>
            <para>
            If you define an input mask using the Mask property, each character
            position in the MaskedEditBox control maps to either a placeholder
            of a specified type or a literal character. Literal characters, or
            literals, can give visual cues about the type of data being used.
            For example, the parentheses surrounding the area code of a telephone
            number are literals: (919).
            </para>
            <para>
            If you attempt to enter a character that conflicts with the input mask,
            the control generates a ValidationError event. The input mask prevents
            you from entering invalid characters into the control.
            </para>
            <para>
            The MaskedEditBox control provides full support for the Windows Forms
            designer and you can just drag-and-drop the control and set the properties.
            </para>
            <para>
            The MaskedEditBox control provides full support for data binding. The 
            <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ClipMode"/> property has to be set to <see cref="F:Syncfusion.Windows.Forms.Tools.ClipModes.ExcludeLiterals"/>
            when the MaskedEditBox's <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Text"/> property is bound to a 
            DataColumn that only accepts numerical data.
            </para>
            <para>
            The <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DataGroups"/> property provides the ability to break down the MaskedEditBox's content into different data groups.
            The data groups can be defined through the designer and is defined by the length of the data group. For example, a mask of type
            (###) ### - #### Ext 9999 representing a telephone number can be broken down into 3 data groups with the names "AreaCode", "PhoneNumber"
            and "Extension" by setting the group lengths to be 5, 11, 9. You can access the DataGroups and the values they hold through an index based accessor or
            name based accessor.
            
            </para>
            </remarks>
            <example>
            <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\MaskedEditDemo\CS\MainForm.cs" name="MaskedEditBox InitializeComponent" lang="CS">
            <code lang="C#">
            
                        // InitializeComponent
                        // Create the Masked edit box control:
                        this.maskedEditBox1 = new MaskedEditBox();
            
                        // Specifies if the prompt character can be entered:
                        this.maskedEditBox1.AllowPrompt = false;
            
                        // The mask string:
                        this.maskedEditBox1.Mask = "&gt;?&lt;????????????";
            
                        // The max length is set based on the mask:
                        this.maskedEditBox1.MaxLength = 13;
            
                        // The clip mode specifies if the literals are included:
                        this.maskedEditBox1.ClipMode = ClipModes.IncludeLiterals;
            
                        // The date time format:
                        this.maskedEditBox1.TimeSeparator = ':';
                        this.maskedEditBox1.DateSeparator = '-';
            
                        // The number format:
                        this.maskedEditBox1.DecimalSeparator = '.';
                        this.maskedEditBox1.ThousandSeparator = ',';
            
                        // Add the MaskedEditBox control to the form:
                        this.Controls.Add(this.maskedEditBox1);
                        </code></coderef>
            
                        <coderef file="c:\syncfusion\essential suite\tools\samples\quick start\MaskedEditDemo\VB\MainForm.vb" name="MaskedEditBox InitializeComponent" lang="VB"><code lang="VB">
                       ' InitializeComponent
                       ' Create the Masked edit box control:
                       Me.maskedEditBox1 = New MaskedEditBox()
                       ' Specifies if the prompt character can be entered:
                       Me.maskedEditBox1.AllowPrompt = False
                       ' The mask string:
                       Me.maskedEditBox1.Mask = "&gt;?&lt;????????????"
                       ' The max length is set based on the mask:
                       Me.maskedEditBox1.MaxLength = 13
                       ' The clip mode specifies if the literals are included:
                       Me.maskedEditBox1.ClipMode = ClipModes.IncludeLiterals
                       ' The date time format:
                       Me.maskedEditBox1.TimeSeparator = Microsoft.VisualBasic.ChrW(58)
                       Me.maskedEditBox1.DateSeparator = Microsoft.VisualBasic.ChrW(45)
                       ' The number format:
                       Me.maskedEditBox1.DecimalSeparator = Microsoft.VisualBasic.ChrW(46)
                       Me.maskedEditBox1.ThousandSeparator = Microsoft.VisualBasic.ChrW(44)
                       ' Add the MaskedEditBox control to the form:
                       Me.Controls.Add(Me.maskedEditBox1)</code></coderef>
            </example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.m_bModified">
            <summary>
            Indicates whether TextBox content is modified, when Mask is used.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.maskString">
            <summary>
            The mask string that specifies the mask behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.maskDisplay">
            <summary>
            The mask string to be displayed in the masked edit textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.displayString">
            <summary>
            The display string with the masks replaced.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.promptCharacterInt">
            <summary>
            The prompt character.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.passivePromptCharacterInt">
            <summary>
            The prompt character when the control is in passive mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.paddingCharacterInt">
            <summary>
            The padding character.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.undoBufferText">
            <summary>
            String for holding undo buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.redoBufferText">
            <summary>
            String for holding redo buffer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.insertMode">
            <summary>
            The insert mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.allowPrompt">
            <summary>
            Indicates whether the prompt character can input in a mask.
            position
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.maskList">
            <summary>
            The static internal list of mask characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.specialMasks">
            <summary>
            Used internally for holding the special masks that don't take up a 
            mask position in the string.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.casingNormalize">
            <summary>
            How to apply case sensitivity.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.numberFormatInfoObject">
            <summary>
            NumberFormatInfo object for handling globalization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.dateTimeFormatInfoObject">
            <summary>
            DateFormatInfo object for handling globalization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.usageMode">
            <summary>
            The usage mode for the MaskedEditBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.focusClick">
            <summary>
            Indicaqtes whether the control has been clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.maxValue">
            <summary>
            The maximum value that the control can take.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.minValue">
            <summary>
            The minimum value that the control can take.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.internalTextChange">
            <summary>
            Internal variable to track if the control is setting the Text property
            to a different value internally. In this case, the TextChanged event will
            not be raised. This solves the problem with the TextChanged event being 
            fired even when the user has not made any changes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.initText">
            <summary>
            The text that will be used to initailize the MaskedEdit.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.initMask">
            <summary>
            The mask string for initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.initMaxLength">
            <summary>
            The MaxLength for initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.initDateSeparator">
            <summary>
            Date separator value set during initialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.internalDisplayString">
            <summary>
            Used to differentiate when the actual display string is different
            from the internal display string (primarily because the prompt character
            can be set to NULL).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.listDisplayToInternalString">
            <summary>
            SortedList with mappings of literal and mask characters between display
            and internal strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.m_bSequentially">
            <summary>
            Indicating whether the control use sequentially display mask's characters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.adjustedSelectionLength">
            <summary>
            Used whenever the NULL character is the PromptCharacter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.adjustedSelectionStart">
            <summary>
            Used whenever the NULL character is the PromptCharacter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.lastUsedPromptChar">
            <summary>
            Internally holds the last used prompt character.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.internalState">
            <summary>
            Manages the state of the MaskedEditBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.clipMode">
            <summary>
            The ClipMode to use when returning the contents of the textbox
            (with or without literals).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.maskOffset">
            <summary>
            The integer value to offset the mask characters by.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.editMenu">
            <summary>
            The context menu for the textbox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miUndo">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miCut">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miCopy">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miPaste">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miDelete">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.miSelectAll">
            <summary>
            Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.useLocaleDefault">
            <summary>
            Indicates whether the locale default values have to be used for the
            NumberFormatInfo object.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.dataGroups">
            <summary>
            The data groups collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.internalDataGroups">
            <summary>
            The internal data groups collection.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.selectedCulture">
            <summary>
            The currently selected culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.specialCultureValue">
            <summary>
            Modifier for the culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.rightToLeftCultures">
            <summary>
            List of cultures that we consider to be RightToLeft.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.useUserOverride">
            <summary>
            Indicates whether the UseUserOverride value is to be set when creating
            the CultureInfo.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.hasFocus">
            <summary>
            Use this to check that the Focused property doesn't get
            set when we handle OnEnter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.returnActualText">
            <summary>
            Internal bool to tell the FormattedText method to return just the Text without
            any padding. This is used when there is a NULL prompt as the base.Text call fails
            when the Text property returns a value longer (?) than the one being set.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.m_positionAt">
            <summary>
            Indicates whether the cursor is to be positioned near the decimal
            when the control receives focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.customFilledPositions">
            <summary>
            Hashtable to hold positions.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.supressKeyPress">
            <summary>
            To enable KeyPress and KeyDown events to be handled 
            normally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.pullCharOnDelete">
            <summary>
            Pulls the Character on the next data position on delete, pays caution to the mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.inputMode">
            <summary>
            Input mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBox.initCulture">
            <summary>
            Support for culture initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RaiseValidationError(System.String,System.Int32)">
            <summary>
            This method raises the ValidationError event.
            </summary>
            <param name="invalidText">The text that was input.</param>
            <param name="startPosition">The start position of the error.</param>
            <remarks>
            See the <see cref="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnValidationError(Syncfusion.Windows.Forms.Tools.ValidationErrorArgs)"/> method for more information.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RaiseMaskSatisfied">
            <summary>
            This method raises the MaskSatisfied event.
            </summary>
            <remarks>
            See the <see cref="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnMaskSatisfied(System.EventArgs)"/> method for more information.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnValidationError(Syncfusion.Windows.Forms.Tools.ValidationErrorArgs)">
            <summary>
            Invokes the ValidationError event.
            <param name="args">A ValidationErrorEventArgs that contains the event data.</param>
            <remarks>
            The OnValidationError method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors: When overriding OnValidationError in a derived
            class, be sure to call the base class's OnValidationError method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnMaskSatisfied(System.EventArgs)">
            <summary>
            Invokes the MaskSatisfied event.
            <param name="args">An EventArgs that contains the event data.</param>
            <remarks>
            The OnMaskSatisfied method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.
            
            <note type="note">Inheritors: When overriding OnMaskSatisfied in a derived
            class, be sure to call the base class's OnMaskSatisfied method so that
            registered delegates receive the event.</note>
            
            </remarks>
            </summary>		
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.#ctor">
            <summary>
            Creates an object of type MaskedEditBox and initializes it.
            </summary>
            <remarks>
            The default Mask is initialized to an empty string and this will
            result in the MaskedEditBox acting the same as a text box initially.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.EndInit">
            <summary>
            Signals the object that the initialization is completed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.#cctor">
            <summary>
            Static constructor for initialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InitializeContextMenu">
            <summary>
            Initializes the context menu.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetMaskedEditState(Syncfusion.Windows.Forms.Tools.MaskedEditState)">
            <summary>
            Sets the internal state of the control.
            </summary>
            <param name="newState">The new state of the control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetMaskedEditState(Syncfusion.Windows.Forms.Tools.MaskedEditState,System.Boolean)">
            <summary>
            Sets the internal state of the control.
            </summary>
            <param name="newState">The new state of the control.</param>
            <param name="updateDisplay">Indicates whether the display is to be updated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleContextMenuPopup(System.Object,System.EventArgs)">
            <summary>
            Handles the popup menu.
            </summary>
            <param name="sender">The context menu.</param>
            <param name="ea">The event information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuUndoClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Undo menu click.
            </summary>
            <param name="sender">The undo menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuCutClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Cut menu.
            </summary>
            <param name="sender">Cut menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuCopyClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Copy menu.
            </summary>
            <param name="sender">Copy menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuPasteClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Paste menu.
            </summary>
            <param name="sender">Paste menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuDeleteClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Delete menu.
            </summary>
            <param name="sender">Delete menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleMenuSelectAllClick(System.Object,System.EventArgs)">
            <summary>
            Handles the Select All menu.
            </summary>
            <param name="sender">Select All menu.</param>
            <param name="ea">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InitializeMaskEdit">
            <summary>
            Invoke to initialize the masked edit control after 
            setting its properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetLocalizedValue(Syncfusion.Windows.Forms.Tools.MaskCharTypes)">
            <summary>
            Internal helper function for getting mask characters
            that rely on globalized settings.
            </summary>
            <param name="type">The MaskCharType value.</param>
            <returns>Char representing the globalized value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetLastMaskCharacter">
            <summary>
            Returns the last mask character.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetMaxLength(System.Int32)">
            <summary>
            Internal helper function to set the maximum length.
            </summary>
            <param name="maskLength">The new mask length.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args">The argument for the PropertyChanged event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides and prevents the event from being raised if the control is
            being initialized.
            </summary>
            <param name="arg">The event args.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetClipText(System.String,System.Int32,System.Int32)">
            <summary>
            Returns the clip text.
            </summary>
            <param name="startPosition">The starting position for the selection.</param>
            <param name="endPosition">The end position for the selection.</param>
            <returns>Returns the clip text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDataGroupValue(System.String,Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32)">
            <summary>
            Overloaded. Returns the value of a DataGroup as a string.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDataGroupValue(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32)">
            <summary>
            Returns the value of a DataGroup as a string.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDataGroupValue(System.String,Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32,Syncfusion.Windows.Forms.Tools.ClipModes)">
            <summary>
            Returns the value for the DataGroup.
            </summary>
            <param name="currentDataGroups">The current data group collection.</param>
            <param name="index">The index of the DataGroup.</param>
            <param name="clipMode">The current clipmode.</param>
            <returns>A string with the value of the DataGroup.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDataGroupText(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32,System.String)">
            <summary>
            Returns the text for the DataGroup.
            </summary>
            <param name="currentDataGroups">The current data group collection.</param>
            <param name="index">The index of the DataGroup.</param>
            <param name="fullText">The full text.</param>
            <returns>The text for the DataGroup.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDataGroupOffset(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32)">
            <summary>
            Returns the offset for the DataGroup from the beginning of the string.
            </summary>
            <param name="currentDataGroups">The current data group collection.</param>
            <param name="groupIndex">The index of the DataGroup.</param>
            <returns>The offset for the current DataGroup.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeThousandSeparator">
            <summary>
            Indicates whether the ThousandSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns>True if the </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetThousandSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeDateSeparator">
            <summary>
            Indicates whether the DateSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetDateSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeTimeSeparator">
            <summary>
            Indicates whether the TimeSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns> </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetTimeSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeDecimalSeparator">
            <summary>
            Indicates whether the DecimalSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns>True if the </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetDecimalSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.IsMaskActive">
            <summary>
            If the mask string is empty, we do not apply any rules.
            This helper function checks whether the mask is active.
            </summary>
            <returns>True if the mask is active; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeMaxValue">
            <summary>
            Indicates whether the MaxValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Decimal.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetMaxValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetBackColor">
            <summary>
            Resets BackColor of the control to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ShouldSerializeMinValue">
            <summary>
            Indicates whether the MinValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Decimal.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ResetMinValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Reset">
            <summary>
            Resets the MaskedEditBox control to its initial position.
            </summary>
            <remarks>
            Invoke this method when you need to reinitialize the MaskededitBox.
            The Mask property will not be lost because of calling this method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RefreshDisplay">
            <summary>
            Refreshes the display based on the current display
            characteristics. 
            </summary>
            <remarks>
            Changes made to the Mask property or any other property that affects the
            display of the formatted string will be picked up by invoking this method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetValidMappedPosition(System.Int32)">
            <summary>
            Returns the valid mapped position.
            </summary>
            <param name="positionInFullString">The index in the full string.</param>
            <returns>The valid mapped position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleCharDelete(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Handles character deletion as MS MaskedTextBox.
            </summary>
            <param name="currentDisplayText"></param>
            <param name="startPosition"></param>
            <param name="endPosition"></param>
            <param name="insertMode"></param>
            <param name="ignorePromptCharacters"></param>
            <param name="backSpace"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetAdjustedPositionForNullPrompt(System.Int32)">
            <summary>
            Returns the adjusted position when there is a NULL prompt.
            </summary>
            <param name="currentSelectionPos">The current position.</param>
            <returns>The adjusted position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.IsLiteralCharacter(System.Char)">
            <summary>
            Indicates whether the in parameter is a literal character.
            </summary>
            <param name="charIn">The character to check.</param>
            <returns>True if the input character is a mask character.</returns>
            <remarks>
            All characters that are accepted as input are subjected to
            this check.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetMaskCharValue(System.Char)">
            <summary>
            Looks up the mask character in the mask list and returns the
            index so that the masking logic knows what to do with it.
            </summary>
            <param name="charIn">The character to be identified.</param>
            <returns>The index to the mask in the MaskedEditBox.maskList collection.</returns>
            <remarks>
            This is a helper method that takes a character and looks up the character
            in the list of recognized mask characters and returns the result.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnEnter(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/> method.
            </summary>
            <param name="arg">The event data.</param>
            <remarks>
            This method is overriden in order to refresh the display between the passive
            and active prompt characters.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnClick(System.EventArgs)">
            <summary>
            Overrides the OnClick method.
            </summary>
            <remarks>
            Position the cursor when the user clicks inside the control.
            </remarks>
            <param name="arg">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnLeave(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/> method.
            </summary>
            <param name="arg">The event data.</param>
            <remarks>
            This method is overriden in order to refresh the display between the passive
            and active prompt characters.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplyRightToLeft">
            <summary>
            Applies RightToLeft based on the current culture.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ExtractMaskValues(System.String)">
            <summary>
            Extracts the mask values from the mask string that was input by the user and initializes
            the internal variables that will be used in applying the mask logic.
            </summary>
            <param name="maskIn">The mask string input by the user.</param>
            <returns>The extracted mask string.</returns>]
            <remarks>
            The mask string is split up into three different types of
            characters for applying the masking logic - they are literals, special
            masks (&gt; and &lt;) and other masks.
            <para>
            &gt; and &lt; are treated as special masks because they do not occupy a
            position by themselves but dictate the formatting of other adjoining characters.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RefreshPromptCharacter">
            <summary>
            Refreshes the display with the current prompt character. 
            </summary>
            <remarks>
            This method changes the display based on the new prompt character by replacing
            the old prompt character with the new prompt character.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplyMaskLogic(System.String,System.String@)">
            <summary>
            Applies the masking rules and prepares the display string 
            based on the mask string.
            </summary>
            <param name="maskStringIn">The mask string.</param>
            <param name="displayString">The display string.</param>
            <remarks>
            You will not need to call this method directly. It is invoked by
            by methods that need to refresh the display.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MoveCursorPosition(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the cursor position depending on the action.
            </summary>
            <param name="currentPosition">The current position of the cursor.</param>
            <param name="direction">The direction which the cursor needs to be moved.</param>
            <param name="selected">Boolean value specifying if there is selected text.</param>
            <returns>The position of the cursor after setting it.</returns>
            <remarks>
            The MaskedEditBox control automatically adjusts its cursor position when
            there is a change in the content of the text box.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetNextDataPos(System.Int32)">
            <summary>
            This method is a helper method for getting the next available data entry
            position.
            </summary>
            <param name="currentPosition">The current position. Checks from here onward.</param>
            <returns>Returns the next available position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetFirstPrevDataPos(System.String,System.Int32)">
            <summary>
            Returns the index of the first empty position before the current position. 
            </summary>
            <returns>Index of the first empty position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetPrevDataPos(System.Int32)">
            <summary>
            This method is a helper method for getting the next available data entry position(backward).
            </summary>
            <param name="currentPosition">The current position. Checks from here backward.</param>
            <returns>The next available position(backward).</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetPrevDataPos(System.Int32,System.Boolean)">
            <summary>
            Returns the previous data entry position.
            </summary>
            <param name="currentPosition">The current position.</param>
            <param name="bUnfilled">Indicates whether the new position has to be unfilled.</param>
            <returns>The new position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetSelection(System.Int32,System.Int32)">
            <summary>
            Sets the cursor and also selects text for the specified
            length based on the parameters passed in.
            </summary>
            <param name="startPosition">The beginning position for the selection.</param>
            <param name="selectionLength">The length of the selection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetCurrentPromptCharacter">
            <summary>
            Returns the current PromptCharacter.
            </summary>
            <returns>The current prompt character.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InsertChar(System.Int32,System.Char,System.Boolean)">
            <summary>
            Inserts a new character into the displayed text.
            </summary>
            <param name="startPosition">The start position to insert the character.</param>
            <param name="newChar">The new character to be inserted.</param>
            <param name="updateDisplay">Indicates whether the display is to be updated.</param>
            <returns>The changed text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InsertChar(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Inserts a new character into the displayed text.
            </summary>
            <param name="currentDisplayText">The current display text.</param>
            <param name="startPosition">The start position to insert the character.</param>
            <param name="newChar">The new character to be inserted.</param>
            <param name="updateDisplay">Indicates whether the display is to be updated.</param>
            <returns>The changed text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplySpecialMasks(System.Int32,System.Char)">
            <summary>
            Applies the special masks to the current character - this is for the 
            upper case and lower case masks that are not part of the mask string.
            </summary>
            <param name="currentPosition"></param>
            <param name="currentChar"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleDecimalKey">
            <summary>
            This method is invoked when the decimal key is pressed.
            </summary>
            <returns>True if the key is handled; False otherwise.</returns>
            <remarks>
            The defined behavior for this key is to jump to the position immediately
            after the decimal position.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplyAlignmentToGroups">
            <summary>
            Applies group alignment.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplyAlignmentToGroup(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection,System.Int32)">
            <summary>
            Applies the alignment logic and moves characters within the group if possible.
            In the case that there is a NULL PromptCharacter, the DisplayString should be
            adjusted before invoking this method for aligning. This method will assume that
            the number of characters in the MaskString will be equal to the number of 
            characters in the DisplayString. SpecialMasks will have to be considered separately
            in the case that they exist within a group.
            </summary>
            <param name="currentDataGroups">The current data groups collection.</param>
            <param name="groupIndex">The index of the group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetFirstEmptyPosition(System.Int32)">
            <summary>
            Returns the first empty position.
            </summary>
            <param name="startPosition">The start position.</param>
            <returns>The first empty position.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <summary>
            Intercepts the Key messages.
            </summary>
            <param name="m">The message data.</param>
            <returns>True if the key is handled; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <summary>
            Overrides to suppress KeyPress. Only the KeyPress event is raised - no other
            processing is done.
            </summary>
            <param name="m">The message.</param>
            <returns>True if the message is a KeyPress; otherwise the base class handles this.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RemoveText(System.String,System.Int32,System.Int32)">
            <summary>
            Removes the text selected or specified by the parameters.
            </summary>
            <param name="currentDisplayText">The current string to be modified.</param>
            <param name="startPosition">The start position of the selection.</param>
            <param name="endPosition">The end position of the selection.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RemoveTextWithinGroup(System.String,System.Int32,System.Int32)">
            <summary>
            Removes the text selected or specified by the parameters within a group. In this case, 
            a group is defined as an area separated by a DecimalSeparator, Date Separator or
            Time Separator.
            </summary>
            <param name="currentDisplayText">The current string to be modified.</param>
            <param name="startPosition">The start position of the selection.</param>
            <param name="endPosition">The end position of the selection.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.RemoveText(System.Int32,System.Int32)">
            <summary>
            Removes the selected text.
            </summary>
            <param name="startPosition">The start position of the selection.</param>
            <param name="endPosition">The end position of the selection.</param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleBackspaceKey">
            <summary>
            Indicates whether the backspace key has been pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.AdjustStringAndSelectionForNullPrompt">
            <summary>
            Adjusts the DisplayString for internal manipulations when the PromptCharacter/
            PassivePromptCharacter is NULL.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleDeleteKey">
            <summary>
            Indicates whether the delete key has been pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.HandleCharacterInput(System.Char)">
            <summary>
            Handles a character input. 
            </summary>
            <param name="charInput">The character that was input.</param>
            <returns>True if the character was successfully inserted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ApplyCasing(System.Char,Syncfusion.Windows.Forms.Tools.CasingNormalize)">
            <summary>
            Changes the character case according to the casingType passed in and
            returns the character with the correct casing. Use with the special masks
            for upper case and lower case.
            </summary>
            <param name="currentChar">The current character.</param>
            <param name="casingType">The casing change to be applied.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PositionNearDecimal">
            <summary>
            Positions the cursor next to a decimal separator if present.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PositionAtFirstPos">
            <summary>
            Positions the cursor at the first data position.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.NormalizeCasing(System.Char,Syncfusion.Windows.Forms.Tools.CasingNormalize)">
            <summary>
            Applies the current CharacterCasing settings in effect for this 
            textbox.
            </summary>
            <param name="currentChar">The current character.</param>
            <param name="casingType">The casing change to be applied.</param>
            <returns>The changed character.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnMaskCustomValidate(Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs)">
            <summary>
            Raises the MaskCustomValidate event.
            </summary>
            <param name="args">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.IsCharValid(System.Int32,System.Char)">
            <summary>
            Indicates whether the character is valid for this position based on the
            mask.
            </summary>
            <param name="currentPosition">The current position.</param>
            <param name="currentChar">The current character.</param>
            <returns>True if the character is acceptable; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDecimalValue(System.String)">
            <summary>
            Returns the decimal value of the displayed text.
            </summary>
            <param name="currentDisplayText">The currently displayed text.</param>
            <returns>The decimal value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetNumericText(System.String)">
            <summary>
            Returns the numeric text.
            </summary>
            <param name="currentText">The current text.</param>
            <returns>The numeric text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetExternalText(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets external text from the 
            clipboard to the MaskedEditBox.
            </summary>
            <param name="externalText">The text to be pasted.</param>
            <param name="beginPos">The beginning position.</param>
            <param name="insertMode">Indicates whether the text is to be inserted.</param>
            <param name="ignorePromptCharacters">Indicates whether to ignore prompt characters.</param>
            <returns>True if the text was set successfully; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetPromptCharacter">
            <summary>
            Internal helper for getting the PromptCharacter.
            </summary>
            <returns>The prompt character.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetPassivePromptCharacter">
            <summary>
            Internal helper for getting the PassivePromptCharacter.
            </summary>
            <returns>The passive prompt character.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Undo">
            <summary>
            This method will Undo the previous operation.
            </summary>
            <remarks>
            The MaskedEditBox maintains its own undo mechanism.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Copy">
            <summary>
            Copies the content of the MaskEditBox to the clipboard.
            </summary>
            <remarks>
            The ClipMode property dictates what gets copied.
            For example, if the content of MaskedEditBox is (919)481 1974, the
            following will be the strings copied to the clipboard depending
            on the ClipMode property:
            <para>
            ClipModes.IncludeLiterals - (919)481 1974
            ClipModes.ExcludeLiterals - 9194811974
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Paste">
            <summary>
            Handles the pasting of data from the clipboard into the
            MaskededitBox control.
            </summary>
            <remarks>
            The method takes into account the nature of the text in the clipboard
            and tries to normalize the text. It will accomodate as much as possible
            depending on the current length of the text and the total length allowed.
            If text with acceptable and unacceptable characters are found in the
            clipboard, the unacceptable data is omitted when the data is inserted.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Cut">
            <summary>
            Cuts data from the MaskedEditBox and pastes it into
            the clipboard.
            </summary>
            <remarks>
            The MaskedEditBox deletes the selected text in this case and then
            copies the deleted text to the clipboard. The ClipMode property dictates
            whether the literal characters are copied to the clipboard or not.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Clear">
            <summary>
            Clears the mask edit back to its initial state.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetInitialText(System.String)">
            <summary>
            Sets the text property of the MaskedEditBox without raising the
            TextChanged event. 
            </summary>
            <param name="newText">The new text string.</param>
            <remarks>
            This method is provided as an alternative to being able to
            set the Text property through the designer.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SetBaseText(System.String)">
            <summary>
            Internal helper function to directly set the base control Text property.
            </summary>
            <param name="val">The new value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/> event when there is unacceptable
            text in the control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Validate(System.Boolean)">
            <summary>
            Validates the control.
            </summary>
            <param name="bRaiseValidationError">Specifies if the validation error is to be raised.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetDisplayStringForNullPrompt(System.String)">
            <summary>
            Returns the display string when the current prompt character is NULL.
            </summary>
            <param name="internalText">The internal text.</param>
            <returns>The new display string.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBox.GetClipLenght(System.String)">
            <summary>
            Gets length of the clean text, text without <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PaddingCharacter"/>, <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PassivePromptCharacter"/>
            and <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PromptCharacter"/> characters.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError">
            <summary>
            ValidationError event will be raised when an unacceptable
            character is encountered as input.
            </summary>
            <remarks>
            This event can be handled and you can do your processing based
            on the information provided. The ValidationErrorEventArgs object
            will provide the invalid text that was input and also the position
            within that text where the error occurred.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MaskSatisfied">
            <summary>
            MaskSatisfied event will be raised when the required fields in 
            a mask have been satisfied after new text has been entered / the
            text changes.
            </summary>
            <remarks>
            This event will be raised only when there are entries that 
            require input have been filled. This even can be used to move
            to another control after the mask rules have been satisfied.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MaskCustomValidate">
            <summary>
            Handle this event to provide custom behavior to any of the 
            mask characters.
            </summary>
            This event is raised for each valid mask position that is
            being filled. In the event that the event is not handled (by
            setting the Handled property of the event information), the 
            normal logic will be used for validating input.
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PropertyChanged">
            <summary>
            Property changed event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Modified">
            <summary>
            Indicates whether TextBox content is modified, when Mask is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Mask">
            <summary>
            Use this property to define the mask string for the MaskedEditBox
            control.
            </summary>
            <remarks>
            <para>
            The control can
            distinguish between numeric and alphabetic characters for
            validation, but cannot check for valid content, such as the
            correct month or time of day.
            </para>
            <list type="table">
            <listheader><term>Mask</term><description>Description</description></listheader>
            <item><term>Empty String</term><description>(Default) No mask. Acts like a text box.</description></item>
            <item><term>##-???-##</term><description>Medium date (US). Example: 17-Apr-02</description></item>
            <item><term>##-##-##</term><description>Short date (US). Example: 04-17-02</description></item>
            <item><term>##:## ??</term><description>Medium time. Example: 10:14 PM</description></item>
            <item><term>##:##</term><description>Short time. Example: 22:14</description></item>
            </list>
            <para>
            The input mask can consist of the following characters.
            </para>
            <para>
            <list type="table">
            <listheader><term>Mask character</term><description>Description</description></listheader>
            <item><term>#</term><description>Digit placeholder.</description></item>
            <item><term>.</term><description>Decimal placeholder. The actual character used is the one specified as the decimal placeholder in your international settings. This character is treated as a literal for masking purposes.</description></item>
            <item><term>,</term><description>Thousands separator. The actual character used is the one specified as the thousands separator in your international settings. This character is treated as a literal for masking purposes.</description></item>
            <item><term>:</term><description>Time separator. The actual character used is the one specified as the time separator in your international settings. This character is treated as a literal for masking purposes.</description></item>
            <item><term>/</term><description>Date separator. The actual character used is the one specified as the date separator in your international settings. This character is treated as a literal for masking purposes.</description></item>
            <item><term>\</term><description>Treat the next character in the mask string as a literal. This allows you to include the '#', &amp;, 'A', and '?' characters in the mask. This character is treated as a literal for masking purposes.</description></item>
            <item><term>&amp;</term><description>Character placeholder. Valid values for this placeholder are ANSI characters in the following ranges: 32-126 and 128-255.</description></item>
            <item><term>&gt;</term><description>Convert all the characters that follow to uppercase.</description></item>
            <item><term>&lt;</term><description>Convert all the characters that follow to lowercase.</description></item>
            <item><term>A</term><description>Alphanumeric character placeholder (entry required). For example: a,  z, A  Z, 0, or  9.</description></item>
            <item><term>a</term><description>Alphanumeric character placeholder (entry optional).</description></item>
            <item><term>9</term><description>Digit placeholder (entry optional). For example: 0,  9.</description></item>
            <item><term>C</term><description>Character or space placeholder (entry optional). This operates exactly like the &amp; placeholder, and ensures compatibility with Microsoft Access.</description></item>
            <item><term>?</term><description>Letter placeholder. For example: a  z or A  Z.</description></item>
            <item><term>Literal</term><description>All other symbols are displayed as literals; that is, as themselves.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PositionAtDecimal">
            <summary>
            Indicates whether the cursor is to be positioned at the decimal separator (if any) when the
            control receives focus.
            </summary>
            <remarks>The value will be False by default.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MaxLength">
            <summary>
            Adjusts the MaxLength property based on the Mask string.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DisplayString">
            <summary>
            Gets / sets the display string.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PromptCharacter">
            <summary>
            Gets / sets the character that will be used instead of mask characters when
            the mask position has not been filled.
            </summary>
            <remarks>
            The default value for the prompt character is set to '-'.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PromptCharacterInt">
            <summary>
            Gets / sets the integer version of the PromptCharacter.
            </summary>
            <remarks>
            This will not be visible through the designer. Can be set through code.
            This will be persisted by the designer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PaddingCharacter">
            <summary>
            Gets / sets the character that will be used instead of mask characters when
            the mask position has not been filled when the Text property is accessed.
            </summary>
            <remarks>
            The default value for the prompt character is set to '-'.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PaddingCharacterInt">
            <summary>
            Gets / sets the integer version of the PaddingCharacter.
            </summary>
            <remarks>
            This will not be visible through the designer. Can be set through code.
            This will be persisted by the designer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UsageMode">
            <summary>
            Gets / sets the usage mode for the MaskedEditBox.
            </summary>
            <remarks>
            The UsageMode defines the behavior of the MaskedEditBox 
            to accomodate specialized input for numbers.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.InputMode">
            <summary>
            Gets / sets the input mode of the 
            control.
            </summary>
            <remarks>
            The InputMode defines the behavior of the MaskedEditBox 
            to accommodate specialized input for numbers etc.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PullCharOnDelete">
            <summary>
            Pulls the next data position on delete, pays attention to the mask.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Culture">
            <summary>
            Gets / sets the culture that is to be used for formatting the currency display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.SpecialCultureValue">
            <summary>
            Gets / sets the mode for the cultures.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PassivePromptCharacter">
            <summary>
            Gets / sets the character that will be used instead of mask characters when
            the mask position has not been filled (when the control does not have the focus).
            </summary>
            <remarks>
            The default value for the prompt character is set to '\0'.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.PassivePromptCharacterInt">
            <summary>
            Gets / sets the integer version of the PassivePromptCharacter.
            </summary>
            <remarks>
            This will not be visible through the designer. Can be set through code.
            This will be persisted by the designer.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ClipText">
            <summary>
            Returns the text in the MaskedEditBox control, excluding literal 
            characters of the input mask. 
            </summary>
            <remarks>
            For example if the content of the MaskedEditBox is 
            99-222-9999, the mask is ##-###-###, 
            the ClipText will return 992229999.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DataGroups">
            <summary>
            The MaskedEditBox can be defined to hold multiple data groups.
            </summary>
            <remarks>
            The DataGroups can be added through the designer. DataGroups are
            defined by the length of the group. The value of the group can be
            accessed by the index of the group or through the name of the group.
            <para>
            A MaskedEditBox with a mask (###) ###-#### Ext 9999 representing a 
            US phone number and extension can be defined to have 3 groups - 
            representing the AreaCode, PhoneNumber, and Extension. The groups would
            have lengths of 5, 11 and 9 in that order.
            </para>
            <para>
            The DataGroup's value is affected by the <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ClipMode"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.FormattedText">
            <summary>
            Returns the formatted text with the formatting.
            </summary>
            <remarks>
            For example, if the text in the MaskedEditBox is (999)999-9999, the
            FormattedText property will give (999)999-9999.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ClipMode">
            <summary>
            Gets / sets the format of the text that will be returned by the MaskedEditBox
            control. The nature of the formatting is set through the <see cref="T:Syncfusion.Windows.Forms.Tools.ClipModes"/> type.
            </summary>
            <remarks>
            See the <see cref="T:Syncfusion.Windows.Forms.Tools.ClipModes"/> type for the possible values and more information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ThousandSeparator">
            <summary>
            Gets / sets the character to use when a thousands separator position is specified.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DateSeparator">
            <summary>
            Gets / sets the character to use when a date separator position is specified.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.DateTimeFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.TimeSeparator">
            <summary>
            Gets / sets the character to use when a time separator position is specified.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.DateTimeFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UseLocaleDefault">
            <summary>
            Indicates whether the individual globalization property changes
            are to be ignored. If set to True, the individual values will
            be ignored and the locale default will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DecimalSeparator">
            <summary>
            Gets / sets the character to use when a decimal separator position is specified.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.NumberFormatInfoObject">
            <summary>
            Gets / sets the <see cref="T:System.Globalization.NumberFormatInfo"/> provides the 
            necessary globalization information for the properties that rely on these
            settings.
            </summary>
            <remarks>
            This value is initially set from the <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo"/> 
            and can be changed based on your requirements.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DateTimeFormatInfoObject">
            <summary>
            Gets / sets the <see cref="T:System.Globalization.DateTimeFormatInfo"/> provides the 
            necessary globalization information for the properties that rely on the datetime
            settings.
            </summary>
            <remarks>
            This value is initially set from the <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo"/> 
            and can be changed based on your requirements.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.AllowPrompt">
            <summary>
            Indicates whether the prompt character can be allowed to be entered as an 
            input character.
            </summary>
            <remarks>
            Set the value to True if the prompt character can be entered by user. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.CanUndo">
            <summary>
            Indicates whether the Undo operation is possible at this time.
            </summary>
            <remarks>
            The MaskedEditBox maintains its own undo mechanism and hence
            needs to implement this method to be compatible with the Undo
            mechanism.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MaxValue">
            <summary>
            Gets / sets the Maximum Value that can be set through the MaskedEditBox.
            </summary>
            <remarks>
            This value is enforced only if the <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UsageMode"/> property
            is set to <see cref="F:Syncfusion.Windows.Forms.Tools.MaskedUsageMode.Numeric"/>. The mask string 
            should be set to contain numeric characters. All literal characters
            will be ignored while computing the value of the contents of the
            MaskedEditBox. The default value is set to <see cref="F:System.Decimal.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.MinValue">
            <summary>
            Gets / sets the Minimum Value that can be set through the MaskedEditBox.
            </summary>
            <remarks>
            This value is enforced only if the <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UsageMode"/> property
            is set to <see cref="F:Syncfusion.Windows.Forms.Tools.MaskedUsageMode.Numeric"/>. The mask string 
            should be set to contain numeric characters. All literal characters
            will be ignored while computing the value of the contents of the
            MaskedEditBox. The default value is set to <see cref="F:System.Decimal.MaxValue"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.AdjustedSelectionStart">
            <summary>
            Gets / sets the adjusted SelectionStart when the PromptCharacter or PassivePromptCharacter
            is NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.AdjustedSelectionLength">
            <summary>
            Gets / sets the adjusted SelectionLength when the PromptCharacter or PassivePromptCharacter
            is NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Sequentially">
            <summary>
            Gets or sets a value indicating whether the control use sequentially display mask's characters.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.LastUsedPromptChar">
            <summary>
            Use this everywhere except in RefreshPromptCharacter.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Text">
            <summary>
            Overrides the <see cref="P:System.Windows.Forms.TextBox.Text"/> property.
            </summary>
            <remarks>
            This method is overriden in order to intercept and normalize 
            external text that is not in a format acceptable to the 
            MaskedEditBox.
            This property value will not be persisted in the designer. Set the Text property
            after initialization through code or use the SetInitialText method to set the
            value without raising the TextChanged event.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UseUserOverride">
            <summary>
            The UseUserOverride parameter for CultureInfo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Multiline">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Multiline"/> property. The MaskedEditBox does
            not support multiline controls.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.WordWrap">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.WordWrap"/>property. The MaskedEditBox does
            not support multiline controls.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ScrollBars">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ScrollBars"/>property. The MaskedEditBox does
            not support multiline controls.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Lines">
            <summary>
            See <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.Lines"/> property. The MaskedEditBox does
            not support multiline controls.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.m_MaskedEditBox">
            <summary>
            MaskedEditBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.MaskedEditBox)">
            <summary>
            Constructor
            </summary>
            <param name="maskedEditBox">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditBoxAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs">
            <summary>
            This class is used to send event data for a <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/>
            event.
            </summary>
            <remarks>
            The required pieces of information for the <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/> event 
            are the invalid text and the position of the error text within the invalid text.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs.invalidText">
            <summary>
            The invalid text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs.startPosition">
            <summary>
            The start position of the error.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates an object of type ValidationErrorArgs.
            </summary>
            <param name="invalidText">The invalid text that would have resulted if this error had not been intercepted.</param>
            <param name="startPosition">The index position with the invalid text where the change occurred.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs.InvalidText">
            <summary>
            Returns the invalid text as it would have been if the error had not intercepted it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskSatisfiedEventArgs.StartPosition">
            <summary>
            Returns the location of the invalid input within the
            invalid text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo">
            <summary>
            The DataGroup that will specify the behavior and formatting of a 
            DataGroup within the MaskedEditBox control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.dataGroupAlignment">
            <summary>
            The text of the column header.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.dataGroupSize">
            <summary>
            The minimum width for the column header.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.dataGroupName">
            <summary>
            The name of the Datagroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.dataGroupValue">
            <summary>
            The string value of the DataGroup.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.dataGroups">
            <summary>
            Collection of datagroups.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.#ctor">
            <summary>
            Overloaded. Initializes an object of type MaskedEditDataGroupInfo. 
            </summary>
            <remarks>
            The MaskedEditDataGroupInfo class holds the information needed to intialize 
            a data group for the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/> control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.#ctor(System.String,System.Int32,Syncfusion.Windows.Forms.Tools.MaskGroupAlignment)">
            <summary>
            Initializes an object of type MaskedEditDataGroupInfo.
            </summary>
            <param name="dataGroupName">The name of the DataGroup.</param>
            <param name="dataGroupSize">The DataGroup size.</param>
            <param name="dataGroupAlignment">The DataGroup alignment.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.DataGroupsCollection">
            <summary>
            Gets / sets the collection of datagroups.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.PropertyChanged">
            <summary>
            PropertyChanged event handler.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.DataGroupSize">
            <summary>
            Gets / sets the size of the DataGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.DataGroupValue">
            <summary>
            Returns the value of the DataGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.DataGroupName">
            <summary>
            Gets / sets the name of the DataGroup.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo.DataGroupAlignment">
            <summary>
            Gets / sets the alignment of the DataGroup.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection">
            <summary>
            Collection of <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> objects. Used in the
            <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.DataGroups"/> property of the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/>
            control.
            </summary>
            <remarks>The MaskedEditDataGroupInfoCollection is a set of objects 
            each of which hold information required to create a data group in a 
            <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/>.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.GetIndexByName(System.String)">
            <summary>
            Returns the index based on the name.
            </summary>
            <param name="groupName">The name of the data group.</param>
            <returns>Index value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Insert(System.Int32,Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo)">
            <summary>
            Inserts the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> into the collection 
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which the item is to be inserted.</param>
            <param name="item">The <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Overrides OnInsert.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Overrides OnInsertComplete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.#ctor(Syncfusion.Windows.Forms.Tools.MaskedEditBox)">
            <summary>
            Overloaded. Creates an instance of the MaskedEditDataGroupInfoCollection class.
            </summary>
            <param name="maskedEdit">The <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/> control that
            contains this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.#ctor">
            <summary>
            Creates an instance of the MaskedEditDataGroupInfoCollection class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Add(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo)">
            <summary>
            Adds one object to the collection.
            </summary>
            <param name="dataGroup">The <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> object to be added.</param>
            <returns>The count of the list items.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Remove(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo)">
            <summary>
            Removes <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> objects from the
            collection. 
            </summary>
            <param name="dataGroup">The MaskedEditDataGroupInfo object to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Contains(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo)">
            <summary>
            Indicates whether the collection contains a specific 
            MaskedEditDataGroupInfo entry.
            </summary>
            <param name="dataGroup">The MaskedEditDataGroupInfo to locate in the DataGroups.</param>
            <returns>True if the MaskedEditDataGroupInfo entry is found in the collection; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.CopyTo(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo[],System.Int32)">
            <summary>
            Copies all the elements of the current one-dimensional array to the specified one-dimensional array 
            starting at the specified destination array index.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.GetDataGroupValue(Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo)">
            <summary>
            Returns the value of the DataGroup.
            </summary>
            <returns>String value of the DataGroup.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Owner">
            <summary>
            Gets / sets the owner of this collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Item(System.Int32)">
            <summary>
            Gets / sets the Indexer property for the MaskedEditDataGroupInfoCollection class.
            </summary>
            <remarks>Get the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> object based on the index
            in the collection.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfoCollection.Item(System.String)">
            <summary>
            Gets / sets the Indexer property for the MaskedEditDataGroupInfoCollection class.
            </summary>
            <remarks>Get the <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditDataGroupInfo"/> object based on the index
            in the collection.</remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs">
            <summary>
            Provides data for an event that can be handled by a subscriber and overrides the events default behavior.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.handled">
            <summary>
            Feedback.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.currentIndex">
            <summary>
            Values based on which event handler can set return values.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.#ctor">
            <summary>
            Overloaded. Initializes a new instance of the MaskCustomValidationArgs class with the Handled property set to False.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SyncfusionHandledEventArgs class with the Handled and Accepted
            properties set to the given value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.#ctor(System.Int32,System.Char,System.Char)">
            <summary>
            
            </summary>
            <param name="currentIndex"></param>
            <param name="currentCharacter"></param>
            <param name="currentMaskCharacter"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.Handled">
            <summary>
            Indicates whether the event has been handled and no further processing of the event should happen.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.Accepted">
            <summary>
            Indicates whether the event has been handled and no further processing of the event should happen.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.CurrentIndex">
            <summary>
            Returns the current position. It will be a valid mask position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.CurrentCharacter">
            <summary>
            Returns the current character.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs.CurrentMaskCharacter">
            <summary>
            Returns the current Mask Character.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskCustomValidateEventHandler">
            <summary>
            Represents a method that handles a <see cref="T:Syncfusion.Windows.Forms.Tools.MaskCustomValidateArgs"/> event of a 
            <see cref="T:Syncfusion.Windows.Forms.Tools.MaskedEditBox"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedEditState">
            <summary>
            Specifies the internal state of the MaskedEditBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditState.NormalState">
            <summary>
            Normal State.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditState.EditState">
            <summary>
            Edit State.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedEditState.None">
            <summary>
            Initial State.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ClipModes">
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ClipModes.IncludeLiterals">
            <summary>
            Include all literals in the data that is
            returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ClipModes.ExcludeLiterals">
            <summary>
            Exclude all literals in the data that is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskInputMode">
            <summary>
            Specifies different modes of input 
            for the MaskedEditBox control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskInputMode.OvertypeOnly">
            <summary>
            In this input mode, all input is entered in Overtype mode.
            The INSERT key will not have any effect in this mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskInputMode.Normal">
            <summary>
            Operates in Insert mode and when the INSERT key is pressed,
            changes to Overtype mode.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskedUsageMode">
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedUsageMode.Normal">
            <summary>
            Treat as a normal masked edit that does not have any
            special constraints with respect to the content.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskedUsageMode.Numeric">
            <summary>
            Treat the contents of the MaskedEditBox as numeric.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CasingNormalize">
            <summary>
            Enumeration for the kind of case sensitivity to be applied
            at a particular point of data input.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CasingNormalize.changeToBoth">
            <summary>
            Convert to lower case or upper case depending on the mask.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CasingNormalize.changeToLowerOnly">
            <summary>
            Change to lower case only.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CasingNormalize.changeToUpperOnly">
            <summary>
            Change to upper case only.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskCharTypes">
            <summary>
            The various valid masks supported by the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharDigitRequired">
            <summary>
            Digit placeholder '#'. Numeric and white space
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharDecimal">
            <summary>
            Decimal placeholder '.' The actual character used is the 
            one specified as the decimal placeholder in your 
            international settings. This character is treated 
            as a literal for masking purposes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharThousands">
            <summary>
            Thousands separator ',' The actual character used is the 
            one specified as the thousands separator in your 
            international settings. This character is treated as a 
            literal for masking purposes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharTimeSep">
            <summary>
            Time separator ':' The actual character used is the one 
            specified as the time separator in your international 
            settings. This character is treated as a literal for masking 
            purposes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharDateSep">
            <summary>
            Date separator '/' The actual character used is the one 
            specified as the date separator in your international 
            settings. This character is treated as a literal for 
            masking purposes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharEscape">
            <summary>
            Escape '\' Treat the next character in the mask string as a literal. 
            This allows you to include the '#', &amp;, 'A', and '?' 
            characters in the mask. This character is treated as a 
            literal for masking purposes.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharCharacterRequired">
            <summary>
            Character placeholder &amp; Valid values for this placeholder 
            are ANSI characters in the following ranges: 32-126 and 128-255.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharUppercase">
            <summary>
            Uppercase &gt; Convert all the characters that follow to uppercase.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharLowercase">
            <summary>
            Lowercase &lt; Convert all the characters that follow to lowercase.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharAplhaNumericRequired">
            <summary>
            Alphanumeric character placeholder 'A'
            (entry required). For example: a  z, A  Z, or 0  9.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharAlphaNumericOptional">
            <summary>
            Alphanumeric character placeholder (entry optional)'a'
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharDigitOptional">
            <summary>
            Digit placeholder (entry optional). For example: 0  9. '9'
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharCharacterOptional">
            <summary>
            Character or space placeholder (entry optional) 'C'
            This operates exactly like the &amp; placeholder, and 
            ensures compatibility with Microsoft Access.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharLetterRequired">
            <summary>
            Letter placeholder. For example: a  z or A  Z '?'
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharLetterOptional">
            <summary>
            Letter placeholder. For example: a  z or A  Z 'y'
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharHexaDecimalOptional">
            <summary>
            Hexadecimal placeholder. For example: A9 EF
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskCharTypes.maskCharHexaDecimalRequired">
            <summary>
            Hexadecimal placeholder. For example: A9EF
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PassiveDisplayMode">
            <summary>
            Provides the list of modes in which the MaskedEditBox can operate
            when it does not have the focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PassiveDisplayMode.IncludeLiterals">
            <summary>
            Include all literals in the data that is
            returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PassiveDisplayMode.ExcludeLiterals">
            <summary>
            Exclude the literal characters.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MaskGroupAlignment">
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskGroupAlignment.None">
            <summary>
            Do not apply any alignment.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskGroupAlignment.Left">
            <summary>
            Left aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskGroupAlignment.Right">
            <summary>
            Right aligned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.MaskGroupAlignment.Center">
            <summary>
            Center aligned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ValidationErrorEventHandler">
            <summary>
            The delegate for handling the ValidationError event.
            </summary>
            <remarks>
            Refer to the <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs">
            <summary>
            The ValidationErrorEventArgs class is used to send event data for a <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/>
            event.
            </summary>
            <remarks>
            The required pieces of information for the <see cref="E:Syncfusion.Windows.Forms.Tools.MaskedEditBox.ValidationError"/> event 
            are the invalid text and the position of the error text within the invalid text.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.invalidText">
            <summary>
            The invalid text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.startPosition">
            <summary>
            The start position of the error.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.errorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.#ctor(System.String,System.Int32)">
            <summary>
            Overloaded. Creates an object of type ValidationErrorArgs.
            </summary>
            <param name="invalidText">The invalid text that would have resulted if this error had not been intercepted.</param>
            <param name="startPosition">The index position with the invalid text where the change occurred.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates an object of type ValidationErrorArgs.
            </summary>
            <param name="invalidText">The invalid text that would have resulted if this error had not been intercepted.</param>
            <param name="startPosition">The index position with the invalid text where the change occurred.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.InvalidText">
            <summary>
            Returns the invalid text as it would have been if the error had not intercepted it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.StartPosition">
            <summary>
            Returns the location of the invalid input within the
            invalid text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ValidationErrorArgs.ErrorMessage">
            <summary>
            Returns the error message.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroStyleColorTable">
            <summary>
            Color table to customize the buttons,captions and text color in MessageBoxAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.#ctor">
             <summary>
            Default constructor for MetroStyleColorTable
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.captionBarColor">
            <summary>
            Variable for CaptionBarColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.captionForeColor">
            <summary>
            Variable for CaptionForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.closeButtonColor">
            <summary>
            Variable for closeButtonColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.closeButtonHoverColor">
            <summary>
            Variable for closeButtonHoverColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.backColor">
            <summary>
            Variable for BackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.foreColor">
            <summary>
            variable for ForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.borderColor">
            <summary>
            Variable for BorderColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.okbuttonbackcolor">
            <summary>
            Variable for OKButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.okbuttonforecolor">
            <summary>
            Variable for OKButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.yesbuttonbackcolor">
            <summary>
            Variable for YesButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.yesbuttonforecolor">
            <summary>
            Variable for YesButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.abortbuttonbackcolor">
            <summary>
            Variable for AbortButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.abortbuttonforecolor">
            <summary>
            Variable for AbortButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.retrybuttonbackcolor">
            <summary>
            Variable for RetryButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.retrybuttonforecolor">
            <summary>
            Variable for RetryButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.ignorebuttonbackcolor">
            <summary>
            Variable for IgnoreButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.ignorebuttonforecolor">
            <summary>
            Variable for IgnoreButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.nobuttonbackcolor">
            <summary>
            Variable for NoButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.nobuttonforecolor">
            <summary>
            Variable for NoButtonForeColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.cancelbuttonbackcolor">
            <summary>
            Variable for CancelButtonBackColor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroStyleColorTable.cancelbuttonforecolor">
            <summary>
            Variable for CancelButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCaptionBarColor">
            <summary>
            To serialize CaptionBarColor 
            </summary> 
            <returns>captionBarColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCaptionBarColor">
            <summary>
            Reset CaptionBarColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCaptionForeColor">
            <summary>
            To serialize CaptionForeColor
            </summary>
            <returns>captionForeColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCaptionForeColor">
            <summary>
            Reset CaptionForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCloseButtonColor">
            <summary>
            To serialize CloseButtonColor
            </summary>
            <returns>closeButtonColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCloseButtonColor">
            <summary>
            Reset CloseButtonColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCloseButtonHoverColor">
            <summary>
            To serialize CloseButtonHoverColor
            </summary>
            <returns>closeButtonHoverColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCloseButtonHoverColor">
            <summary>
            Reset CloseButtonHoverColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeBackColor">
            <summary>
            To serialize BackColor
            </summary>
            <returns>backColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetBackColor">
            <summary>
            Reset BackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeForeColor">
            <summary>
            To serialize ForeColor
            </summary>
            <returns>foreColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetForeColor">
            <summary>
            Reset ForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeBorderColor">
            <summary>
            To serialize BorderColor
            </summary>    
            <returns>borderColor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetBorderColor">
            <summary>
            Reset BorderColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeOKButtonBackColor">
            <summary>
            To serialize OKButtonBackColor
            </summary> 
            <returns>okbuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetOKButtonBackColor">
            <summary>
            Reset OKButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeOKButtonForeColor">
            <summary>
            To serialize OKButtonForeColor
            </summary> 
            <returns>okbuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetOKButtonForeColor">
            <summary>
            Reset OKButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeYesButtonBackColor">
            <summary>
            To serialize YesButtonBackColor
            </summary>  
            <returns>yesbuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetYesButtonBackColor">
            <summary>
            Reset YesButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeYesButtonForeColor">
            <summary>
            To serialize YesButtonForeColor
            </summary>  
            <returns>yesbuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetYesButtonForeColor">
            <summary>
            Reset YesButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeAbortButtonBackColor">
            <summary>
            To serialize AbortButtonBackColor
            </summary> 
            <returns>abortbuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetAbortButtonBackColor">
            <summary>
            Reset AbortButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeAbortButtonForeColor">
            <summary>
            To serialize AbortButtonForeColor
            </summary> 
            <returns>abortbuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetAbortButtonForeColor">
            <summary>
            Reset AbortButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeIgnoreButtonBackColor">
            <summary>
            To serialize IgnoreButtonBackColor
            </summary>
            <returns>ignorebuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetIgnoreButtonBackColor">
            <summary>
            Reset IgnoreButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeIgnoreButtonForeColor">
            <summary>
            To serialize IgnoreButtonForeColor
            </summary>
            <returns>ignorebuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetIgnoreButtonForeColor">
            <summary>
            Reset IgnoreButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeRetryButtonBackColor">
            <summary>
            To serialize RetryButtonBackColor
            </summary>
            <returns>retrybuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetRetryButtonBackColor">
            <summary>
            Reset RetryButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeRetryButtonForeColor">
            <summary>
            To serialize RetryButtonForeColor
            </summary>
            <returns>retrybuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetRetryButtonForeColor">
            <summary>
            Reset RetryButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeNoButtonBackColor">
            <summary>
            To serialize NoButtonBackColor
            </summary>
            <returns>nobuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetNoButtonBackColor">
            <summary>
            Reset NoButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeNoButtonForeColor">
            <summary>
            To serialize NoButtonForeColor
            </summary>
            <returns>nobuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetNoButtonForeColor">
            <summary>
            Reset NoButtonForeColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCancelButtonBackColor">
            <summary>
            To serialize CancelButtonBackColor
            </summary>
            <returns>cancelbuttonbackcolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCancelButtonBackColor">
            <summary>
            Reset CancelButtonBackColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ShouldSerializeCancelButtonForeColor">
            <summary>
            To serialize CancelButtonForeColor
            </summary>
            <returns>cancelbuttonforecolor</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroStyleColorTable.ResetCancelButtonForeColor">
            <summary>
            Reset CancelButtonForeColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CaptionBarColor">
            <summary>
            Gets/sets the captionbarcolor 
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CaptionForeColor">
            <summary>
            Gets/sets the captionforecolor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CloseButtonColor">
            <summary>
            Gets/sets the CloseButton color of MessageBoxAdv.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CloseButtonHoverColor">
            <summary>
            Gets/sets the CloseButtonHoverColor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.BackColor">
            <summary>
            Gets/sets the backcolor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.ForeColor">
            <summary>
            Gets/sets the forecolor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.BorderColor">
             <summary>
            Gets/sets the bordercolor
             </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.OKButtonBackColor">
            <summary>
            Gets/sets the OKButtonBackColor
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.OKButtonForeColor">
            <summary>
            Gets/sets the OKButtonForeColor
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.YesButtonBackColor">
            <summary>
            Gets/sets the YesButtonBackColor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.YesButtonForeColor">
            <summary>
            Gets/sets the YesButtonForeColor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.AbortButtonBackColor">
            <summary>
            Gets/sets the AbortButtonBackColor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.AbortButtonForeColor">
            <summary>
            Gets/sets the AbortButtonForeColor.
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.RetryButtonBackColor">
            <summary>
            Gets/sets the RetryButtonBackColor
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.RetryButtonForeColor">
            <summary>
            Gets/sets the RetryButtonForeColor
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.IgnoreButtonBackColor">
            <summary>
            Gets/sets the IgnoreButtonBackColor. 
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.IgnoreButtonForeColor">
            <summary>
            Gets/sets the IgnoreButtonForeColor. 
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.NoButtonBackColor">
             <summary>
            Gets/sets the NoButtonBackColor.
             </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.NoButtonForeColor">
             <summary>
            Gets/sets the NoButtonForeColor.
             </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CancelButtonBackColor">
            <summary>
            Gets/sets the CancelButtonBackColor
            </summary>         
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroStyleColorTable.CancelButtonForeColor">
            <summary>
            Gets/sets the CancelButtonForeColor
            </summary>         
        </member>
        <member name="T:Syncfusion.Windows.Forms.MessageBoxAdv">
            <summary>
            Displays a message box with Office2007 style that can contain text, buttons, and symbols that inform and instruct the user.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.s_office10theme">
            <summary>
            Initializes the s_office10theme variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_CaptionAlign">
            <summary>
            Initializes the m_CaptionAlign variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_Size">
            <summary>
            Initializes the m_Size variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.detailsText">
            <summary>
            holds to Details Text
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv._mstyle">
            <summary>
            Variable for Style
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_DropShadow">
            <summary>
            Variable to specify the Shadow effect of the MessageBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_RightToLeft">
            <summary>
            Variable to specify the Layout of the MessageBoxAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_ButtonFont">
            <summary>
            Variable to specify the Font for Button options
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_MessageFont">
            <summary>
            Variable to specify the Font for Message information.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_CaptionFont">
            <summary>
            Gets or sets the Message Font
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.m_DetailsFont">
            <summary>
            Gets or sets the Details Font
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.useDefaultBackColor">
            <summary>
            Variable to specify the default backcolor of the MessageBoxAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.metroColorTable">
            <summary>
            Variable for MetroColorTable
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.s_office2013theme">
            <summary>
             Initializes the s_office2013theme variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.s_Office2016Theme">
            <summary>
            Initializes the s_Office2016Theme variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.applyAeroTheme">
            <summary>
            Gets or sets whehter to apply AeroTheme in Default MessageBoxStyle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String)">
            <summary>
            Displays a message box with specified text.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String)">
            <summary>
            Displays a message box with specified text and caption.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String)">
            <summary>
            Displays a message box in front of the specified object and with the specified text.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Displays a message box with specified text, caption, and buttons.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified object and with the specified text and caption.
            </summary>
            <param name="owner">An implementation of <see cref="T:System.Windows.Forms.IWin32Window"></see> that will own the modal dialog box.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Displays a message box with specified text, caption, buttons, and icon.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, and buttons.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[],System.Drawing.Image,System.Drawing.Size)">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="owner">Form</param>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="image">Image to be displayed in MessageBoxAdv</param>
            <param name="imageSize">Size of the Image</param>
            <returns>Selected Button Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.String[],System.Drawing.Image,System.Drawing.Size)">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="image">Image to be displayed in MessageBoxAdv</param>
            <param name="imageSize">Size of the Image</param>
            <returns>Selected Button Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon)">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="owner">Form</param>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="icon">Icon to be displayed in MessageBoxAdv</param>
            <returns>Selected Button Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon)">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="icon">Icon to be displayed in MessageBoxAdv</param>
            <returns>Selected Button Index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.String[])">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[])">
            <summary>
            To Show MessageBoxAdv
            </summary>
            <param name="owner">Form</param>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.ShowCore(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
            <summary>
            To calculate the Index
            </summary>
            <param name="owner">Parent Form</param>
            <param name="text">Message Text</param>
            <param name="caption">Message Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="icon">MessageIcon</param>
            <param name="defaultButton">Default Button</param>
            <param name="options">MessageBoxAdv Option</param>
            <param name="showHelp">To show the help option</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.ShowCore(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler)">
            <summary>
            To calculate the Index
            </summary>
            <param name="owner">Parent Form</param>
            <param name="text">Message Text</param>
            <param name="caption">Message Caption</param>
            <param name="buttons">Custom Buttons Collection</param>
            <param name="icon">MessageIcon</param>
            <param name="defaultButton">Default Button</param>
            <param name="options">MessageBoxAdv Option</param>
            <param name="showHelp">To show the help option</param>
            <param name="helpButtonClickHandler">To get the CancelEventHandler</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.ShowCore(System.Windows.Forms.IWin32Window,System.String,System.String,System.String[],System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            To display the MessageBoxAdv
            </summary>
            <param name="owner">Parent Form</param>
            <param name="text">MessageBoxAdv Text</param>
            <param name="caption">MessageBoxAdv Caption</param>
            <param name="buttons">Custom Buttons</param>
            <param name="icon">MessageBoxAdv Icons</param>
            <param name="defaultButton">MessageBoxAdv Default Button</param>
            <param name="options">MessageBoxAdv Option</param>
            <param name="showHelp">To show / hide the Help option</param>
            <param name="helpButtonClickHandler">HelpButtonClickEventHandler</param>
            <param name="image">Image to be displayed in MessageBoxAdv</param>
            <param name="imageSize">Size of image to be displayed in MessageBoxAdv</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, and default button.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">The buttons.</param>
            <param name="icon">The icon.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, and icon.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">The buttons.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, and options.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, and options.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">The icon.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, and default button.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <param name="displayHelpButton">true to show the Help button; otherwise, false. The default is false.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <param name="displayHelpButton">true to show the Help button; otherwise, false. The default is false.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.ComponentModel.CancelEventHandler)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, using the specified Help file.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the <see cref="T:System.Windows.Forms.MessageBoxIcon"></see> values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <param name="helpButtonClickHandler">The help button click handler.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.ComponentModel.CancelEventHandler)">
            <summary>
            Displays a message box with the specified text, caption, buttons, icon, default button, options, and Help button, using the specified Help file.
            </summary>
            <param name="text">The text to display in the message box.</param>
            <param name="caption">The text to display in the title bar of the message box.</param>
            <param name="buttons">One of the <see cref="T:System.Windows.Forms.MessageBoxButtons"></see> values that specifies which buttons to display in the message box.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values that specifies the default button for the message box.</param>
            <param name="options">One of the <see cref="T:System.Windows.Forms.MessageBoxOptions"></see> values that specifies which display and association options will be used for the message box. You may pass in 0 if you wish to use the defaults.</param>
            <param name="helpButtonClickHandler">The help button click handler.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">The buttons.</param>
            <param name="icon">The icon.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box.</param>
            <param name="options">The options.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.Show(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Drawing.Image,System.Drawing.Size,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified object and with the specified text, caption, buttons, icon, default button, and options.
            </summary>
            <param name="owner">The owner.</param>
            <param name="text">The text.</param>
            <param name="caption">The caption.</param>
            <param name="buttons">The buttons.</param>
            <param name="image">The image used instead of system icon.</param>
            <param name="imageSize">Size of the image. If empty, original image size is used.</param>
            <param name="defaultButton">One of the <see cref="T:System.Windows.Forms.MessageBoxDefaultButton"></see> values the specifies the default button for the message box.</param>
            <param name="options">The options.</param>
            <returns>
            One of the <see cref="T:System.Windows.Forms.DialogResult"></see> values.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.IsEnumValid(System.Enum,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <param name="value"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxAdv.IsEnumWithinShiftedRange(System.Enum,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <param name="numBitsToShift"></param>
            <param name="minValAfterShift"></param>
            <param name="maxValAfterShift"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.CaptionAlign">
            <summary>
             Specifies the title alignment of MessageBoxAdv.
            </summary>
            <value>Default caption alignment is Left. </value>
            <remarks>
            This property is not applicaple when enabling ApplyAeroTheme property in Default Style.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.MaximumSize">
            <summary>
             Specifies the Maximum Size of MessageBoxAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.DropShadow">
            <summary>
            Specifies the Shadow effect of the MessageBox.
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.RightToLeft">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to Right-To-Left or Left-To-Right Layout
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.ButtonFont">
            <summary>
            Gets or sets the Button option Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.MessageFont">
            <summary>
            Gets or sets the Message Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.CaptionFont">
            <summary>
            Gets or sets the Caption Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.DetailsFont">
            <summary>
            Gets or sets the Details Font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.UseDefaultTheme">
            <summary>
            Specifies the default backcolor of the MessageBoxAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.MessageBoxStyle">
            <summary>
            Gets or sets a value indicating the style used for drawing the control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.MetroColorTable">
            <summary>
             Color table to customize the buttons,captions and text color in MessageBoxAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.Office2007Theme">
            <summary>
            Gets or sets the Office2007 theme, which is used to show message boxes.
            </summary>
            <value>The Office2007 theme.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.Office2010Theme">
            <summary>
            Gets or sets the Office2010 color theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.Office2013Theme">
            <summary>
            Gets or sets the Office2013 color theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.Office2016Theme">
            <summary>
            Gets or sets the Office2016 color theme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MessageBoxAdv.ApplyAeroTheme">
            <summary>
             Gets or sets whehter to apply AeroTheme in Default MessageBoxStyle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MessageBoxAdv.Style">
            <summary>
             Specifies the style in which controls will appear and behave.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.Style.Default">
            <summary>
            Default appearance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.Style.Office2010">
            <summary>
            Office2010Form appearance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.Style.Office2013">
            <summary>
            Office2013 appearance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.Style.Metro">
            <summary>
            Metro appearance
            </summary>            
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxAdv.Style.Office2016">
            <summary>
            Office2016 appearance
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FW_NORMAL">
            <summary>
             Normal font weight
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.#ctor">
            <summary>
            Constructor for Office2007form with empty arguments
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.dropShadow">
            <summary>
            Variable to Gets or Set Value to Drop Shadow to the form.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.ResetDropShadow">
            <summary>
            Reset the value of the DropShadow
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.ShouldSerializeDropShadow">
            <summary>
            Serializing the value of the DropShadow
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.touchMode">
            <summary>
            Gets/Sets touch enabled
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.ApplyScaleToControl(System.Single)">
            <summary>
            applies the scaling
            </summary>
            <param name="scaleFactor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.Touch(System.Windows.Forms.Control)">
            <summary>
            applies the scaling
            </summary>
            <param name="ctr"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetCloseBox(System.Windows.Forms.Control)">
            <summary>
            Gets the closebox
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="specified"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.SetClientSizeCore(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnHandleCreated(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnStyleChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnRightToLeftLayoutChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcCalcSize(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcPaint(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcHitTest(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcActivate(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcMouseLeave(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmNcLButtonDown(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmMouseMove(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmLButtonUp(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmCaptureChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmSetIcon(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmSetText(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmGetMinMaxInfo(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmWindowPosChanging(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmSetCursor(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmSysCommand(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnWmCotextMenu(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnCompositionChanged(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.BaseWndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.UpdateRegion">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.UpdateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetFormPath">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetFormPath(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetRoundedPolygon(System.Drawing.Rectangle,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.InvalidateFrame">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetHitTest(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetButtonId(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="points"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetButtonId(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="pt">pt - coordinates of the cursor. The coordinates are relative to the upper-left corner of the screen.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.IsButtonEnabled(System.Int32)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrame(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameCaption(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameIcon(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="img"></param>
            <param name="rc"></param>
            <param name="bEnabled"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButtonBackgroundSelected(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButtonBackgroundPressed(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButtonGradient(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
            <param name="color_4"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButtonFlash(System.Drawing.Graphics,System.Drawing.Rectangle@)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameButtonBorder(System.Drawing.Graphics,System.Drawing.Rectangle@,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="color"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.DrawFrameBorders(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetMaxRectangle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetButtonImage(System.Int32)">
            <summary>
            Gets Image for a button by specific ID.
            </summary>
            <param name="buttonID"> Button ID that indicates Image. </param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetButtonCommand(System.Int32)">
            <summary>
            Gets system command by specific buttonID.
            </summary>
            <param name="buttonID"> Button ID that indicates system command. </param>
            <returns> </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.MoveWindow(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.SizeWindow(System.Windows.Forms.Message@,System.Int32)">
            <summary>
            
            </summary>
            <param name="m"></param>
            <param name="command"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.GetIsCompositionEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.TrackPopupMenu(System.IntPtr,System.UInt32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hMenu"></param>
            <param name="uFlags"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="nReserved"></param>
            <param name="hWnd"></param>
            <param name="prcRect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.InvalidateOnDemand">
            <summary>
            Invalidates client area if Office2007Scheme back color is used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.OnColorSchemeChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.Office2007Form.ColorScheme"/> property is changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_theme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bActive">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bMouseIsTracked">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_frameLayout">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_selectedButton">
            <summary>
            Selected system button. (SB__MAX - no button is selected)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_pressedButton">
            <summary>
            Pressed system button. (SB__MAX - no button is pressed)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_highlightedButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bSuppressSizing">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_pBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_pSeparatorDark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_pSeparatorLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_systemButtons">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bmpHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_systemCommands">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_iSystemHelpCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_blTitle">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_blFrameButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_blFrameButtonBorder">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bUseOffice2007ThemeBackground">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bDisableOffice2007Style">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.applyAeroTheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_bCompositionEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_captionFont">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.m_captionAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.captionForeColor">
            <summary>
            CaptionText Color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.DropShadow">
            <summary>
            Gets or Sets whether to enable Drop Shadow to the Office2007form
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CreateParams">
            <summary>
            Gets the CreateParams for the Office2007 form.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.DisableOffice2007Style">
            <summary>
            Gets/sets if to disable Office2007 look and feel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.ApplyAeroTheme">
            <summary>
            Gets/sets if to Force the OS Aero theme look and feel when Office2007Visual style is enabled.
            </summary>
            <remarks>
            If DisableOffice2007Style is set to true then the ordinary form drawn will still have the aero theme applied
            as the default frame is drawn in the base.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.AutoScroll">
            <summary>
            Gets or Sets the AutoScroll value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.ColorScheme">
            <summary>
            Gets or sets the Office2010 colorscheme
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.ColorSchemeIsManaged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CaptionFont">
            <summary>
            Gets or sets the font of the form's title.
            </summary>
            Don't rename this property. Name is important for CodeDomSerialization order.
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CaptionForeColor">
            <summary>
            Gets or sets the color for caption in titlebar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CaptionAlign">
            <summary>
            Gets or sets the alignment of of the form's title. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.ColorTable">
            <summary>
            Gets the colortable for Office2010
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsActive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsRightToLeft">
            <summary>
            Gets whether right to left has been set
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.SelectedButton">
            <summary>
            Gets or Sets the Selected button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.PressedButton">
            <summary>
            Gets or Sets the pressed button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.HighlightedButton">
            <summary>
            Gets or Sets the highlighted button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.MaximizeButton">
            <summary>
            Gets the Maximize button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.MinimizeButton">
            <summary>
            Gets the Minimize button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayout">
            <summary>
            Gets the layout
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CaptionHeight">
            <summary>
            Gets the caption height value
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.EnableTouchMode">
            <summary>
            Gets/Sets touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.TitleHeight">
            <summary>
            Gets the value of title height
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsMinimized">
            <summary>
            Gets whether the form is minimized
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsMaximized">
            <summary>
            Gets whether the form is maximized
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsSizeable">
            <summary>
            Gets whether the form is sizable
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.DesktopRectangle">
            <summary>
            Gets the screen rectangle
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.ParentClientRectangle">
            <summary>
            Gets the area to be painted
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.IsVisible">
            <summary>
            Gets the value of Isvisible property
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.UseOffice2007SchemeBackColor">
            <summary>
            Specifies whether current selected Office2007 scheme background color is used to fill form's backround is used.
            If false <see cref="!:Form.Background"/> is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CaptionFontInternal">
            <summary>
            Gets the caption font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.SystemCaptionFont">
            <summary>
            Gets the system font
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.CloseBox">
            <summary>
            Gets the closebox value
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.IsMaximized(System.Windows.Forms.Form)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.AdjustWindowRectEx(Syncfusion.Runtime.InteropServices.NativeMethods.RECT@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            
            </summary>
            <param name="rc"></param>
            <param name="dwStyle"></param>
            <param name="bMenu"></param>
            <param name="dwExStyle"></param>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_form">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcText">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMdiIcon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMdiMin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMdiMax">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMdiClose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_rcMdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_titleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_captionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_captionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.m_iBorderWidth">
            <summary>
            Border width of the Office2007Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.TextBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.IconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.CloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.HelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MdiIconBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MdiMinimizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MdiMaximizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MdiCloseBox">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.MdiHelpButton">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.TitleHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.CaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.CaptionMinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.BorderWidth">
            <summary>
            Gets border width of the Office2007Form instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.SysCaptionHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.FrameLayoutInfo.SysBorderWidth">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.CaptionManager.#ctor(Syncfusion.Windows.Forms.Office2007Form,System.Boolean)">
            <summary>
            Constructor for CaptionManager
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.m_Office2007Form">
            <summary>
            Office2007Form
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.#ctor(Syncfusion.Windows.Forms.Office2007Form)">
            <summary>
            Constructor
            </summary>
            <param name="Office2007Form">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.GetChildCount">
            <summary>
            Retrieves the number of children in the accessible object.
            </summary>
            <returns>Number of Child.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.GetChild(System.Int32)">
            <summary>
            Retrieves the accessible child corresponding to the index.
            </summary>
            <param name="index">Index</param>
            <returns>Child specified to the index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Form.Office2007FormAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxFormAdv.btnHeight">
            <summary>
            Holds the Button height
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MessageBoxFormAdv.ClickedIndex" -->
        <member name="F:Syncfusion.Windows.Forms.MessageBoxFormAdv.CustomBtnCollection">
            <summary>
            Custom Button Collection
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MessageBoxFormAdv.details" -->
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.#ctor(System.Windows.Forms.IWin32Window,System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton,System.Windows.Forms.MessageBoxOptions,System.Boolean,System.ComponentModel.CancelEventHandler,System.Drawing.Image,System.Drawing.Size,System.String)">
            <summary>
            Initializes the new instance for MessageBoxMetroStyleFormAdv class.
            </summary>
            <param name="owner">owner window</param>
            <param name="text">text</param>
            <param name="caption">form caption</param>
            <param name="buttons">buttons</param>
            <param name="icon">form icon</param>
            <param name="defaultButton">default button</param>
            <param name="options">options</param>
            <param name="bShowHelpButton">to show helpbutton</param>
            <param name="helpButtonClickHandler">click event data</param>
            <param name="image">image</param>
            <param name="sizeImage">sizing image</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.InitializeCustomButtons(System.String[])">
            <summary>
            Custom Button Initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.Btn_Click(System.Object,System.EventArgs)">
            <summary>
            Click Event for Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.InitializeCustomButtonSizes">
            <summary>
            Custom Button Size initialization
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.GetCustomButtonsWidth">
            <summary>
            Returns the Button width
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.ApplyFontSettings(System.String[])">
            <summary>
            Helps to apply the Font Settings to Custom Buttons
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.ApplyFontSettings(System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Helps to apply the Font Settings to built buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MessageBoxFormAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MessageBoxFormAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DoubleTextBox">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.TextBox"/> class to handle double input
            and validation.
            </summary>
            <remarks>
            The DoubleTextBox is derived from textbox and provides all the functionality
            of a textbox and adds additional functionality of its own.
            <para>
            Collecting double input in a consistent format requires validation code
            that needs to be built into the application when using the Windows Forms text box control.
            The DoubleTextBox includes all this logic into its methods and properties
            and makes it easy for the developer and the end user to collect and enter double data.
            </para>
            <para>
            The DoubleTextBox is also closely tied to the globalization settings of the
            operating system for number related properties. Please refer to the 
            <see cref="T:System.Globalization.NumberFormatInfo"/>
            class for a detailed explanation of globalization and number related attributes.
            </para>
            <para>
            The DoubleTextBox has full support for the Windows Forms designer and you can
            just drag-and-drop and set properties on the control just as you would with the
            Windows Forms text box.
            </para>
            <para>
            The DoubleTextBox also raises a <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError"/> event when
            in appropriate data is entered into the control.
            </para>
            <para>
            All clipboard functions such as copy, paste and cut are also supported with
            special accommodations for number related issues.
            </para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NumericTextBox">
            <summary>
            Extends the <see cref="T:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase"/> class to handle numeric input
            and validation.
            </summary>
            <remarks>
            <para>
            The NumericTextBox is not to be used directly.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumericTextBox.initNumberDecimalDigits">
            <summary>
            For initialization of culture-related values. Needed when SpecialCultureValue is
            not the default value. Since the base class will reset the Culture property during
            ISupportInitialize.EndInit, we will have to hold these values and set them on the
            correct cultureinfo / numberformatinfo.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.#ctor">
            <summary>
            Overloaded. Creates an object of type NumericTextBox. 
            </summary>
            <remarks>
            The NumericTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.InitializeComponent">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ShouldSerializeNumberDecimalDigits">
            <summary>
            Indicates whether the NumberDecimalDigits should not be serialized if the UseLocaleDefault property is set.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ResetNumberDecimalDigits">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ShouldSerializeNumberDecimalSeparator">
            <summary>
            Indicates whether the NumberDecimalSeparator should not be serialized if the UseLocaleDefault property is set.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ResetNumberDecimalSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ShouldSerializeNumberGroupSeparator">
            <summary>
            Indicates whether the NumberGroupSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ResetNumberGroupSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ShouldSerializeNumberGroupSizes">
            <summary>
            Indicates whether the NumberGroupPattern should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ResetNumberGroupSizes">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ShouldSerializeNumberNegativePattern">
            <summary>
            Indicates whether the NumberNegativePattern should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.NumericTextBox.ResetNumberNegativePattern">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.NumberDecimalDigits">
            <summary>
            Gets or sets the maximum number of digits for the decimal portion of the number.
            </summary>
            <remarks>
            If the number requires two decimal points to accommodate the smallest
            denomination and this property will have the value 2 in this case. If there
            is a need to have a different value based on the locale, it will be
            automatically changed if the <see cref="!:NumberTextBoxBase.UseLocaleDefault"/> property
            is True.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.NumberDecimalSeparator">
            <summary>
            Gets or sets the decimal separator character that will be used for the display.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/>
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.NumberGroupSeparator">
            <summary>
            Gets or sets the separator to be used for grouping digits.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/>
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.NumberGroupSizes">
            <summary>
            Gets or sets the grouping of NumberDigits in the NumberTextBox.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/>
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.NumberNegativePattern">
            <summary>
            Gets or sets the pattern to use when the value is negative.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/>
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.NumericTextBox.DeleteSelectionOnNegative">
            <summary>
            Gets or sets a value indicating whether to delete selection when number is changed to negative.
            </summary>
            <value>
            	<c>true</c> if [delete selection on negative]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.DEF_NULL_VALUE">
            <summary>
            The line of the null value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.minValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.newDoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.oldDoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.maxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.initDoubleValue">
            <summary>
            The initial double value set in InitializeComponent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.enterDoubleValue">
            <summary>
            The double value when the control gets the focus. Used when validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBox.preservedDoubleValue">
            <summary>
            The double value that is set through the DoubleValue property.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.#ctor">
            <summary>
            Overloaded. Creates an object of type DoubleTextBox. 
            </summary>
            <remarks>
            The DoubleTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific 
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.InitializeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.InitializeNumberTextBox">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeNumberTextBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.FormatChanged(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            
            </summary>
            <param name="previousFormat"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ApplyFormatting(System.String)">
            <summary>
            Formats the given text according to the current setting.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ShouldSerializeText">
            <summary>
            Indicates whether to serialize the Text property
            if it is null or quals NullString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ResetText">
            <summary>
            Restores the CurrencyNumberDigits to the MaximumLength.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ShouldSerializeMaxValue">
            <summary>
            Indicates whether the MaxValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Double.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ResetMaxValue">
            <summary>
            Resets the Max value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ShouldSerializeMinValue">
            <summary>
            Indicates whether the MinValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Double.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.ResetMinValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.OnDoubleValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.DoubleTextBox.DoubleValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides OnTextChanged.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBox.OnEnter(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Saves the current DoubleValue so that it can be compared 
            during validation. The DoubleValueChanged and TextChanged event
            will only be raised if the value is different during validation.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DoubleTextBox.DoubleValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.DoubleValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.Text">
            <summary>
            Overrides the Text property of <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <remarks>
            This property is overriden in order to normalize the data that is set
            to the Text property and format it as needed. The method <see cref="!:Syncfusion.Windows.Forms.NumberTextBoxBase.InsertString"/>
            is used to format the data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.UseNullString">
            <summary>
            Indicates whether the NULLString property will be used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.DoubleValue">
            <summary>
            Gets or sets the double value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.MaxValue">
            <summary>
            Gets or sets the maximum value that can be set through the DoubleTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBox.MinValue">
            <summary>
            Gets or sets the minimum value that can be set through the DoubleTextBox.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.m_DoubleTextBox">
            <summary>
            DoubleTextBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.DoubleTextBox)">
            <summary>
            Constructor
            </summary>
            <param name="DoubleTextBox">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DoubleTextBoxAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IntegerTextBox">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.TextBox"/> class to handle integer input
            and validation.
            </summary>
            <remarks>
            The IntegerTextBox is derived from textbox and provides all the functionality
            of a textbox and adds additional functionality of its own.
            <para>
            Collecting integer input in a consistent format requires validation code
            that needs to be built into the application when using the Windows Forms textbox control.
            The IntegerTextBox includes all this logic into its methods and properties
            and makes it easy for the developer and the end user to collect and enter double data.
            </para>
            <para>
            The IntegerTextBox is also closely tied to the globalization settings of the
            operating system for number related properties. Please refer to the 
            <see cref="T:System.Globalization.NumberFormatInfo"/>
            class for a detailed explanation of globalization and number related attributes.
            </para>
            <para>
            The IntegerTextBox has full support for the Windows Forms designer and you can
            just drag-and-drop and set properties on the control just as you would with the
            Windows Forms textbox.
            </para>
            <para>
            The IntegerTextBox also raises a <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError"/> event when
            inappropriate data is entered into the control.
            </para>
            <para>
            All clipboard functions such as copy, paste and cut are also supported with
            special accommodations for a number related issues.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.m_bPerformingMinMaxValidation">
            <summary>
            Specifies whether MinMaxValidation is being in progress.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.minValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.maxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.initIntegerValue">
            <summary>
            The initial Int64 value set in InitializeComponent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.oldIntegerValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.newIntegerValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.enterIntegerValue">
            <summary>
            The integer value when the control gets the focus. Used when validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.m_enterString">
            <summary>
            The text when the control gets the focus. Used when validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.preservedIntegerValue">
            <summary>
            The Int64 value that is set through the IntegerValue property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.m_bAllowLeadingZeros">
            <summary>
            Indicates whether to allow insets zero in the beginning value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBox.m_bIsNullValue">
            <summary>
            Indicates whether NullString should be set if UseNullString is true.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.#ctor">
            <summary>
            Overloaded. Creates an object of type IntegerTextBox. 
            </summary>
            <remarks>
            The IntegerTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific 
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.InitializeComponent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.InitializeNumberTextBox">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeNumberTextBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ShouldSerializeText">
            <summary>
            Indicates whether to serialize the Text property
            if it is null or quals NullString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ShouldSerializeMaxValue">
            <summary>
            Indicates whether the MaxValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Double.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ResetMaxValue">
            <summary>
            Resets the max value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.GenerateFormat(System.Int32,System.Boolean,System.Int32[])">
            <summary>
            Generates string format for use in Conver.Format.
            </summary>
            <param name="valueLength"></param>
            <param name="negative"></param>
            <param name="gs"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.AddNegaviveSymbol(System.String,System.String,System.Int32)">
            <summary>
            Adds negative symbol.
            </summary>
            <param name="sValue"></param>
            <param name="negativ"></param>
            <param name="numberNegativePattern"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.SaveZeroInValue(System.String,System.Boolean)">
            <summary>
            Returns zero string as began sValue.
            </summary>
            <param name="sValue"></param>
            <param name="Negative"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ShouldSerializeMinValue">
            <summary>
            Indicates whether the MinValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Decimal.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ResetMinValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.OnIntegerValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.IntegerTextBox.IntegerValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides OnTextChanged.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.OnEnter(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Saves the current IntegerValue so that it can be compared 
            during validation. The IntegerValueChanged and TextChanged event
            will only be raised if the value is different during validation.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.PerformMinMaxValidation">
            <summary>
            performs the Min/Max validation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ShouldSerializeNumberDecimalDigits">
            <summary>
            Indicates whether to serialize <see cref="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.NumberDecimalDigits"/>  property value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ShouldSerializeNumberDecimalSeparator">
            <summary>
            Indicates whether to serialize <see cref="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.NumberDecimalSeparator"/>  property value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.FormatChanged(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            
            </summary>
            <param name="previousFormat"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBox.ApplyFormatting(System.String)">
            <summary>
            Formats the given text according to the current setting.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.IntegerTextBox.IntegerValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.CurrencyTextBox.DecimalValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.Text">
            <summary>
            Overrides the Text property of <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <remarks>
            This property is overriden in order to normalize the data that is set
            to the Text property and format it as needed. The method <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InsertString(System.String,System.Int32,System.Int32,System.String,System.Boolean)"/>
            is used to format the data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.IntegerValue">
            <summary>
            Gets / sets the integer value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.MaxValue">
            <summary>
            Gets / sets the maximum value that can be set through the IntegerTextBox.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.MinValue">
            <summary>
            Gets / sets the minimum value that can be set through the IntegerTextBox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.AllowLeadingZeros">
            <summary>
            Indicates whether to allow insets zero in the beginning value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.NumberDecimalSeparator">
            <summary>
            Gets / sets the decimal separator character that will be used for the display.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBox.NumberDecimalDigits">
            <summary>
            Gets / sets the maximum number of digits for the decimal portion.
            </summary>
            <remarks>
            This property is always set to zero for the IntegerTextBox.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.m_IntegerTextBox">
            <summary>
            IntegerTextBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.IntegerTextBox)">
            <summary>
            Constructor
            </summary>
            <param name="IntegerTextBox">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.IntegerTextBoxAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SpecialCultureValues">
            <summary>
            Summary description for SpecialCultureValues.
            </summary>
            <summary>
            Modifier for the currently selected culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SpecialCultureValues.None">
            <summary>
            No modifier for the selected culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SpecialCultureValues.CurrentCulture">
            <summary>
            Use the current culture on the system.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SpecialCultureValues.UICulture">
            <summary>
            Use the current UI culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.SpecialCultureValues.InstalledCulture">
            <summary>
            Use the current InstalledCulture.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NumberClipModes">
            <summary>
            Summary description for NumberClipModes.
            </summary>
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberClipModes.IncludeFormatting">
            <summary>
            Include all literals in the data that is
            returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.NumberClipModes.ExcludeFormatting">
            <summary>
            Exclude all literals in the data that is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.CurrencyClipModes">
            <summary>
            Summary description for CurrencyClipModes.
            </summary>
            <summary>
            The clipping mode to be used by the control
            when returning the text content of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyClipModes.IncludeFormatting">
            <summary>
            Include all literals in the data that is
            returned.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.CurrencyClipModes.ExcludeFormatting">
            <summary>
            Exclude all literals in the data that is returned.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SetNullEventHandler">
            <summary>
            The delegate for handling the SetNULL event.
            </summary>
            <remarks>
            Refer to the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetNull"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SetNullEventArgs">
            <summary>
            Provides data about a <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.SetNull"/> and 
            events of a <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/>, <see cref="T:Syncfusion.Windows.Forms.Tools.DoubleTextBox"/>,
            <see cref="T:Syncfusion.Windows.Forms.Tools.IntegerTextBox"/>, or <see cref="T:Syncfusion.Windows.Forms.Tools.PercentTextBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.SetNullEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.Tools.SetNullEventArgs"/> with event data.
            </summary>
            <param name="nullValue">The NULL value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.SetNullEventArgs.NullValue">
            <summary>
            Returns the NULL value.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.KeyValidateEventHandler">
            <summary>
            The delegate for handling the KeyValidate event.
            </summary>
            <remarks>
            Refer to the <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.KeyValidate"/> event for more information.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.KeyValidateEventArgs">
            <summary>
            Cancellable event for <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.KeyValidate"/>
            of <see cref="T:Syncfusion.Windows.Forms.Tools.CurrencyTextBox"/>, <see cref="T:Syncfusion.Windows.Forms.Tools.DoubleTextBox"/>,
            <see cref="T:Syncfusion.Windows.Forms.Tools.IntegerTextBox"/>, or <see cref="T:Syncfusion.Windows.Forms.Tools.PercentTextBox"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.KeyValidateEventArgs.Key">
            <summary>
            Returns the character key that was input by the user.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.KeyValidateEventArgs.ChangedString">
            <summary>
            Returns the changed string that will be set as the text of the text box if this event is not cancelled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.KeyValidateEventArgs.ChangedValueString">
            <summary>
            Returns the unformatted changed string that will be set as the text of the text box if this event is not cancelled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ControlValidatedEventHandler">
            <summary>
            provides new value and old value after the validation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ControlValidatedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ControlValidatedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ControlValidatedEventArgs"/> class.
            </summary>
            <param name="newValue">The new value.</param>
            <param name="oldValue">The old value.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlValidatedEventArgs.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ControlValidatedEventArgs.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.NumberModifyState">
            <summary>
            Used to pass state between PrepareXXX and CompleteXXX methods during key processing. This allows for
            raising the KeyValidate event to cancel any key.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OnValidationFailed.KeepFocus">
            <summary>
            Keeps the focus on the control if the validation fails
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OnValidationFailed.SetNullString">
            <summary>
            Sets NullString to the the control if the validation fails
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OnValidationFailed.SetMinOrMax">
            <summary>
            Sets MinValue if Value is less than MinValue or MaxValue if greater thas MaxValue if the Validation fails
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PercentTextBox">
            <summary>
            Extends the <see cref="T:System.Windows.Forms.TextBox"/> class to handle percentage input
            and validation.
            </summary>
            <remarks>
            The PercentTextBox is derived from the textbox and provides all the functionality
            of a textbox and adds additional functionality of its own.
            <para>
            Collecting percentage input in a consistent format requires validation 
            that needs to be built into the application when using the Windows Forms textbox control.
            The PercentTextBox includes all this logic into its methods and properties
            and makes it easy for the developer and the end user to collect and enter percentage  data.
            </para><para>
            The PercentTextBox is also closely tied to the globalization settings of the
            operating system for pecentage-related properties. Please refer to the 
            <see cref="T:System.Globalization.NumberFormatInfo"/>
            class for a detailed explanation of globalization and percent-related attributes.
            </para><para>
            The PercentTextBox has full support for the Windows Forms designer and you can
            just drag-and-drop and set properties on the control just as you would with the
            Windows Forms textbox.
            </para><para>
            The PercentTextBox also raises a <see cref="E:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ValidationError"/> event when
            inappropriate data is entered into the control.
            </para><para>
            All clipboard functions such as copy, paste, and cut are also supported with
            special accomodations for percent-related issues.
            </para></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.components">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.internalMode">
            <summary>
            Specifies the control is in edit mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.minValue">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.maxValue">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.internalValue">
            <summary>
            The internal value string.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.returnActualText">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.switchModeOnFocus">
            <summary>
            Indicates whether the mode has to be automatically switched 
            when the control receives focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initDoubleValue">
            <summary>
            The initial double value set in InitializeComponent.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.enterDoubleValue">
            <summary>
            The double value when the control gets the focus. Used when validating.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.preservedDoubleValue">
            <summary>
            The double value that is set through the DoubleValue property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentDecimalDigits">
            <summary>
            For initialization of culture-related values. Needed when SpecialCultureValue is
            not the default value. Since the base class will reset the culture property during
            ISupportInitialize.EndInit, we will have to hold these values and set them on the
            correct cultureinfo / numberformatinfo.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentDecimalSeparator">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.oldDoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.newDoubleValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentGroupSeparator">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentGroupSizes">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentNegativePattern">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentPositivePattern">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.initPercentSymbol">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.percentNegativePatterns">
            <summary>
            The negative patterns.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.#ctor">
            <summary>
            Overloaded. Creates an object of type PercentTextBox. 
            </summary>
            <remarks>
            The PercentTextBox object will be initialized with the default values
            for the display and data properties. You need to set any specific 
            values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.InitializeComponent">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.InitializeNumberTextBox">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InitializeNumberTextBox"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ContainsNumbers(System.String)">
            <summary></summary>
            <returns></returns>
            <param name="s"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.RemoveFormatting(System.String,System.Globalization.NumberFormatInfo,System.Boolean)">
            <summary></summary>
            <returns></returns>
            <param name="formattedText"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetNumberFormatInfoInitValues">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentSymbol">
            <summary>
            Indicates whether the PercentSymbol should not be serialized if the value is the same 
            as the one for the current culture.
            </summary>
            <returns>True if the value is different from the value for the current culture.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentSymbol">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentPositivePattern">
            <summary>
            Indicates whether the PercentPositivePattern should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentPositivePattern">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.CheckIfNegative(System.String)">
            <summary></summary>
            <returns></returns>
            <param name="rawValue"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentDecimalDigits">
            <summary>
            Indicates whether the PercentDecimalDigits should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns>True if the </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentDecimalDigits">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentDecimalSeparator">
            <summary>
            Indicates whether the PercentDecimalSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentDecimalSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentGroupSeparator">
            <summary>
            Indicates whether PercentGroupSeparator should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentGroupSeparator">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentGroupSizes">
            <summary>
            Indicates whether the PercentGroupPattern should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentGroupSizes">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializePercentNegativePattern">
            <summary>
            Indicates whether the PercentNegativePattern should not be serialized if
            the UseLocaleDefault property is set.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetPercentNegativePattern">
            <summary>
            Resets the value to the culture specific value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnEnter(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/> method.
            </summary>
            <param name="args">The event data.</param>
            <remarks>
            Saves the current DoubleValue so that it can be compared 
            during validation. The DoubleValueChanged and TextChanged event
            will only be raised if the value is different during validation.
            Also switches mode if the <see cref="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.SwitchModeOnFocus"/> property is set.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnLeave(System.EventArgs)">
            <summary>
            Overrides the <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)"/> method.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ApplyFormatting(System.String)">
            <summary>
            Formats the given text according to the current setting.
            </summary>
            <param name="rawValue"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetFormattedText(System.String,Syncfusion.Windows.Forms.Tools.PercentTextBoxMode)">
            <summary></summary>
            <param name="incomingValue"/>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ToggleNegative(System.String)">
            <summary></summary>
            <returns></returns>
            <param name="currentText"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetDecimalSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return PercentDecimalSeparator in PercentTextBox.
            </summary>
            <returns></returns>
            <param name="info"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetGroupSeparator(System.Globalization.NumberFormatInfo)">
            <summary>
            Override this to return PercentGroupSeparator in PercentTextBox.
            </summary>
            <returns></returns>
            <param name="info"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ParseForNegativeFormat(System.String,System.Globalization.NumberFormatInfo)">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.ParseForNegativeFormat(System.String)"/>.
            </summary>
            <param name="currentText">The text to be parsed.</param>
            <returns>True if the value is negative; false otherwise.</returns>
            <param name="info"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetDecimalDigits">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.FormatChanged(System.String,System.Globalization.NumberFormatInfo)">
            <summary></summary>
            <param name="previousFormat"></param>
            <param name="currentText"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ChangeMode(Syncfusion.Windows.Forms.Tools.PercentTextBoxMode)">
            <summary></summary>
            <param name="newMode"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetNumberPartLength(System.Double)">
            <summary></summary>
            <returns></returns>
            <param name="numberValue"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetNumberValue(System.String,System.Int32)">
            <summary></summary>
            <returns></returns>
            <param name="formattedText"/>
            <param name="startPosition"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializeMaxValue">
            <summary>
            Indicates whether the MaxValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Double.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetMaxValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializeMinValue">
            <summary>
            Indicates whether the MinValue property should be serialized.
            </summary>
            <returns>True if the value is not equal to <see cref="F:System.Decimal.MaxValue"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetMinValue">
            <summary>
            Resets the value to the default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.CheckForMinMax(System.String,System.Boolean)">
            <summary></summary>
            <returns></returns>
            <param name="currentTextValue"/>
            <param name="ignoreLength"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.Validate(System.Boolean)">
            <summary>
            Validates the control.
            </summary>
            <param name="bRaiseValidationError">Indicates whether the validation error is to be raised.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleCharacterKey(System.Char)">
            <summary>
            Overrides the base behavior to implement support for NumberMode. In this mode, the
            base behavior of formatting each key is not followed. The key is validated internally to check for
            Max and Min conditions and then displayed as is without the formatting. The key will be ignored if
            the supressKeyPress value is not set to False. This is set to False when a valid key press is encountered.
            </summary>
            <returns></returns>
            <param name="charToBeInserted"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleDecimalKey">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleBackspaceKey">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleBackspaceKeyChar">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleDeleteKey">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.HandleSubtractKey">
            <summary>
            Invoked when the negative key is pressed.
            </summary>
            <returns>True if the key is handled; false otherwise.</returns>
            <remarks>
            The defined behavior for this key is to toggle the sign (negativity)
            of the content of the CurrencyTextBox.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.CompleteSubtractKey(Syncfusion.Windows.Forms.Tools.NumberModifyState)">
            <summary></summary>
            <returns></returns>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetDoubleValue(System.Double)">
            <summary></summary>
            <param name="newValue"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetAdjustedValue(System.Double)">
            <summary></summary>
            <returns></returns>
            <param name="newValue"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetNullState(System.Double)">
            <summary></summary>
            <param name="val"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnBindablePercentValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.PercentTextBox.BindablePercentValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ShouldSerializeText">
            <summary>
            Indicates whether to serialize the Text property
            if it is null or quals NullString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.ResetText">
            <summary>
            Restores the CurrencyNumberDigits to the MaximumLength.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetTextProperty(System.String)">
            <summary></summary>
            <param name="newText"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBox.formattedText">
            <summary>
            Returns the formatted text with the formatting.
            </summary>
            <remarks>
            For example, if the Text in the CurrencyTextBox is $45,000.00, the
            FormattedText property will give $45,000.00.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnDoubleValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.PercentTextBox.DoubleValueChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.OnTextChanged(System.EventArgs)">
            <summary>
            Overrides OnTextChanged.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetNullNumberValue">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.IsAssignable(System.Object)">
            <summary></summary>
            <returns></returns>
            <param name="val"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetValue(System.Object)">
            <summary></summary>
            <param name="val"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.GetValue">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.SetPercentValue(System.Object)">
            <summary></summary>
            <param name="val"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBox.Paste">
            <summary>
            Pastes the data in the clipboard into the PercentTextBox control.
            </summary>
            <remarks>
            The data will be formatted before being pasted into the text box.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.PercentTextBox.DoubleValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.DoubleValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentSymbol">
            <summary>
            Gets / sets the percent symbol to be used in the PercentTextBox.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentPositivePattern">
            <summary>
            Gets / sets the pattern to use when the value is positive.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentDecimalDigits">
            <summary>
            Gets / sets the maximum number of digits for the decimal portion of the percentage.
            </summary>
            <remarks>
            If there is a need to have a different value based on the locale, it will be
            automatically changed if the <see cref="P:Syncfusion.Windows.Forms.Tools.MaskedEditBox.UseLocaleDefault"/> property
            is True.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentDecimalSeparator">
            <summary>
            Gets / sets the decimal separator character that will be used for the display.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentGroupSeparator">
            <summary>
            Gets / sets the separator to be used for grouping digits.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentGroupSizes">
            <summary>
            Gets / sets the grouping of PercentDigits in the PercentTextBox.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentNegativePattern">
            <summary>
            Gets / sets the pattern to use when the value is negative.
            </summary>
            <remarks>
            This value is initially set from the <see cref="T:System.Globalization.NumberFormatInfo"/> 
            and can be changed based on your requirements or based on the locale.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentNegativePatterns">
            <summary>
            The negative patterns.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.SwitchModeOnFocus">
            <summary>
            Indicates whether the PercentTextBox should allow editing in numeric mode
            when it receives focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.MaxValue">
            <summary>
            Gets / sets the maximum value that can be set through the PercentTextBox.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.MinValue">
            <summary>
            Gets / sets the minimum value that can be set through the PercentTextBox.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.DoubleValue">
            <summary>
            Gets / sets the double value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.PercentValue">
            <summary>
            Gets / sets the percent value of the control. This will be formatted and
            displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.BindablePercentValue">
            <summary>
            Wrapper property around the selected value. Use this property if you
            want to be able to set the value of the control to NULL.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.PercentTextBox.BindablePercentValueChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.BindableValue"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.Text">
            <summary>
            Overrides the Text property of <see cref="T:System.Windows.Forms.TextBox"/>.
            </summary>
            <remarks>
            This property is overriden in order to normalize the data that is set
            to the Text property and format it as needed. The method <see cref="M:Syncfusion.Windows.Forms.Tools.NumberTextBoxBase.InsertString(System.String,System.Int32,System.Int32,System.String)"/>
            is used to format the data.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.AllowNull">
            <summary>
            Gets or sets the NULL string to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBox.ClipText">
            <summary>
            Returns the clipped text without the formatting.
            </summary>
            <remarks>
            For example, if the Text in the CurrencyTextBox is $45,000.00, the
            ClipText property will give 45000.00.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PercentTextBoxMode">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBoxMode.PercentMode">
            <summary>
            values are edited as percentage values.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBoxMode.NumberMode">
            <summary>
            values are edited as double values and then displayed using percentage formatting.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.m_PercentTextBox">
            <summary>
            PercentTextBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.PercentTextBox)">
            <summary>
            Constructor
            </summary>
            <param name="PercentTextBox">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.PercentTextBoxAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ToolTipAdv">
            <summary>
            Summary description for ToolTipAdv.
            </summary>
            <remarks></remarks>
            Tooltip occurs if the TreeViewAdv control's width is shorter than the text length of some of the nodes and when the mouse pointer is hovered on
            top of the texts of these nodes, a filled rectangle is displayed.The name of the tooltipAdv depends upon the text of the TreeNodeAdv.
            By default tooltips will display ,if the user leaves the mouse pointer stationary over the node(whose text Length is greater than the width 
            of the tree)for a short period. 
            <example1>This example describes how to display Tooltips for the images's associated with the TreeNodeAdv.
            The tooltips for the images ,associated with the nodes can be displayed by using Syncfusion.Windows.Forms.ToolTipAdv along with handling 
            treeViewAdv's MouseHoverEvent .The tooltips for the images are displayed in the same way as the tooltips for the nodes.Here PointToClient and
            PointToNode methods are used in the treeViewAdv.
            <code lang="C#">
            private void treeViewAdv1_MouseHover(object sender, System.EventArgs e) 
            {  
            TreeNodeAdv node=new TreeNodeAdv(); 
            Point p=this.treeViewAdv1.PointToClient(Control.MousePosition); 
            node=this.treeViewAdv1.PointToNode(p); 
            Point mouseLoc=Control.MousePosition; 
            mouseLoc.Offset(10,10); 
            if(node==this.treeViewAdv1.Nodes[0]) 
            { 
            this.toolTipAdv1.ShowPopup(mouseLoc); 
            } 
            if(node==this.treeViewAdv1.Nodes[1]) 
            { 
            this.toolTipAdv2.ShowPopup(mouseLoc); 
            } 
            if(node==this.treeViewAdv1.Nodes[2]) 
            { 
            this.toolTipAdv3.ShowPopup(mouseLoc); 
            } 
            if(node==this.treeViewAdv1.Nodes[3]) 
            { 
            this.toolTipAdv4.ShowPopup(mouseLoc); 
            } 
            } 
            </code><code lang="VB">
            Private Sub treeViewAdv1_MouseHover(ByVal sender As Object, ByVal e As System.EventArgs) 
            Dim node As TreeNodeAdv = New TreeNodeAdv() 
            Dim p As Point=Me.treeViewAdv1.PointToClient(Control.MousePosition) 
            node=Me.treeViewAdv1.PointToNode(p) 
            Dim mouseLoc As Point=Control.MousePosition 
            mouseLoc.Offset(10,10) 
            If node Is Me.treeViewAdv1.Nodes(0) Then 
            Me.toolTipAdv1.ShowPopup(mouseLoc) 
            End If 
            If node Is Me.treeViewAdv1.Nodes(1) Then 
            Me.toolTipAdv2.ShowPopup(mouseLoc) 
            End If 
            If node Is Me.treeViewAdv1.Nodes(2) Then 
            Me.toolTipAdv3.ShowPopup(mouseLoc) 
            End If 
            If node Is Me.treeViewAdv1.Nodes(3) Then 
            Me.toolTipAdv4.ShowPopup(mouseLoc) 
            End If 
            End Sub 
            </code></example1>
            <example2>This example describes the way for completely disabling the Tooltips in the TreeViewAdv and the way  for disabling of tooltips for
            some particular nodes.
            The tooltip for some of the nodes which have HelpText can be disabled by handling ToolTipControl_BeforePopup event.Here in the treeViewAdv, for 
            some of the nodes e.Cancel property is set to true by getting the node's position in ToolTipControl's BeforePopup event handler in which the
            tooltips for the respective nodes are disabled .The tooltips for the same nodes can be enabled by setting the e.Cancel=false in ToolTipControl's 
            BeforePopup Event.
            <code lang="C#">
            private void ToolTipControl_BeforePopup(object sender, CancelEventArgs e)
            { 
            Point pt=this.treeViewAdv1.PointToClient(new Point(MousePosition.X,MousePosition.Y)); 
            TreeNodeAdv node=this.treeViewAdv1.GetNodeAtPoint(pt); 
            if(node!=null) 
            { 
            if(node.Text=="Node1" || node.Text=="Node3"||node.Text=="Node5"||node.Text=="Node7") 
            { 
            e.Cancel=true; 
            } 
            } 
            } 
            </code><code lang="VB">
            Private Sub ToolTipControl_BeforePopup(ByVal sender As Object, ByVal e As CancelEventArgs) 
            Dim pt As Point=Me.treeViewAdv1.PointToClient(New Point(MousePosition.X,MousePosition.Y)) 
            Dim node As TreeNodeAdv=Me.treeViewAdv1.GetNodeAtPoint(pt) 
            If Not node Is Nothing Then 
            If node.Text="Node1" OrElse node.Text="Node3" OrElse node.Text="Node5" OrElse node.Text="Node7" Then 
            e.Cancel=True 
            End If 
            End If 
            End Sub 
            </code></example2>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.m_bInheritHostCursor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.restrictWidth">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.label">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.gradientPanel">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.ctrlHost">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ToolTipAdv.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.#ctor(System.Windows.Forms.Control)">
            <summary></summary>
            <param name="host"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ResetBackgroundColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ShouldSerializeBackgroundColor">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ResetBorder3DStyle">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ShouldSerializeBorder3DStyle">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ResetRestrictWidth">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ShouldSerializeRestrictWidth">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.OnBeforePopup(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the before popup event, when popup is about to be shown
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.UpdateSize">
            <summary>
            Raised when the size of the label's text is changed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ToolTipAdv_TextChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ToolTipAdv_FontChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ToolTipAdv_ForeColorChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.label_TextChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ToolTipAdv_BackgroundImageChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.ToolTipAdv_BackColorChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.Label_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.Label_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.Label_MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ToolTipAdv.Label_MouseLeave(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.Text">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.BackgroundColor">
            <summary>
            The background color, gradient and other styles can be set through 
            this property.
            </summary>
            <remarks>
            The ToolTipAdv control provides this property to enable specialized
            custom gradient backgrounds.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.BorderSingle">
            <summary>
            Gets / sets the 2D border style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.Border3DStyle">
            <summary>
            Gets / sets the style of the 3D border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.BorderStyle">
            <summary>
            Gets / sets the border style of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.RestrictWidth">
            <summary>
            Gets or sets the maximum width of the tooltip control. It wraps text that flows beyond the 
            restricted width.To allow text to flow in a single line, set restricted width to zero.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.InheritHostCursor">
            <summary>
            Indicates if cursor of host control is used.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.IgnoreKeys">
            <summary>
            Indicates whether to ignore all keys.
            </summary>
            <value>True to ignore all keys; False otherwise. Default is False.</value>
            <remarks>
            When the popup is showing, it will "swallow" all the WM_KEYDOWN and WM_CHAR
            messages. To prevent it, set this property to True.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ToolTipAdv.Visible">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarValueChangedEventArgs.Text">
            <summary>
            Gets or sets a value indicating whether the Text is changed in ValueChanged event 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarValueChangedEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the ValueChanged event was handled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdv">
             <summary>
             ProgressBarAdv is an extension to the standard
             progress bar with many styles to choose from.
             </summary>
             <remarks>
             <para>
             The ProgressBarAdv control has background, border and foreground styles.
             The background styles are <see cref="T:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles"/>.
             The border styles are <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BorderStyle"/>.
             The	foreground styles are <see cref="T:Syncfusion.Windows.Forms.Tools.ProgressBarStyles"/>.
             </para>
             <code lang="C#">
             this.progressBarEx1 = new ProgressBarAdv();
             this.progressBarEx1.BackGradientEndColor = System.Drawing.SystemColors.ControlLightLight;
             this.progressBarEx1.BackGradientStartColor = System.Drawing.SystemColors.ControlDark;
             this.progressBarEx1.BackgroundStyle = ProgressBarBackgroundStyles.VerticalGradient;
             this.progressBarEx1.BackSegments = false;
             this.progressBarEx1.Border3DStyle = System.Windows.Forms.Border3DStyle.RaisedOuter;
             this.progressBarEx1.FontColor = System.Drawing.SystemColors.HighlightText;
             this.progressBarEx1.Location = new System.Drawing.Point(240, 8);
             this.progressBarEx1.ProgressStyle = ProgressBarStyles.Tube;
             this.progressBarEx1.SegmentWidth = 20;
             this.progressBarEx1.Size = new System.Drawing.Size(400, 23);
             this.progressBarEx1.TextShadow = false;
             this.progressBarEx1.ThemesEnabled = false;
             this.progressBarEx1.TubeEndColor = System.Drawing.SystemColors.Control;
             this.progressBarEx1.TubeStartColor = System.Drawing.SystemColors.ControlDark;
             this.progressBarEx1.Value = 79;
            </code>
             </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedControl">
            <summary>
            A <see cref="T:System.Windows.Forms.Control"/> implementing the <see cref="T:Syncfusion.Windows.Forms.IThemedControl"/> interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControl.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControl.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ThemedControl.ThemeChanged">
            <summary>
            Fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedControl.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BeginInit">
            <summary>
            Starts initialization mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.EndInit">
            <summary>
            Ends initialization mode and calls <see cref="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.RefreshBrushes"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.EndInit(System.Boolean)">
            <summary>
            Implementation of the <see cref="T:System.ComponentModel.ISupportInitialize"/> interface.
            </summary>
            <param name="refreshBrushes">Set this to False if you want to refresh brushes later.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.renderer">
            <summary>
            Gets/Sets the renderer of the ProgressBarAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.OnBarPaint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control.
            </summary>
            <param name="sender">Event sender.<see cref="T:System.Object"/></param>
            <param name="e">Event data.<see cref="T:System.Windows.Forms.PaintEventArgs"/></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.UpdateRenderer(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Paints the control by using Renderer class.
            </summary>
            <param name="e">Provides data for the <see cref="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdv"/> Paint event.</param>
            <param name="progressRectangle">The <see cref="T:System.Drawing.Rectangle"/> is helps to draw the progress.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <overload>
            Draws the contents of the progress bar at the specified rectangle. This method can only
            be called when the control has no handle attached or is not visible.
            </overload>
            <summary>
            Draws the contents of the progress bar at the specified rectangle. This method can only
            be called when the control has no handle attached or is not visible.
            </summary>
            <param name="g">The graphics context.</param>
            <param name="rect">The rectangle.</param>
            <remarks>
            Essential Grid calls this method to render the contents of the progress bar
            within a cell's area.
            <para/>
            No border will be drawn around the control.
            <para/>
            The method will throw an InvalidOperationException if the control has a handle
            and is visible.
            <para/>
            The method will reset the bounds and BorderStyle of this control.
            <note type="note">This method only supports horizontal progress bars. We will add support for static drawing of vertical progress bars in the future.</note>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the contents of the progress bar at the specified rectangle. This method can only
            be called when the control has no handle attached or is not visible.
            </summary>
            <param name="g">The graphics context.</param>
            <param name="clientRectangle">The rectangle.</param>
            <param name="drawRightToLeft">Specifies if the progressbar should be drawn right to left.</param>
            <remarks>
            Essential Grid calls this method to render the contents of the progress bar
            within a cell's area.
            <para/>
            No border will be drawn around the control.
            <para/>
            The method will throw an InvalidOperationException if the control has a handle
            and is visible.
            <para/>
            The method will reset bounds and BorderStyle of this control.
            <note type="note">This method only support horizontal progress bars. We will add support for static drawing of vertical progress bars in the future.</note>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeGradientStartColor">
            <summary>
             Serialize the gradient color
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetGradientStartColor">
            <summary>
            Resets the gradient color
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeGradientEndColor">
            <summary>
            Serialize the gradient color
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetGradientEndColor">
            <summary>
             Resets the gradient color
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.m_ShowProgressImage">
            <summary>
            Initialize the whether the Marker imager is shown or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetShowProgressImage">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShowProgressImage"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeShowProgressImage">
            <summary>
            Indicates whether the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShowProgressImage"/> property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.m_ProgressImage">
            <summary>
            Display the marker image.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetProgressImage">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImage"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeProgressImage">
            <summary>
            Indicates whether the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImage"/> property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.m_ProgressImageSize">
            <summary>
            Specify the marker image size.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetProgressImageSize">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImageSize"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeProgressImageSize">
            <summary>
            Indicates whether the current value of the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImageSize"/> property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeBorderStyle">
            <summary>
            Serialize the borderstyle
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetBorderStyle">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShouldSerializeBorderColor">
            <summary>
            Serializes the bordercolor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ResetBorderColor">
            <summary>
            Resets the bordercolor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.RefreshBrushes">
            <summary>
            Recreates the brushes used to draw the ProgressBar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawFillColor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the fill color of the ProgressBar when continuous is selected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawSystemSegments(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws segments in the given rectangle when system is selected.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> to draw the segments in.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the dual gradient of the ProgressBar when gradient is selected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawImage(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Image)">
            <summary>
            Draws the image of the ProgressBar when image is selected.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics"/></param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> to draw the image in.</param>
            <param name="img">The <see cref="T:System.Drawing.Image"/> used to draw in the rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawTube(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the dual tube of the ProgressBar when tube is selected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawMultipleGradient(System.Drawing.Graphics,System.Drawing.Rectangle,System.Collections.ArrayList,System.Boolean,System.Boolean)">
            <summary>
            Draws the multiple gradient of the ProgressBar when multiple gradient is selected.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.GetSegmentRegion(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the region of the segments if segment mode is selected.
            </summary>
            <param name="rc"><see cref="T:System.Drawing.Rectangle"/>The rectangle in which the segments are situated in.</param>
            <param name="isoffset">Indicates the segments are offset.</param>
            <returns><see cref="T:System.Drawing.Region"/>The region containing the segments.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.GetClipRect(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isoffset"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Vertical">
            <summary>
            Indicates whether the ProgressBar is vertical.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Increment">
            <summary>
            Increments the Value property with the Step value.
            </summary>
            <returns>The success or failure of the Increment. It fails if the incremented value is bigger than the maximum.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Decrement">
            <summary>
            Decrements the Value property with the Step value.
            </summary>
            <returns>The success or failure of the Increment. It fails if the incremented value is smaller than minimum.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ValueChanged">
            <summary>
            Handle this event to set the text of the progressbar when the value changes.
            Make sure the TextStyle property is set to Custom.
            </summary>
            <remarks>
            To set the text of the progressbar, set the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarValueChangedEventArgs.Text"/> and the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarValueChangedEventArgs.Handled"/> to True.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.DrawWaitingCustomRender">
            <summary>
            Handle this event to draw a custom waiting render.
            WaitingCustomRender must be set to True.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Renderer">
            <summary>
            Gets/Sets the Renderer of the ProgressBarAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Value">
            <summary>
            Gets / sets the value between minimum and maximum.
            </summary>
            <remarks>
            This value represents the progress state of the ProgessBar. For default if it is set to 50, minimum=0 and maximum=100 ( 50% ).
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Minimum">
            <summary>
            Gets / sets the lower boundary for the value.
            </summary>
            <remarks>
            By default, its value is zero which means that the value of the ProgressBar cannot take values lower than zero.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Maximum">
            <summary>
            Gets / sets the upper boundary for the value.
            </summary>
            <remarks>
            By default, its value is 100 which means that the value of the ProgressBar cannot take values higher than 100.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Step">
            <summary>
            Gets / sets the value to increment when Increment() and Decrement() methods.
            </summary>
            <remarks>
            By default, its value is 10 which means that when Increment() is called, the value of the ProgressBar is incremented by 10.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.CustomWaitingRender">
            <summary>
            Indicates whether the waiting gradient will be replaced by another custom waiting render which is defaulted to segments.
            To customize it, handle the DrawCustomWaitingRender event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.WaitingGradientWidth">
            <summary>
            Gets / sets the width of the waiting gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.WaitingGradientEnabled">
            <summary>
            Indicates whether the waiting gradient is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.WaitingGradientInterval">
            <summary>
            Gets / sets the interval of the waiting gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ForeSegments">
            <summary>
            Indicates whether the foreground is segmented.
            </summary>
            <remarks>
            By default, its value is True which means that the foreground will be drawn segmented.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.StretchMultGrad">
            <summary>
            Indicates whether the multiple gradient is compressed if the value is smaller than the maximum.
            </summary>
            <remarks>
            By default, its value is True which means that if the value is less than the maximum, the multiple gradient is compressed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.MultipleColors">
            <summary>
            Gets / sets the colors of the foreground multiple gradient when ForegroundStyle is multiple gradient.
            </summary>
            <remarks>
            By default, its value is an empty color array. You can add colors to multiple gradients by modifying this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.GradientStartColor">
            <summary>
            Gets / sets the start color of the foreground gradient when ForegroundStyle is gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.GradientEndColor">
            <summary>
            Gets / sets the end color of the foreground gradient when ForegroundStyle is gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TubeStartColor">
            <summary>
            Gets / sets the start color of the foreground tube when ForegroundStyle is Tube.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TubeEndColor">
            <summary>
            Gets / sets the end color of the foreground tube when ForegroundStyle is Tube.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackSegments">
            <summary>
            Indicates whether the background is segmented.
            </summary>
            <remarks>
            By default, its value is False.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackMultipleColors">
            <summary>
            Gets / sets the colors of the background multiple gradients when BackgroundStyle is multiple gradient.
            </summary>
            <remarks>
            By default, its value is an empty array of colors.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackGradientStartColor">
            <summary>
            Gets / sets the start color of the background gradient when BackgroundStyle is gradient or vertical gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackGradientEndColor">
            <summary>
            Gets / sets the end color of the background gradient when BackgroundStyle is gradient or vertical gradient.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackTubeStartColor">
            <summary>
            Gets / sets the start color of the background tube when BackgroundStyle is Tube.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackTubeEndColor">
            <summary>
            Gets / sets the end color of the background tube when BackgroundStyle is Tube.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TextAlignment">
            <summary>
            Gets / sets the text alignment of the ProgressBarAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.StretchImage">
            <summary>
            Indicates whether the foreground image will be stretched.
            </summary>
            <remarks>
            By default, its value is True.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ForegroundImage">
            <summary>
            Gets / sets the image to draw on the foreground when ProgressStyle is Image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.SegmentWidth">
            <summary>
            Gets / sets the width of the segments.
            </summary>
            <remarks>By default, its value is 12.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.FontColor">
            <summary>
            Gets / sets the color of the font.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ForeColor">
            <summary>
            Gets / sets the color used to draw the foreground in segment mode and constant mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TextVisible">
            <summary>
            Indicates whether the text is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TextStyle">
             <summary>
            Gets / sets the style of the text:
            	-Percentage
            	-Value (Ex:  70/150 )
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TextOrientation">
            <summary>
            Gets / sets the orientation of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.TextShadow">
            <summary>
            Indicates whether the text shadow is visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.CustomText">
            <summary>
            Gets or sets the custom text for the ProgressBarAdv.
            </summary>
            <value>The custom text.</value>
            <remarks>
            This value represents the CustomText of the ProgessBarAdv. The customText is returned only if we set the ProgressBarTextStyles.Custom 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressStyle">
            <summary>
            Gets / sets the style of the foreground:
             -Constant
             -Gradient
             -Multiple gradient
             -Tube
             -Image
             -System
            </summary>
            <remarks>
            By default, its value is constant.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ShowProgressImage">
            <summary>
            Gets or sets whether the Marker image is shows on ProgressBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImage">
            <summary>
            Gets / sets the marker image to draw on right side of the Progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressImageSize">
            <summary>
            Gets / sets the marker image size to draw on right side of the Progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressFallbackStyle">
            <summary>
            Gets / sets the style of the foreground when ProgressStyle is System and the system can not support themes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.Border3DStyle">
            <summary>
            Gets / sets the style of the border when BorderStyle is Fixed3D.
            </summary>
            <remarks>
            By default, its value is Sunken.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BorderStyle">
            <summary>
            Gets / sets the style of the border. It can be None, 3D or 2D.
            </summary>
            <remarks>
            By default, its value is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BorderSingle">
            <summary>
            Gets / sets the style of the border when BorderStyles is FixedSingle.
            </summary>
            <remarks>
            By default, its value is Solid.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BorderColor">
            <summary>
            Gets / sets the color of the border when BorderStyles is FixedSingle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackgroundStyle">
            <summary>
            Gets / sets the style of the background. It can have the following values:
            -Image
            -Gradient
            -Vertical gradient
            -Tube
            -Multiple gradient
            -System
            -None
            </summary>
            <remarks>
            By default, its value is None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.BackgroundFallbackStyle">
            <summary>
            Gets / sets the style of the background when BackgroundStyle is set to System and the system cannot support themes.
            </summary>
            <remarks>
            By default, its value is None.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdv.ProgressOrientation">
            <summary>
            Gets / sets the horizontal or vertical style of the progress bar.
            </summary>
            <remarks>
            By default, its value is Horizontal.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer">
            <summary>
            Interface used to customize the appearance and ProgressStyle of the ProgressBarAdv.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer.DrawBackground(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws the background of the ProgressBar.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to draw the background.</param>
            <param name="backSegments">Indicates whether the background is segmented.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the border of the ProgressBar.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to draw the border.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> of the border.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer.DrawProgress(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws the foreground of the ProgressBar.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to draw background of the Progress.</param>
            <param name="clipRectangle">The <see cref="T:System.Drawing.Rectangle"/> provide the control bounds.</param>
            <param name="progressRectangle">The <see cref="T:System.Drawing.Rectangle"/> provides the progress rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the specified text string at the specified location.
            </summary>
            <param name="graphics">The <see cref="T:System.Drawing.Graphics"/> object to draw the text.</param>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> to draw in.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.IProgressBarAdvRenderer.UpdateRenderer(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
            Update the Renderer.
            </summary>
            <param name="PaintEventArgs">Provides data for the <see cref="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdv"/> Paint event.</param>
            <param name="progresssRectangle">The <see cref="T:System.Drawing.Rectangle"/> is helps to draw the progress.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer">
            <summary>
            Default ProgressBarAdv Renderer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.m_ProgressBar">
            <summary>
            Initialize the ProgressBarAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.#ctor(Syncfusion.Windows.Forms.Tools.ProgressBarAdv)">
            <summary>
            Constructor of the Renderer class
            </summary>
            <param name="progressBar">ProgressBarAdv</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.UpdateRenderer(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle)">
            <summary>
             Update the Renderer.
            </summary>
            <param name="PaintEventArgs">Provides data for the <see cref="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.ProgressBarAdv"/> Paint event.</param>
            <param name="progressRectangle">The <see cref="T:System.Drawing.Rectangle"/> used to draw the progress</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.DrawBackground(System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws the background of the ProgressBar.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to draw the background.</param>
            <param name="segmented">Indicates whether the background is segmented.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.DrawProgress(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws the foreground of the ProgressBar.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to draw the progress.</param>
            <param name="ClipRectangle">The <see cref="T:System.Drawing.Rectangle"/> to draw the progress.</param>
            <param name="progressRectangle">The <see cref="T:System.Drawing.Rectangle"/> used to draw the background of the progress</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the border of the ProgressBar.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to the border.</param>
            <param name="rc">The <see cref="T:System.Drawing.Rectangle"/> of the border.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.DrawText(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the specified text string at the specified location.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> object to the text.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> of the ProgressBarAdv</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvRenderer.ProgressBarAdv">
            <summary>
             Gets the ProgressBarAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDrawEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the DrawWaitingCustomRender event was handled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDrawEventArgs.Rectangle">
            <summary>
            Gets the bounding rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDrawEventArgs.Graphics">
            <summary>
            Gets the Graphics used to paint.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarEx">
            <summary>
            The ProgressBarEx type will soon be replaced with the ProgressBarAdv for consistency in
            control naming in our library.
            Please replace all occurrences of ProgressBarEx with ProgressBarAdv in your application.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDesigner">
            <summary>
            ProgressBarAdv Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAdvDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility">
            <summary>
            ProgressBar Coded UI Accessiblity 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.progressBar">
            <summary>
            Variable to hold ProgressBarAdv instance
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.ProgressBarAdv)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.Role">
            <summary>
            Gets the AccessibleRole
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.Description">
            <summary>
            Gets the Description
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.Name">
            <summary>
            Gets the name
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ProgressBarAccessibility.Value">
            <summary>
            Gets the Value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarStyles">
            <summary>
            Specifies the foreground styles of the ProgressBarAdv.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Constant">
            <summary>
            The foreground of the ProgressBar will be drawn with a constant color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Gradient">
            <summary>
            The foreground of the ProgressBar will be drawn with a gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.MultipleGradient">
            <summary>
            The foreground of the ProgressBar will be drawn with a multiple gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Tube">
            <summary>
            The foreground of the ProgressBar will be drawn with a vertical tube-like gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Image">
            <summary>
            The foreground of the ProgressBar will be drawn with an image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.System">
            <summary>
            The foreground of the ProgressBar will be drawn by the system.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.WaitingGradient">
            <summary>
            The foreground of the ProgressBar will be drawn with a moving gradient line.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Metro">
            <summary>
            The foreground of the ProgressBar will be drawn by Metro.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarStyles.Custom">
            <summary>
            The foreground of the ProgressBar will be drawn by using the CustomRender class which is inherited from "IProgressBarRenderer" interface.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarTextStyles">
            <summary>
            Specifies the text styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarTextStyles.Percentage">
            <summary>
            The text of the ProgressBar will be a percentage value. Ex: 75%
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarTextStyles.Value">
            <summary>
            The text of the ProgressBar will be the value of the format: ProgressBar / the maximum value. Ex 75/200
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarTextStyles.Custom">
            <summary>
            The text of the ProgressBar will be asked through the ValueChanged event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles">
            <summary>
            Specifies the background styles that the ProgressBar can draw.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.Image">
            <summary>
            The background is drawn with an image.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.Gradient">
            <summary>
            The background is drawn with a gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.VerticalGradient">
            <summary>
            The background is drawn with a vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.Tube">
            <summary>
            The background is drawn with a vertical tube-like gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.MultipleGradient">
            <summary>
            The background is drawn with a multiple gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.System">
            <summary>
            The background is drawn by the system.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ProgressBarBackgroundStyles.None">
            <summary>
            The background is drawn with the Backcolor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DisplayArrowButtons">
            <summary>
            Specifies the arrow button that should be shown in an arrow bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DisplayArrowButtons.None">
            <summary>
            Don't show buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DisplayArrowButtons.Single">
            <summary>
            Show up and down buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DisplayArrowButtons.All">
            <summary>
            Show up, down, move first and move last buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ArrowButtonBar">
            <summary>
            This control is used by <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/> and <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/>
            to display arrow buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonBar">
            <summary>
              ButtonBar is a base class for displaying several buttons in one bar. It is used by <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/>
              and <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnButtonBarMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ButtonBar.ButtonBarMouseDown"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.#ctor">
            <summary>
            Initializes a new button bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.BeginUpdate">
            <summary>
            Suspends updating the bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.EndUpdate">
            <overload>
            Resumes updating the bar.
            </overload>
            <summary>
            Resumes updating the bar and refreshes it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.EndUpdate(System.Boolean)">
            <summary>
            Resumes updating the bar and optionally refreshes it.
            </summary>
            <param name="refresh">Indicates whether button bar should be refreshed; if False button will only be refreshed when it is marked dirty.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnCancelMode(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ButtonBar.CancelMode"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.ComputeButtonBarChildBounds">
            <summary>
            Returns the bounds for the button bar.
            </summary>
            <returns>A <see cref="T:System.Drawing.Rectangle"/> indicating where the bar should be drawn.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnCreateButtonBarChild">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.InternalButtonBar"/> and initializes it with the layout information.
            </summary>
            <returns>The initialized <see cref="T:Syncfusion.Windows.Forms.InternalButtonBar"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnHandleDestroyed(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.ResetToolTips">
            <summary>
            Reinitializes and hides ToolTips.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ButtonBar.OnButtonLookChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ButtonBar.ButtonLookChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ButtonBar.CancelMode">
            <summary>
            Occurs when a WM_CANCELMODE is received.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ButtonBar.ButtonLookChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.ButtonBar.ButtonLook"/> is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ButtonBar.ButtonBarMouseDown">
            <summary>
            Occurs before the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event is raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonBar.Updating">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.ButtonBar.BeginUpdate"/> was called.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonBar.DefaultSize">
            <summary>
            Returns the default size of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonBar.ButtonBarChild">
            <summary>
            Gets or sets a <see cref="T:Syncfusion.Windows.Forms.InternalButtonBar"/> that holds an array of buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonBar.ShowToolTips">
            <summary>
            Indicates whether ToolTips are being shown for tabs that have ToolTips set on them.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ButtonBar.ButtonLook">
            <summary>
            Gets or sets the button look for the arrow buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IInternalArrowButtonParent">
            <summary>
            An interface for hosting <see cref="T:Syncfusion.Windows.Forms.InternalArrowButton"/> objects and
            receiving clicks from these buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalArrowButtonParent.EnabledColor">
            <summary>
            Gets / sets the color of arrows in enabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalArrowButtonParent.DisabledColor">
            <summary>
            Gets / sets the color of arrows in disabled buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IInternalButtonParent">
            <summary>
            An interface for hosting <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> objects and
            receiving clicks from these buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalButtonParent.OnClickedButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Occurs when the specified button is clicked or the mouse is pressed down on the button.
            </summary>
            <param name="button">The source of the event.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowButtonBar.displayArrowButtons">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowButtonBar.enabledColor">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowButtonBar.disabledColor">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.ArrowButtonBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.OnArrowButtonClicked(Syncfusion.Windows.Forms.ArrowButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ArrowButtonBar.ArrowButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.ArrowButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.OnCreateButtonBarChild">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.OnClickedButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Occurs when the specified button was clicked or the mouse is pressed down on the button.
            </summary>
            <param name="button">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.InitBars">
            <summary>
            Initializes the the arrow bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.ResetEnabledColor">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.ArrowButtonBar.EnabledColor"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonBar.ResetDisabledColor">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisabledColor"/> to default.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ArrowButtonBar.ArrowButtonClicked">
            <summary>
            Occurs when the user clicks on an arrow button.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ArrowButtonBar.ArrowButtonChanged">
            <summary>
            Occurs when Arrow button is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ArrowButtonBar.ThemeChanged">
            <summary>
            Fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.RepeatClickDelay">
            <summary>
            Gets or sets the number of Milliseconds to wait before firing scroll event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.MinRepeatClickDelay">
            <summary>
            Gets or sets the Shortest interval for firing scroll event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisplayArrowButtons">
            <summary>
            Gets or sets the arrow buttons to be shown in an arrow bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.EnableButtonFlags">
            <summary>
            Gets or sets the buttons to show enabled. Other buttons are disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.EnabledColor">
            <summary>
            Gets or sets the color of arrows in enabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisabledColor">
            <summary>
            Gets or sets the color of arrows in disabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.NoArrowButtons">
            <summary>
            Returns an array with buttons to show when <see cref="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisplayArrowButtons"/> is <see cref="F:Syncfusion.Windows.Forms.DisplayArrowButtons.None"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.SingleArrowButtons">
            <summary>
            Returns an array with buttons to show when <see cref="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisplayArrowButtons"/> is <see cref="F:Syncfusion.Windows.Forms.DisplayArrowButtons.Single"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonBar.AllArrowButtons">
            <summary>
            Returns an array with buttons to show when <see cref="P:Syncfusion.Windows.Forms.ArrowButtonBar.DisplayArrowButtons"/> is <see cref="F:Syncfusion.Windows.Forms.DisplayArrowButtons.All"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ArrowType">
            <summary>
            An identifier for various arrow buttons in a <see cref="T:Syncfusion.Windows.Forms.ArrowButtonBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.Previous">
            <summary>
            The "previous item" button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.Next">
            <summary>
            The "next item" button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.First">
            <summary>
            The "first item" button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.Last">
            <summary>
            The "last item" button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.AddNew">
            <summary>
            The "AddNew item" button for items in a table.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ArrowType.All">
            <summary>
            All buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ArrowPaint">
            <summary>
            Helper routines for drawing arrow buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowPaint.CenterInRect(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Calculates coordinates for a centered rectangle.
            </summary>
            <param name="rect">The existing bounds.</param>
            <param name="size">The size of the rectangle to be centered.</param>
            <returns>A rectangle inside the specified bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowPaint.PaintIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Drawing.Bitmap,System.Drawing.Color)">
            <summary>
            Paints the specified bitmap substituting black pixels with a new color.
            </summary>
            <param name="g">A Graphics object used to draw the bitmap.</param>
            <param name="visualBounds">A Rectangle which contains the boundary data of the rectangle.</param>
            <param name="offset">A Point that specifies pixel to offset the bitmap from its origin point.</param>
            <param name="bmp">The Bitmap to be drawn on the screen.</param>
            <param name="foreColor">The new color used to substitute black pixels.</param>
            <returns>A Rectangle which contains the boundary data of the drawn bitmap.</returns>
            <remarks>
            The PaintIcon routine
            will substitute black pixels of the original bitmap and draw them with the
            specified forecolor. The bitmap is centered inside the specified bounds. 
            Use the offset if you want to display a "pressed button" state. If the button is
            pressed, specify offset = new Point(1, 1).
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowPaint.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ArrowType,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Loads the bitmap from manifest and paints it substituting black pixels with a new color.
            </summary>
            <param name="g">A Graphics object used to draw the bitmap.</param>
            <param name="bounds">A Rectangle which contains the boundary data of the rectangle.</param>
            <param name="arrowType">The type of button to draw.</param>
            <param name="offset">A Point that specifies pixels to offset the bitmap from its origin point.</param>
            <param name="arrowColor">The new color used to substitute black pixels.</param>
            <returns>A Rectangle which contains the boundary data of the drawn bitmap.</returns>
            <remarks>
            The DrawArrow routine
            will substitute black pixels of the original bitmap and draw them with the
            specified forecolor. The bitmap is centered inside the specified bounds. 
            Use the offset if you want to display a "pressed button" state. If the button is
            pressed, specify offset = new Point(1, 1).
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalArrowButton">
            <summary>
            This is a specialized version of the <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> that draws an arrow. Used by <see cref="T:Syncfusion.Windows.Forms.ArrowButtonBar"/> in
            <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/> and <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalButton">
            <summary>
            InternalButton are buttons that are displayed inside a <see cref="T:Syncfusion.Windows.Forms.InternalButtonBar"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.state">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.dirty">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.cookie">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.owner">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.tooltip">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.tooltipID">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.m_style">
            <summary>
            Style of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.m_office2007ColorTable">
            <summary>
            Color table for Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButton.m_colorScheme">
            <summary>
            Specifies office 2007 color scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with a specified size.
            </summary>
            <param name="size">The initial size of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with a cookie.
            </summary>
            <param name="cookie">The cookie for the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with an owner and cookie.
            </summary>
            <param name="owner">The owner of the button.</param>
            <param name="cookie">The cookie for the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Object,System.Object,System.String)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with a owner, cookie and ToolTip text.
            </summary>
            <param name="owner">The owner of the button.</param>
            <param name="cookie">The cookie for the button.</param>
            <param name="tooltip">The ToolTip text.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Object,System.Object,System.String,System.Drawing.Size)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with a owner, cookie, ToolTip text and size.
            </summary>
            <param name="owner">The owner of the button.</param>
            <param name="cookie">The cookie for the button.</param>
            <param name="tooltip">The ToolTip text.</param>
            <param name="size">The initial size of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.#ctor(System.Object,System.Object,System.String,System.Drawing.Size,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> with a owner, cookie, ToolTip text, size and a value that
            indicates whether this control should look like a button or if just a centered text should be drawn.
            </summary>
            <param name="owner">The owner of the button.</param>
            <param name="cookie">The cookie for the button.</param>
            <param name="tooltip">The ToolTip text.</param>
            <param name="size">The initial size of the button</param>
            <param name="drawButton">A value indicating if this should look like a button or if just a centered text should be drawn.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Returns the preferred size of button.
            </summary>
            <param name="maxSize">The maximum allowed size.</param>
            <returns>The preferred size based on text, button type.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.AdjustSize">
            <summary>
            Recalculates the best size for the button and resizes it.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.OnStyleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.GetWinFormButtonState(System.Boolean)">
            <summary>
            The <see cref="T:System.Windows.Forms.ButtonState"/> for this button.
            </summary>
            <param name="flatLook">True if flat button; False if normal button.</param>
            <returns>The <see cref="T:System.Windows.Forms.ButtonState"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.ResetToolTip">
            <summary>
            Reinitializes and hides the ToolTip.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.InitToolTip(System.Drawing.Rectangle)">
            <summary>
            Initializes ToolTip area at the specified bounds.
            </summary>
            <param name="bounds"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.CenterInRect(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Calculates coordinates for a centered rectangle.
            </summary>
            <param name="rect">The existing bounds.</param>
            <param name="size">The size of the rectangle to be centered.</param>
            <returns>A rectangle inside the specified bounds.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Paints the button.
            </summary>
            <param name="g">A Graphics object used to draw the bitmap.</param>
            <param name="bounds">A Rectangle which contains the boundary data of the rectangle.</param>
            <param name="flatLook">True if flat looking button; False if normal.</param>
            <param name="barArea">A Rectangle which contains the boundary data of the parent bar rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.OnOwnerChanged">
            <summary>
            Called when <see cref="P:Syncfusion.Windows.Forms.InternalButton.Owner"/> is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.OnCookieChanged">
            <summary>
            Called when <see cref="P:Syncfusion.Windows.Forms.InternalButton.Cookie"/> is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.OnStateChanged">
            <summary>
            Called when state is changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButton.OnToolTipChanged">
            <summary>
            Called when <see cref="P:Syncfusion.Windows.Forms.InternalButton.ToolTip"/> is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.ThemedDrawing">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Style">
            <summary>
            Gets or sets the visual style of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Office2007ColorScheme">
            <summary>
            Gets or sets office 2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Owner">
            <summary>
            Gets / sets the owner of this button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Cookie">
            <summary>
            Some external state (e.g. button type or command id).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.ToolTip">
            <summary>
            Gets / sets the ToolTip text for this button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Bounds">
            <summary>
            Gets / sets the bounds of this button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Size">
            <summary>
            Gets / sets the size of this button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.SpinButton">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.HideButton">
            <summary>
            Indicates whether button is hidden.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.RepeatClick">
            <summary>
            Indicates whether this button supports repeated clicking when the user holds down the mouse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Dirty">
            <summary>
            Indicates whether it is a Dirty flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Enabled">
            <summary>
            Indicates the Enabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Hovered">
            <summary>
            Indicates the Hovered state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Pushed">
            <summary>
            Indicates the Pushed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.Checked">
            <summary>
            Indicates the Checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButton.DragTarget">
            <summary>
            Indicates the DragTarget state.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.#ctor(Syncfusion.Windows.Forms.ArrowType)">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalArrowButton"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalArrowButton"/> and specifies the <see cref="T:Syncfusion.Windows.Forms.ArrowType"/> for the button.
            </summary>
            <param name="type">Specifies the arrow to be drawn in the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.#ctor(System.Object,Syncfusion.Windows.Forms.ArrowType)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalArrowButton"/> and specifies the <see cref="T:Syncfusion.Windows.Forms.ArrowType"/> for the button and owner.
            </summary>
            <param name="owner">The owner of this button.</param>
            <param name="type">Specifies the arrow to be drawn in the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.#ctor(System.Object,Syncfusion.Windows.Forms.ArrowType,System.String)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalArrowButton"/> and specifies the <see cref="T:Syncfusion.Windows.Forms.ArrowType"/> for the button, owner, and ToolTip.
            </summary>
            <param name="owner">The owner of this button.</param>
            <param name="type">Specifies the arrow to be drawn in the button.</param>
            <param name="tooltip">The ToolTip for this button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.GetPreferredSize(System.Drawing.Size)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalArrowButton.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Rectangle)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalArrowButton.Type">
            <summary>
            Returns the arrow to draw.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ArrowButtonEventArgs">
            <summary>
            Provides event data for the <see cref="E:Syncfusion.Windows.Forms.ArrowButtonBar.ArrowButtonClicked"/> event of
            a <see cref="T:Syncfusion.Windows.Forms.ArrowButtonBar"/>, <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/> or <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/>
            object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ArrowButtonEventArgs.#ctor(Syncfusion.Windows.Forms.ArrowType)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.ArrowButtonEventArgs"/> object with event data.
            </summary>
            <param name="arrow">Specifies the arrow button that was clicked.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ArrowButtonEventArgs.Arrow">
            <summary>
            Gets / sets the arrow button that was clicked.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ArrowButtonEventHandler">
             <summary>
            Handles the  <see cref="E:Syncfusion.Windows.Forms.ArrowButtonBar.ArrowButtonClicked"/> event.
             </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IRecordNavigationBarData">
            <summary>
            Returns the values of a record navigation bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IRecordNavigationBarData.MinRecord">
            <summary>
            Returns the minimum record.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IRecordNavigationBarData.MaxRecord">
            <summary>
            Returns the maximum record.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IRecordNavigationBarData.AllowAddNew">
            <summary>
            Indicates whether adding new records is enabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RecordNavigationBarTextBox.VK_ESCAPE">
            <summary>
            To capture the ESC key.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationBar">
            <summary>
            The record navigation bar displays arrow buttons and current record fields.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.ShowTextBox(System.Boolean)">
            <summary>
            Initializes the record field textbox.
            </summary>
            <param name="setFocus">True if focus should be set to the textbox.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnEnabledChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.CenterInRect(System.Drawing.Rectangle,System.Drawing.Size)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.MoveFirst">
            <summary>
            Sets the current record position to first record. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.MoveNext">
            <summary>
            Sets the current record position to the next record.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.MovePrevious">
            <summary>
            Sets the current record position to the previous record.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.MoveLast">
            <summary>
            Sets the current record position to the last record.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnClickedButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Occurs when the specified button was clicked or the mouse is pressed down on the button.
            </summary>
            <param name="button">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.SetCurrentRecord(System.Int32,System.Boolean)">
            <overload>
            Sets the current record position.
            </overload>
            <summary>
            Sets the current record position.
            </summary>
            <param name="value">The new record index.</param>
            <param name="force">Indicates whether record should be applied to text box even if <see cref="P:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecord"/>
            is not changed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.SetCurrentRecord(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Sets the current record position and lets you specify if <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging"/>
            and <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged"/> events should be raised.
            </summary>
            <param name="value">The new record index.</param>
            <param name="force">Indicates whether record should be applied to text box even if <see cref="P:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecord"/>
            is not changed.</param>
            <param name="raiseChanged">Specifies if <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging"/>
            and <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged"/> events should be raised.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.SetValues(System.Int32,System.Int32,System.String,System.Boolean,System.Int32)">
            <summary>
            Thread safe method that applies all settings at once.
            </summary>
            <param name="min">The minimum record position.</param>
            <param name="max">The maximum record position.</param>
            <param name="label">The label to be displayed before the record field text box.</param>
            <param name="allowAdd">Indicates whether adding new records is enabled.</param>
            <param name="current">The current record position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.RaiseCurrentRecordChangingEvent(Syncfusion.Windows.Forms.CurrentRecordEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnCurrentRecordChanging(System.Int32@)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging"/> event.
            </summary>
            <param name="record">The new record index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.RaiseCurrentRecordChangedEvent(Syncfusion.Windows.Forms.CurrentRecordEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.OnCurrentRecordChanged(System.Int32)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged"/> event.
            </summary>
            <param name="record">The new record index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBar.GetCorrectedYCoord(System.Drawing.Graphics,System.String)">
            <summary>
            Calculates corrected Y location of numbers.
            </summary>
            <param name="g">Grapchics object.</param>
            <param name="text">Output text.</param>
            <returns>Corrected Y coordinate.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging">
            <summary>
            Occurs when the current record is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged">
            <summary>
            Occurs when the current record is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.AllowStepIncrease">
            <summary>
            Indicates whether the step for increasing the record position should be increased
            when the user holds down the mouse on a record navigation button for a longer period.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.NoArrowButtons">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.SingleArrowButtons">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.AllArrowButtons">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecord">
            <summary>
            Gets or sets the current record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.MinRecord">
            <summary>
            Gets or sets the minimum record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.MaxRecord">
            <summary>
            Gets or sets the maximum record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.AllowAddNew">
            <summary>
            Indicates whether adding new records is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.RnbData">
            <summary>
            Gets or sets <see cref="T:Syncfusion.Windows.Forms.IRecordNavigationBarData"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.Label">
            <summary>
            Gets or sets the label to be displayed before the record field textbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.MaxLabel">
            <summary>
            Gets or sets an optional maximum label (e.g. "of 1000").
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBar.TextBox">
            <summary>
            Gets or sets the textbox where users can enter record indexes manually.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationBarActionList">
            <summary>
             RecordNavigationBar Action List class for SmartTag.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationBarActionList.InitializeActionList">
            <summary>
            Initializes the action list to be added.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBarActionList.Name">
            <summary>
            Gets/Sets the name of the control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBarActionList.Label">
            <summary>
            Label to be displayed before the record field textbox
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBarActionList.DisplayArrowButtons">
            <summary>
            Specifies arrow button to be shown in an arrow bar
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationBarDesigner">
            <summary>
            Designer class for RecordNavigation bar
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RecordNavigationBarDesigner.actionLists">
            <summary>
            Collection of designer action list object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationBarDesigner.ActionLists">
            <summary>
            Collection of designer action list object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs">
            <summary>
            Provides data about a <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging"/> and <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged"/> events of a <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CurrentRecordEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs"/>.
            </summary>
            <param name="record">The record index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CurrentRecordEventArgs.Record">
            <summary>
            Gets / sets the record index.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrentRecordChangedEventHandler">
            <summary>
            Handles a <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanged"/> event of a <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CurrentRecordChangingEventHandler">
            <summary>
            Handles a <see cref="E:Syncfusion.Windows.Forms.RecordNavigationBar.CurrentRecordChanging"/> event of a <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationControl">
            <summary>
            A RecordNavigationControl is a splitter frame with a <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/> on the bottom left scrollbar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterControl">
            <summary>
            A splitter control provides support for dynamic splitting of the viewable area.
            </summary>
            <remarks>
            The controls shown inside the splitter control must implement
            the <see cref="T:Syncfusion.Windows.Forms.ISplitterPaneSupport"/> interface. Additionally, these controls need to have built-in logic
            that allows displaying one set of data in different views. <para/>
            The <see cref="T:Syncfusion.Windows.Forms.IScrollBarWrapperContainer"/> interface should be implemented if scrollbars of the child
            pane should be shared with the parent splitter frame. <para/>
            The controls in the pane should also implement <see cref="T:Syncfusion.Windows.Forms.ICreateNewWindow"/>. This allows the control
            to create new panes and initialize them when an additional row or column is opened in the splitter control.
            If a control does not implement <see cref="T:Syncfusion.Windows.Forms.ICreateNewWindow"/>, the splitter control will call the
            <see cref="M:Syncfusion.Windows.Forms.ISplitterPaneFactory.CreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control,System.Windows.Forms.Control)"/> of the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitterPaneFactory"/>.<para/>
            Essential Grid's GridControlBase is a control that provides all of this logic and can be dropped into a
            splitter control and be dynamically split by an end user. <para/>
            <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/> also provides part of the logic to be used inside a splitter frame, but
            you still need to implement the logic for displaying one set of data in different views in your derived controls.
            <para/>
            See the SplitterControlDemo and TabBarSplitterControlDemo samples for examples on how to use <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>
            in a form.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IInternalSplitterParent">
            <summary>
            Provides notification methods when the user drags the vertical
            or horizontal splitter bar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalSplitterParent.OnMoveSplitter(System.Object,System.Int32,System.Int32)">
            <summary>
            Occurs when the user drags the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="x">The current horizontal position in pixels.</param>
            <param name="y">The current vertical position in pixels.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalSplitterParent.OnMovedSplitter(System.Object)">
            <summary>
            Occurs after the user moves the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalSplitterParent.InvalidateSplitter(System.Object)">
            <summary>
            Repaints the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalSplitterParent.OverrideCursor">
            <summary>
            Gets / sets the cursor to display.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IScrollBarFrame">
            <summary>
            Implement this interface if you want to add support for shared scrollbars.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IScrollBarFrame.GetHScrollBar(System.Windows.Forms.Control)">
            <summary>
            Returns a scrollbar object that implements a horizontal scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IScrollBarFrame.GetVScrollBar(System.Windows.Forms.Control)">
            <summary>
            Returns a scrollbar object that implements a vertical scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IScrollBarFrame.IsActive(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars)">
            <summary>
            Indicates whether the specified control is activated.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IDynamicSplitterFrame">
            <summary>
            Defines an interface for a control that supports splitting the view into
            several row panes and column panes.
            </summary>
            <remarks>
            Both <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/> and <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/>
            implement this interface. This gives client controls a one stop interface
            to get all splitter functionality no matter if they are embedded inside
            a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/> or <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> inside a <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitRow(System.Int32)">
            <summary>
            Indicates whether the rows were split at the given y coordinate.
            </summary>
            <param name="cy">The vertical position in percentages of the splitter control's height.</param>
            <returns>True if rows were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitColumn(System.Int32)">
            <summary>
            Indicates whether the columns were split horizontally at the specified x coordinate.
            </summary>
            <param name="cx">The horizontal position in percentages of the splitter control's width.</param>
            <returns>True if columns were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.DeleteRow(System.Int32)">
            <summary>
            Deletes the splitter panes at the specified row.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.DeleteColumn(System.Int32)">
            <summary>
            Deletes the splitter panes at the specified column.
            </summary>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.GetPane(System.Int32,System.Int32)">
            <summary>
            Returns the splitter pane at the specified row and column.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <returns>The control at the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.FindPane(System.Windows.Forms.Control,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column index for a child pane.
            </summary>
            <param name="control">The control to search for.</param>
            <param name="row">A placeholder where the row is returned.</param>
            <param name="column">A placeholder where the column is returned.</param>
            <returns>True if the control is a pane; False if the control was not a child pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SetActivePane(System.Int32,System.Int32)">
            <summary>
            Sets the active pane in the splitter control specified by row and column.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.CanActivateNext(System.Boolean)">
            <summary>
            Indicates whether there is a next or previous pane that can be activated.
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
            <returns>True if activating next or previous pane is good; False if already at last or first pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IDynamicSplitterFrame.ActivateNext(System.Boolean)">
            <summary>
            Activates the next or previous pane.
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitBars">
            <summary>
            Gets / sets a value indicating what split behavior is supported. Rows, Columns or Both.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IDynamicSplitterFrame.RowCount">
            <summary>
            Returns the number of visible row panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IDynamicSplitterFrame.ColumnCount">
            <summary>
            Returns the number of visible column panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IDynamicSplitterFrame.ActivePane">
            <summary>
            Gets / sets the active pane in the splitter control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitBars"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IDynamicSplitterFrame.VSplitPosChanged">
            <summary>
            Occurs when the vertical splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IDynamicSplitterFrame.HSplitPosChanged">
            <summary>
            Occurs when the horizontal splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IDynamicSplitterFrame.SplitterLayoutChanged">
            <summary>
            Occurs when the splitter layout has changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SplitterControl.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.#ctor">
            <summary>
            Initializes a new splitter control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnFontChanged(System.EventArgs)">
             <summary>
            Font changed
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.SplitRow(System.Int32)">
            <summary>
            Indicates whether the rows were split at the given y coordinate.
            </summary>
            <param name="cy">The vertical position in percentages of the splitter control's height.</param>
            <returns>True if rows were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.SplitColumn(System.Int32)">
            <summary>
            Indicates whether the columns were split horizontally at the specified x coordinate.
            </summary>
            <param name="cx">The horizontal position in in percentages of the splitter control's width.</param>
            <returns>True if columns were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.DeleteRow(System.Int32)">
            <summary>
            Deletes the splitter panes at the specified row.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.DeleteColumn(System.Int32)">
            <summary>
            Deletes the splitter panes at the specified column.
            </summary>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.GetPane(System.Int32,System.Int32)">
            <summary>
            Returns the splitter pane at the specified row and column. If there is no pane found at the
            specified row and column a pane will be created on demand with a call to <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnCreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control)"/>.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <returns>The control at the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.GetPaneInternal(System.Int32,System.Int32)">
            <summary>
            Returns the splitter pane at the specified row and column. If there is no pane found at the
            specified row and column a null reference will be returned.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <returns>The control at the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.DisposePane(System.Int32,System.Int32)">
            <summary>
            Disposes the specified pane.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnCreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control)">
            <summary>
            Creates a new control for the specified splitter pane.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <param name="mainControl">The control in the first splitter pane.</param>
            <returns>A new instance of the control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnPaneCreated(Syncfusion.Windows.Forms.SplitterPaneEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneCreated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.SplitterPaneEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnPaneClosing(Syncfusion.Windows.Forms.SplitterPaneEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneClosing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.SplitterPaneEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.FindPane(System.Windows.Forms.Control,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column indices for a child pane.
            </summary>
            <param name="control">The control to search for.</param>
            <param name="row">A placeholder where the row is returned.</param>
            <param name="column">A placeholder where the column is returned.</param>
            <returns>True if the control is a pane; False if the control was not a child pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.SetActivePane(System.Int32,System.Int32)">
            <summary>
            Sets the active pane in the splitter control specified by row and column.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.CanActivateNext(System.Boolean)">
            <summary>
            Indicates whether there is a next or previous pane that can be activated.
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
            <returns>True if activating next or previous pane is good; False if already at last or first pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ActivateNext(System.Boolean)">
            <summary>
            Activates the next or previous pane.
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ToString">
            <summary>
            Overridden method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.GetContainedScrollBar(System.Windows.Forms.Control)">
            <summary>
            Returns the scrollbar for the specified control.
            </summary>
            <param name="c">The control for which you want to get the scrollbar.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.IsActive(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars)">
             <summary>
             Indicates whether the scrollbar belongs to the active pane.
             </summary>
             <param name="control">The control associated with the scrollbar.</param>
             <param name="sbType">Specifies the vertical or horizontal scrollbar.</param>
             <returns>True if active; False otherwise.</returns>
             <remarks>
            
             </remarks>
             <example>
             ScrollControl checks IsActive to find out if it is the target of a HScroll event.
             <code lang="C#">
             		protected virtual void OnHScroll(object sender, ScrollEventArgs se)
             		{
             			try
             			{
             				IScrollBarFrame sbf = GetScrollBarFrameOfComponent(this);
             				if (sbf != null &amp;&amp; !sbf.IsActive(this, ScrollBars.Horizontal))
             					return;
            
            					...
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.GetHScrollBar(System.Windows.Forms.Control)">
            <summary>
            Returns the horizontal scrollbar associated with the control.
            </summary>
            <param name="control">A child pane.</param>
            <returns>The scrollbar for the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.GetVScrollBar(System.Windows.Forms.Control)">
            <summary>
            Returns the vertical scrollbar associated with the control.
            </summary>
            <param name="control">A child pane.</param>
            <returns>The scrollbar for the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnSetCursor(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnCancelMode(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.CancelMode"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
                Handles the WM_SETCURSOR message.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnShowToolTipsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ShowToolTipsChanged"/> event.
            </summary>
            <param name="e">Event Data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnHandleDestroyed(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetToolTips">
            <summary>
            Reinitializes and hides ToolTips.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnButtonLookChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ButtonLookChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.CreateScrollBarContainer(System.Windows.Forms.ScrollBars,System.Int32)">
            <summary>
            Returns either an <see cref="T:Syncfusion.Windows.Forms.IScrollBarContainer"/> that has a reference to a scrollbar or creates a scrollbar.
            </summary>
            <param name="sbType">Indicates horizontal or vertical scrollbar.</param>
            <param name="index">The zero-based row or column index of the scrollbar.</param>
            <returns>A control that is derived from <see cref="T:System.Windows.Forms.ScrollBar"/> or implements <see cref="T:Syncfusion.Windows.Forms.IScrollBarContainer"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.CreateScrollBar(System.Windows.Forms.ScrollBars,System.Int32)">
            <summary>
            Creates a scrollbar for the specified row or column index.
            </summary>
            <param name="sbType">Indicates horizontal or vertical scrollbar.</param>
            <param name="index">The zero-based row or column index of the scrollbar.</param>
            <returns>A <see cref="T:System.Windows.Forms.ScrollBar"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnParentChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ActivateControl(System.Windows.Forms.Control)">
            <summary>
            Indicates whether the specified control is activated .
            </summary>
            <param name="c">The <see cref="T:System.Windows.Forms.Control"/> to be activated.</param>
            <returns>True if the control is successfully activated; false otherwise.</returns>
            <remarks>
            The control must be a child of the container control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnEnter(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnValidating(System.ComponentModel.CancelEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnValidated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnLostFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnGotFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.Deactivated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.QueryFocusInside">
            <summary>
            Indicates whether this control contains focus. If <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ActiveControl"/>
            implements <see cref="T:Syncfusion.Windows.Forms.IQueryFocusInside"/>, the <see cref="M:Syncfusion.Windows.Forms.IQueryFocusInside.QueryFocusInside"/>
            method is called on the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ActiveControl"/>.
            </summary>
            <returns>True if the control or any child control has focus; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnControlGotFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. This method is called when the control
            or any child control gets focus and this control did not have focus before.
            </summary>
            <remarks>
            Inheriting classes should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlGotFocus"/> is also called when child controls gets focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.CancelUpdate">
            <summary>
            Cancels any prior <see cref="M:Syncfusion.Windows.Forms.ISupportUpdating.BeginUpdate"/> calls for child controls that implement <see cref="T:Syncfusion.Windows.Forms.ISupportUpdating"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnControlLostFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event. This method is called when the control
            or any child control loses focus and the new focused control is not a child of this control.
            </summary>
            <remarks>
            Inheriting classes should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlLostFocus"/> is also called when child controls lose focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnValidatingLostFocus">
            <summary>
            This method is called if the control's <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlLostFocus"/> notification occurs
            while handling a <see cref="E:System.Windows.Forms.Control.Validating"/> event. This typically occurs if a
            message box is displayed from a <see cref="E:System.Windows.Forms.Control.Validating"/> event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetSplitBars">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitBars"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnSplitBarsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.SplitBarsChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnHSplitPosChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.HSplitPosChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnVSplitPosChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.VSplitPosChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnSplitterLayoutChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.SplitterLayoutChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnMoveSplitter(System.Object,System.Int32,System.Int32)">
            <summary>
            Occurs when the user drags the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="x">The current horizontal position in pixels.</param>
            <param name="y">The current vertical position in pixels.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnMovedSplitter(System.Object)">
            <summary>
            Occurs after the user moves the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnShowSizeGripChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ShowSizeGripChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnSupportsFlatScrollBarsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.SupportsFlatScrollBarsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnScrollBarAppearanceChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ScrollBarAppearanceChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnScrollBarColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ScrollBarColorChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetScrollBarColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ScrollBarColor"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnOffice2007ScrollBarsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBarsChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SplitterControl.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnOffice2007ScrollBarsColorSchemeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnOffice2007ScrollBarsColorSchemeChanged(System.EventArgs)"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnOffice2010ScrollBarsColorSchemeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnOffice2010ScrollBarsColorSchemeChanged(System.EventArgs)"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnOfficeScrollBarsChanged(Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsChanged"/> event
            </summary>
            <param name="e"> Office scrollbar type </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetGridOfficeScrollBars">
            <summary>
            Reset the GridOfficeScrollBars
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ShouldSerializeGridOfficeScrollBars">
            <summary>
            Serializes the GridOfficeScrollBars
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ResetStyle">
            <summary>
            Reset the Style of the Splitter control
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.ShouldSerializeStyle">
            <summary>
            Serializes the Style of the Splitter control
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnStyleChanged">
            <summary>
            Occurs when the style changes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnVisibleChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnShowVerticalScrollBarChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ShowVerticalScrollBarChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OnShowHorizontalScrollBarChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.ShowHorizontalScrollBarChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.CancelMode">
            <summary>
            Occurs when the window receives a WM_CANCELMODE message.
            </summary>
            <remarks>
            WM_CANCELMODE is sent to cancel certain modes, such as mouse capture.
            For example, the system sends this message to the active window when a
            dialog box or message box is displayed. Certain functions also send this
            message explicitly to the specified window regardless of whether it is the
            active window. For example, the EnableWindow function sends this message
            when disabling the specified window.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.SplitBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitBars"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.VSplitPosChanged">
            <summary>
            Occurs when the vertical splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.HSplitPosChanged">
            <summary>
            Occurs when the horizontal splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.SplitterLayoutChanged">
            <summary>
            Occurs when the splitter layout has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ButtonLookChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ButtonLook"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ScrollBarAppearanceChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ScrollBarAppearance"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBarsColorSchemeChanged">
            <summary>
            Occurs when the <see cref="T:Syncfusion.Windows.Forms.Office2007ColorScheme"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ScrollBarColorChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ScrollBarColor"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ShowToolTipsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ShowToolTips"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.SupportsFlatScrollBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SupportsFlatScrollBars"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBars"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ThemeChanged">
            <summary>
            Occurs when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.RowCount">
            <summary>
            Returns the number of visible row panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ColumnCount">
            <summary>
            Returns the number of visible column panes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.PaneCreated">
            <summary>
            Occurs after the control to be displayed in a new pane has been created. Use this
            event to implement additional initialization for the new control.
            </summary>
            <remarks>
            PaneCreated is an ideal hook to add handler for events in the new control.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.PaneClosing">
            <summary>
            Occurs after a row or column is hidden and before the control that is displayed in the pane
            is disposed. Use this event to implement additional clean up for the control before <see cref="M:Syncfusion.Windows.Forms.SplitterControl.DisposePane(System.Int32,System.Int32)"/>
            is called.
            </summary>
            <remarks>
            PaneClosing is an ideal hook to unwire event handlers from the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ActivePane">
            <summary>
            Gets or sets the active pane in the splitter control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.DefaultSize">
            <summary>
            Returns the default size of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.BorderStyle">
            <summary>
            Gets or sets the border style of the Splitter Control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ShowToolTips">
            <summary>
                Indicates whether ToolTips are being shown for tabs that have ToolTips set on
                them.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ButtonLook">
            <summary>
            Gets or sets the button look for the arrow buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.CurrentLayout">
            <summary>
            <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitterLayout"/> holds information about the current vertical and horizontal split positions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ActiveControl">
            <summary>
            Gets or sets the Active control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.IsValidating">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnValidating(System.ComponentModel.CancelEventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.IsValidated">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnValidated(System.EventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.IsActiveControl">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnEnter(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnLeave(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.IsDeactivated">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnDeactivated(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.HasControlFocus">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlGotFocus"/> has been called. <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlLostFocus"/> resets this flag.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.Deactivated">
            <summary>
            Occurs when both <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnControlLostFocus"/> and <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnLeave(System.EventArgs)"/> occur.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.SplitBars">
            <summary>
            Gets or sets a value indicating what split behavior is supported. Rows, Columns or Both.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.HSplitPos">
            <summary>
            Gets or sets the horizontal splitter position in percentages of the splitter control's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.VSplitPos">
            <summary>
            Gets or sets the vertical splitter position in percentages of the splitter control's height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.SplitterLayout">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitterLayout"/> that holds information about current vertical and horizontal split positions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ShowSizeGrip">
            <summary>
            Gets or sets the border style of the RecordNavigationControl.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ShowSizeGripChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ShowSizeGrip"/> property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.SupportsFlatScrollBars">
            <summary>
            Toggles between standard and flat scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ScrollBarAppearance">
            <summary>
            Gets or sets the style of flat scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.SizeFactor">
            <summary>
            Gets or sets the size factor of this tab bar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ScrollBarColor">
            <summary>
            Gets or sets the Backcolor for flat scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBars">
            <summary>
            Toggles between standard and Office2007 scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBarsColorScheme">
            <summary>
            Gets or sets the style of Office2007 scroll bars
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.Office2010ScrollBarsColorSchemeChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.Office2010ScrollBarsColorScheme"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.Office2007ScrollBars"/> property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.GridOfficeScrollBars">
            <summary>
            Gets or sets the Office like scrollbars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.Office2010ScrollBarsColorScheme">
            <summary>
            Gets or sets the style of Office2007 scroll bars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.Style">
            <summary>
            Gets/Sets the Style of the Splitter control
            </summary>
            
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.SplitterPaneFactory">
            <summary>
            Toggles support for using the control inside a dynamic splitter window and sharing scrollbars
            with the parent window.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ShowVerticalScrollBar">
            <summary>
                Toggles visibility of the vertical scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.ShowHorizontalScrollBar">
            <summary>
                Toggles visibility of the Horizontal scrollbar.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ShowVerticalScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ShowVerticalScrollBar"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SplitterControl.ShowHorizontalScrollBarChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.ShowHorizontalScrollBar"/> property has changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsEventArgs">
            <summary>
            Provides the data about <see cref="E:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsChanged"/> event of a <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsEventArgs.#ctor(Syncfusion.Windows.Forms.OfficeScrollBars)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs"/>.
            </summary>
            <param name="record">The record index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterControl.OfficeScrollBarsEventArgs.GridOfficeScrollBars">
            <summary>
            Gets or sets the Office scroll bars
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnArrowButtonClicked(Syncfusion.Windows.Forms.ArrowButtonEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.RecordNavigationControl.ArrowButtonClicked"/> event.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.Windows.Forms.ArrowButtonEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnCurrentRecordChanged(Syncfusion.Windows.Forms.CurrentRecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.RecordNavigationControl.CurrentRecordChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnCurrentRecordChanging(Syncfusion.Windows.Forms.CurrentRecordEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.RecordNavigationControl.CurrentRecordChanging"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.CurrentRecordEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.CreateScrollBarContainer(System.Windows.Forms.ScrollBars,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnControlGotFocus">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnValidatingLostFocus">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.Refresh">
            <summary>
            Forces the control to invalidate its client area and immediately redraw itself and any child controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetMinRecord">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.MinRecord"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetMaxRecord">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.MaxRecord"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetAllowAddNew">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.AllowAddNew"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetNavigationButtons">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationButtons"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetNavigationBarBackColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationBarBackColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetEnabledArrowColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.EnabledArrowColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.ResetDisabledArrowColor">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.RecordNavigationControl.DisabledArrowColor"/> property to its default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnButtonLookChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnShowToolTipsChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControl.OnMoveSplitter(System.Object,System.Int32,System.Int32)">
            <summary>
            Occurs when the user drags the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="x">The current horizontal position in pixels.</param>
            <param name="y">The current vertical position in pixels.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.RecordNavigationControl.CurrentRecordChanged">
            <summary>
            Occurs when the current record is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.RecordNavigationControl.CurrentRecordChanging">
            <summary>
            Occurs when the current record is changing.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.RecordNavigationControl.ArrowButtonClicked">
            <summary>
            Occurs when the user clicks an arrow button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.ThemesEnabled">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationBar">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.RecordNavigationScrollBar"/> with record information and scroll buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.CurrentRecord">
            <summary>
            Gets / sets the current record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.MinRecord">
            <summary>
            Gets or sets the minimum record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.MaxRecord">
            <summary>
             Gets or sets the maximum record position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.AllowAddNew">
            <summary>
            Indicates whether adding new records is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.Label">
            <summary>
            Gets or sets the label to be displayed before the record field textbox.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.MaxLabel">
            <summary>
            Gets or sets an optional maximum label (e.g. "of 1000").
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.RepeatClickDelay">
            <summary>
            Gets / sets the number of Milliseconds to wait before repeatedly firing scroll event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.MinRepeatClickDelay">
            <summary>
            Gets / sets the shortest interval for firing scroll event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationButtons">
            <summary>
            Gets or sets the arrow button that should be shown in an arrow bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationBarBackColor">
            <summary>
            Gets or sets the backcolor of the navigation bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.NavigationBarWidth">
            <summary>
            Gets or sets the width of the navigation bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.EnabledArrowColor">
            <summary>
            Gets or sets the color of arrows in enabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControl.DisabledArrowColor">
            <summary>
            Gets or sets the color of arrows in disabled buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationControlActionList">
            <summary>
             RecordNavigationControl Action List class for SmartTag.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControlActionList.InitializeActionList">
            <summary>
            Initializes the action list to be added.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlActionList.Name">
            <summary>
            Gets/Sets the name of the control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlActionList.Style">
            <summary>
            Specifies the style for the RecordNavigationControl
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlActionList.NavigationButtons">
            <summary>
            Specifies arrow button to be shown in an arrow bar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlActionList.SplitBars">
            <summary>
            Specifies the splitter behavior of the control
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlActionList.GridOfficeScrollBars">
            <summary>
            Sets the Office like scroll bars
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationControlDesigner">
            <summary>
            A designer for the <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControlDesigner.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControlDesigner"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControlDesigner.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <override/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RecordNavigationControlDesigner.actionLists">
            <summary>
            Collection of designer action list object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationControlDesigner.ActionLists">
            <summary>
            Collection of designer action list object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.RecordNavigationScrollBar">
            <summary>
            RecordNavigationScrollBar is a <see cref="T:Syncfusion.Windows.Forms.RecordNavigationBar"/> with a scrollbar contained in one control.<para/>
            <see cref="T:Syncfusion.Windows.Forms.RecordNavigationControl"/> displays this control in the bottom left corner of the frame.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IScrollBarContainer">
            <summary>
            Returns a reference to a scrollbar contained in a user control.
            </summary>
            <remarks>
            Splittercontrol	and	Workbookcontrol	check for the IScrollBarContainer to get the
            scrollbar. This	enables	you	to replace the shared scrollbar with any user control
            that also has a	scrollbar. An example is the <see cref="T:Syncfusion.Windows.Forms.RecordNavigationScrollBar"/>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBarContainer.ScrollBar">
            <summary>
            Gets / sets	the	contained scrollbar	in a user control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.RecordNavigationScrollBar.scrollBar">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationScrollBar.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.RecordNavigationScrollBar"/> with a shared scroll bar control.
            </summary>
            <param name="scrollBar">The control that either hosts a scrollbar (a <see cref="T:Syncfusion.Windows.Forms.IScrollBarContainer"/>) or is itself a scrollbar.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationScrollBar.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationScrollBar.ComputeButtonBarChildBounds">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationScrollBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.RecordNavigationScrollBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.RecordNavigationScrollBar.PrefWidth">
            <summary>
            Gets / sets the preferred width of this control.
            </summary>
        </member>
        <member name="T:Syncfusion.Reflection.TypeName">
            <summary>
            Encapsulates a type's name and exposes it to the <see cref="T:Syncfusion.Reflection.TypesToLoadList"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypeName.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Reflection.TypeName"/> .
            </overload>
            <summary>
            Creates a new TypeName class with empty type name.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypeName.#ctor(System.String)">
            <summary>
            Creates a new TypeName class and sets its type name.
            </summary>
            <param name="typename">The full name of the type.</param>
        </member>
        <member name="E:Syncfusion.Reflection.TypeName.PropertyChanged">
            <summary>
            Occurs when the TypeFullName property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Reflection.TypeName.TypeFullName">
            <summary>
            Gets / sets the type's full name.
            </summary>
        </member>
        <member name="T:Syncfusion.Reflection.TypesToLoadList">
            <summary>
            Lets you specify a list of <see cref="T:Syncfusion.Reflection.TypeName"/>s and invoke a member in those types.
            </summary>
            <remarks>
            <para>
            This class is used in Essential Tools to load certain types in memory.
            </para>
            <para>
            Once you add the types to load into this list, you can call the <see cref="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/>
            method to specify a member in those types to invoke and then also call <see cref="M:Syncfusion.Reflection.TypesToLoadList.InvokeMemberOnExisitingTypes"/>
            later to repeat the invoke.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.OnItemPropertyChanged(System.Object,Syncfusion.ComponentModel.SyncfusionPropertyChangedEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.GetArg(System.Int32)">
            <summary>
            Returns the argument at the specified index, that will be used during invoking.
            </summary>
            <param name="i">The argument index.</param>
            <returns>The argument at the specified index. NULL if index is out of range.</returns>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
            <summary>
            Call this method to provide information for the member invoke.
            </summary>
            <param name="memberName"></param>
            <param name="invokeAttr"></param>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="modifiers"></param>
            <param name="culture"></param>
            <param name="namedParameters"></param>
            <remarks>
            Take a look at <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> method for information
            on these parameters. This method will also call <see cref="M:Syncfusion.Reflection.TypesToLoadList.InvokeMemberOnExisitingTypes"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.InvokeMemberOnExisitingTypes">
            <summary>
            Invokes the member specified using <see cref="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> on the
            specified types in this list.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.InvokeMemberOnExistingTypes">
            <summary>
            Invokes the member specified using <see cref="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/> on the
            specified types in this list.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypesToLoadList.InvokeMemberOnType(Syncfusion.Reflection.TypeName)">
            <summary>
            Invokes the member on each type.
            </summary>
            <param name="typename">The <see cref="T:Syncfusion.Reflection.TypeName"/> on which to invoke.</param>
        </member>
        <member name="P:Syncfusion.Reflection.TypesToLoadList.Item(System.Int32)">
            <summary>
            Gets / sets the indexer for this list.
            </summary>
            <value>Specifies the <see cref="T:Syncfusion.Reflection.TypeName"/> object at this index.</value>
        </member>
        <member name="P:Syncfusion.Reflection.TypesToLoadList.ArgsCount">
            <summary>
            Returns the number of arguments to be used in the method call when invoked.
            </summary>
            <remarks>
            This will be zero if invoking a property. Call <see cref="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/>
            to reset this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Reflection.TypesToLoadList.InvokeMemberName">
            <summary>
            Returns the static member name to invoke.
            </summary>
        </member>
        <member name="E:Syncfusion.Reflection.TypesToLoadList.TypeNotFound">
            <summary>
            Fired when a type to invoke is not found.
            </summary>
        </member>
        <member name="T:Syncfusion.Reflection.TypeNotFoundEventHandler">
            <exclude/>
             <summary>
             Handles the <see cref="E:Syncfusion.Reflection.TypesToLoadList.TypeNotFound"/> event.
             </summary>
             <param name="sender">The source of the event.</param>
             <param name="e">A <see cref="T:Syncfusion.Reflection.TypeNotFoundEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Reflection.TypeNotFoundEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Reflection.TypesToLoadList.TypeNotFound"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypeNotFoundEventArgs.#ctor(Syncfusion.Reflection.TypeName)">
            <summary>
            Creates a new instance of the TypeNotFoundEventArgs.
            </summary>
            <param name="typeName">The <see cref="T:Syncfusion.Reflection.TypeName"/> that was not found.</param>
        </member>
        <member name="P:Syncfusion.Reflection.TypeNotFoundEventArgs.InvalidTypeName">
            <summary>
            Returns the <see cref="T:Syncfusion.Reflection.TypeName"/> that was not found.
            </summary>
        </member>
        <member name="T:Syncfusion.Reflection.TypeLoader">
            <exclude/>
            <summary>
            This component lets you load custom types into the design time.
            </summary>
            <remarks>
            You can specify the static member name you want invoked through the InvokeMemberName property. This will load the types and
            invoke the specified member every time you load the designer.
            </remarks>
        </member>
        <member name="M:Syncfusion.Reflection.TypeLoader.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Reflection.TypeLoader"/> .
            </overload>
            <summary>
            Creates a new instance of the TypeLoader class.
            </summary>
        </member>
        <member name="M:Syncfusion.Reflection.TypeLoader.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the TypeLoader class and adds itself to the container specified.
            </summary>
            <param name="container">The container to add to.</param>
        </member>
        <member name="M:Syncfusion.Reflection.TypeLoader.OnTypeNotFound(System.Object,Syncfusion.Reflection.TypeNotFoundEventArgs)">
            <summary>
            Handler for the <see cref="E:Syncfusion.Reflection.TypesToLoadList.TypeNotFound"/> event.
            </summary>
            <param name="sender">The sender of this event.</param>
            <param name="args">Data for this event.</param>
            <remarks>
            If in design mode, this method shows a message box with appropriate information.
            </remarks>
        </member>
        <member name="P:Syncfusion.Reflection.TypeLoader.InvokeMemberName">
            <summary>
            Returns the static member name to invoke.
            </summary>
            <remarks>
            Call <see cref="M:Syncfusion.Reflection.TypesToLoadList.InitInvokeMemberSettings(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"/>
            to reset this property.
            </remarks>
        </member>
        <member name="P:Syncfusion.Reflection.TypeLoader.TypesToLoadList">
            <summary>
            Specifies the <see cref="P:Syncfusion.Reflection.TypeLoader.TypesToLoadList"/> containing the list of <see cref="T:Syncfusion.Reflection.TypeName"/>s 
            to load.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.NCPaintEventHandler">
            <summary>
            Handles the NcPaint event of an ScrollControl object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.NCPaintEventArgs">
            <summary>
            Provides data for the NCPaint event of an ScrollControl object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.NCPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr)">
            <summary>
            Initializes a new instance of the NCPaintEventArgs class.
            </summary>
            <param name="pGraphics"></param>
            <param name="pClipRegion"></param>
            <param name="pDisplay"></param>
            <param name="pWindowInScreen"></param>
            <param name="pPtrClipRegion"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.NCPaintEventArgs.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.NCPaintEventArgs.m_rcDisplay">
            <summary>
            Bounds an ScrollControl.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.NCPaintEventArgs.m_rcWindowInScreen">
            <summary>
            Bounds of an ScrollControl in screen coordinates. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.NCPaintEventArgs.m_ptrClipRegion">
            <summary>
            Clipping region of an ScrollControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.NCPaintEventArgs.DisplayRectangle">
            <summary>
            Gets or sets bounds an ScrollControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.NCPaintEventArgs.WindowInScreenRectangle">
            <summary>
            Gets or sets bounds of an ScrollControl in screen coordinates.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.NCPaintEventArgs.ClipRegion">
            <summary>
            Gets or sets clipping region of an ScrollControl.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.Classic">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.WindowsXP">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.Office2007">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.Office2007Generic">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.Office2010">
            <summary>Retrieves Office2010 scroll bars</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles.Metro">
            <summary>
            Metro style
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PressedZone">
            <summary>
            Characterize zone which contain mouse down position.
            Order of enum's elements can not be changed, because ScrollBarCustomDraw 
            uses enum's indexes. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.None">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.MinButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.MaxButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.Thumb">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.ThumbLeftZone">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.ThumbRightZone">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.PressedZone.Length">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007ColorScheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ColorScheme.Blue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ColorScheme.Silver">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ColorScheme.Black">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007ColorScheme.Managed">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroColorScheme">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Magenta">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Purple">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Teal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Lime">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Brown">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Pink">
            <summary></summary>       
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Orange">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Blue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Red">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Green">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColorScheme.Managed">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010ColorScheme">
            <summary>
            Characterize Office2010 scroll bar color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ColorScheme.Blue">
            <summary>Office2010 blue.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ColorScheme.Silver">
            <summary>Office2010 silver.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ColorScheme.Black">
            <summary>Office2010 black.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010ColorScheme.Managed">
            <summary>Office2010 default color.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.OfficeScrollBars">
            <summary>
            Characterize MS-Office scroll bars.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeScrollBars.Office2007">
            <summary>Office2007 Scrollbars.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeScrollBars.Office2010">
            <summary>Office2010 Scrollbars.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeScrollBars.Metro">
            <summary>Metro Scrollbars.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.OfficeScrollBars.None">
            <summary>Ordinary Scrollbars.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MovedZone">
            <summary>
            Characterize zone which contain mouse position.
            Order of enum's elements can not be changed, because ScrollBarCustomDraw 
            uses enum's indexes. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.MinButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.MaxButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.Thumb">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.ThumbLeftZone">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.ThumbRightZone">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MovedZone.Out">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WindowsXPColorsScheme">
            <summary>
            Specifies the layout and colors for scrollbars.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorsScheme.DefaultBlue">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorsScheme.OliveGreen">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.WindowsXPColorsScheme.Silver">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SizeGripperVisibility">
            <summary>
            Specifies behaviour of size gripper for scrollable frame controls.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeGripperVisibility.Auto">
            <summary>
            Gripper is visible when both horizontal and vertical scrollbars are visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeGripperVisibility.Visible">
            <summary>
            Gripper is always visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeGripperVisibility.Hidden">
            <summary>
            Gripper is always hidden.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ControlsCollection">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Collections.ControlsCollection.m_parent">
            <summary>Reference on parent control</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes new instance of ControlsCollectionBase class
            </summary>
            <param name="parent">Reference on parent control. Can not be NULL.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Collections.ConfigureControlEventHandler)">
            <summary>
            Initializes new instance of ControlsCollectionBase class
            </summary>
            <param name="parent">Reference on parent control. Can not be NULL.</param>
            <param name="eventHandler">Attach event handler to ConfigureControl event on initialize.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>Occurs when collection changed.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.ConfigureItem(System.Windows.Forms.Control)">
            <summary></summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.Add(System.Windows.Forms.Control)">
            <summary>
            Add Control object to collection.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.AddRange(System.Windows.Forms.Control[])">
            <summary></summary>
            <param name="controls"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.Remove(System.Windows.Forms.Control)">
            <summary>
            Removes control from collection.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.Insert(System.Int32,System.Windows.Forms.Control)">
            <summary>
            Insert control in position with index value is index.
            </summary>
            <param name="index"></param>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.Contains(System.Windows.Forms.Control)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.HideControls(System.Boolean)">
            <summary>
            Includes/exclude controls from parent controls collection.
            </summary>
            <param name="hide">If true - excludes, else includes controls in parent controls collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.OnClear">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary></summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary></summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary></summary>
            <param name="index"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ControlsCollection.Parent">
            <summary>Reference on parent control/container.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ControlsCollection.Item(System.Int32)">
            <summary>Typed version of indexer.</summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Collections.ControlsCollection.CollectionChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Collections.ControlsCollection.ConfigureControl">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs">
            <summary>Message class that contains reference on control that 
            required configuration.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs.m_control">
            <summary>Storage of control reference.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs.#ctor(System.Windows.Forms.Control)">
            <summary>Default constructor.</summary>
            <param name="control"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs.Control">
            <summary>Get reference on Control.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ConfigureControlEventHandler">
            <summary></summary>
            <param name="sender"/>
            <param name="args"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Collections.ControlsCollectionEditor">
            <summary>We specify that only buttons can be created in design time in collection.
            In runtime developer will have more freedom.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollectionEditor.#ctor(System.Type)">
            <summary>Default constructor.</summary>
            <param name="type"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Collections.ControlsCollectionEditor.CreateNewItemTypes">
            <summary>Allow creation only of buttons in designe time.</summary>
            <returns>Allowed types for creation.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FlatHScrollBar">
            <summary>
               <para>Represents a standard Windows horizontal scroll bar.</para>
            </summary>
            <remarks>
               <para>Most controls that need scroll bars already provide them and do not require this
                  control. This is true of a multi-line <see cref="T:System.Windows.Forms.TextBox"/> control, 
                  a <see cref="T:System.Windows.Forms.ListBox"/> and a <see cref="T:System.Windows.Forms.ComboBox"/>,
                  for example.</para>
               <para>You can use this control to implement scrolling in containers that do not provide their
                  own scroll bars, such as a <see cref="T:System.Windows.Forms.PictureBox"/> or for user input of numeric data. 
                  The numeric data may be displayed in a control or utilized in code.
                  The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.Minimum"/> and <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.Maximum"/> properties
                  determine the range of values the user can select. The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.LargeChange"/> property determines the effect of
                  clicking within the scroll bar but outside the scroll box. The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.SmallChange"/> property determines the effect of
                  clicking the scroll arrows at each end of the control.</para>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatScrollBar"/>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatVScrollBar"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FlatScrollBar">
            <summary>
               <para>Implements the basic functionality of a scroll bar control.</para>
            </summary>
            <remarks>
               <para>To adjust the value
                  range of the scroll bar control,
                  set the <see cref="P:System.Windows.Forms.ScrollBar.Minimum"/> and <see cref="P:System.Windows.Forms.ScrollBar.Maximum"/>
                  properties.
                  To adjust the distance the scroll box moves, set the <see cref="P:System.Windows.Forms.ScrollBar.SmallChange"/> and <see cref="P:System.Windows.Forms.ScrollBar.LargeChange"/> properties. To
                  adjust the starting point of the scroll box, set the <see cref="P:System.Windows.Forms.ScrollBar.Value"/> property when the
                  control is initially displayed.</para>
               <note type="note">
                  The scroll box is sometimes
                  referred to as the "thumb".
               </note>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatVScrollBar"/>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatHScrollBar"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IScrollBar">
            <summary>
            Defines	an interface that provides all properties to configure a scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IScrollBar.UpdateScrollInfo">
            <summary>
            Updates	the	scrollbar with latest changes to current position and scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.LargeChange">
            <summary>
            Gets or	sets a value to	be added to	or subtracted from the value of the	property when the scroll box is	moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.Maximum">
            <summary>
            Gets or sets the upper limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.Minimum">
            <summary>
            Gets or sets the lower limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.SmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted	from the value of the property when	the	scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.Enabled">
            <summary>
            Gets or sets a number that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.SupportsThumbTrack">
            <summary>
            Enables	or disables thumbtrack feature for the scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.IsThumbTracking">
            <summary>
            Indicates whether the scrollbar is in thumb	drag mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IScrollBar.SupportsScrollTips">
            <summary>
            Indicates whether ScrollTips should be shown for the scrollbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.OnHandleCreated(System.EventArgs)">
            <summary>
                Creates the handler. Overridden to help set up scrollbar information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.Refresh">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.OnHandleDestroyed(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.OnBackColorChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatScrollBar.ResetBackColor">
            <summary>
            Resets the backcolor of the scroll bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.SupportsThumbTrack">
            <summary>
            Indicates whether the associated control should scroll while the user is dragging a scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.SupportsScrollTips">
            <summary>
            Indicates whether the parent control should show ScrollTips while the user is dragging a scrollbar thumb.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/> checks this property to determine if ScrollTips should be displayed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.IsThumbTracking">
            <summary>
            Indicates whether the scroll bar is currently in thumb drag mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.LargeChange">
            <summary>
            Gets / sets the effect of clicking within the scroll bar but outside the scroll box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.Maximum">
            <summary>
            Gets / sets the maximum range of the scroll bar. Default is 100.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.Minimum">
            <summary>
            Gets / sets the minimum range of the scroll bar. Default is zero.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.SmallChange">
            <summary>
            Gets / sets the effect of clicking the scroll arrows at each end of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.Value">
            <summary>
            Gets / sets the starting value of the scroll bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.BackColor">
            <summary>
                Gets / sets the background color of this scrollbar. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatScrollBar.Appearance">
            <summary>
            Gets / sets the scroll bar style. Default is Flat style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatHScrollBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatHScrollBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatHScrollBar.CreateParams">
            <internalonly/>
            <summary>
               <para>
                  Returns the parameters needed to create the handler. Inheriting classes
                  can override this to provide extra functionality. They should not,
                  however, forget to call base.getCreateParams() first to get the structure
                  filled up with the basic info.
               </para>
            </summary>
            <seealso cref="T:System.Windows.Forms.CreateParams"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FlatVScrollBar">
            <summary>
               <para>Represents a standard Windows vertical scroll bar.</para>
            </summary>
            <remarks>
               <para>Most controls that need scroll bars already provide them
                     and do not require this control. This is true of a multi-line
                     <see cref="T:System.Windows.Forms.TextBox"/> control, a <see cref="T:System.Windows.Forms.ListBox"/>
                     and a <see cref="T:System.Windows.Forms.ComboBox"/> , for example.</para>
               <para>You can use this control to implement scrolling in
                     containers that do not provide their own scroll bars, such as 
                     a <see cref="T:System.Windows.Forms.PictureBox"/> or for user input
                     of numeric data. The numeric data may be displayed in a control or utilized in
                     code. The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.Minimum"/> and <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.Maximum"/>
                     properties determine the range of values the user can select. The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.LargeChange"/> property
                     determines the effect of clicking within the scroll bar but outside the scroll
                     box. The <see cref="P:Syncfusion.Windows.Forms.FlatScrollBar.SmallChange"/> property
                     determines the effect of clicking the scroll arrows at each end of the control.</para>
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatScrollBar"/>
            <seealso cref="T:Syncfusion.Windows.Forms.FlatHScrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatVScrollBar.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FlatVScrollBar.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatVScrollBar.CreateParams">
            <internalonly/>
            <summary>
               <para>
                  Returns the parameters needed to create the handler. Inheriting classes
                  can override this to provide extra functionality. They should not,
                  however, forget to call base.getCreateParams() first to get the structure
                  filled up with the basic info.
               </para>
            </summary>
            <seealso cref="T:System.Windows.Forms.CreateParams"/>
            <keyword term=""/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FlatVScrollBar.RightToLeft">
            <internalonly/>
            <summary>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.HScrollBarCustomDraw">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollBarCustomDraw">
            <summary>Base class for scrollers control that support visual styles.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DEF_COLOR_SCHEME">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventLargeChangeChanged">
            <summary>Key for LargeChangeChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventMaximumChanged">
            <summary>Key for MaximumChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventMinimumChanged">
            <summary>Key for MinimumChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventSmallChangeChanged">
            <summary>Key for SmallChangeChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventValueChanged">
            <summary>Key for ValueChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventVisualStyleChanged">
            <summary>Key for VisualStyleChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventColorSchemeChanged">
            <summary>Key for ColorSchemeChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.EventThemeEnabledChanged">
            <summary>Key for ThemeEnabledChanged event.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.timerDelegate">
            <summary>
            Used by threading timer.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_largeChange">
            <summary>
            A value to be added to or subtracted from the System.Windows.Forms.ScrollBar.Value
            property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_cachedLargeChange">
            <summary>
            Cached m_largeChange
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_max">
            <summary>
            The upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_min">
            <summary>
            The lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_smallChange">
            <summary>
            A value to be added to or subtracted from the Syncfusion.Windows.Forms.ScrollBarCustomDraw.Value
            property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_value">
            <summary>
            A numeric value that represents the current position of the
            scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_styles">
            <summary>
            Visual style of the ScrollBarCustomDraw.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bThemeEnabled">
            <summary>
            Indicates whether to use visual styles.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bDisableThumb">
            <summary>
            Indicates whether thumb is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bDisableMin">
            <summary>
            Indicates whether minimum arrow is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bDisableMax">
            <summary>
            Indicates whether maximum arrow is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_controlsBefore">
            <summary>
            Collection of controls that locates above the minimum arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_controlsAfter">
            <summary>
            Collection of controls that locates under the maximum arrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bKeepSystemmetrics">
            <summary>
            True - say control to keep System settings instead of user defined, otherwise False.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_renderer">
            <summary>
            Renderer which draws the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_rects">
            <summary>
            Array of rectangles that represents regions of the ScrollBarCustomDraw.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_timer">
            <summary>
            Used when user holds the arrow button clicked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_lastPressedPoint">
            <summary>
            Position where was last click.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_pressedZone">
            <summary>
            Zone where was last click .
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_selectedZone">
            <summary>
            Zone where mouse is over. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_cachedSelectedZone">
            <summary>
            Cached m_selectedZone.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_movedZone">
            <summary>
            Zone where is mouse position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bUpdateStates">
            <summary>
            False if all states is default? in other case value is false. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_OfficeColorScheme">
            <summary>
            Color scheme that used in Rendering. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_MetroColorScheme">
            <summary>
            Color scheme that used in Rendering. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_Office2010ColorScheme">
            <summary>
            Color scheme for Office2010 that used in Rendering. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_MenuProvider">
            <summary>
            Instance of ContextMenu provider.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_ptLocation">
            <summary>
            To avoid compile error CS0197 in VS2002.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_IsSetControlsVisiblity">
            <summary>
            To prevent validation controls visibility in <see cref="!:Synfusion.Windows.Forms.ScrollBarCustomDraw.OnControlAdded"/>
            and in <see cref="!:Synfusion.Windows.Forms.ScrollBarCustomDraw.OnControlRemoved"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_bRefreshOnValueChange">
            <summary>
            Indicates whether scrollbar should be refreshed on each value change.
            If set to false, scrollbar is invalidated only and therefore is visually refreshed after processing all scrolling messages.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_owner">
            <summary>
            Scroll bar's owner.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollBarCustomDraw.m_metroColorTable">
            <summary>
            Metro color table for metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.#ctor(Syncfusion.Windows.Forms.ScrollersFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.ScrollBarCustomDraw"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.ScrollBarCustomDraw"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Dispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ShouldSerializeControlsBefore">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ShouldSerializeControlsAfter">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.InitializeMenu(Syncfusion.Windows.Forms.IContextMenuProvider)">
            <summary>
            Initialize the context menu.
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnBeforeControlConfigure(System.Windows.Forms.Control)">
            <summary></summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnAfterControlConfigure(System.Windows.Forms.Control)">
            <summary></summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
            <summary>Override. Force recalculation of Scroller elements.</summary>
            <param name="levent">Layout arguments.</param>
            <remarks>To force Layout logic call <see cref="!:PerformLayout"/>.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Layout">
            <summary>
            Forces the laying out of combobox elements.
            </summary>
            <remarks>
            Advanced method. You do not have to call this directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>If outside code will work with <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Controls"/> collection instead 
            of our collections <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsBefore"/> and <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsAfter"/>, 
            then this method will help us in synchronization.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>If outside code will work with <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Controls"/> collection instead 
            of our collections <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsBefore"/> and <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsAfter"/>, 
            then this method will help us in synchronization.</summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnPaint"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when control size changed.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ResetToSystemMetrics">
            <summary>
            Reset control Width or Heigh to system settings
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnLargeChangeChanged(System.EventArgs)">
            <summary>
            Raises the OnLargeChangeChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnSmallChangeChanged(System.EventArgs)">
            <summary>
            Raises the OnSmallChangeChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMaximumChanged(System.EventArgs)">
            <summary>
            Raises the OnMaximumChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMinimumChanged(System.EventArgs)">
            <summary>
            Raises the OnMinimumChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnVisualStyleChanged(System.EventArgs)">
            <summary>
            Raises the OnVisualStyleChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnThemeEnabledChanged(System.EventArgs)">
            <summary>
            Raises the OnMinimumChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the OnValueChanged event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ValidateControlsVisibility">
            <summary>
            Used for validating visibility of the ControlsAfter and ControlsBefore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnRightToLeftChanged(System.EventArgs)">
            <summary>
            Redraws scroll control when RightToLeft is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMouseLeave(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMovedPositionChanged(System.Int32,System.Int32)">
            <summary>
            Occurs when mouse down and cursor change position.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.GetMinButton">
            <summary>
            Gets min button. Possible variants: Left or Down.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.GetMaxButton">
            <summary>
            Gets max button. Possible variants: Right or Up.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.HitTest(System.Int32,System.Int32)">
            <summary>
            Defines pressed zone.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RecalculateScroll">
            <summary>
            Recalculates bounds of the ScrollBarCustomDraw.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RecalculateArrow">
            <summary>
            Recalculates bounds of the arrow buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RecalculateThumb">
            <summary>
            Recalculates bounds of the thumb.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.IsControlsVisible">
            <summary>
            If scroll contain all controls than controls is visible, in other case value is false.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.GetAfterControlsDockStyle">
            <summary>
            Gets DockStyle of afterControls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.GetBeforeControlsDockStyle">
            <summary>
            Gets DockStyle of beforeControls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.CalculatedDelta(System.Int32,System.Int32)">
            <summary>
            used for calculates thumb offset.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.PointToValue(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ValueToPoint(System.Int32)">
            <summary></summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DropHandle">
            <summary>
            Utility API that open to user opportunity to destroy handle in runtime.
            Very usefull for runtime resource cleanup.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.SetSafeSmallChange(System.Int32)">
            <summary>
            Sets small change if value is less than large change; otherwise sets small change to large change.
            </summary>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.timer_Tick(System.Object)">
            <summary></summary>
            <param name="sender"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnTickForThumbMin(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnTickForThumbMaxZone(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnTickForMinButton(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnTickForMaxButton(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="e"></param>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMinimumClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnMaximumClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnScrollUpLeftClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnScrollDownRightClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnBeforeControlConfigure(System.Object,Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OnAfterControlConfigure(System.Object,Syncfusion.Windows.Forms.Collections.ConfigureControlEventArgs)">
            <summary></summary>
            <param name="e"></param>
            <param name="sender"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Accumulate(Syncfusion.Windows.Forms.Collections.ControlsCollection)">
            <summary>
            Method accumulate width and height of the controls in 
            specified collection.
            </summary>
            <summary>Method accumulate width and height of the controls in 
            specified collection.</summary>
            <param name="collection">collection of controls.</param>
            <returns>Accumulated values.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.SetControlsLayoutVisibility(System.Boolean)">
            <summary>
            Excludes/includes controls in <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Controls"/> collection.
            </summary>
            <param name="hide">If true - excludes, else includes controls in <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Controls"/> collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DefineMovedZone(System.Drawing.Point)">
            <summary></summary>
            <param name="p"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DefineMovedZone(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x">X coordinate of mouse.</param>
            <param name="y">Y coordinate of mouse.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.SetInnerValue(System.Int32)">
            <summary>
            Sets value, but OnValueChanged don't raise. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DisposeControls(Syncfusion.Windows.Forms.Collections.ControlsCollection)">
            <summary>
            Dispose controls of ScrollBarCustomDraw.
            </summary>
            <param name="controls">Collection of controls to be disposed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ShowContextMenu(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>
            Creates and displays the context menu for the control.
            </summary>
            <param name="scrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RaiseMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to raise the mouse event
            </summary>
            <param name="args">The args contains the MouseEventArgs data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RaiseMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to raise the mouse event
            </summary>
            <param name="args">The args contains the MouseEventArgs data</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RaiseMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Used to raise the mouse event
            </summary>
            <param name="args">The args contains the MouseEventArgs data</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.LargeChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the System.Windows.Forms.ScrollBar.Value
            property when the scroll box is moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Maximum">
            <summary>
            Gets or sets the upper limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Minimum">
            <summary>
            Gets or sets the lower limit of values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.SmallChange">
            <summary>
            Gets or sets a value to be added to or subtracted from the Syncfusion.Windows.Forms.ScrollBarCustomDraw.Value
            property when the scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Value">
            <summary>
            Gets or sets a numeric value that represents the current position of the
            scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.VisualStyle">
            <summary>
            Visual style of the ScrollBarCustomDraw.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ThemeEnabled">
            <summary>
            Gets or sets a value that indicates whether to use visual styles.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DisableThumb">
            <summary>
            Gets or sets a value that indicates whether thumb is disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DisableMinimumArrow">
            <summary>
            Gets or sets a value that indicates whether minimum arrow is disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.DisableMaximumArrow">
            <summary>
            Gets or sets a value that indicates whether maximum arrow is disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsBefore">
            <summary>
            Collection of controls that locates above the minimum arrow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ControlsAfter">
            <summary>
            Collection of controls that locates under the maximum arrow.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.KeepSystemMetrics">
            <summary>
            True - say control to keep System settings instead of user defined, otherwise False.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.InternalRender">
            <summary>
            Gets or sets the renderer which draws the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.IsRtl">
            <summary>
            Returns the value that indicates whether RightToLeft is RightToLeft.Yes
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Controls">
            <summary>
            Hide Controls collection from CodeDom serialization.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.MetroColorTable">
            <summary>
            Gets or sets the metro color table.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.OfficeColorScheme">
            <summary>
            Gets or sets whether the Office color scheme should be Silver or Blue or Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.MetroColorScheme">
            <summary>
            Gets or sets whether the Metro color scheme should be user defined color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.Office2010ColorScheme">
            <summary>
            Gets or sets whether the Office2010 color scheme should be Silver or Blue or Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ContextMenuProvider">
            <summary>
            Gets / sets the menu provider object that will implement the <see cref="T:Syncfusion.Windows.Forms.ScrollBarCustomDraw"/>'s contextmenu. 
            </summary>
            <remarks>
            The ScrollBarCustomDraw control automatically initializes this property depending on the presence 
            of the Syncfusion Essential Tools library. If Essential Tools is available, then the menu provider 
            object will be an instance of the <see cref="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ContextMenuProvider"/> 
            type. If not, the <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/> class is used for 
            implementing the standard .NET context menu. <p>The ScrollersFrame's automatic initialization 
            should suffice for most applications and you should explicitly set this property only when you 
            want to override the default menu provider assignment.</p></remarks>
            <value>A <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> implementation; the default 
            is <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDraw.RefreshOnValueChange">
            <summary>
            Gets or sets value indicating whether scrollbar should be refreshed on each value change.
            If set to false, scrollbar is invalidated only and therefore is visually refreshed after processing all scrolling messages.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.LargeChangeChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.MaximumChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.MinimumChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.SmallChangeChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ValueChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.VisualStyleChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ColorSchemeChanged">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarCustomDraw.ThemeEnabledChanged">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.HScrollBarCustomDraw.DEF_MINTHUMB_WIDTH">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.HScrollBarCustomDraw.m_deltaX">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.HScrollBarCustomDraw.m_bIsControlsVisible">
            <summary>
            Flag, if true than controls visivble in other case not visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.HScrollBarCustomDraw.m_defaultSize">
            <summary>
            Default size of the horizontal scroolbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.#ctor(Syncfusion.Windows.Forms.ScrollersFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.HScrollBarCustomDraw"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.HScrollBarCustomDraw"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when control size changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.ValidateControlsVisibility">
            <summary>
            Used for validating visibility of the ControlsAfter and ControlsBefore
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.ResetToSystemMetrics">
            <summary>
            Reset horizontal scrollbar to default height.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.GetAfterControlsDockStyle">
            <summary>
            Gets dockStyle for controls which situated before scroll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.GetBeforeControlsDockStyle">
            <summary>
            Gets dockStyle for controls which situated after scroll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.PointToValue(System.Int32,System.Int32)">
            <summary>
            Gets value by cursor position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.RecalculateArrow">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.RecalculateThumb">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.GetMaxButton">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.GetMinButton">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.OnMovedPositionChanged(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.CalculatedDelta(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.ShouldSerializeSize">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.ResetSize">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.CalculateArrowsPositions">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.CalculateThumbSize">
            <summary>
            Calculates bounds of thumb for scroll control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.CalculateThumbLeftAndRightZone">
            <summary>
            Calculating bounds for leftThumb and rightThumb zones for scroll.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.HScrollBarCustomDraw.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.HScrollBarCustomDraw.Width">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.HScrollBarCustomDraw.Size">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IntelliMouseDragScroll">
             <summary>
             Implements support for Intelli-Mouse panning. When the user presses the middle mouse button and drags the mouse,
             the window will scroll. <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/> has built-in support for this call. You only have
             to enable <see cref="P:Syncfusion.Windows.Forms.ScrollControl.EnableIntelliMouse"/>.
             </summary>
             <example>
             The following code enables support for IntelliMouseDragScroll:
             <code lang="C#">
                 public bool EnableIntelliMouse
                     {
                         get
                         {
                             return imm != null and imm.Enabled;
                         }
                         set
                         {
                             if (value != EnableIntelliMouse)
                             {
                                 if (imm == null)
                                 {
                                     imm = new IntelliMouseDragScroll(this, true);
                                     imm.AllowScrolling = ScrollBars.Both;
                                     imm.DragScroll += new IntelliMouseDragScrollEventHandler(IntelliMouseDragScrollEvent);
                                 }
                                 imm.Enabled = value;
                             }
                         }
                     }
            
                     void IntelliMouseDragScrollEvent(object sender, IntelliMouseDragScrollEventArgs e)
                     {
                         int dy = e.Dy;
                         int dx = e.Dx;
            
                         this.disableAutoScroll = true;
                         if (Math.Abs(dy) &gt; Math.Abs(dx))
                         {
                             VScrollBar.SendScrollMessage(dy &gt; 0 ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement);
                         }
                         else
                         {
                             HScrollBar.SendScrollMessage(dx &gt; 0 ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement);
                         }
                         this.disableAutoScroll = false;
                     }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes the <see cref="T:Syncfusion.Windows.Forms.IntelliMouseDragScroll"/> object.
            </summary>
            <param name="control">The control to add this functionality to.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Initializes the <see cref="T:Syncfusion.Windows.Forms.IntelliMouseDragScroll"/> object.
            </summary>
            <param name="control">The control to add this functionality to.</param>
            <param name="hookMouseDownMessage">True if <see cref="T:Syncfusion.Windows.Forms.IntelliMouseDragScroll"/> should listen for MouseDown event; 
            False if dragging should be started manually by calling StartDrag.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.StartDrag(System.Drawing.Point)">
            <summary>
            Starts the IntelliMouse dragging at the given screen coordinates.
            </summary>
            <param name="startPoint">Screen coordinates, e.g. Control.MousePosition.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.StopDrag">
            <summary>
            Stops the Intelli-Mouse dragging.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScroll.GetBitmap(System.String)">
            <summary>
            Returns the bitmap from manifest. Red background in bitmap will be made transparent.
            </summary>
            <param name="bitmapName"></param>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IntelliMouseDragScroll.DragScroll">
            <summary>
            Occurs when the user has dragged the mouse outside the scrolling bitmap.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScroll.ActiveIntelliMouseDragScroll">
            <summary>
            Returns the active <see cref="T:Syncfusion.Windows.Forms.IntelliMouseDragScroll"/> object, if any.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScroll.AllowScrolling">
            <summary>
            Gets / sets the scrolling direction.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScroll.IsDragging">
            <summary>
            Indicates whether the user is dragging.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScroll.Enabled">
            <summary>
            Indicates whether to toggle the Intelli-Mouse feature on or off.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScroll.Cursor">
            <summary>
            Returns the cursor to be displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventHandler">
            <summary>
            Handles the DragScroll event of an IntelliMouseDragScroll object.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs">
            <summary>
            Provides data for the DragScroll event of an IntelliMouseDragScroll object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the IntelliMouseDragScrollEventArgs class.
            </summary>
            <param name="dx">The distance in pixels the mouse pointer has been moved horizontally.</param>
            <param name="dy">The distance in pixels the mouse pointer has been moved vertically.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs.DX">
            <summary>
            Gets / sets the distance in pixels the mouse pointer has been moved horizontally.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs.DY">
            <summary>
            Gets / sets the distance in pixels the mouse pointer has been moved vertically.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IntelliMouseDragScrollEventArgs.Scrolled">
            <summary>
            Set this to True if you scrolled and do not want default scrolling behavior.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MouseWheelZoomEventHandler">
            <summary>
            Handles the MouseWheelZoom events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MouseWheelZoomEventArgs">
            <summary>
            Provides data for the MouseWheelZoom event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseWheelZoomEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Windows.Forms.MouseWheelZoomEventArgs"/> with a given delta.
            </summary>
            <param name="delta">The number of rows or columns to scroll.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseWheelZoomEventArgs.Delta">
            <summary>
            Returns the number of rows or columns to scroll.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ReflectScrollBar.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ReflectScrollBar.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.IsThumbTracking">
            <summary>
            True if scroll bar is currently in thumb drag mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.SupportsThumbTrack">
            <summary>
            Indicates whether the associated control should scroll while the user is dragging a scrollbar thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.SupportsScrollTips">
            <summary>
            Indicates whether the parent control should show ScrollTips while the user is dragging a scrollbar thumb.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/> Checks this property to determine if ScrollTips should be displayed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.LargeChange">
            <summary>
            Gets / sets a value to be added to or subtracted from to the Value property when the scroll box is moved a large distance. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.Maximum">
            <summary>
            Gets / sets the upper limit of values of the scrollable range. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.Minimum">
            <summary>
            Gets / sets the lower limit of values of the scrollable range. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.SmallChange">
            <summary>
            Gets / sets a value to be added to or subtracted from to the Value property when the scroll box is moved a small distance. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ReflectScrollBar.Value">
            <summary>
            Gets / sets a numeric value that represents the current position of the scroll box on the scroll bar control. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollBarCustomDrawDesigner">
            <summary>Design time helper class. Do not allow resizing of scrollers
            when set KeepSystmeMetrics property to TRUE value.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDrawDesigner.Control">
            <summary>Typed version of control reference extracting.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarCustomDrawDesigner.SelectionRules">
            <summary>Override selection rule only in case of KeepSystemMetrics value set to True.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollBarAdapter">
            <summary>
            Defines	an interface that provides all properties to configure a scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.LargeChange">
            <summary>
            Gets /	sets a value to	be added to	or subtracted from the value of the	property when the scroll box is	moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.Maximum">
            <summary>
            Gets /	sets the upper limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.Minimum">
            <summary>
            Gets /	sets the lower limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.SmallChange">
            <summary>
            Gets /	sets the value to be added to or subtracted	from the value of the property when	the	scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.Value">
            <summary>
            Gets /	sets a numeric value that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.Enabled">
            <summary>
            Gets / sets a number that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarAdapter.RightToLeft">
            <summary>
            Gets / sets a number that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollBarWrapper">
            <summary>
            ScrollbarWrapper manages scrollbars	for	a control and hides	details	about the scrollbar
            from the control that utilizes ScrollBarWrapper. This allows you to	replace	the	concrete
            ScrollBar with <see cref="T:Syncfusion.Windows.Forms.ReflectScrollBar"/>, <see cref="T:Syncfusion.Windows.Forms.FlatScrollBar"/>, <see cref="T:System.Windows.Forms.ScrollBar"/>
            or any custom scrollbar	implementation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.#ctor(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars)">
            <summary>
            	<para>Overloaded. Initializes a	new	instance of	the	<see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/>	class.</para>
            </summary>
            <param name="parent">The parent	control.</param>
            <param name="sbType">The scrollbar type: horizontal	or vertical.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.#ctor(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars,System.Windows.Forms.Control)">
            <summary>
            	<para>Initializes a	new	instance of	the	<see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/>	class.</para>
            </summary>
            <param name="parent">The parent	control.</param>
            <param name="sbType">The scrollbar type: horizontal	or vertical.</param>
            <param name="scrollBar">The	scrollbar object to	be managed by this instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.Dispose">
            <summary>
            Implements the <see cref="M:System.IDisposable.Dispose"/> method	and	releases all managed resource for this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.CopyTo(Syncfusion.Windows.Forms.ScrollBarWrapper)">
            <summary>
            Copies all information to another <see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/> object.
            </summary>
            <param name="target">The <see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/>	to receive all copied information.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.OnInnerValueChanged(System.Object,System.EventArgs)">
            <summary>
            	<para>Raises the <see cref="E:Syncfusion.Windows.Forms.ScrollBarWrapper.ValueChanged"/> event.</para>
            </summary>
            <param name="sender">.</param>
            <param name="e">An <see cref="T:System.EventArgs"/> that	contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.BeginUpdate">
            <summary>
            Suspends updating the scrollbar	until <see cref="M:Syncfusion.Windows.Forms.ScrollBarWrapper.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.EndUpdate">
            <summary>
            Resumes	updating the scrollbar after a <see cref="M:Syncfusion.Windows.Forms.ScrollBarWrapper.BeginUpdate"/> call.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.FetchScrollBar">
            <summary>
            Fetches	scrollbar information from the managed scrollbar object	and	updates	the	information
            in the <see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.InitScrollBar">
            <summary>
            Applies	scrollbar information to the managed scrollbar object based	on the information
            in the current <see cref="T:Syncfusion.Windows.Forms.ScrollBarWrapper"/> object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.ReflectScrollMessage(System.Windows.Forms.Message@)">
            <summary>
            Call this for reflected	scrollbars from	your parent	control's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/> method if you
            want to	support	reflected scrollbars (those	window scrollbars that you enable with WS_VSCROLL and
            WS_HSCROLL window styles).
            </summary>
            <param name="m">The	<see cref="T:System.Windows.Forms.Message"/> that was passed as argument to <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollBarWrapper.SendScrollMessage(System.Windows.Forms.ScrollEventType)">
            <summary>
            Sends or emulates a	scroll event.
            </summary>
            <param name="et"></param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarWrapper.Scroll">
            <summary>
            	<para>Occurs when the scroll box has been
                moved by either a mouse or keyboard action.</para>
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ScrollBarWrapper.ValueChanged">
            <summary>
            	<para>Occurs when the <see cref="P:System.Windows.Forms.ScrollBar.Value"/> property has changed,	either by a
            <see cref="E:System.Windows.Forms.ScrollBar.Scroll"/> event or programmatically.</para>
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.SupportsThumbTrack">
            <summary>
            Indicates whether the control should scroll while the user is dragging a scrollbar's thumb.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.SupportsScrollTips">
            <summary>
            Indicates whether the parent control should show ScrollTips while the user is dragging a scrollbar thumb.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/>	Checks this	property to	determine if ScrollTips	should be displayed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.InnerScrollBar">
            <summary>
            Gets / sets a reference	to the scrollbar that is contained in this wrapper class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.IsReflect">
            <summary>
            True if	this is	a Reflecting scrollbar;	False if it	is a simple	scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.IsFlat">
            <summary>
            True if	this is	a flat scrollbar; False	if it is a simple scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.IsThumbTracking">
            <summary>
            True if	scroll bar is currently in thumb drag mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.IsEmpty">
            <summary>
            True if	this is	a Reflecting scrollbar;	False if it	is a simple	scrollbar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Locked">
            <summary>
            Indicates whether updating is locked. See <see cref="M:Syncfusion.Windows.Forms.ScrollBarWrapper.BeginUpdate"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.LargeChange">
            <summary>
            Gets /	sets a value to	be added to	or subtracted from the value of the	property when the scroll box is	moved a large distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Maximum">
            <summary>
            Gets /	sets the upper limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Minimum">
            <summary>
            Gets /	sets the lower limit of	values of the scrollable range.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.SmallChange">
            <summary>
            Gets /	sets the value to be added to or subtracted	from the value of the property when	the	scroll box is moved a small distance.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Value">
            <summary>
            Gets /	sets a numeric value that represents the current position of the scroll	box	on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Enabled">
            <summary>
            Gets /	sets a number that represents the current position of the scroll box on the scroll bar control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollBarWrapper.Parent">
            <summary>
            Returns	a reference	to the parent control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedControlDrawing">
            <summary>
            Manages the theme handle given a control and exposes some basic themed Drawing methods.
            </summary>
            <remarks>
            <para>
            The <see cref="T:System.Windows.Forms.Control"/> bound to this class can either implement the 
            <see cref="T:Syncfusion.Windows.Forms.IThemedControl"/> interface or pass on the WM_THEMECHANGED message 
            to this class with a call to the <see cref="M:Syncfusion.Windows.Forms.ThemedControlDrawing.RefreshThemeHandle"/> method.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.ThemedControlDrawing"/> class.
            </summary>
            <param name="classList">Pointer to a string that contains a semicolon-separated list of classes, as expected
            in the OpenThemeData API.</param>
            <remarks>
            <para>
            The <see cref="T:System.Windows.Forms.Control"/> bound to this class can either implement the 
            <see cref="T:Syncfusion.Windows.Forms.IThemedControl"/> interface or pass on the WM_THEMECHANGED message 
            to this class with a call to the <see cref="M:Syncfusion.Windows.Forms.ThemedControlDrawing.RefreshThemeHandle"/> method.
            This is necessary in order that this class can refresh its handles when themes
            settings are updated.
            </para>
            <para>You can get the part and state ids required for the DrawXXX methods from the tmschema.h file (that comes with
            Platform SDK) or refer to the undocumented and incomplete ThemeParts and ThemeStates classes 
            in our shared library (in the ThemeDefines.cs file).</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.#ctor(System.String,System.ComponentModel.IComponent)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.ThemedControlDrawing"/> class.
            </summary>
            <param name="classList">Pointer to a string that contains a semicolon-separated list of classes, as expected
            in the OpenThemeData API.</param>
            <param name="owner">Owning component.</param>
            <remarks>
            <para>
            The <see cref="T:System.Windows.Forms.Control"/> bound to this class can either implement the 
            <see cref="T:Syncfusion.Windows.Forms.IThemedControl"/> interface or pass on the WM_THEMECHANGED message 
            to this class with a call to the <see cref="M:Syncfusion.Windows.Forms.ThemedControlDrawing.RefreshThemeHandle"/> method.
            This is necessary in order that this class can refresh its handles when themes
            settings are updated.
            </para>
            <para>You can get the part and state ids required for the DrawXXX methods from the tmschema.h file (that comes with
            Platform SDK) or refer to the undocumented and incomplete ThemeParts and ThemeStates classes 
            in our shared library (in the ThemeDefines.cs file).</para>
            <para>If owning component is not null, <see cref="T:Syncfusion.Windows.Forms.ThemedControlDrawing"/> automatically unregisters itself from <see cref="T:Syncfusion.Windows.Forms.XPThemes"/>
            on component disposing.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.Dispose(System.Boolean)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.OpenThemeData">
            <summary>
            Called to create a theme handle, given the specified control and classList.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.CloseThemeData">
            <summary>
            Closes the currently open theme handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.ResetThemeHandle">
            <summary>
            Closes the current theme handle.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.RefreshThemeHandle">
            <summary>
            Closes the current theme handle and tries to open a new one.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.DrawThemeBackground(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Overloaded. Draws the specified theme background.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partID">An integer specifying the part.</param>
            <param name="stateID">An integer specifying the state.</param>
            <param name="rectangle">The background <see cref="T:System.Drawing.Rectangle"/>.</param>
            <remarks>
            <para>See <see cref="T:Syncfusion.Windows.Forms.ThemedControlDrawing"/> for information on how to get the part and state IDs.</para>
            <para>This method uses the VisibleClipRegion in the Graphics object to obtain the clip rect.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.DrawThemeBackground(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws the specified theme background.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partID">An integer specifying the part.</param>
            <param name="stateID">An integer specifying the state.</param>
            <param name="rectangle">The background <see cref="T:System.Drawing.Rectangle"/>.</param>
            <param name="clipRect">The clip rect to be used.</param>
            <remarks>
            <para>See <see cref="T:Syncfusion.Windows.Forms.ThemedControlDrawing"/> for information on how to get the part and state IDs.</para>
            <para>Use this function to provide custom clip bounds.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.DrawThemeText(System.Drawing.Graphics,System.Int32,System.Int32,System.String,System.Drawing.Rectangle,System.UInt32,System.UInt32)">
            <summary>
            Overloaded. Draws the specified theme text.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partID">An integer specifying the part.</param>
            <param name="stateID">An integer specifying the state.</param>
            <param name="text">The text to be drawn.</param>
            <param name="bounds">The layout bounds within which to draw.</param>
            <param name="formatFlags1">Refers to the DrawThemeText function in the Windows API.</param>
            <param name="formatFlags2">Refers to the DrawThemeText function in the Windows API.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.DrawThemeText(System.Drawing.Graphics,System.Int32,System.Int32,System.String,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Draws the specified theme text.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partID">An integer specifying the part.</param>
            <param name="stateID">An integer specifying the state.</param>
            <param name="text">The text to be drawn.</param>
            <param name="bounds">The layout bounds within which to draw.</param>
            <param name="formatFlags1">Refers to the DrawThemeText function in the Windows API.</param>
            <param name="formatFlags2">Refers to the DrawThemeText function in the Windows API.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.GetPartSize(System.Drawing.Graphics,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the size for the specified part.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partId">An integer specifying the part.</param>
            <param name="stateId">An integer specifying the state.</param>
            <param name="sizeType">The size type.</param>
            <returns>The requested size.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedControlDrawing.GetTextExtent(System.Drawing.Graphics,System.Int32,System.Int32,System.String,System.Drawing.Rectangle,System.UInt32)">
            <summary>
            Calculates the size and location of the specified text when rendered in the theme font.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="partId">An integer specifying the part.</param>
            <param name="stateId">An integer specifying the state.</param>
            <param name="text">The text to draw.</param>
            <param name="bounds">The layout bounds.</param>
            <param name="format">See GetThemeTextExtent method documentation in Windows API.</param>
            <returns>The rectangle representing the extent.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedControlDrawing.HTheme">
            <summary>
            Returns the current theme handle used to render the parts.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.#ctor">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.BlendColor(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Blend 30% of menu selection color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.OnMouseLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollButtons.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollButtons.Selected">
            <summary>
            Gets / sets ScrollButton highlighted state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollButtons.GradientInflateOffset">
            <summary>
            Gets / sets for correctly GradientBrush creation, so that background
            is same as Parent's background.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollTipWindow">
            <summary>
            A ScrollTip window is a top-level window that gives feedback about the
            current scroll position when the user grabs a scrollbar thumb and drags it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipWindow.borderStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipWindow.sf">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipWindow.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.ScrollTipWindow"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipWindow.Dispose(System.Boolean)">
            <override/>
            <summary></summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipWindow.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event and refreshes the contents of the window.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipWindow.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
            <summary></summary>
            <param name="pe"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipWindow.GetPreferredSize(System.String)">
            <summary>
            Returns the optimal size for the window to fit the given text.
            </summary>
            <param name="text">The text that should fit into the window.</param>
            <returns>A <see cref="T:System.Drawing.Size"/> with the window size of the ScrollTip.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipWindow.CreateParams">
            <override/>
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipWindow.BorderStyle">
            <summary><para>Gets / sets the border style of the control.</para></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipWindow.Format">
            <summary>
            Gets / sets the text layout information for the text in the ScrollTip.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollTipActions">
            <summary>
            Specifies the current ScrollTip state when a <see cref="P:Syncfusion.Windows.Forms.ScrollControl.ScrollTip"/> event was raised.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipActions.ThumbTrack">
            <summary>
            The user has grabbed the thumb. The ScrollTip should be shown.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipActions.ThumbPosition">
            <summary>
            The user has released the thumb. The ScrollTip should be hidden.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipActions.Scroll">
            <summary>
            The user is dragging the thumb. The ScrollTip text should be updated.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ExceptionCatchedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event.
            </summary>
            <returns></returns>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs.ex">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs.#ctor(System.Exception)">
            <summary>
            Constructs a <see cref="T:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs"/> object.
            </summary>
            <param name="ex">The exception that was cached.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs.Exception">
            <summary>
            Returns the exception that was cached.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollTipFeedbackEventHandler">
            <summary>
            Handles the ScrollTip event.
            </summary>
            <returns></returns>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs">
            <summary>
            Provides data for the <see cref="P:Syncfusion.Windows.Forms.ScrollControl.ScrollTip"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.scrollBars">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.action">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.value">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.text">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.size">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.location">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.font">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.foreColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.backColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.borderStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.sf">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.#ctor(System.Windows.Forms.ScrollBars,Syncfusion.Windows.Forms.ScrollTipActions,System.Int32,System.String,System.Drawing.Size,System.Drawing.Point,System.Drawing.Font,System.Drawing.Color,System.Drawing.Color,System.Windows.Forms.BorderStyle,System.Drawing.StringFormat)">
            <summary></summary>
            <param name="scrollBars"/>
            <param name="action"/>
            <param name="value"/>
            <param name="text"/>
            <param name="size"/>
            <param name="location"/>
            <param name="font"/>
            <param name="foreColor"/>
            <param name="backColor"/>
            <param name="borderStyle"/>
            <param name="sf"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.ScrollBar">
            <summary>
            Returns the scrollbar that is the source of this event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Action">
            <summary>
            Returns a <see cref="T:Syncfusion.Windows.Forms.ScrollTipActions"/> value that specifies the user action that led to this event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Value">
            <summary>
            Returns the new scroll position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Text">
            <summary>
            Gets / sets the text to display in the ScrollTip. You can change this text in your event handler during
            a Scroll action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Size">
            <summary>
            Gets / sets the size of the ScrollTip window. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Location">
            <summary>
            Gets / sets the location of the ScrollTip window. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Font">
            <summary>
            Gets / sets the font to be used for the ScrollTip text. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack or Scroll action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.ForeColor">
            <summary>
            Gets / sets the text color to be used for the ScrollTip text. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack or Scroll action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.BackColor">
            <summary>
            Gets / sets the backcolor to be used for the ScrollTip text. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack or Scroll action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.BorderStyle">
            <summary>
            Gets / sets the border style to be used for the ScrollTip text. You can adjust the scroll window size in your event handler
            when handling a ThumbTrack action.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollTipFeedbackEventArgs.Format">
            <summary>
            Gets / sets the text layout information for the text in the ScrollTip.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.BeginUpdateOptions">
            <summary>
            BeginUpdateOptions details which drawing operations should be performed during a batch of updates.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BeginUpdateOptions.None">
            <summary>
            The control suspends any drawing and invalidation and will do a complete refresh when EndUpdate is called.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BeginUpdateOptions.Invalidate">
            <summary>
            Regions that need to be redrawn afterward should be marked invalid by calling the controls Invalidate method.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BeginUpdateOptions.ScrollWindow">
            <summary>
            ScrollWindow will scroll the window.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BeginUpdateOptions.SynchronizeScrollBars">
            <summary>
            Scrollbars should be synchronized with the current scroll position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.BeginUpdateOptions.InvalidateAndScroll">
            <summary>
            Allows invalidating regions, scrolling and synchronizes the scrollbar thumb.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollWindowEventArgs">
            <summary>
            Contains data for the WindowScrolling and WindowScrolled event.
            </summary>
            <remarks>
            ScrollWindow will raise a WindowScrolling event before it scrolls the window and a WindowScrolled event after the scrolling.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollWindowEventArgs.xAmount">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollWindowEventArgs.yAmount">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollWindowEventArgs.rect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollWindowEventArgs.clipRect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollWindowEventArgs.updateRect">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollWindowEventArgs.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.ScrollWindowEventArgs"/>.
            </summary>
            <param name="xAmount">The horizontal scroll distance in pixel.</param>
            <param name="yAmount">The vertical scroll distance in pixel.</param>
            <param name="rect">The bounds of the rectangle that is scrolled.</param>
            <param name="clipRect">Clipping rectangle.</param>
            <param name="updateRect">The rectangle that was scrolled into view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollWindowEventArgs.ToString">
            <override/>
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollWindowEventArgs.XAmount">
            <summary>
            Returns the horizontal scroll distance in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollWindowEventArgs.YAmount">
            <summary>
            Returns the vertical scroll distance in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollWindowEventArgs.Rect">
            <summary>
            Returns the bounds of the rectangle that is scrolled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollWindowEventArgs.ClipRect">
            <summary>
            Returns the Clipping rectangle.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollWindowEventArgs.UpdateRect">
            <summary>
            Returns the rectangle that was scrolled into view.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollWindowEventHandler">
            <summary>
            Handles the scroll window event.
            </summary>
            <returns></returns>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ExceptionManager">
            <summary>
            Provides a global hook for exceptions that have been cached inside the framework and gives you
            the option to provide specialized handling of the exception. You can also temporarily suspend and resume
            caching exceptions.
            </summary>
            <remarks>
            The Syncfusion framework notifies <see cref="T:Syncfusion.Windows.Forms.ExceptionManager"/> about exceptions that
            are cached by calling <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)"/> or <see cref="T:Syncfusion.Windows.Forms.ExceptionManager"/>.<para/>
            The <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)"/> method will raise the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/>
            event. By handling the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event, your code can analyze the exception that was cached
            and optionally let it bubble up by rethrowing the exception.<para/>
            Your code can also temporarily suspend and resume caching exceptions. This is useful if you want to provide your
            own exception handling. Just call <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.SuspendCatchExceptions"/> to disable handling exceptions and <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.ResumeCatchExceptions"/>
            to resume caching exceptions.<para/>
            You also have the options to disable caching exceptions altogether by setting <see cref="P:Syncfusion.Windows.Forms.ExceptionManager.PassThroughExceptions"/> to True.<para/>
            Note: All static settings for this class are thread local.
            </remarks>
            <example><code lang="C#">
            // The following example demonstrates temporarily suspending exception caching when calling a base class version
            // of a method.
                    protected override void OnMouseDown(MouseEventArgs e)
                        {
                        ExceptionManager.SuspendCatchExceptions();
                        try
                        {
                            base.OnMouseDown(e);
                            ExceptionManager.ResumeCatchExceptions();
                        }
                        catch (Exception ex)
                        {
                            ExceptionManager.ResumeCatchExceptions();
                                // Notify exception manager about the catched exception and
                                // give it a chance to optionally rethrow the exception if necessary
                                // (e.g. if this OnMouseDown was called from another class that
                                // wants to provide its own exception handling).
                            if (!ExceptionManager.RaiseExceptionCatched(this, ex))
            					throw ex;
                            // handle exception here
                            MessageBox.Show(ex.ToString());
                        }
                    }
            </code></example>
            <example><code lang="C#">
            // This code sample shows how exceptions are handled within the framework:
                            try
                            {
                                CurrentCell.Refresh();
                            }
                            catch (Exception ex)
                            {
                                TraceUtil.TraceExceptionCatched(ex);
                                if (!ExceptionManager.RaiseExceptionCatched(this, ex))
            						throw ex;
                            }
            </code></example>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ExceptionManager.passThroughExceptions">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ExceptionManager.suspendCatchExceptions">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ExceptionManager._ehl">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ExceptionManager.onExceptionCatchedKey">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionManager.SuspendCatchExceptions">
            <summary>
            Temporarily suspends caching exceptions. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionManager.ResumeCatchExceptions">
            <summary>
            Temporarily resumes caching exceptions. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionManager.ShouldCatchExceptions">
            <summary>
            Indicates whether exceptions should be cached or if they should bubble up. <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.RaiseExceptionCatched(System.Object,Syncfusion.Windows.Forms.ExceptionCatchedEventArgs)"/>
            calls this method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionManager.RaiseExceptionCatched(System.Object,Syncfusion.Windows.Forms.ExceptionCatchedEventArgs)">
            <overload>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event.
            </overload>
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event. If caching exceptions has been disabled
            by a <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.SuspendCatchExceptions"/> call or if <see cref="P:Syncfusion.Windows.Forms.ExceptionManager.PassThroughExceptions"/> has been set to True,
            the exception is rethrown.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.ExceptionCatchedEventArgs"/> that contains the event data.</param>
            <returns></returns>
            <param name="sender"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ExceptionManager.RaiseExceptionCatched(System.Object,System.Exception)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched"/> event. If caching exceptions has been disabled
            by a <see cref="M:Syncfusion.Windows.Forms.ExceptionManager.SuspendCatchExceptions"/> call or if <see cref="P:Syncfusion.Windows.Forms.ExceptionManager.PassThroughExceptions"/> has been set to True,
            the exception is rethrown.
            </summary>
            <param name="ex">A <see cref="T:System.Exception"/> that was cached.</param>
            <returns></returns>
            <param name="sender"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ExceptionManager.ehl">
            <summary></summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ExceptionManager.ExceptionCatched">
            <summary>
            Occurs when an exception was cached within the framework and <see cref="T:Syncfusion.Windows.Forms.ExceptionManager"/> was notified.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ExceptionManager.PassThroughExceptions">
            <summary>
            Lets you disable caching exceptions altogether by setting <see cref="P:Syncfusion.Windows.Forms.ExceptionManager.PassThroughExceptions"/> to True.<para/></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.AccelerateScrollingBehavior">
            <summary>
            Specifies the acceleration behavior for scrollbars.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AccelerateScrollingBehavior.None">
            <summary>
            Disable scrollbar acceleration.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AccelerateScrollingBehavior.Default">
            <summary>
            Default, moderate acceleration after the user scrolled 60 increments.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AccelerateScrollingBehavior.Fast">
            <summary>
            Acceleration after the user scrolled 20 increments.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AccelerateScrollingBehavior.Immediate">
            <summary>
            Immediate acceleration after the user scrolled 4 increments.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.AutoScrollReason">
            <summary>
            Specifies the type of autoscrolling, either scrollbar acceleration or mouse dragging outside window bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AutoScrollReason.AccelarateScrollbar">
            <summary>
            The user held down a scrollbar button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AutoScrollReason.MouseDragging">
            <summary>
            The user has dragged the mouse outside the autoscroll bounds.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.AutoScrollReason.OleDragOver">
            <summary>
            The user is moving the mouse over the control during OLE drag-and-drop operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.StartAutoScrollingEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrolling"/> event.
            </summary>
            <returns></returns>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.ScrollControl.StartAutoScrolling"/> event which is called
            when accelerated scrollbar scrolling or mouse drag-scrolling starts.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.reason">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.accStartInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.accStepInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.accMinInterval">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.accDelayScrollTimer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.direction">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.#ctor(Syncfusion.Windows.Forms.AutoScrollReason,System.Windows.Forms.ScrollBars,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
            <param name="reason"/>
            <param name="direction"/>
            <param name="accStartInterval"/>
            <param name="accStepInterval"/>
            <param name="accMinInterval"/>
            <param name="accDelayScrollTimer"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.Reason">
            <summary>
            Returns the type of autoscrolling, either scrollbar acceleration or mouse dragging outside window bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.Direction">
            <summary>
            Returns the scroll bar direction: vertical, horizontal, or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.AccStartInterval">
            <summary>
            Gets / sets the interval that is initially assigned to the timer for recurring scrolling.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.AccStepInterval">
            <summary>
            Gets / sets the interval step that the timer should be decreased from time to time.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.AccMinInterval">
            <summary>
            Gets / sets the minimum interval for the fastest scroll speed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StartAutoScrollingEventArgs.AccDelayScrollTimer">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SizeBox">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeBox.target">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeBox.parentFormWindowState">
            <summary> </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeBox.sizeGripStyle">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeBox.ScrollControl">
            <summary>
            Internal Variable for ScrollControl
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SizeBox.#ctor(System.Windows.Forms.Control)">
            <summary></summary>
            <param name="target"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SizeBox.Dispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SizeBox._themedScrollBarDrawing">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SizeBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SizeBox.SizeGripStyle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SizeBox.ShowSizeGrip">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SizeBox.themedScrollBarDrawing">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ShowContextMenuEventHandler">
            <summary>
            Handles a cancellable <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ShowContextMenu"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name=" e">An <see cref="T:Syncfusion.Windows.Forms.ShowContextMenuEventArgs"/> that contains the event data.</param>
            <returns></returns>
            <param name="e"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ShowContextMenuEventArgs">
            <summary>
            Provides data about the cancellable <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ShowContextMenu"/> event.
            </summary>
            <remarks>
            ShowContextMenuEventArgs is a custom event argument class used by the
            <see cref="E:Syncfusion.Windows.Forms.ScrollControl.ShowContextMenu"/> event when the user right-clicks inside
            the control.
            <para/>
            You can cancel showing a context menu when
            you assign True to <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>.<para/></remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ShowContextMenuEventArgs.point">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ShowContextMenuEventArgs.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new object.
            </summary>
            <param name="point">The mouse location in screen coordinates.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ShowContextMenuEventArgs.Point">
            <summary>
            Returns the mouse location in screen coordinates.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrame">
            <summary>
            Custom scrollbars with various VisualStyles and provision to add buttons to it.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.PROPERTY_NAME">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_nativewnd">
            <summary>Subclasser that helps us to monitor control changes.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_parent">
            <summary>Reference on control to which we attach scrollers.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_hScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_vScroll">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_hScrollBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_vScrollBar">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_oldParentParent">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_styles">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_ColorScheme">
            <summary> Color scheme that used in Rendering. </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_ColorScheme2010">
            <summary> Color scheme that used in Rendering. </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_MetroColorScheme">
            <summary> Color scheme that used in Rendering. </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_gripperVisibility">
            <summary>Gripper visibility behavior.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.useTouchScrollBehavior">
            <summary>
            win8 style scroll behavior
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_bParentInDragging">
            <summary>
            Indicates if a Parent control is in dragging mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_bLeftMouseButtonDown">
            <summary>
            Indicates if left mouse button is pressed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_bEnableDelayedScrollBarUpdate">
            <summary>
            Enables delayed scrollbar updates. Default value is true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_iarSynchronizeScrollbars">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.s_attachedControls">
            <summary>
            Collection of all attached controls and corresponding <see cref="T:Syncfusion.Windows.Forms.ScrollersFrame"/> components.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.LargeIconViewSmallIncrementValue">
            <summary>
            LargeIcon View Scroller Increment Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.SmallIconViewSmallIncrementValue">
            <summary>
            SmallIcon View Scroller Increment Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.TileViewSmallIncrementValue">
            <summary>
            Tile View Scroller Increment Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.DetailsViewSmallIncrementValue">
            <summary>
            Details View Scroller Increment Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ListViewSmallIncrementValue">
            <summary>
            List View Scroller Increment Value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_MetroThumbSize">
            <summary>
            Holds Metro thumb size
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_ShowMetroArrowButton">
            <summary>
            Holds whether to show Metro Arrow Button
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ShouldSerializeUseWin8StyleScrollBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ResetUseWin8StyleScrollBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.hScroller">
            <summary>Horizontal scroller instance.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.vScroller">
            <summary>Vertical scroller instance.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.m_sizeGripper">
            <summary>Size gripper control instance.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.#ctor(System.ComponentModel.IContainer)">
            <summary>Component oriented constructor. Mostly used by Windows Forms
            designer.</summary>
            <param name="container">reference on container that will control 
            class life time.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ShouldSerializeVisualStyle">
            <summary>
            Indicates whether the current value of the OfficeColorScheme property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ResetVisualStyle">
            <summary>
            Resets the office color scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ShouldSerializeOfficeColorScheme">
            <summary>
            Indicates whether the current value of the OfficeColorScheme property is to be serialized.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ShouldSerializeOffice2010ColorScheme">
            <summary>
            Indicates whether the current value of the Office2010ColorScheme property is to be serialized.
            </summary>
            <returns>a boolean value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ResetOfficeColorScheme">
            <summary>
            Resets the office color scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ResetOffice2010ColorScheme">
            <summary>
            Resets the office2010 color scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.parent_HandleCreated(System.Object,System.EventArgs)">
            <summary>Method called when parent control create own window handle.</summary>
            <param name="sender">reference on parent control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.parent_HandleDestroyed(System.Object,System.EventArgs)">
            <summary>Method called when control destroy own window handle.</summary>
            <param name="sender">reference on parent control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.parent_RightToLeftChanged(System.Object,System.EventArgs)">
            <summary>Method called when detected parent RightToLeft property value changes.</summary>
            <param name="sender">reference on parent control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.OnScrollerScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.parent_ParentChanged(System.Object,System.EventArgs)">
            <summary>Method called when detected changes in parent-child hierarchy.</summary>
            <param name="sender">reference on parent control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.AttachFrame(System.Windows.Forms.Control)">
            <summary>Method attach scroller frame to the specified control. Previously 
            attaches to the controls will be released.</summary>
            <param name="control">Reference on windows forms control. Can not be NULL.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateSmallIncrementListView">
            <summary>
            To update the Small Increment speed when ScrollersFrame is attached with ListView control
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.DetachFrame">
            <summary>Detach scrollers frame from previously attached control.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.Update">
            <summary>Refresh scroller frames internal settings and repaint.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.AttachScrollers">
            <summary>Internal scrollers attaching algorithm.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.DetachScrollers">
            <summary>Internal scrollers detaching algorithm.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.ReflectRightToLeft">
            <summary>Reflect Right to Left settings from parent control with respect to internal logic.</summary>
            <remarks>change RTL before SetParent calls. RTL force re-creation of the scroller handle!!!</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateScrollersParent">
            <summary>Method reassign parents for scrollers when needed.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SynchronizeScrollbarsPosition">
            <summary>Method synchronize settings with parent wihdow and scrollers.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateParentInDragging">
            <summary>
            If parent is being dragged, scrollers get invisible.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SynchronizeScrollbars(System.Boolean)">
            <summary>
            Method synchronize our scrollers with parent scollers. By parameter
            specified source of data.
            </summary>
            <param name="bWindow">True - source is window, otherwise False.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateScrollerSettings(Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLBARINFO@,Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLBARINFO@)">
            <summary>Method updates enable states from structs specified by user.</summary>
            <param name="horz">Horizontal scroller struct.</param>
            <param name="vert">Vertical scroller struct.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateScrollerSettings(Syncfusion.Windows.Forms.ScrollBarCustomDraw,Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLINFO@)">
            <summary>
            Utility method. Copy settings value to scrollbar control.
            </summary>
            <param name="bar">reference on scroller instance.</param>
            <param name="settings">Window WIN32 API struct settings of which we reflect.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateSettingsByScroller(Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLINFO@,Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>Vise versa operation to <see cref="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateScrollerSettings(Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLBARINFO@,Syncfusion.Runtime.InteropServices.NativeMethods.SCROLLBARINFO@)"/> method.</summary>
            <param name="settings">Destination of settings reflection.</param>
            <param name="bar">ScrollBra instance which settings we reflect.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.CreateControlContainer">
            <summary>
            Method create special container windows that will host attached control.
            </summary>
            <remarks>NOT implemented. Reserved for future enhancements. But can be overrided 
            and implemented by user.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.WmNcCalcSize(System.Windows.Forms.Message@)">
            <summary>Method process WM_NSCALCSIZE message.</summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.WmWindowPosChanged(System.Windows.Forms.Message@)">
            <summary>Method process WM_WINDOWPOSCHANGED message.</summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.WmStyleChanged(System.Windows.Forms.Message@)">
            <summary>Method process WM_STYLECHANGED message.</summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.WM_Move(System.Windows.Forms.Message@)">
            <summary>
            Method process a WM_MOVE message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.WM_MouseMove(System.Windows.Forms.Message@)">
            <summary>
            Method process a WM_MOUSEMOVE message.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>Method filter parent control messages and according to 
            them set scroller frame settings.</summary>
            <param name="m">Windows message.</param>
            <returns>True - allow forward of message, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.UpdateGripperVisibility">
            <summary>
            Updates visibility of gripper.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.GetGripperVisibility">
            <summary>
            Gets visibility of the size gripper.
            </summary>
            <returns>true if gripper should be shown; otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SynchronizeScrollbarsAsync">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.IsRelated(System.Windows.Forms.Control,Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>
            Verifies if <see cref="T:Syncfusion.Windows.Forms.ScrollBarCustomDraw"/> is owned by <see cref="!:ScroolerFrame"/> attched to control.
            </summary>
            <param name="control">Control to verify.</param>
            <param name="scroll"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.AttachedTo">
            <summary>Reference on control to which we assign our custom scrollers.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.HorizontalScroller">
            <summary>Reference on configurable Horizontal Scroller control.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.VerticalScroller">
            <summary>Reference on configurable Vertical Scroller control.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperVisibility">
            <summary>
            Gets or sets visibility of size gripper.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.MetroThumbSize">
            <summary>
            Gets/Sets the size of Metro Scroller Thumb
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.ShowMetroArrowButton">
            <summary>
            Gets/Sets whether to display Metro scroller buttons
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.UseTouchScrollBehavior">
            <summary>
            Gets or Sets whether to set the win 8 style scroll behavior
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.IsHorizontalScrollVisible">
            <summary>True - horizontal scroller is visible to user, otherwise False.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.IsVerticalScrollVisible">
            <summary>True - vertical scroller is visible to user, otherwise False.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.VisualStyle">
            <summary>Specifies the style of appearance.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.ScrollMetroColorTable">
            <summary>
            Gets or sets custom color to MetroScroller.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.MetroColorScheme">
            <summary>
            Gets or sets whether the Metro color scheme should be User defined colors.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.OfficeColorScheme">
            <summary>
            Gets or sets whether the Office color scheme should be Silver or Blue or Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.Office2010ColorScheme">
            <summary>
            Gets or sets whether the Office color scheme should be Silver or Blue or Black.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.HorizontalSmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the Value property when the horizontal scroll box is moved a small distance. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.VerticallSmallChange">
            <summary>
            Gets or sets the value to be added to or subtracted from the Value property when the vertical scroll box is moved a small distance. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.EnableDelayedScrollBarUpdate">
            <summary>
            Gets or sets whether delayed scrollbar updates must be updated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.RefreshOnValueChange">
            <summary>
            Gets or sets value indicating whether scrollbar should be refreshed on each value change.
            If set to false, scrollbar is invalidated only and therefore is visually refreshed after processing all scrolling messages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.CustomRender">
            <summary>
            Gets or Sets custom renderer to customize the scroll bars
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.ScrollBar">
            <summary>The scroll bar itself.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.TopRightArrow">
            <summary>The top or right arrow button.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.TopRightRegion">
            <summary>The page up or page right region.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.Thumb">
            <summary>The scroll box (thumb).</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.BottomLeftRegion">
            <summary>The page down or page left region.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.ScrollBarComponents.BottomLeftArrow">
            <summary>The bottom or left arrow button.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripper">
            <summary>Special Size Gripper class that supports RTL.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripper.DropHandle">
            <summary>Publish for user Handle destroy functionality. Usefull for resource 
            cleanup in runtime.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripper.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary></summary>
            <param name="e"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv">
            <summary>
            Size gripper advanced.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.MIN_WIDTH">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.GRIP_RECTANGLE_WIDTH">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.m_scrFrame">
            <summary>
            Instance of ScrollersFrame.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.m_bDrawGripMarking">
            <summary>
            Indicates whether grip marking should be drawn. If set to false, just background is filled.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.#ctor(Syncfusion.Windows.Forms.ScrollersFrame)">
            <summary>Default constructor.</summary>
            <param name="frame">reference on scroller frame. Can not be NULL.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Implemented visual styles support.</summary>
            <param name="e">Paint event arguments.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control"/> and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.PaintGripOffice2007(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="clGripLight"/>
            <param name="clGripDark"/>
            <param name="clGripBackground"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollersFrame.SizeGripperAdv.DrawGripMarking">
            <summary>
            Gets or sets value indicating whether grip marking should be drawn. If set to false, just background is filled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrame.VisualStyleTypeConverter">
            <summary>Design time change of property visibility. Office 2007 visual style support.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrame.VisualStyleTypeConverter.GetPropertyAttributes(System.ComponentModel.Component,System.ComponentModel.PropertyDescriptor)">
            <summary>Show/Hide OfficeColorScheme property for user in runtime.</summary>
            <param name="component"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollersFrameDesigner">
            <summary>Class Attaching better design time support for FM2.0 and higher.
            In older version class have no influences on design time.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollersFrameDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary></summary>
            <param name="component"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.AttachedToControlTypeConverter">
            <summary>Designer helper lass. Do not allow attaching of root 
            components by <see cref="T:Syncfusion.Windows.Forms.ScrollersFrame"/>.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.AttachedToControlTypeConverter.#ctor(System.Type)">
            <summary>Default constructor.</summary>
            <param name="type"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.AttachedToControlTypeConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
            <summary>Method filter that chech is attaching allowed or not.</summary>
            <param name="context">filter context.</param>
            <param name="value">property value that requesting check operation.</param>
            <returns>True - if attaching allowed, otherwise False.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollerFrameDesigner">
            <summary>
            ProgressBarAdv Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ScrollerFrameDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollerFrameDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ScrollerFrameDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.VScrollBarCustomDraw">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VScrollBarCustomDraw.DEF_MINTHUMB_HEIGHT">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VScrollBarCustomDraw.m_deltaY">
            <summary>
            Distance from thumb Y position to mouse down Y position.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VScrollBarCustomDraw.m_bIsControlsVisible">
            <summary>
            Flag, if true than controls visivble in other case not visible.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VScrollBarCustomDraw.m_defaultSize">
            <summary>
            Default size of the vertical scroolbar.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.#ctor(Syncfusion.Windows.Forms.ScrollersFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.VScrollBarCustomDraw"/> class.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.VScrollBarCustomDraw"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.OnSizeChanged(System.EventArgs)">
            <summary>
            Occurs when control size changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.ValidateControlsVisibility">
            <summary>
             Used for validating visibility of the ControlsAfter and ControlsBefore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.ResetToSystemMetrics">
            <summary>
            Reset vertical scrollbar to default width.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.GetAfterControlsDockStyle">
            <summary>
            Gets dockStyle for controls which situated before scroll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.GetBeforeControlsDockStyle">
            <summary>
            Gets dockStyle for controls which situated after scroll.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.PointToValue(System.Int32,System.Int32)">
            <summary>
            Gets value by cursor position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.RecalculateArrow">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.RecalculateThumb">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.GetMaxButton">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.GetMinButton">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.CalculatedDelta(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.OnMovedPositionChanged(System.Int32,System.Int32)">
            <summary></summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.ShouldSerializeSize">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.ResetSize">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.CalculateArrowsPositions">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.CalculateThumbSize">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.CalculateThumbLeftAndRightZone">
            <summary>
            Calculating bounds for leftThumb and rightThumb zones for scroll.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.OnScrollHereClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.OnPageDownRightClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VScrollBarCustomDraw.OnPageUpLeftClick(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VScrollBarCustomDraw.Size">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.GetAlphaBlendedColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary></summary>
            <param name="src"></param>
            <param name="dest"></param>
            <param name="alpha"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.GetColorTable(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2007ColorScheme)">
            <summary>
            Retrieves color table according to style and scheme.
            </summary>
            <param name="style">Office2007 style.</param>
            <param name="scheme">Office2007 color scheme.</param>
            <returns>Color table.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.RegisterColorTable(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2007ColorScheme,Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007)">
            <summary>
            Registers color table within internal collection.
            </summary>
            <param name="style">Office2007 style.</param>
            <param name="scheme">Office2007 scheme.</param>
            <param name="colorTable">Color table itself.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.UpdateColors(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="basicColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.UpdateScheme(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2007ColorScheme)">
            <summary>
            
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ApplyManagedColors(Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,System.Drawing.Color)">
            <summary>
            Applies colors for managed scheme.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ApplyManagedScheme(System.Windows.Forms.Form,Syncfusion.Windows.Forms.ScrollBarCustomDrawStyles,Syncfusion.Windows.Forms.Office2007ColorScheme)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OnManagedColorApplied(System.Drawing.Color)">
            <summary>
            Called when <see cref="!:ManagedColorsAppliedEvent"/> is risen.
            </summary>
            <param name="form"></param>
            <param name="baseColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.m_office2007Colors">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.s_colorTables">
            <summary>
            Registered color tables.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerGradientBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerGradientEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientSelectedBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientSelectedEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientPressedBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonGradientPressedEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderDark">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderLight">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderSelectedDark">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderSelectedLight">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderPressedDark">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowButtonBorderPressedLight">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowGradientBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowGradientEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowGradientNormalBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ArrowGradientNormalEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ThumbLinesGradientBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ThumbLinesGradientEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ThumbPressedBackgroundGradientBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ThumbPressedBackgroundGradientEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerBorderBegin">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerBorderEnd">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerGripDark">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerGripLight">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.ScrollerGripBackGround">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OfficeColors">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowGradientNormalBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowGradientNormalEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.thumbLinesGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.thumbLinesGradientEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerBorderBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerBorderEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerGripDark">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerGripLight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.scrollerGripBackGround">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientSelectedBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientSelectedEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientPressedBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonGradientPressedEnd">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderSelectedDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderSelectedLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderPressedDark">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.arrowButtonBorderPressedLight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.thumbPressedBackgroundGradientBegin">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007.OFFICE2007COLOR.thumbPressedBackgroundGradientEnd">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007Silver">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007Silver.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007Black">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007Black.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Blue">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Blue.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Silver">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Silver.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Black">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.ColorTableGenericOffice2007Black.InitColors(System.Drawing.Color[]@)">
            <summary></summary>
            <param name="colors"/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.Office2007Renderer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.MIN_THUMB_LENGTH_FOR_LINES">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.THUMB_LINE_LENGTH">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_colorTable">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blBackGround">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blBackGroundBlack">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blArrowButton">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blArrowButtonSelected">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blArrowButtonSelectedSilverBlack">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_blThumbBackGround">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.m_hImages">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.#cctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw,Syncfusion.Windows.Forms.Renderers.ColorTableOffice2007)">
            <summary>
            Initialize new instance of Office2007Renderer
            </summary>
            <param name="parent"></param>
            <param name="colorTable"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="rcArrow"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="rcBackground"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="rcThumb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawArrowBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="type"/>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawThumbBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="type"></param>
            <param name="state"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.DrawLines(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary></summary>
            <param name="g"></param>
            <param name="rc"></param>
            <param name="isVerticalScrollBar"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetBackgroundBrushHorizontal(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <returns></returns>
            <param name="width"/>
            <param name="clBegin"/>
            <param name="clEnd"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetBackgroundBrushVertical(System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <returns></returns>
            <param name="height"/>
            <param name="clBegin"/>
            <param name="clEnd"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetVerticalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="rc"></param>
            <param name="cl1"></param>
            <param name="cl2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetVerticalBrush(System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="top"></param>
            <param name="height"></param>
            <param name="cl1"></param>
            <param name="cl2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetHorizontalBrush(System.Drawing.Rectangle@,System.Drawing.Color,System.Drawing.Color)">
            <summary></summary>
            <param name="rc"></param>
            <param name="cl1"></param>
            <param name="cl2"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetRoundedPolygon(System.Drawing.Rectangle,System.Int32)">
            <summary></summary>
            <param name="rc"></param>
            <param name="iRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeRightArrow(System.Int32,System.Int32)">
            <summary> Right office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeLeftArrow(System.Int32,System.Int32)">
            <summary> Left office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeDownArrow(System.Int32,System.Int32)">
            <summary> Down office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeUpArrow(System.Int32,System.Int32)">
            <summary> Up office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeRightArrowNormal(System.Int32,System.Int32)">
            <summary> Right Normal office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeLeftArrowNormal(System.Int32,System.Int32)">
            <summary> Left Normal office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeDownArrowNormal(System.Int32,System.Int32)">
            <summary> Down Normal office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeUpArrowNormal(System.Int32,System.Int32)">
            <summary> Up Normal office arrow. </summary>
            <returns></returns>
            <param name="width"/>
            <param name="height"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeThumbLinesVertical">
            <summary> Vertical thumb lines. </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.Office2007Renderer.GetOfficeThumbLinesHorizontal">
            <summary> Horizontal thumb lines. </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.EIMAGE">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiDownArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiRightArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiLeftArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiUpArrow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiDownArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiRightArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiLeftArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiUpArrowNormal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiThumbLinesVertical">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.eiThumbLinesHorizontal">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.EIMAGE.MAX">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer">
            <summary>WindowsXP Blue Style renderer implementation.</summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_HORIZONTAL_BRUSH_ANGLE">
            <summary>
            Angle for horizontal gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_VERTICAL_BRUSH_ANGLE">
            <summary>
            Angle for vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_SLOPING_BRUSH_ANGLE">
            <summary>
            Angle for vertical gradient brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_WIDTH_BRUSH">
            <summary>
            Width for brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_HEIGHT_BRUSH">
            <summary>
            Height for brush.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_BORDERS_RADIUS">
            <summary>
            Default radius truncation corners.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_COUNT_OF_LINES">
            <summary>
            Count of lines on the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DEF_HEIGHT_OF_LINES">
            <summary>
            Height of lines on the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_iLeft">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_iTop">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_iRight">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_iBottom">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_disabledColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_disabledShadowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_disabledArrowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.m_disabledBackgroundColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.colorScheme">
            <summary>
            The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.renderer">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.#ctor(System.Boolean)">
            <summary>
            Initialize new instance of WindowsXPRenderer
            </summary>
            <param name="isVerticalScrollBar"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>
            Initialize new instance of WindowsXPRenderer
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.SetColorScheme(Syncfusion.Windows.Forms.WindowsXPColorsScheme)">
            <summary>
            Sets WindowsXP color scheme for the control.
            </summary>
            <param name="colorScheme"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.SetColorScheme">
            <summary>
            Sets the color scheme for the button based on the current XP Scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.InitializeRectangleEdges(System.Drawing.RectangleF)">
            <summary>
            Initializes edges of specified rectangle.
            </summary>
            <param name="bounds">Bounds of the rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.ValidateRectangle(System.Drawing.RectangleF@)">
            <summary></summary>
            <param name="rc"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.GetRoundedPath(System.Drawing.RectangleF,System.Int32)">
            <summary>
             Gets rounded path with specified radius for the rectangle.
            </summary>
            <param name="bounds"></param>
            <param name="iRadius"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.GetVerticalBrush(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets vertical gradient brush.
            </summary>
            <returns></returns>
            <param name="rc"/>
            <param name="cl1"/>
            <param name="cl2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.GetHorizontalBrush(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets horizontal gradient brush.
            </summary>
            <returns></returns>
            <param name="rc"/>
            <param name="cl1"/>
            <param name="cl2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.GetSlopingBrush(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Gets gradient brush with 53 angle.
            </summary>
            <returns></returns>
            <param name="rc"/>
            <param name="cl1"/>
            <param name="cl2"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawBackgroundLines(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>
            Draws background lines.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the background.</param>
            <param name="lineColor">Color of the lines.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawShadowForArrowButton(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws shadow for the arrow button.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
            <param name="shadowColor"/>
            <param name="startBackgroundColor"/>
            <param name="endBackgroundColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawShadowForThumb(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Draws shadow for the thumb.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
            <param name="shadowColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawMiddleLinesForThumb(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws middle lines on the thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
            <param name="firstColor"/>
            <param name="secondColor"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.FillRectangleWhite(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Fill Rectangle with ControlLightLight color.
            </summary>
            <param name="g">Graphics objects to use.</param>
            <param name="bounds">Bounds of the rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawArrowButtonDisabled(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton)">
            <summary>
            Draws disabled arrowButton.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the button.</param>
            <param name="type">Type of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawBackgroundDisabled(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws disabled background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawThumbDisabled(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws disabled thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawArrows(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Drawing.Color)">
            <summary>
            Draws up arrow on the button.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the button.</param>
            <param name="type"/>
            <param name="color"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.DrawArrowInternal(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Draws two lines in specified points.
            </summary>
            <param name="g"></param>
            <param name="pen"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.Rotate(System.Drawing.PointF[],System.Single,System.Drawing.PointF)">
            <summary>
            Rotate shape on specified angle around center p. 
            </summary>
            <param name="points"> Array of points that represents shape to rotate. </param>
            <param name="angle">Angle in radians to rotate.</param>
            <param name="p">Point to rotate around.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Scrolling.Renderers.WindowsXPRenderer.ColorScheme">
            <summary>
             The color scheme that the renderer will render. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendArrowButtonDefault">
            <summary>
            Blend for the default and selected arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendArrowButtonPushed">
            <summary>
            Blend for the pushed arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendThumb">
            <summary>
            Blend for the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendSmallThumb">
            <summary>
            Blend for the thumb with height &lt; 17.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendArrowButtonBorder">
            <summary>
            Blend for the border of arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_blendBackGround">
            <summary>
            Blend for the background.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_shadowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultArrowButtonBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultArrowButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedArrowButtonBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedArrowButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedArrowButtonBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedArrowButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_arrowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbBlueLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_defaultThumbEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbBlueLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_selectedThumbEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbBlueLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.m_pushedThumbEndColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.#ctor(System.Boolean)">
            <summary>
            Initialize new instance of WindowsXPRenderer
            </summary>
            <param name="isVerticalScrollBar"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.GetTopRoundedPath(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Gets path that represents left and top lines.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
            <param name="iRadius"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.GetBottomRoundedPath(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Gets path that represents bottom and right lines.
            </summary>
            <param name="bounds"></param>
            <returns></returns>
            <param name="iRadius"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.FillBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills background with specified colors and gradient.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the background.</param>
            <param name="startColor">Start color of the gradient.</param>
            <param name="endColor">End color of the gradient.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawDefaultBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawDefaultArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawSelectedArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws selected arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawPushedArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawDefaultThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawSelectedThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws selected thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawPushedThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawBorderForThumb(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws rounded path for the rectangle of thumb with specified color.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
            <param name="color1">Color to draw.</param>
            <param name="color2">Color to draw.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPBlueRenderer.DrawBorderForArrowButton(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws rounded path for the rectangle of arrow button with specified color.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
            <param name="color1">Color to draw.</param>
            <param name="color2">Color to draw.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer">
            <summary>WindowsXP OliveGreen Style renderer implementation.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_blendArrowButton">
            <summary>
            Blend for the default and selected arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_blendInternalArrowButton">
            <summary>
            Blend for the default and selected arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_blendThumb">
            <summary>
            Blend for the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_blendBackGround">
            <summary>
            Blend for the background.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_arrowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_arrowButtonShadowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedArrowButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedArrowButtonInternalColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedArrowButtonBackColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedArrowButtonBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_thumbShadowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultThumbGreenLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_defaultThumbEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedThumbGreenLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedThumbBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_selectedThumbEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedThumbWhiteLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedThumbGreenLineColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.m_pushedThumbEndColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.#ctor(System.Boolean)">
            <summary>
            Initialize new instance of WindowsXPRenderer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.FillBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills background with specified colors and gradient.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the background.</param>
            <param name="startColor">Start color of the gradient.</param>
            <param name="endColor">End color of the gradient.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawDefaultBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawDefaultArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawSelectedArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws selected arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawPushedArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawDefaultThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawSelectedThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws selected thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawPushedThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPOliveGreenRenderer.DrawBorder(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color)">
            <summary>
            Draws rounded path for the rectangle of arrow button with specified color.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
            <param name="color">Color to draw.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer">
            <summary>WindowsXP Silver Style renderer implementation.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_blendArrowButtonDefault">
            <summary>
            Blend for the default and selected arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_blendArrowButtonPushed">
            <summary>
            Blend for the pushed arrow button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_blendThumb">
            <summary>
            Blend for the thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_blendThumbPushed">
            <summary>
            Blend for the pushed thumb.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_blendBackGround">
            <summary>
            Blend for the background.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedBackGroundBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedBackGroundStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedBackGroundEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedThumbBorderColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedArrowButtonStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_pushedArrowButtonEndColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_arrowColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultThumbStartColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.m_defaultThumbEndColor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.#ctor(System.Boolean)">
            <summary>
            Initialize new instance of WindowsXPRenderer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="type"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws thumb for scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.FillBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Fills background with specified colors and gradient.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the background.</param>
            <param name="startColor">Start color of the gradient.</param>
            <param name="endColor">End color of the gradient.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawDefaultBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed background.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawDefaultArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawPushedArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed arrow button.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawDefaultThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws default thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawPushedThumb(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed thumb.
            </summary>
            <param name="g">Graphics object to use.</param>
            <param name="bounds">Bounds of the thumb.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawBorders(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.Color,System.Windows.Forms.ButtonState)">
            <summary>
            Draws borders for the arrow buttons and thumbs.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Renderers.WindowsXPSilverRenderer.DrawBordersInternal(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws internal borders for the arrow buttons and thumbs.
            </summary>
            <param name="g">The graphics object to use.</param>
            <param name="bounds">Bounds of the arrow button.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroRenderer">
            <summary>
            The metro renderer for scrollbar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.MetroRenderer"/> class.
            </summary>
            <param name="parent">The parent control</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.#ctor(Syncfusion.Windows.Forms.ScrollBarCustomDraw,Syncfusion.Windows.Forms.MetroColorTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.MetroRenderer"/> class.
            </summary>
            <param name="parent">The parent control.</param>
            <param name="colorTable">The metro color table.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws background of scroll. If theme is disabled than draw classic scroll.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rcBackground">The bounds of background.</param>
            <param name="state">The scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawPushedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws pushed background.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="bounds">The bounds of background.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws scroll background.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="bounds">The scroll bounds.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawThumb(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws scroll thumb. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="gfx"></param>
            <param name="rcThumb"></param>
            <param name="state"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawThumbBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws scroll thumb background.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rect">The bounds of thumb.</param>
            <param name="state">The scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.Center(System.Drawing.Rectangle)">
            <summary>
            Method to calculate the center point to place the Thumb exactly at the center position inside the Scrollbar.
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawArrowButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow button of scroll. If theme is disabled than draw classic scroll. 
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rcArrow">The bounds of arrow.</param>
            <param name="type">The scroll button type.</param>
            <param name="state">The scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawArrowBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws arrow background.
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rect">The arrow backgroud bounds.</param>
            <param name="type">The scroll button type.</param>
            <param name="state">The scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.DrawArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ScrollButton,System.Windows.Forms.ButtonState)">
            <summary>
            Draws scrollbar arrow
            </summary>
            <param name="gfx">The graphics.</param>
            <param name="rect">The bounds of the arrow.</param>
            <param name="type">The scroll button type.</param>
            <param name="state">The scroll button state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeRightArrowPushed(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state right arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeRightArrow(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state right arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeLeftArrowPushed(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state left arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeLeftArrow(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state left arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeDownArrowPushed(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state down arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeDownArrow(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state down arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeUpArrow(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state up arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetOfficeUpArrowPushed(System.Int32,System.Int32)">
            <summary>
            Returns the pushed or checked state up arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetRightArrowNormal(System.Int32,System.Int32)">
            <summary>
            Returns the normal right arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetLeftArrowNormal(System.Int32,System.Int32)">
            <summary>
            Returns the normal left arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetDownArrowNormal(System.Int32,System.Int32)">
            <summary>
            Returns the normal down arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRenderer.GetUpArrowNormal(System.Int32,System.Int32)">
            <summary>
            Returns the normal up arrow.
            </summary>
            <param name="width">The width of the arrow.</param>
            <param name="height">The height of the arrow.</param>
            <returns>The bitmap.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroRenderer.EnableOffice2013Style">
            <summary>
            Indicates whether scrollBar style is EnableOffice2013Style
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroColorTable">
            <summary>
            Metro color table.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColorTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.MetroColorTable"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ScrollerBackground">
            <summary>
            Gets or sets the scroll bar background color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbNormal">
            <summary>
            Gets or sets the normal state thumb color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbChecked">
            <summary>
            Gets or sets the checked state thumb color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbPushed">
            <summary>
            Gets or sets the pushed state thumb color. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbNormalBorderColor">
            <summary>
            Gets or sets the Thumb Normal Border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbCheckedBorderColor">
            <summary>
            Gets or sets the Thumb Checked Border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbPushedBorder">
            <summary>
            Gets or sets the pushed state Thumb Pushed Border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbPushedBorderColor">
            <summary>
            Gets or sets the pushed state Thumb Pushed Border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowNormalBorderColor">
            <summary>
            Gets or sets the Arrow Normal Border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowCheckedBorderColor">
            <summary>
            Gets or sets the Arrow Checked Border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowPushedBorderColor">
            <summary>
            Gets or sets the Arrow Pushed Border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ThumbInActive">
            <summary>
            Gets or sets the inactive state thumb color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowNormal">
            <summary>
            Gets or sets the normal state arrow color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowChecked">
            <summary>
            Gets or sets the checked state arrow color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowPushed">
            <summary>
            Gets or sets the pushed state arrow color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowNormalBackGround">
            <summary>
            Gets or sets the normal state Arrow Background Color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowPushedBackGround">
            <summary>
            Gets or sets the pushed state Arrow Pushed Background color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColorTable.ArrowInActive">
            <summary>
            Gets or sets the inactive state arrow color.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.Serialization.SerializeMode">
            <summary>
            Defines constants for specifying the persistence medium to be used for serialization.
            </summary>
            <remarks>
            The SerializeMode enumeration defines constants for specifying the persistence medium.
            This enum is used by the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> class as well as by several other 
            Syncfusion components.
            </remarks>	
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.IsolatedStorage">
            <summary>
            The IsolatedStorage is used for reading / writing the state information.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.BinaryFile">
            <summary>
            A Binary file is used for reading / writing the state information.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.XMLFile">
            <summary>
            A .XML file is used for reading / writing the state information.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.WindowsRegistry">
            <summary>
            The Win32 WindowsRegistry is used for reading / writing the state information.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.XMLFmtStream">
            <summary>
            An externally provided Stream is used for reading / writing the state information in an XML format.
            </summary>
        </member>
        <member name="F:Syncfusion.Runtime.Serialization.SerializeMode.BinaryFmtStream">
            <summary>
            An externally provided Stream is used for reading / writing the state information in a binary format.
            </summary>
        </member>
        <member name="T:Syncfusion.Runtime.Serialization.AppStateSerializer">
            <summary>
            Provides a mechanism for coordinating the serialization behavior of multiple components.
            </summary>
            <remarks>
            <para>The AppStateSerializer class is a serialization utility that allows multiple components
            in an application to access a common disk I/O medium for state persistence. Using
            the same storage medium for persisting the state information across components, without overtly
            tying them together, helps avoid the file clutter that is bound to occur by components
            using distinct files. Though primarily developed for use by Syncfusion products, the
            AppStateSerializer is generic enough to be availed of by other components as well. </para>
            <para>
            The AppStateSerializer supports serializing into the system's Isolated Storage, Windows Registry, an XML file, 
            a binary file or to an externally provided Stream. Take a look at the <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> enumeration for more information on 
            these different supported modes.
            </para>
            <para>
            To use the services of this class, you can create a new instance or use the global Singleton instance.
            These two usage patterns are explained below:
            </para>
            <para>
            <b>1) Using the Singleton:</b> The AppStateSerializer class provides you a singleton instance
            (through the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetSingleton"/>) using which you can persist all your
            app. info into a single medium. This singleton, by default, is configured to persist in the
            Isolated Storage (with the scope IsolatedStorageScope.Assembly|IsolatedStorageScope.Domain|IsolatedStorageScope.User). 
            This usage pattern is akin to creating an instance of this class and using the same instance to persist
            all your app information. But, note that this Singleton is also used by the Controls and Components in
            Essential Tools to persist their information. The default Storage medium of this Singleton instance
            can also be customized using the static <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.InitializeSingleton(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)"/> method. In short, use
            the Singleton whenever you want all your persistence information to be stored in a single medium (along
            with the persistence information of the Controls and Components in Essential Tools).
            </para>
            <para>
            <b>2) Using an instance:</b> As an alternative you could create a custom instance
            of this class, configuring it to use one of the above storage mediums and persist
            one or more information into it. You can use this in tandem with the above Singleton instance
            if you wish. Make sure to call <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.PersistNow"/> method when you are done writing into the serializer.
            </para>
            <para>
            In both the above cases use the
            method's <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object)"/> and <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)"/>
            to persist or depersist from the storage medium set for that instance.
            </para>
            <para>
            Note that the AppStateSerializer class uses "Simple" type names (not strongly typed) to 
            serialize types. This is necessary to enable usage of persisted information across different
            but compatible versions of an assembly. This will however cause the deserialization
            process to convert the serialized data to the type from the latest version of the assembly installed in the GAC,
            instead of the version that your app is linking to. You can overcome this by
            using the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SetBindingInfo(System.String,System.Reflection.Assembly)"/> method.
            </para>
            </remarks>
            <example>
            <para>
            Serializing using an instance:
            <code lang="C#">
            // To Save
            AppStateSerializer serializer = new AppStateSerializer(SerializeMode.XMLFile, "myfile");
            serializer.SerializeObject("MyLabel", mydata);
            serializer.PersistNow();
            // To Load
            AppStateSerializer serializer = new AppStateSerializer(SerializeMode.XMLFile, "myfile");
            object loadedObj = serializer.DeserializeObject("MyLabel");
            if(loadedObj != null &amp;&amp; loadedObj is MyData)
            {
            	MyData myData = (MyData)loadedObj;
            }
            </code>
            <code lang="VB">
            ' To Save
            Dim serializer As New AppStateSerializer(SerializeMode.XMLFile, "myfile")
            serializer.SerializeObject("MyLabel", mydata)
            serializer.PersistNow()
            ' To Load
            Dim serializer As New AppStateSerializer(SerializeMode.XMLFile, "myfile")
            Dim loadedObj As Object = serializer.DeserializeObject("MyLabel")
            If TypeOf loadedObj Is MyData Then
            	Dim myData As MyData = CType(loadedObj, MyData)
            End If
            </code>
            </para>
            <para>
            Serializing using Singleton:
            <code lang="C#">
            // To Save
            AppStateSerializer.GetSingleton().SerializeObject("MyLabel", mydata, true);
            // To Load
            object loadedObj = AppStateSerializer.GetSingleton().DeserializeObject("MyLabel");
            </code>
            <code lang="VB">
            ' To Save
            AppStateSerializer.GetSingleton().SerializeObject("MyLabel", mydata, true)
            ' To Load
            Dim loadedObj As Object = AppStateSerializer.GetSingleton().DeserializeObject("MyLabel")
            </code>
            </para>
            </example>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.#ctor(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Overloaded. Creates an instance of the AppStateSerializer class.
            </summary>
            <param name="mode">The <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> in which to create.</param>
            <param name="persistpath">The persistence path to be used for this mode. See remarks for more info.</param>
            <remarks>
            <para>The persistpath argument should be based on the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationMode"/> property, as follows:</para>
            <list type="bullet">
            <item>SerializeMode.XMLFile<term>A string representing the file name (an .XML suffix will be added) in which to store.</term></item>
            <item>SerializeMode.BinaryFile<term>A string representing the file name (a .bin suffix will be added) in which to store.</term></item>
            <item>SerializeMode.WindowsRegistry<term>A <see cref="T:Microsoft.Win32.RegistryKey"/> under which to persist.</term></item>
            <item>SerializeMode.IsolatedStorage<term>A string representing the file name (a .bin suffix will be added) in which to store within the Isolated Storage.</term></item>
            <item>SerializeMode.ExternalStream<term>An instance of a <see cref="T:System.IO.Stream"/> derived class with Read, Write, and Seek capability.</term></item>
            </list>
            <para>
            If using the IsolatedStorage mode, then the default isolated storage scope (Domain | Assembly | User) will be used.
            Use the three argument constructor to specify a custom scope.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.#ctor(Syncfusion.Runtime.Serialization.SerializeMode,System.Object,System.IO.IsolatedStorage.IsolatedStorageScope)">
            <summary>
            Creates an instance of the AppStateSerializer class.
            </summary>
            <param name="mode">The <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> in which to create.</param>
            <param name="persistpath">The persistence path to be used for this mode. See remarks for more info.</param>
            <param name="scope">The <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope"/> to be used if the mode is set to SerializeMode.IsolatedStorage.</param>
            <remarks>
            <para>The persistpath argument should be based on the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationMode"/> property, as follows:</para>
            <list type="bullet">
            <item>SerializeMode.XMLFile<term>A string representing the file name (an .XML suffix will be added) in which to store.</term></item>
            <item>SerializeMode.BinaryFile<term>A string representing the file name (a .bin suffix will be added) in which to store.</term></item>
            <item>SerializeMode.WindowsRegistry<term>A <see cref="T:Microsoft.Win32.RegistryKey"/> under which to persist.</term></item>
            <item>SerializeMode.IsolatedStorage<term>A string representing the file name (a .bin suffix will be added) in which to store within the Isolated Storage.</term></item>
            <item>SerializeMode.ExternalStream<term>An instance of a <see cref="T:System.IO.Stream"/> derived class with Read, Write, and Seek capability.</term></item>
            </list>
            <para>
            The scope parameter will be referred to if using the IsolatedStorage mode.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetInstance">
            <summary>
            Returns a reference to the unique <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.
            </summary>
            <returns>The AppStateSerializer instance.</returns>
            <remarks>
            This method will be removed in a future version. Please use the GetSingleton method instead.
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetSingleton">
            <summary>
            Returns a reference to the unique <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> instance.
            </summary>
            <returns>The AppStateSerializer instance.</returns>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SetBindingInfo(System.String,System.Reflection.Assembly)">
            <summary>
            Controls the binding of an assembly name to a specific <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <param name="assemblyName">The assembly name string.</param>
            <param name="assembly">The corresponding <b>Assembly</b> to bind to.</param>
            <remarks>
            <para>
            The AppStateSerializer class, by default, uses "Simple" assembly names (not strongly typed) to serialize types. This
            renders the deserialization process unpredictable because the resultant type of an object after
            deserialization is dependent upon the latest version of that assembly installed in the GAC, if any.
            This will usually result in casting errors during the deserialization process when the app is linking to an older version of the
            assembly and when a newer version of the assembly is installed in the GAC.
            </para>
            <para>
            This method allows you to overcome this limitation by associating a "Simple" assembly name with a
            specific <see cref="T:System.Reflection.Assembly"/>.
            </para>
            </remarks>
            <example>
            <para>
            This example will bind the
            assembly that the app is linking to, to the "Simple" assembly name. Do this from the static
            constructor of the class that uses the <b>AppStateSerializer</b>
            class:
            <code lang="C#">
            static MyType()
            {
                    AppStateSerializer.SetBindingInfo("MyNameSpace.MyType", typeof(MyType).Assembly);
            }
            </code>
            <code lang="VB">
            'In type MyType:
            Shared  Sub New()
                AppStateSerializer.SetBindingInfo("MyNameSpace.MyType", Type.GetType(MyType).Assembly)
            End Sub
            </code>
            </para>
            </example>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SetTypeBindingInfo(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            Binds a type in the specified assembly to the same type in a different assembly. Typically useful
            in supporting backward compatibility.
            </summary>
            <param name="assemblyName">The assembly name string.</param>
            <param name="typeName">The type name string.</param>
            <param name="assembly">The corresponding <b>Assembly</b> to bind to.</param>
            <remarks>
            <para>
            This method is useful when you renamed your assembly and you want to map the old types to the
            new types in the new assembly. If you didn't rename the assembly, then just consider using the
            <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SetBindingInfo(System.String,System.Reflection.Assembly)"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SetTypeToTypeBindingInfo(System.String,System.String)">
            <summary>
            Binds the oldtypename type to the newtypename type. This method comes in handy when serialized types have 
            undergone a name change and backward compatibility is to be retained.
            </summary>
            <param name="oldtypename">The old name of the type.</param>
            <param name="newtypename">The new name of the type.</param>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.InitializeSerializer(Syncfusion.Runtime.Serialization.SerializeMode,System.Object,System.IO.IsolatedStorage.IsolatedStorageScope)">
            <summary>
            Sets the persistence mode and persistence path for the singleton instance of <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <remarks>The singleton's parameters can only be changed before it gets created. 
            It gets created in the first call to the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetSingleton"/> method.
            You can force the serializer to clear its serialization map by using the 
            <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.FlushSerializer"/> method.
            <para>
            This method will be removed in a future version. Please use the InitializeSingleton method instead.
            </para>
            </remarks>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath">An object that represents the persistence medium.</param>
            <param name="scope">The IsolatedStorageScope to be used.</param>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.InitializeSingleton(Syncfusion.Runtime.Serialization.SerializeMode,System.Object,System.IO.IsolatedStorage.IsolatedStorageScope)">
            <summary>
            Overloaded. Sets the persistence mode and persistence path for the singleton instance of <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <remarks>The singleton's parameters can only be changed before it gets created. 
            It gets created in the first call to <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetSingleton"/> method.
            You can force the serializer to clear its serialization map by using the 
            <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.FlushSerializer"/> method.
            </remarks>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath">An object that represents the persistence medium.</param>
            <param name="scope">The IsolatedStorageScope to be used. Referred only when the mode is IsolatedStorage.</param>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.InitializeSingleton(Syncfusion.Runtime.Serialization.SerializeMode,System.Object)">
            <summary>
            Sets the persistence mode and persistence path for the singleton instance of <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <remarks>
            <para>The singleton's parameters can only be changed before it gets created. 
            It gets created in the first call to the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.GetSingleton"/> method.
            You can force the serializer to clear its serialization map by using the 
            <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.FlushSerializer"/> method.</para>
            <para>
            If the mode is set to Isolated Storage, then the default isolated storage scope will be used.
            </para>
            <para>The persistpath argument should be based on the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationMode"/> property, as follows:</para>
            <list type="bullet">
            <item>SerializeMode.XMLFile<term>A string representing the file name (an .XML suffix will be added) in which to store.</term></item>
            <item>SerializeMode.BinaryFile<term>A string representing the file name (a .bin suffix will be added) in which to store.</term></item>
            <item>SerializeMode.WindowsRegistry<term>A <see cref="T:Microsoft.Win32.RegistryKey"/> under which to persist.</term></item>
            <item>SerializeMode.IsolatedStorage<term>A string representing the file name (a .bin suffix will be added) in which to store within the Isolated Storage.</term></item>
            <item>SerializeMode.ExternalStream<term>An instance of a <see cref="T:System.IO.Stream"/> derived class with Read, Write and Seek capability.</term></item>
            </list>
            <para/>
            </remarks>
            <example>
            <code lang="C#">
            public Form1()
            {
            	// To make the singleton use an XML file:
            	AppStateSerializer.InitializeSingleton(SerializeMode.XMLFile, "GlobalState");
            	
            	InitializeComponent();
            }
            </code>
            <code lang="VB">
            Public Sub New()
            {
            	' To make the singleton use an XML file:
            	AppStateSerializer.InitializeSingleton(SerializeMode.XMLFile, "GlobalState")
            	
            	InitializeComponent()
            }
            </code>
            </example>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</param>
            <param name="persistpath">An object that represents the persistence medium.</param>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.FlushSerializer">
            <summary>
            Clears the serialization map and deletes the persistent store.
            <para>
            If the persistent store is an external stream, then FlushSerializer just clears the 
            serialization map and returns without affecting the stream.
            </para>
            </summary>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object)">
            <summary>
            Overloaded. Writes the object to persistent storage under the specified tag.
            </summary>
            <param name="strname">A descriptor tag for the object.</param>
            <param name="obj">The object to be persisted. If NULL, an existing object is removed from the serialization map.</param>
            <remarks>
            <para>If the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not serialize.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object,System.Boolean)">
            <summary>
            Writes the object to persistent storage under the specified tag.
            </summary>
            <param name="strname">A descriptor tag for the object.</param>
            <param name="obj">The object to be persisted. Use NULL to remove an existing object from the serialization map.</param>
            <param name="infinalize">When this parameter is True, the object is serialized only at 
            the point when it is being written to the persistent storage medium. This usually 
            happens only when the serializer is being finalized.</param>
            <remarks>
            <para>If the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not serialize.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)">
            <summary>
            Deserializes the object from the persistent store.
            </summary>
            <param name="strname">The object descriptor.</param>
            <returns>The deserialized object.</returns>
            <remarks>
            <para>If the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not deserialize.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeIsolatedObject(Syncfusion.Runtime.Serialization.SerializeMode,System.Object,System.String,System.Object)">
            <summary>
            Overloaded. Serializes the object to the specified persistence medium.
            </summary>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value describing the persistence medium.</param>
            <param name="persistpath">Represents the persistence medium.</param>
            <param name="strname">A string descriptor for the object.</param>
            <param name="obj">The object to be serialized. Use NULL to delete the object's store.</param>
            <remarks>
            <para>If <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not serialize.</para>
            <para>
            This method has been replaced and will be removed form a future version.
            Instead, create a new instance of the AppStateSerializer class (with the mode and persist path)
            and then use the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object,System.Boolean)"/> and <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)"/>
            methods to persist information. Make sure to call <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.PersistNow"/> when done persisting.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeIsolatedObject(System.Object,System.IO.IsolatedStorage.IsolatedStorageScope,System.String,System.Object)">
            <summary>
            Serializes the object to Isolated Storage.
            </summary>
            <param name="persistpath">The name of the IsolatedStorageFile.</param>
            <param name="scope">The IsolatedStorageScope to be used.</param>
            <param name="strname">A string descriptor for the object.</param>
            <param name="obj">The object to be serialized. Use NULL to delete the object's store.</param>
            <remarks>
            <para>If <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not serialize.</para>
            <para>
            This method has been replaced and will be removed form a future version.
            Instead, create a new instance of the AppStateSerializer class (with the mode and persist path)
            and then use the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object,System.Boolean)"/> and <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)"/>
            methods to persist information. Make sure to call <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.PersistNow"/> when done persisting.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeIsolatedObject(Syncfusion.Runtime.Serialization.SerializeMode,System.Object,System.String)">
            <summary>
            Overloaded. Deserializes an object from the specified persistent store.
            </summary>
            <param name="mode">A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value describing the persistence medium.</param>
            <param name="persistpath">Represents the persistence medium.</param>
            <param name="strname">A string descriptor for the object.</param>
            <returns>The deserialized object.</returns>
            <remarks>
            <para>If <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not deserialize.</para>
            <para>
            This method has been replaced and will be removed form a future version.
            Instead, create a new instance of the AppStateSerializer class (with the mode and persist path)
            and then use the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object,System.Boolean)"/> and <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeIsolatedObject(System.Object,System.IO.IsolatedStorage.IsolatedStorageScope,System.String)">
            <summary>
            Deserializes an object from Isolated Storage.
            </summary>
            <param name="persistpath">The name of the IsolatedStorageFile.</param>
            <param name="scope">The IsolatedStorageScope to be used.</param>
            <param name="strname">A string descriptor for the object.</param>
            <returns>The deserialized object.</returns>
            <remarks>
            <para>If <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not deserialize.</para>
            <para>
            This method has been replaced and will be removed form a future version.
            Instead, create a new instance of the AppStateSerializer class (with the mode and persist path)
            and then use the <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializeObject(System.String,System.Object,System.Boolean)"/> and <see cref="M:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializeObject(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Runtime.Serialization.AppStateSerializer.PersistNow">
            <summary>
            Writes the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>'s contents to the persistent storage.
            </summary>
            <remarks>
            <para>If <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled"/> is False, then this method will not persist.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.ShouldThrowException">
            <summary>
            Gets or sets a bool value to indicate whether the exception should throw while reading the file from stream or not.
            </summary>
            <value>
            	<c>true</c> if it should throw the exception to handle it while reading the file stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationMode">
            <summary>
            Returns the persistence mode set for the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <value>A <see cref="T:Syncfusion.Runtime.Serialization.SerializeMode"/> value.</value>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationPath">
            <summary>
            Returns the persistence path set for the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <remarks>
            The persistence path is contextual and is interpreted based on the <see cref="P:Syncfusion.Runtime.Serialization.AppStateSerializer.SerializationMode"/> property value.
            </remarks>
            <value>An object of type varying based on the the SerializationMode.</value>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.IsoStorageScope">
            <summary>
            Returns the IsolatedStorageScope used by the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/>.
            </summary>
            <value>An <see cref="T:System.IO.IsolatedStorage.IsolatedStorageScope"/> value.</value>
            <remarks>
            This property is used only if the mode is set to SerializeMode.IsolatedStorage.
            </remarks>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.Enabled">
            <summary>
            Indicates whether serialization and deserialization is enabled.
            </summary>
            <value>True to enable serialization; false otherwise. This property is set to True by default.</value>
            <remarks>
            <para>This property allows you to temporarily enable / disable serialization.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Runtime.Serialization.AppStateSerializer.DeserializedInfoApplicationVersion">
            <summary>
            Returns the version of the application (got through the Application.ProductVersion property)
            whose state has now been deserialized.
            </summary>
            <value>The version as string if available. String.Empty otherwise.</value>
            <remarks>This gives you some information about the state of the deserialized information -
            as to which version of the application it belonged to.</remarks>
        </member>
        <member name="E:Syncfusion.Runtime.Serialization.AppStateSerializer.BeforePersist">
            <summary>
            Occurs just before the contents of the <see cref="T:Syncfusion.Runtime.Serialization.AppStateSerializer"/> are persisted. 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ProvidePersistenceIDEventArgs">
            <summary>
            Provides event data for the various ProvidePersistenceID events.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ProvidePersistenceIDEventArgs.PersistenceID">
            <summary>
            Gets / sets a unique ID.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ProvidePersistenceIDEventHandler">
            <summary>
            Represents a method that lets you specify a unique ID usually distinguishing different
            instances of a control type.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ButtonLook">
            <summary>
            Specifies the look of the arrow buttons should be drawn.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonLook.Normal">
            <summary>
            Draw normal buttons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ButtonLook.Flat">
            <summary>
            Draw flat buttons.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ICreateControl">
            <summary>
            Used by the <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to allow its content to create a control if it implements this interface.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ICreateControl.CreateControl">
            <summary>
            Creates a new <see cref="T:System.Windows.Forms.Control"/>.
            </summary>
            <returns>A new <see cref="T:System.Windows.Forms.Control"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ICreateNewWindow">
            <summary>
            Provides a method to create a copy of an existing splitter pane or window.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ICreateNewWindow.CreateNewControl(System.Windows.Forms.Control,System.Int32,System.Int32)">
            <summary>
            Creates a copy of an existing splitter pane or window.
            </summary>
            <param name="row">The row in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="column">The column in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="parent">A reference to the parent control, e.g a splitter frame.</param>
            <returns>A new instance of a control.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DynamicSplitBars">
            <summary>
            Defines split behavior for a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DynamicSplitBars.None">
            <summary>
            No dynamic splitter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DynamicSplitBars.SplitRows">
            <summary>
            Split rows vertically.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DynamicSplitBars.SplitColumns">
            <summary>
            Split columns horizontally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DynamicSplitBars.Both">
            <summary>
            Allow both splitting the view vertically and horizontally.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalButtonState">
            <summary>
            Specifies the current state of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Normal">
            <summary>
            Button is in normal state.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Disabled">
            <summary>
            Button is disabled.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Hovered">
            <summary>
            Mouse is hovering over button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Pushed">
            <summary>
            Button is pushed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Checked">
            <summary>
            Button is checked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.DragTarget">
            <summary>
            Button is considered a drop target of a drag-and-drop operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalButtonState.Options">
            <summary>
            A mask for the drawing state of the button without behavioral options (without Checked, DropTarget).
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SpinButtonType">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SpinButtonType.None">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SpinButtonType.Up">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SpinButtonType.Down">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalButtonBar">
            <summary>
            	 Helper	class for <see cref="T:Syncfusion.Windows.Forms.ButtonBar"/>. Manages <see cref="T:Syncfusion.Windows.Forms.InternalButton"/>	items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes	an <see cref="T:Syncfusion.Windows.Forms.InternalButtonBar"/> and attaches	it to a	control.
            </summary>
            <param name="parent">The parent	control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnClickedButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Called when	a button is	clicked.
            </summary>
            <param name="button">The <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> that was clicked.</param>
            <remarks>
            Called by OnMouseDownEvent.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.Paint(System.Drawing.Graphics)">
            <summary>
            Called from	parent control to draw this	bar.
            </summary>
            <param name="g">A Graphics object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.HitTest(System.Int32,System.Int32)">
            <summary>
            Checks if mouse	is over	a button and returns the zero-based	button index or	-1.
            </summary>
            <param name="x">X-coordinate of	mouse pointer.</param>
            <param name="y">Y-coordinate of	mouse pointer.</param>
            <returns>Zero-based	button index; -1 if not over a button.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.InitToolTips">
            <summary>
            Initializes	ToolTips boundaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.ResetToolTips">
            <summary>
            Reinitializes and hides	ToolTips.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.RecalcLayout(System.Boolean)">
            <summary>
            Recalculates boundaries	of child buttons.
            </summary>
            <param name="initToolTip">True if ToolTips should be initialized too.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.CancelMode">
            <summary>
            Cancels current action.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.InvalidateIfDirty">
            <summary>
            Repaints only if marked dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnCancelModeEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnMouseDownEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnMouseUpEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnMouseMoveEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.OnMouseLeaveEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.ResetHovered">
            <summary>
            Resets hovered state for all buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalButtonBar.ResetPushed">
            <summary>
            Resets pushed state	for	all	buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Buttons">
            <summary>
            Gets / sets the	button array.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Capture">
            <summary>
             Indicates whether a button is currently pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Bounds">
            <summary>
            Gets / sets the	boundaries of this bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.ButtonSize">
            <summary>
            Gets / sets the	default	size for buttons in	this bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.FlatLook">
            <summary>
            Indicates whether it is flat look	for	buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Dirty">
            <summary>
            Indicates whether any button is	dirty or sets all buttons dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Enabled">
            <summary>
            Indicates whether any button is	enabled	or sets	all	buttons	enabled	/ disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Hovered">
            <summary>
            Indicates whether any button is	in hovered state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.Pushed">
            <summary>
            Indicates whether any button is	in pushed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.RepeatClickDelay">
            <summary>
            Gets / sets the	delay until	the	button starts firing click events
            when the user holds	down the mouse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalButtonBar.MinRepeatClickDelay">
            <summary>
            Gets / sets the	minimum	delay between clicks when scrolling	is accelerated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSpacer.ShowAddNewButton">
            <summary>
            Gets/Sets whether AddNewButton needs to drawn in TabBar
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalSplitterKind">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterKind.HorizontalBar">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterKind.VerticalBar">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalSplitterState">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterState.Normal">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterState.Disabled">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterState.Hovered">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitterState.Pushed">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalSplitter">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitter.m_colorScheme">
            <summary>
            Specifies office 2007 color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitter.m_style">
            <summary>
            Style of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalSplitter.m_office2007ColorTable">
            <summary>
            Color table for Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.#ctor(System.Windows.Forms.Control,Syncfusion.Windows.Forms.InternalSplitterKind)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.WireTabPage(System.Windows.Forms.Control)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.UnwireTabPage(System.Windows.Forms.Control)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.Finalize">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.Dispose">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.Dispose(System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.ResetToolTip">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.InitToolTip(System.Drawing.Rectangle)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.GetWinFormButtonState(System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnStyleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.Paint(System.Drawing.Graphics,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OffsetLeft(System.Drawing.Rectangle@,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OffsetTop(System.Drawing.Rectangle@,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.Refresh">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.HitTest(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.CancelMode">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnCancelModeEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnMouseDownEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnMouseUpEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnMouseMoveEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnMouseLeaveEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalSplitter.OnMouseDoubleClick(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Style">
            <summary>
            Gets or sets the visual style of the tabBarSplitterControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Office2007ColorScheme">
            <summary>
            Gets or sets office 2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.ToolTip">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Bounds">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Container">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Kind">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Dirty">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Enabled">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Hovered">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalSplitter.Pushed">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISpreadsheetTabBarPageNotifier">
            <summary>
            Interface for Spreadsheet Tabpage
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISpreadsheetTabBarPageNotifier.IsSpreadsheetControl">
            <summary>
            Gets the bool value
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterPaneEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneCreated"/> or the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneClosing"/> events.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterPaneEventArgs">
            <summary>
            Provides event data for the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneCreated"/>
            or the <see cref="E:Syncfusion.Windows.Forms.SplitterControl.PaneClosing"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterPaneEventArgs.Control">
            <summary>
            Returns the control inside the specified pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterPaneEventArgs.Row">
            <summary>
            Returns the zero-based row number of the pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterPaneEventArgs.Column">
            <summary>
            Returns the zero-based column number of the pane.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterPaneEventArgs.MainControl">
            <summary>
            Returns a reference to the control at the top-left pane.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISplitterPaneFactory">
            <summary>
            Defines an interface that provides methods for creating and hiding controls for
            a splitter pane inside a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISplitterPaneFactory.CreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Creates a new control for the specified splitter pane.
            </summary>
            <param name="parent">A parent control. Can be a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="row">The row in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="column">The column in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="mainControl">The control in the first splitter pane.</param>
            <returns>A new instance of a control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISplitterPaneFactory.DisposeControl(System.Int32,System.Int32,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Hides / disposes the control for the specified splitter pane.
            </summary>
            <param name="parent">A parent control. Can be a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="row">The row in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="column">The column in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="control">The control in the splitter pane that should be hidden.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterPaneFactory">
            <summary>
            This is the default implementation of the <see cref="T:Syncfusion.Windows.Forms.ISplitterPaneFactory"/> and manages
            creating and hiding of controls for
            a splitter pane inside a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.
            </summary>
            <remarks>
            You can get or replace this object with the <see cref="P:Syncfusion.Windows.Forms.SplitterControl.SplitterPaneFactory"/> property
            of a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/> control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterPaneFactory.CreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Creates a new control for the specified splitter pane.
            </summary>
            <param name="parent">A parent control. Can be a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="row">The row in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="column">The column in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="mainControl">The control in the first splitter pane.</param>
            <returns>A new instance of a control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SplitterPaneFactory.DisposeControl(System.Int32,System.Int32,System.Windows.Forms.Control,System.Windows.Forms.Control)">
            <summary>
            Hides / disposes the control for the specified splitter pane.
            </summary>
            <param name="parent">A parent control. Can be a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="row">The row in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="column">The column in a <see cref="T:Syncfusion.Windows.Forms.SplitterControl"/>.</param>
            <param name="control">The control in the splitter pane that should be hidden.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Appearance">
            <summary>
            Specifies the style Control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Appearance.Default">
             <summary>
            Specifies the Default style of the control
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Appearance.Metro">
            <summary>
            Specifies the Metro style of the Control
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SplitterLayout">
            <summary>
              <see cref="T:Syncfusion.Windows.Forms.SplitterLayout"/> holds information about the current vertical and horizontal split positions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterLayout.HSplitPos">
            <summary>
            Gets / sets the horizontal splitter position in pixels.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SplitterLayout.VSplitPos">
            <summary>
            Gets / sets the vertical splitter position in pixels.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for nested expandable objects of the GridStyleInfo and TreeStyleInfo classes.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoSubObjectIdentity">
            <summary>
            Provides style identity information for subobjects.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoIdentityBase">
            <summary>
            This is an abstract base class that provides identity information
            for <see cref="T:Syncfusion.Styles.StyleInfoBase"/>  objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds a style that has a specific property initialized.
            </summary>
            <param name="thisStyleInfo"></param>
            <param name="sipSrc">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyleNotEmptyExpandable(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Loops through all base styles until it finds an expandable <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>
            that has one or more properties initialized.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that has the property initialized.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>An array of style objects that are base styles for the current style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs when a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> has changed.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that has changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoIdentityBase.OnStyleChanging(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Occurs before a property in the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is changing.
            </summary>
            <param name="style">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> instance that is changed.</param>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoIdentityBase.InnerIdentity">
            <summary>
            Gets / sets another identity object to be used for determining base styles.
            GetBaseStyle will call InnerIdentity.GetBaseStyle if this object is not NULL.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoIdentityBase.IsDisposable">
            <summary>
            Gets or sets a value indicating whether this object is disposable.
            </summary>
            <value>
            	<c>true</c> if this object is disposable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.#ctor(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Instantiates a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> for a 
            given owner and <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
            <param name="owner">The owner style of the sub object.</param>
            <param name="sip">The identifier of the subobject in the owner object.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Returns an array with base styles for the specified style object.
            </summary>
            <param name="thisStyleInfo">The style object.</param>
            <returns>
            An array of style objects that are base styles for the current style object.
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectIdentity.Owner">
            <summary>
            Returns the owner style of the subobject.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectIdentity.Sip">
            <summary>
            Returns the identifier of the subobject in the owner object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.#ctor(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Creates a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> object and associates it with a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> that owns this subobject.</param>
            <param name="sip">The <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> descriptor for this expandable subobject.</param>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.GetBaseStyles(Syncfusion.Styles.IStyleInfo)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CachedStyleInfoSubObjectIdentity.OnStyleChanged(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Search(System.Int32)">
            <summary>
            Looks for an entry that contains the given key, null is returned if the
            key is not found. 
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Sort">
            <summary> 
            A routine used by enumerators that need a sorted map
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.GetKeyValuePair(System.Int32,System.Int32@,System.Object@)">
            <summary>
            A routine used by enumerators to iterate through the map 
            </summary> 
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Iterate(System.Collections.ArrayList,Syncfusion.Styles.Internal.FrugalMapIterationCallback)">
            <summary>
            A routine used to iterate through all the entries in the map
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.Internal.FrugalMapBase.Promote(Syncfusion.Styles.Internal.FrugalMapBase)">
            <summary> 
            Promotes the key/value pairs in the current collection to the next larger 
            and more complex storage model.
            </summary> 
        </member>
        <member name="P:Syncfusion.Styles.Internal.FrugalMapBase.Count">
            <summary>
            Size of this data store 
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.Internal.SingleObjectMap">
            <summary>
            A simple class to handle a single key/value pair
            </summary> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.ThreeObjectMap">
            <summary>
            A simple class to handle a single object with 3 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array. 
            </summary> 
            <remarks>
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need 
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.Internal.SixObjectMap">
            <summary>
            A simple class to handle a single object with 6 key/value pairs.  The pairs are stored unsorted 
            and uses a linear search.  Perf analysis showed that this yielded better memory locality and
            perf than an object and an array.
            </summary>
            <remarks> 
            This map inserts at the last position.  Any time we add to the map we set _sorted to false. If you need
            to iterate through the map in sorted order you must call Sort before using GetKeyValuePair. 
            </remarks> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.ArrayObjectMap">
            <summary>
            A simple class to handle an array of between 6 and 12 key/value pairs.  It is unsorted 
            and uses a linear search.  Perf analysis showed that this was the optimal size for both 
            memory and perf.  The values may need to be adjusted as the CLR and Avalon evolve.
            </summary> 
        </member>
        <member name="T:Syncfusion.Styles.Internal.FrugalMapIterationCallback">
            <summary> 
                FrugalMapIterationCallback
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StaticDataFieldAttribute">
            <summary>
            Allows you to specify a custom name for the StaticData field
            in a <see cref="T:Syncfusion.Styles.StyleInfoStore"/>. 
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StaticDataFieldAttribute.Default">
            <summary>
            Specifies the default field name as "staticDataStore".
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Styles.StaticDataFieldAttribute"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StaticDataFieldAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="P:Syncfusion.Styles.StaticDataFieldAttribute.FieldName">
            <summary>
            Returns the field name in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> class 
            that identifies the static data store.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleChangedEventArgs.#ctor(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes the object with the property that has changed.
            </summary>
            <param name="sip">Identifies the property that has changed.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleChangedEventArgs.Sip">
            <summary>
            Returns the property that has changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleChangedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Styles.StyleChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Styles.CreateSubObjectHandler">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Styles.IStyleInfo">
            <summary>
            Defines an interface implemented both by <see cref="T:Syncfusion.Styles.StyleInfoBase"/> and <see cref="T:Syncfusion.Styles.StyleInfoStore"/>
            that allows you to check the state of the object, read and write specific property and execute
            style operations with the <see cref="M:Syncfusion.Styles.IStyleInfo.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/>. method.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates whether
            the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="style">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="style">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style object
            and keeps only those properties that are equal.
            </summary>
            <param name="style">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.ParseString(System.String)">
            <summary>
            Parses a given string and applies the results to affected properties in this style object.
            </summary>
            <param name="s">The string to be interpreted.</param>
            <remarks>
            <see cref="M:Syncfusion.Styles.IStyleInfo.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfo.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfo.Store">
            <summary>
            Returns the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.IStyleInfoSubObject">
            <summary>
            <see cref="T:Syncfusion.Styles.IStyleInfoSubObject"/> defines an interface for classes
            used as sub-objects in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> implements this interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.IStyleInfoSubObject.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object and registered with the new owner style object.</returns>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Sip">
            <summary>
            Returns a unique identifier for this sub object in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.IStyleInfoSubObject.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoBase">
            <summary>
            Provides a wrapper object for the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object with type
            safe access to all properties stored in the style object.
            <para/>
            Style objects provide a very user friendly way to modify data. It is very much like in Excel VBA.
            For example, to change the bold setting for a cell, you simply call grid[5,2].Font.Bold = True.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            It provides type safe accessor properties to modify data of the underlying
            data store and can hold temporary information about the style object that
            does not need to be persisted.
            <para/>
            In Essential Grid for the example, the GridStyleInfo class holds extensive identity
            information about a style object such as cached base styles, row and column index,
            a reference to the grid model, and more. This is all the information that can be discarded
            when the style is no longer used (because maybe the cell is not visible anymore). Only
            the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> part needs to be kept alive.
            <para/>
            Style objects only exist temporarily and will be created as a weak reference in a
            volatile data store. Once Garbage Collection kicks in smart style objects that are not
            referenced any more will be garbage collected. The volatile data cache can also be
            cleared manually.
            <para/>
            Because Style objects know their identity they can notify their owner of changes or
            load base style information when the user interacts with the style object. This allows
            you to make changes to a style object directly, such as Cell.Font.Bold = True;
            <para/>
            Style objects support property inheritance from parent styles, e.g. in a grid a cell
            can inherit properties from a parent row, column, table or a collection of names styles
            in a base styles map.
            <para/>
            Style objects support subobjects. Subobjects can support inheritance (e.g. a Font.Bold
            can be inherited). Immutable subobjects like BrushInfo don't support inheritance of
            individual properties.
            <para/>
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
            very memory efficient. Only properties that are actually used for a style
            object will be allocated for an object. The StyleObjectStore handles the storage of the object.
            For short integers, enums and Boolean values, the data will be stored in a BitVector32
            structure to save even more memory.
            <para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>
            and add type-safe (and intellisense)
            supported custom properties to the style class. If you write, for example, your own
            SpinButton class that needs individual properties, simply add a �CellSpinButtonInfo�
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase,
            your new object will support property inheritance from base styles.
            <para/>
            Style objects can be written into a string (see <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/>) and later be recreated
            using the <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> method. When writing the string you have the option to show
            default values (use the �d� format). Subobjects will be identified with a dot
            �.�, e.g. �Font.Bold�
            <para/>
            Style object support several operations how to combine information from two styles. Style operations
            include: apply changes, apply initialized properties, override initialized properties, exclude properties.
            See the <see cref="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/> method.
            <para/>
            Style objects integrate with <see cref="T:System.Windows.Forms.PropertyGrid"/>. The property grid
            displays values that belong to a style object in bold. Values that are inherited from parent
            styles will be displayed as default values. The user can select several cells in a grid and
            the <see cref="M:Syncfusion.Styles.StyleInfoBase.MergeStyle(Syncfusion.Styles.IStyleInfo)"/> operation will show common settings in the property grid as bold.
            <para/>
            Style objects support BeginUpdate, EndUpdate mechanism. This allows users to batch several operations
            on a style object into one transaction.
            <para/>
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
            <seealso cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>
            <seealso cref="T:Syncfusion.Styles.StyleInfoStore"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes the contents of this object into an XML stream.
            </summary>
            <param name="writer">Represents the XML stream.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            Not implemented and returns NULL.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the contents of this object from an XML stream.
            </summary>
            <param name="reader">Represents the XML stream.</param>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.identity">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase._store">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.expandableObjects">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetStore(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Sets the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ClearCache">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor">
            <summary>
            Overloaded. Initializes a new style object with no identity and data initialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.#ctor(Syncfusion.Styles.StyleInfoIdentityBase,Syncfusion.Styles.StyleInfoStore,System.Boolean)">
            <summary>
            Initalizes a new <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/> and <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.</param>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.</param>
            <param name="cacheValues">if set to <c>true</c> the style the resulting value of a property when inherited from a basestyle
            so that the property does not have to be evaluated multiple times when called repeatedly.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.Dispose">
            <summary>
            Releases all resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.Equals(System.Object)">
            <summary>
            Indicates whether two style objects are equal. Identity is left out with this comparison,
            only the data (<see cref="P:Syncfusion.Styles.StyleInfoBase.Store"/>) are compared.
            </summary>
            <param name="obj">The other style object to compare the current object with.</param>
            <returns>True if both objects have equal data; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.EqualsObject(System.Object,System.Object)">
            <summary>
            Compares two objects for equality. Works also with NULL references.
            </summary>
            <param name="obj1">The first object to compare.</param>
            <param name="obj2">The second object to compare.</param>
            <returns>True if both objects are equal.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetHashCode">
            <summary>
            Returns a hash code which is based on values inside the <see cref="P:Syncfusion.Styles.StyleInfoBase.Store"/>.
            </summary>
            <returns>An integer hash code.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ToString">
            <summary>
            Overloaded. Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/>.
            </summary>
            <returns>A string with formatted style information.</returns>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string, you have the option to show default values 
            (use the �d� format). <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String)">
            <summary>
            Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/>. You can specify
            "d" as format if you want to write out default values inherited from a base style.
            </summary>
            <param name="format">Use "d" if default values should be included; "G" and NULL are default.</param>
            <returns>A string with formatted style information.</returns>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string you have the option to show default values 
            (use the "d" format) or not. <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a formatted string for this style object. This string can
            later be consumed by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/>. You can specify
            "d" as format if you want to write out default values inherited from a base style.
            </summary>
            <param name="format">Use "d" if default values should be included; "G" and NULL are default.</param>
            <returns>A string with formatted style information.</returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> to be used
            for the <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> operation. Can be NULL.</param>
            <remarks>
            Style objects can be formatted into a string that can be consumed 
            by <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> to recreate style information.
            <para/>
            When writing the string you have the option to show default values 
            (use the "d" format) or not. <para/>
            Subobjects will be identified with a period ".", e.g. "Font.Bold".
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)">
            <summary>
            Parses a given string and applies it's results to affected properties in this style object.
            </summary>
            <param name="s">The string to be parsed.</param>
            <remarks>
            <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> consumes strings previously generated with
            a <see cref="M:Syncfusion.Styles.StyleInfoBase.ToString(System.String,System.IFormatProvider)"/> method call.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.BeginInit">
            <summary>
            Suspends raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events until <see cref="M:Syncfusion.Styles.StyleInfoBase.EndInit"/> is called 
            and will not change the <see cref="P:Syncfusion.Styles.StyleInfoBase.IsChanged"/> state of this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.EndInit">
            <summary>
            Resumes raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events and resets the <see cref="P:Syncfusion.Styles.StyleInfoBase.IsChanged"/> state of this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.BeginUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events until <see cref="M:Syncfusion.Styles.StyleInfoBase.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.EndUpdate">
            <summary>
            Suspends raising <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> events and if changes were
            made before the <see cref="M:Syncfusion.Styles.StyleInfoBase.EndUpdate"/> call, it will raise a changed
            notification immediately.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetDefaultStyle">
            <summary>
            Override this method to return a default style object for your derived class.
            </summary>
            <returns>A default style object.</returns>
            <remarks>
            You should cache the default style object in a static field.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.CreateSubObjectIdentity(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Override this method to create a product-specific identity object for a sub object.
            </summary>
            <returns>An identity object for a subobject of this style.</returns>
            <example>
            The following code is an example how Essential Grid creates GridStyleInfoSubObjectIdentity:
            <code lange="C#">
            public override StyleInfoSubObjectIdentity CreateSubObjectIdentity(StyleInfoProperty sip)
            {
            	return new GridStyleInfoSubObjectIdentity(this, sip);
            }
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetDefaultStyleInfoStore(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> in the list of base styles that 
            provides a specific property.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style store object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.IntGetDefaultStyleInfo(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoBase.inStyleChanged">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            was changed and raises a <see cref="E:Syncfusion.Styles.StyleInfoBase.Changed"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanging(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Notifies the associated identity object that a specific property
            will be changed and raises a <see cref="E:Syncfusion.Styles.StyleInfoBase.Changing"/> event.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and indicates
            whether the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.CopyFrom(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Copies properties from another style object. This method raises Changing and Changed 
            notifications if the other object differs. (ModifyStyle does not raise these events).
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.InheritStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether the specified property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.IsValueModified(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether the specified property has been modified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.ResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Marks the specified property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.NotifySubObjectChanged(Syncfusion.Styles.IStyleInfoSubObject)">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetDefaultValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Gets the default value from a base style.
            </summary>
            <param name="sip">The sip.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.GetShortValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for the specified property that has been initialized for the current object
            or locates it in a base style.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBase.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for the specified property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.Identity">
            <summary>
            Gets / sets the identity information for the current <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.Store">
            <summary>
            The <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object that holds all the data for this style object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.ExpandableObjects">
            <exclude/>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.CacheValues">
            <summary>
            Gets or sets a value indicating whether this instance should cache values for resolved base style properties.
            </summary>
            <value><c>true</c> if instance should cache values; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoBase.Changed">
            <summary>
            Occurs when a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.WeakReferenceChangedListeners">
            <summary>
            A list of listeners that will be referenced using a WeakReference. The
            listeners must implement the <see cref="T:Syncfusion.Styles.IStyleChanged"/> interface. When
            this style object <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> method is called it
            will then loop through all objects in this list and call each objects
            <see cref="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)"/> method.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoBase.Changing">
            <summary>
            Occurs before a property in the style object or in a sub object is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.Updating">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Styles.StyleInfoBase.BeginUpdate"/> was called for this object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.IsEmpty">
            <summary>
            Indicates whether the style is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoBase.IsChanged">
            <summary>
            Indicates whether any properties for this object have changed since it was applied last time.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.SerializePropertyAttribute">
            <summary>
            Specifies whether a property should be serialized.
            </summary>
            <seealso cref="T:Syncfusion.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should not be serialized. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/> class.</para>
            </summary>
            <param name="serializeProperty">
              <see langword="True"/> if a property should be serialized; <see langword="False"/> otherwise. The default is <see langword="True"/>.</param>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.SerializePropertyAttribute.IsSerializeProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/>; False otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Styles.SerializePropertyAttribute.SerializeProperty">
            <summary>
              <para>Indicates whether a property is shown in the ToString result.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.CloneablePropertyAttribute">
            <summary>
            Specifies whether a property should be cloned.
            </summary>
            <seealso cref="T:Syncfusion.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be cloned if the assigned object implements ICloneable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be cloned even if the assigned object implements ICloneable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.CloneablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> class.</para>
            </summary>
            <param name="cloneableProperty">
              <see langword="True"/> if a property should be should be cloned if the assigned object implements ICloneable; <see langword="False"/> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.CloneablePropertyAttribute.IsCloneableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/></param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Styles.CloneablePropertyAttribute.CloneableProperty">
            <summary>
              <para>Indicates whether a property should be cloned if the assigned object implements ICloneable.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.DisposeablePropertyAttribute">
            <summary>
            Specifies whether a property should be disposed.
            </summary>
            <seealso cref="T:Syncfusion.ComponentModel.SyncfusionEventArgs"/>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.Yes">
            <summary>
              <para>Specifies that a property should be disposed if the assigned object implements IDisposeable. 
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.No">
            <summary>
              <para>Specifies that a property should never be disposed even if the assigned object implements IDisposeable
              This <see langword="static" /> field is Read-only.</para>
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.DisposeablePropertyAttribute.Default">
            <summary>
            The default setting for this attribute.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.#ctor(System.Boolean)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> class.</para>
            </summary>
            <param name="disposeableProperty">
              <see langword="True"/> if a property should be should be disposed if the assigned object implements IDisposeable; <see langword="False"/> otherwise. The default is <see langword="True"/></param>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDefaultAttribute">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDisposeableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.DisposeablePropertyAttribute.IsDisposableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Indicates whether the <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> has been set for the property.
            </summary>
            <param name="info">A <see cref="T:System.Reflection.PropertyInfo"/>.</param>
            <returns>True if property has a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/>; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Styles.DisposeablePropertyAttribute.DisposeableProperty">
            <summary>
              <para>Indicates whether a property should be disposed if the assigned object implements IDisposeable.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.IStyleCloneable">
            <summary>
            Implement this interface if you want to assign this class to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property and you need to control whether the object should be cloned.
            </summary>
            <remarks>
            This interface is only considered if the <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> of
            <see cref="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable"/> of the <seea cref="T:Syncfusion.Styles.StyleInfoProperty"/> is True. 
            (This is the default.) 
            </remarks>
            <seealso cref="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable"/> 
            <seealso cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.Clone">
            <summary>
            Clones this object.
            </summary>
            <returns>A reference to a clone of this object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.Dispose">
            <summary>
            Disposes this object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.ShouldClone">
            <summary>
            Returns True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be cloned if you assign it to a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Styles.IStyleCloneable.ShouldDispose">
            <summary>
            Returns True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.
            </summary>
            <returns>True if this object should be disposed if it is reset in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object's
            property; false otherwise.</returns>
        </member>
        <member name="T:Syncfusion.Styles.IStyleChanged">
            <summary>
            Implements the <see cref="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)"/> method which is called from
            <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> of a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>
            if the object is in <see cref="P:Syncfusion.Styles.StyleInfoBase.WeakReferenceChangedListeners"/>
            collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.IStyleChanged.StyleChanged(Syncfusion.Styles.StyleChangedEventArgs)">
            <summary>
            Called from <see cref="M:Syncfusion.Styles.StyleInfoBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)"/> of a 
            <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object.
            </summary>
            <param name="e">The <see cref="!:Syncfusion.Windows.Styles.StyleChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoBaseConverter">
            <summary>
               <para>Provides a type converter to convert expandable objects to and from various
                  other representations.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
               <para>Indicates whether this object supports properties using the
                  specified context.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
               <para>Indicates whether this converter can
                  convert an object to the given destination type using the specified context.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
               <para>Converts the given value object to
                  the specified destination type using the specified context and arguments.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoBaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
               <para>Returns a collection of properties for
                  the type of array specified by the value parameter using the specified context and
                  attributes.</para>
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoForm">
            <summary>
            A form that displays a <see cref="T:Syncfusion.Styles.StyleInfoPropertyGrid"/> with Apply and OK buttons.
            </summary>
            <example>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoForm.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoForm"/> with an object whose properties should be displayed.
            </summary>
            <param name="customizer">The object for which properties should be displayed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoForm.Dispose(System.Boolean)">
            <summary>
            Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoForm.ApplyButton">
            <summary>
            Returns the apply button. You should set up a listener for a Click event.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoObjectStore">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoProperty">
            <summary>
            Provides a unique identifier for a property in a style object and stores
            information about the associated property.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> is allocated once on the global heap for each
            property in a style object. Type safe <see cref="T:Syncfusion.Styles.StyleInfoBase"/> wrappers make
            use of StyleInfoProperty to query, set or reset specific properties.
            <para/>
            Holds information about the property: PropertyType, Name, how to load and save
            its state in StyleInfoStore, attributes, etc.
            </remarks>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ComponentType">
            <summary>
            The type of the component this property is bound to.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyType">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.CreateObject">
            <summary>
            Represents a method that creates a Subobject of this type and associates it with a parent style object.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsExpandable">
            <summary>
            Indicates whether this is an object derived from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsSerializable">
            <summary>
            Indicates whether this object supports being serialized. The value can be set
            with a <see cref="T:Syncfusion.Styles.SerializePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsCloneable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the ICloneable or <see cref="T:Syncfusion.Styles.IStyleCloneable"/> interface. The value can be set
            with a <see cref="T:Syncfusion.Styles.CloneablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsDisposable">
            <summary>
            Indicates whether this object should call ICloneable.Clone when an assigned object implements
            the IDisposable or <see cref="T:Syncfusion.Styles.IStyleCloneable"/> interface. The value can be set
            also with a <see cref="T:Syncfusion.Styles.DisposeablePropertyAttribute"/> in your class implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsBrowsable">
            <summary>
            If property is marked with Browsable(true), custom attribute of this flag allows you
            to specify whether the property should appear in PropertyGrid. If property is marked
            with Browsable(false), then this setting will have no effect. Default is true.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsAnyObject">
            <summary>
            Indicates whether type information should be included when <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> is called. Use
            this if PropertyType is System.Obbject and you want to be able to parse written values.
            An example is GridStyleInfo.CellValue. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.IsConvertibleToBase64">
            <summary>
            Indicates whether type information should be converted to Base64 if associated
            Type converter supports converting value to and from Base64. An example is a bitmap assigned to GridStyleInfo.CellValue.
            If IsConvertibleToBase64String is true, then the grid will convert the bitmap to a Base64 string
            and write out the information in the GridStyleInfo.ToString() method and also in the WriteXml method. Default is false.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.GetPropertyInfo">
            <summary>
            Returns the <see cref="T:System.Reflection.PropertyInfo"/> of this property.
            </summary>
            <returns>Property info of this property.</returns>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.DataVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.DataVectorSection">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.MaxValue">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.ExpandableObjectStoreKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.PropertyKey">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.BitVectorMask">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.BitVectorIndex">
            <exclude/>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoProperty.Index">
            <exclude/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.Dispose">
            <summary>
            Method to dispose StyleInfoProperty object
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.#ctor(System.Type,System.String,System.Int16,System.Type)">
            <summary>
            Initializes a new StyleInfoProperty.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.FormatValue(System.Object)">
            <summary>
            Formats a given value that is of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="value">The value to be formatted.</param>
            <returns>A string with formatted text.</returns>
            <remarks><see cref="M:Syncfusion.Styles.StyleInfoStore.ToString"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> event lets you customize the formatting of this property but care
            should be taken that the formatted text can be consumed by the <see cref="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)">
            <summary>
            Overloaded. Parses a given value that is of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <returns>An object of the same type as the <see cref="F:Syncfusion.Styles.StyleInfoProperty.PropertyType"/> created from the parsed string information.</returns>
            <remarks>
            <see cref="M:Syncfusion.Styles.StyleInfoBase.ParseString(System.String)"/> calls this method.
            <para/>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Parses a given value and converts it to a requested <see cref="T:System.Type"/>.
            </summary>
            <param name="s">The string to be parsed.</param>
            <param name="resultType">The <see cref="T:System.Type"/> for the resulting object.</param>
            <param name="provider">A format provider.</param>
            <returns>An object of type "resultType" created from the parsed string information.</returns>
            <remarks>
            The <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event lets you customize the parsing of this property.
            </remarks>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.Parse">
            <summary>
            Handles parse requests for this property.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.Format">
            <summary>
            Handles formatting requests for this property.
            </summary>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.WriteXml">
            <summary>
            Handles requests to serialize this property to an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="E:Syncfusion.Styles.StyleInfoProperty.ReadXml">
            <summary>
            Handles requests to deserialize this property from an XML stream during an
            <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/> operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/>
            class.
            </summary>
            <remarks>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.SerializeXmlBehavior">
            <summary>
            Defines how to serialize property when style data is serialized to or from an XML stream.
            with <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.Default">
            <summary>
            Default. Serialize as string when type is simple. Using XmlSerializer for complex types
            or properties where the actual type is not known at compile-time (e.g. CellValue).
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.Skip">
            <summary>
            Skip this property. Do not serialize.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.SerializeAsString">
            <summary>
            Serialize this property as string using <see cref="M:Syncfusion.Styles.StyleInfoProperty.FormatValue(System.Object)"/> and
            <see cref="M:Syncfusion.Styles.StyleInfoProperty.ParseValue(System.String)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.SerializeXmlBehavior.SerializeWithXmlSerializer">
            <summary>
            Serialize this property using <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> and <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> events.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> is used to format and unformat values represented by
            a property in a <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The Format event occurs whenever a property
            is written out as string and the Parse event occurs whenever the value is read back in from a string.
            <para/>
            If you handle this event, store the resulting value into <see cref="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.Value"/> and
            set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.#ctor(System.Object,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> class.
            </summary>
            <param name="value">An Object that contains the value of the current property.</param>
            <param name="desiredType">The Type of the value.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.Value">
            <summary>
            Gets / sets the value of the <see cref="T:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyConvertEventArgs.DesiredType">
            <summary>
            Returns the data type of the desired value.
            </summary>
            <remarks>
            The DesiredType property enables you to check the type of the property that the value is being converted to.
            </remarks>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyConvertEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.Format"/> or <see cref="E:Syncfusion.Styles.StyleInfoProperty.Parse"/> event.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.WriteXml"/> event of <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.WriteXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs"/> is used to serialize a property of a
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The WriteXml event occurs whenever a property
            is serialized to an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)"/> operation
            of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Handling this event allows you to customize the way the object is serialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects' DataSource property). With such a scenario, you could write out a
            identifier and when the property is deserialized from an XML stream, you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.#ctor(System.Xml.XmlWriter,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> for the XML stream.</param>
            <param name="store">The style object that is being serialized.</param>
            <param name="sip">The property that is being serialized.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Writer">
            <summary>
            Returns the <see cref="T:System.Xml.XmlWriter"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Store">
            <summary>
            Returns the style object that is being serialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Sip">
            <summary>
            Returns the property that is being serialized. Call <see cref="M:Syncfusion.Styles.StyleInfoStore.GetValue(Syncfusion.Styles.StyleInfoProperty)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyWriteXmlEventArgs.Store"/> to get the value for this property.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Styles.StyleInfoProperty.ReadXml"/> event of <see cref="T:Syncfusion.Styles.StyleInfoProperty"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Styles.StyleInfoProperty.ReadXml"/> event.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs"/> is used to deserialize a property of a
            <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object. The ReadXml event occurs whenever a property
            is deserialized from an XML stream during an <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)"/>
            operation of the <see cref="T:System.Xml.Serialization.XmlSerializer"/> class.
            <para/>
            If you handle this event, you set <see cref="P:Syncfusion.ComponentModel.SyncfusionHandledEventArgs.Handled"/> to True.
            Call <see cref="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            Handling this event allows you to customize the way the object is deserialized or skip
            serialization.
            <para/>
            This event allows you to implement a different serialization mechanism if many style objects
            reference and share the same object, (e.g. if you assign a DataSet to
            several objects DataSource property). With such a scenario, you could write out an
            identifier and when the property is deserialized from an XML stream you could
            reconstruct a reference to a datasource object based on the identifier.
            </remarks>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.#ctor(System.Xml.XmlReader,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> for the XML stream.</param>
            <param name="store">The style object that is deserialized.</param>
            <param name="sip">The property that is being deserialized.</param>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Reader">
            <summary>
            Returns the <see cref="T:System.Xml.XmlReader"/> for the XML stream.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store">
            <summary>
            Returns the style object that is deserialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Sip">
            <summary>
            Returns the property that is being deserialized. Call <see cref="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)"/> of
            the <see cref="P:Syncfusion.Styles.StyleInfoPropertyReadXmlEventArgs.Store"/> to save the value for this property into the style object.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.CanResetValue(System.Object)">
            <exclude/>
            <summary>
               Indicates whether the component will allow its value to be reset.
            </summary>
            <param name="comp">The component to reset.</param>
            <returns>
               True if the component supports resetting of its value.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.GetValue(System.Object)">
            <exclude/>
            <summary>
               Retrieves the value of the property for the given component. This will
               throw an exception if the component does not have this property.
            </summary>
            <param name="comp">The component.</param>
            <returns>
               The value of the property. This can be cast
               to the property type.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ResetValue(System.Object)">
            <exclude/>
            <summary>
               Resets the value of this property on the specified component to the default value.
            </summary>
            <param name="comp">The component whose property is to be reset.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.SetValue(System.Object,System.Object)">
            <exclude/>
            <summary>
               Sets the value of this property on the specified component.
            </summary>
            <param name="comp">The component whose property is to be set.</param>
            <param name="value">The new value of the property.</param>
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <exclude/>
            <summary>
               <para>Indicates whether this property should be persisted. A property is
                  to be persisted if it is marked as persistable through a
                  PersistableAttribute and if the property contains something other
                  than the default value. Note, however, that this method will
                  return True for design-time properties as well, so callers
                  should also check to see if a property is design-time only before
                  persisting to run-time storage.</para>
            </summary>
            <param name='comp'>The component on which the property resides.</param>
            <returns>
               <para>True if the property should be persisted to either
                  design-time or run-time storage.</para>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.ComponentType">
            <exclude/>
            <summary>
               Retrieves the type of the component this PropertyDescriptor is bound to.
            </summary>
            <returns>
               The type of component.
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.DisplayName">
            <exclude/>
            <summary>
               Retrieves the display name of the property. This is the name that will
               be displayed in a property browser. This will be the same as the property
               name for most properties.
            </summary>
            <returns>
               A string containing the name to display in the property browser.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.IsReadOnly">
            <exclude/>
            <summary>
               Indicates whether the property can be written to.
            </summary>
            <returns>
               True if the property can be written to.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoPropertyPropertyDescriptor.PropertyType">
            <exclude/>
            <summary>
               Retrieves the data type of the property.
            </summary>
            <returns>
               A class representing the data type of the property.
            <seealso cref="T:System.ComponentModel.PropertyDescriptor"/>
            </returns>
        </member>
        <member name="T:Syncfusion.Styles.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Styles.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. Is useful to preview the
            result of a format in <see cref="T:System.Windows.Forms.PropertyGrid"/>. See <see cref="!:Syncfusion.Windows.Forms.Grid.GridStyleInfo.FormatPreview"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Styles.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Styles.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyGrid">
            <summary>
            StyleInfoPropertyGrid is a <see cref="T:System.Windows.Forms.PropertyGrid"/> that will reset a specific property when the user right-clicks on the item.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoPropertyGrid.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="T:Syncfusion.Styles.StaticData">
            <summary>
            Holds all StyleInfoProperties used by derived classes.
            This should go in a product specific StaticData.<para/>
            The concrete Style class could provide a static memory StaticData that belongs
            to the process and library.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.Dispose">
            <summary>
            Method to dispose static data object internally for disposing Chart styles.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StaticData"/> object with information about the parent style class.
            </summary>
            <param name="type"></param>
            <param name="styleInfoType">Will be used to access the PropertyInfo and its custom attributes for a property.</param>
            <param name="sortProperties"></param>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreatePropertyGridSortOrder(System.String[])">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.AllocateDataVectorSection(System.Int16,System.Int32@)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String)">
            <overload>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </overload>
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StaticData.CreateStyleInfoProperty(System.Type,System.String,System.Int16,System.Boolean,System.Type,Syncfusion.Styles.StyleInfoPropertyOptions)">
            <summary>
            Registers a <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> for the specified property.
            </summary>
            <param name="type">The type of the property.</param>
            <param name="name">The name of the property.</param>
            <param name="maxValue">The maximal possible Int16 value for the property.</param>
            <param name="makeBitValue">Indicates whether this StyleInfoProperty should be registered as a member of the BitArray and not to allocate
            an object reference.</param>
            <param name="propertyOptions">Specifies options for the property.</param>
            <param name="componentType">The component type that hosts the property.</param>
            <returns>The StyleInfoProperty with information about the property.</returns>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.StyleInfoType">
            <summary>
            Gets type of StyleInfo which is parent of store with current staticdata
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.PropertyGridSortOrder">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Styles.StaticData.IsEmpty">
            <summary>
            Indicates whether properties have been registered. Returns True if not registered; False otherwise.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoStore">
             <summary>
             Provides storage for the <see cref="T:Syncfusion.Styles.StyleInfoBase"/> object.
             </summary>
             <remarks>
             You cannot instantiate a <see cref="T:Syncfusion.Styles.StyleInfoStore"/> class directly. You have
             to derive a concrete class from this class that you can instantiate.<para/>
             In derived classes of <see cref="T:Syncfusion.Styles.StyleInfoBase"/>, you always need to
             implement a <see cref="T:Syncfusion.Styles.StyleInfoBase"/> / <see cref="T:Syncfusion.Styles.StyleInfoStore"/>
             pair. The <see cref="T:Syncfusion.Styles.StyleInfoStore"/> holds all the data that are specific
             to the style object and should be persisted.<para/>
             The <see cref="T:Syncfusion.Styles.StyleInfoBase"/> is a wrapper around the <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
             It provides type safe accessor properties to modify data of the underlying
             data store and can hold temporary information about the style object that
             does not need to be persisted.<para/>
            
             In Essential Grid for example, the GridStyleInfo class holds extensive identity
             information about a style object such as cached base styles, row and column index,
             a reference to the grid model and more. These are all the information that can be discarded
             when the style is no longer used (because maybe the cell is not visible anymore). Only
             the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> part needs to be kept alive.
             <para/>
             <see cref="T:Syncfusion.Styles.StyleInfoStore"/> allows you to register any number of properties but keeps the data
             very memory efficient. Only properties that are actually used for a style
             object will be allocated for an object. The StyleObjectStore handles the storage of objects.
             For short integers, enums and Boolean values the data will be stored in a BitVector32
             structure to save even more memory.
             <para/>
             See the overview for <see cref="T:Syncfusion.Styles.StyleInfoBase"/> for further discussion about style objects.
             </remarks>
             <seealso cref="T:Syncfusion.Styles.StyleInfoIdentityBase"/>
             <seealso cref="T:Syncfusion.Styles.StyleInfoBase"/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.FindStyleInfoProperty(System.String)">
            <summary>
            Searches the <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> with the given name.
            </summary>
            <param name="name">The name of the property to look for.</param>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that is associated with the specified name.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoStore"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.#ctor">
            <summary>
            Initializes an empty <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Clone">
            <summary>
            Creates an exact copy of the current object.
            </summary>
            <returns>A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> with same data as the current object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.CopyTo(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Copies all properties to another <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="target">The target to copy all properties to.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Equals(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetHashCode">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ResetChangedBits">
            <summary>
            Resets all "Changed" bits that mark certain properties as modified.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.Clear">
            <summary>
            Clears out all properties for this <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.HasValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.IsValueModified(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Indicates whether a specific property has been modified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValueModified(Syncfusion.Styles.StyleInfoProperty,System.Boolean)">
            <summary>
            Marks a specific property as modified or unmodified for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Marks a specific property as uninitialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sipSrc">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetShortValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Queries the <see cref="T:System.Int16"/> value for a specific property that has been initialized for the current object.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Object)">
            <summary>
            Overloaded. Initializes the value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.SetValue(Syncfusion.Styles.StyleInfoProperty,System.Int16)">
            <summary>
            Initializes the <see cref="T:System.Int16"/> value for a specific property.
            </summary>
            <param name="sip">A <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> that identifies the property to operate on.</param>
            <param name="value">The value to be saved for the property.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetCurrentStorageSIP(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Gets sip from current storage by sip from another store
            </summary>
            <param name="sip"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ConversionSIP(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Checks SIP belonging to current store. If current store doesn't contain SIP than returns SIP from current store with identical PropertyName. 
            </summary>
            <param name="sipSrc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._AssignProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._EqualsProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore._ModifyProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
            
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <param name="mt"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.IsSubset(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Compares all properties with another style object and determines
            if the current set of initialized properties is a subset of
            the other style object.
            </summary>
            <param name="istyle">The other style to compare with.</param>
            <returns>True if this style object is a subset of the other style object.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ModifyStyleKeepChanges(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with <see cref="T:Syncfusion.Styles.StyleModifyType"/>. If a property is modified
            its Changed flag is set so that the parent style object can identify modified properties in a subsequent Changed notification.
            </summary>
            <param name="istyle">The style object to be applied on the current object.</param>
            <param name="mt">The actual operation to be performed.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MergeStyle(Syncfusion.Styles.IStyleInfo)">
            <summary>
            Merges two styles. Resets all properties that differ among the two style objects
            and keeps only those properties that are equal.
            </summary>
            <param name="istyle">The other style object this style object should merge with.</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.InheritStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Applies changes to a style object as specified with
            </summary>
            <param name="istyle"> The other style object this style object should inherit with. </param>
            <param name="mt"> Style operation </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiModifyProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
            Modifieds property from different stores
            </summary>
            <param name="sip"></param>
            <param name="style"></param>
            <param name="mt"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiAssignProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Assigns property with sipInfo from style
            </summary>
            <param name="sip"> </param>
            <param name="style"></param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiResetValue(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            if sipSrc is different store with current store than find StyleInfoProperty in current store with identical PropertyName and reset property
            </summary>
            <param name="sipSrc"> sip from some  store</param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.MultiModifyExpandableProperty(Syncfusion.Styles.StyleInfoProperty,Syncfusion.Styles.StyleInfoStore,Syncfusion.Styles.StyleModifyType)">
            <summary>
             Modifies expanded property
            </summary>
            <param name="sip"> sip from another storage </param>
            <param name="style"> style source </param>
            <param name="mt"> operation </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ProcessWriteXml(System.Xml.XmlWriter,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ProcessReadXml(System.Xml.XmlReader,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Allows customization of serializing the StyleInfoProperty. Returns True if you override
            this method and do not want default serialization behavior for this property.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes all properties of this object to XML.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.RegisterXmlSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
            <summary>
            Registers the XmlSerializer for a specific type. This XmlSerializer will
            be used when a object of the specified type is read back in from an xml stream. 
            You can for example register an "ImageHolder" serializer for a custom ImageHolder type
            and have that serializer be used when GridStyleInfo.CellValue contains an ImageHolder object.
            </summary>
            <param name="type"></param>
            <param name="xmlSerializer"></param>
            <example>
            <code>
            XmlSerializer imageHolderSerializer = new XmlSerializer(typeof(object), new Type[] { typeof(ImageHolder) });
            GridStyleInfoStore.RegisterXmlSerializer(typeof(ImageHolder), imageHolderSerializer);
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.ReadXml(System.Xml.XmlReader)">
            <summary>
            Serializes all properties of this object from XML.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoStore.GetSchema">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.StyleInfoProperties">
            <summary>
            Returns a collection with <see cref="T:Syncfusion.Styles.StyleInfoProperty"/> objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.StaticDataStore">
            <summary>
            Static data must be declared static in derived classes (this avoids collisions
            when StyleInfoStore is used in the same project for different types of style
            classes).
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.PropertyGridSortOrder">
            <summary>
            The <see cref="T:Syncfusion.Styles.StyleInfoBaseConverter"/> class checks this property
            to find out about the sort order of the properties in this <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.IsEmpty">
            <summary>
            Indicates whether this is an empty object and no properties have been initialized.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoStore.IsChanged">
            <summary>
            Indicates whether any properties have been changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoPropertyOptions">
            <summary>
            Specifies the options for style properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Serializable">
            <summary>
            The property supports serialization.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Cloneable">
            <summary>
            The property should be cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.Disposable">
            <summary>
            The property should be disposed when the parent style object is disposed.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.CloneableAndDisposable">
            <summary>
            The property should be disposed when the parent style object is disposed
            and cloned when the parent style object is copied.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleInfoPropertyOptions.All">
            <summary>
            All of the above.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleInfoSubObjectBase">
            <summary>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> is an abstract base class for classes
            to be used as subobjects in a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            </summary>
            <remarks>
            <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> is derived from <see cref="T:Syncfusion.Styles.StyleInfoBase"/>
            and thus provides the same easy way to provide properties that can inherit values
            from base styles at run-time.<para/>
            The difference is that <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> supports this inheritance
            mechanism as a subobject from a <see cref="T:Syncfusion.Styles.StyleInfoBase"/>. A subobject needs to
            have knowledge about its parent object and be able to walk the base styles from the
            parent object.<para/>
            Examples for implementation of <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> are the font and border
            classes in Essential Grid.<para/>
            Programmers can derive their own style classes from <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> 
            and add type-safe (and Intelli-sense) 
            supported custom properties to the style class. If you write your own 
            SpinButton class that needs individual properties, simply add a "CellSpinButtonInfo" 
            class as subobject. If you derive CellSpinButtonInfo from StyleInfoSubObjectBase, 
            your new object will support property inheritance from base styles.
            <para/>
            See the overview for <see cref="T:Syncfusion.Styles.StyleInfoBase"/> for further discussion about style objects.
            </remarks>
            <example>The following example shows how you can use the GridFontInfo class in Essential Grid:
            <code lang="C#">
                    standard.Font.Facename = "Helvetica";
                    model[1, 3].Font.Bold = true;
                    string faceName = model[1, 3].Font.Facename; // any cell inherits standard style
                    Console.WriteLIne(faceName); // will output "Helvetica"
                    Console.WriteLIne(model[1, 3].Font.Bold); // will output "true"
                    Console.WriteLIne(model[1, 3].Font.HasFaceName); // will output "False"
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.#ctor(Syncfusion.Styles.StyleInfoSubObjectIdentity,Syncfusion.Styles.StyleInfoStore)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Styles.StyleInfoSubObjectBase"/> object and associates it with an existing <see cref="T:Syncfusion.Styles.StyleInfoStore"/>.
            </summary>
            <param name="identity">A <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> that holds the identity for this <see cref="T:Syncfusion.Styles.StyleInfoBase"/>.
            <param name="store">A <see cref="T:Syncfusion.Styles.StyleInfoStore"/> that holds data for this object.</param>
            All changes in this style object will be saved in the <see cref="T:Syncfusion.Styles.StyleInfoStore"/> object.
            </param>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.Dispose">
            <summary>
            Releases all the resources used by the component.
            </summary>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.OnStyleChanged(Syncfusion.Styles.StyleInfoProperty)">
            <override/>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.IntGetDefaultStyleInfo(Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Locates the base style that has the specified property and returns its instance.
            </summary>
            <param name="sip">Identifies the property to look for.</param>
            <returns>The style object that has the specified property.</returns>
        </member>
        <member name="M:Syncfusion.Styles.StyleInfoSubObjectBase.MakeCopy(Syncfusion.Styles.StyleInfoBase,Syncfusion.Styles.StyleInfoProperty)">
            <summary>
            Makes an exact copy of the current object.
            </summary>
            <param name="newOwner">The new owner style object for the copied object.</param>
            <param name="sip">The identifier for this object.</param>
            <returns>A copy of the current object registered with the new owner style object.</returns>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.SubObjectIdentity">
            <summary>
            Returns the <see cref="T:Syncfusion.Styles.StyleInfoSubObjectIdentity"/> with identity information about this object.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Sip">
            <summary>
            Returns a unique identifier for this subobject in the owner style object. 
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Data">
            <summary>
            Returns the data for this object. This is the StyleInfoStore from the constructor.
            </summary>
        </member>
        <member name="P:Syncfusion.Styles.StyleInfoSubObjectBase.Owner">
            <summary>
            Returns a reference to the owner style object.
            </summary>
        </member>
        <member name="T:Syncfusion.Styles.StyleModifyType">
            <summary>
            StyleModifyType defines style operations for <see cref="M:Syncfusion.Styles.StyleInfoBase.ModifyStyle(Syncfusion.Styles.IStyleInfo,Syncfusion.Styles.StyleModifyType)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Override">
            <summary>
            Copies all initialized properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.ApplyNew">
            <summary>
            Copies only properties that have not been initialized in the target style object.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Copy">
            <summary>
            Copies all properties and resets properties in the target style.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Exclude">
            <summary>
            Resets properties in the target style that have been marked as initialized in the source style.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Remove">
            <summary>
            Clears out all properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Styles.StyleModifyType.Changes">
            <summary>
            Copies and resets all properties in the target style when the property has been marked as changed in the source style.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.CustomDictionaryEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.CustomDictionaryEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Syncfusion.Text.CustomDictionaryEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.CustomDictionaryEditor.SpellChecker">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.CustomDictionaryEditor.SpellChecker"/> assiciated with this dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.CustomDictionaryMetroEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.CustomDictionaryMetroEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:Syncfusion.Text.CustomDictionaryMetroEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.CustomDictionaryMetroEditor.SpellChecker">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.CustomDictionaryMetroEditor.SpellChecker"/> assiciated with this dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.OptionsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.OptionsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Text.OptionsDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.OptionsDialog.SpellChecker">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.OptionsDialog.SpellChecker"/> assiciated with this dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.OptionsMetroDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.OptionsMetroDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Text.OptionsMetroDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.OptionsMetroDialog.SpellChecker">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.OptionsMetroDialog.SpellChecker"/> assiciated with this dialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerDialog.#ctor">
            <summary>
            Cannot create default instance of SpellCheckerDialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerDialog.LBox_Suggestions_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handles this event to change the text while double clicking the item in LBox_Suggestions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.Text.SpellCheckerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerMetroDialog.#ctor">
            <summary>
            Cannot create default instance of SpellCheckerDialog.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerMetroDialog.LBox_Suggestions_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Handles this event to change the text while double clicking the item in LBox_Suggestions.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:Syncfusion.Text.SpellCheckerMetroDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerMetroDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellCheckerMetroDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Syncfusion.Text.Soundex">
            <summary>
             Utility class for performing soundex algorithm.
             </summary>
        </member>
        <member name="M:Syncfusion.Text.Soundex.#ctor">
            <summary>
            Initializing the soundex object.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.Soundex.ToSoundexCode(System.String)">
            <summary>
            Return the soundex code for a given string.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.Soundex.Transform(System.String)">
            <summary>
            Transform the A-Z alphabetic characters to the appropriate soundex code.
            </summary>.
            <param name="aString">String</param>
            <returns>Soundex code for the given word.
            </returns>
        </member>
        <member name="M:Syncfusion.Text.Soundex.EditDistanceCompute(System.String,System.String)">
            <summary>
            Compute Levenshtein distance.
            </summary>
            <param name="s">String 1</param>
            <param name="t">String 2</param>
            <returns>Distance between the two strings.
            The larger the number, the bigger the difference.
            </returns>
        </member>
        <member name="M:Syncfusion.Text.Soundex.NextLetter(System.String)">
            <summary>
            Gets the next word from the alphabet list.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Text.SpellChecker.error_string" -->
        <member name="F:Syncfusion.Text.SpellChecker.dictionaryPath">
            <summary>
            Specifies the path of the dictionary. 
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.customDictionaryPath">
            <summary>
            Specifies the path of the custom dictionary. 
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.misspelledWords">
            <summary>
            ArrayList to hold the wrong words.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeInternetAddresses">
            <summary>
            Specifies whether to ignore internet address during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeEmailAddress">
            <summary>
            Specifies to ignore email address during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeHtmlTags">
            <summary>
            Specifies to ignore html tags during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeFileNames">
            <summary>
            Specifies to ignore file names during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeWordsInMixedCase">
            <summary>
            Specifies to ignore words in mixed case during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeWordsInUpperCase">
            <summary>
            Specifies to ignore words in upper case during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeWordsWithNumbers">
            <summary>
            Specifies to ignore words with number during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeRepeatedWords">
            <summary>
            Specifies to ignore words repeated words during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.maxSuggestions">
            <summary>
            Allows to customize the number of suggestions to be displayed in the suggestion list.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.excludeSpecialSymbols">
            <summary>
            Specifies to ignore special symbols during spell check.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.dictionaryStream">
            <summary>
            Stream that contains the dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ShouldSerializeChangeAllText">
            <summary>
            Serializing the ChangeAllText property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ShouldSerializeIsSpreadsheetLikeSpellChecker">
            <summary>
            Serializing the IsSpreadsheetLikeSpellChecker property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ShouldSerializeCloseReason">
            <summary>
            Serializing the CloseReason property
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ResetChangeAllText">
            <summary>
            Reset the ChangeAllText property
            </summary>
            <returns>ChangeAllText</returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ResetIsSpreadsheetLikeSpellChecker">
            <summary>
            Serializing the Reset property
            </summary>
            <returns>IsSpreadsheetLikeSpellChecker</returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.SpellCheck(System.String)">
            <summary>
            Performs the spell check operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.EnsureDictionaryList">
            <summary>
            Converts the dictionary entries to array list.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.EnsureCustomDictionayList(System.String)">
            <summary>
            Converts the dictionary entries to array list.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.GetDictList">
            <summary>
            Gets the items from the dictionary list.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.GetDictList(System.String)">
            <summary>
            Gets the items from the dictionary list.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.GetSoundXList">
            <summary>
            Gets the Soundex code.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.m_IsUppercase">
            <summary>
            Checks for the Upper case.
            </summary>
        </member>
        <member name="F:Syncfusion.Text.SpellChecker.m_IsCapitalize">
            <summary>
            Checks for the First letter captial.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.FindCasing(System.String)">
            <summary>
            Finds the casing for the given word.
            </summary>
            <param name="word"></param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.Suggest(System.String)">
            <summary>
            Generates the word list by deleting a single alphabet and interchanging the adjacent alphabets every time 
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.SplitWords(System.String)">
            <summary>
            Splits the retrieved sentence into words.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.IsInDictionary(System.String)">
            <summary>
            Checks whether the word is present in the dictionary.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.CheckForMisspelledWords(System.Collections.ArrayList)">
            <summary>
            Checks the dictinary, to identify the misspelled words.
            </summary>
            <param name="source_arlist">ArrayList</param>
            <returns>wrongWords
            </returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ValidateSuggestions(System.Collections.ArrayList,System.String)">
            <summary>
            Checks the dictionary to generate the suggestion list.
            </summary>
            <param name="source_arlist">ArrayList</param>
            <param name="wrongword">String</param>
            <returns>suggest_list
            </returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.PopulateCasing(System.Collections.ArrayList@)">
            <summary>
            Chnages the string in the suggestion list as per the casing in the Error word
            </summary>
            <param name="suggestionList"></param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.SuggestionSound(System.Collections.ArrayList,System.String)">
            <summary>
            Gets the suggestion list generated using the Soundex Alogrithm.
            </summary>
            <param name="suggest_list">ArrayList</param>
            <param name="wrongword">String</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.MaxSuggest(System.Collections.ArrayList,System.String)">
            <summary>
            To customize the number of suggestions to be displayed.
            </summary>
            <param name="suggest_list">ArrayList</param>
            <returns>errror_string
            </returns>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.RaiseError(System.Exception)">
            <summary>
            Raises the <see cref="E:Syncfusion.Text.SpellChecker.Error"/> events.
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.SpellCheck(Syncfusion.Text.ISpellEditor)">
            <summary>
            Checks the text of the <see cref="!:IEditor"/> for misspellings with <see cref="P:Syncfusion.Text.SpellChecker.SpellCheckerDialog"/>.
            </summary>
            <param name="editor">IEditor whose text is to be checked for misspellings.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ShowOptionsDialog(System.Windows.Forms.Form)">
            <summary>
            Shows the <see cref="P:Syncfusion.Text.SpellChecker.OptionsDialog"/>.
            </summary>
            <param name="owner">Form that owns this dialog.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.ShowCustomDictionaryEditor(System.Windows.Forms.Form)">
            <summary>
            Shows the <see cref="P:Syncfusion.Text.SpellChecker.CustomDictionaryEditor"/>.
            </summary>
            <param name="owner">Form that owns this dialog.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.DeleteAllFromDictionary(System.String)">
            <summary>
            Deletes the contents of the dictionary file by overwritting.
            </summary>
            <param name="custDictPath">File path whose content to be deleted.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.DeleteFromDictionary(System.String,System.String)">
            <summary>
            Deletes the specified word from the customdictionary.
            </summary>
            <param name="custDictPath">Specifies the path of the dictionay file.</param>
            <param name="wordToDelete">Specifies the word to be deleted.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.WriteToDictionary(System.String,System.String)">
            <summary>
            Writes the specified word to the dictionary.
            </summary>
            <param name="custDictPath">Specifies the path of the dictionay file.</param>
            <param name="word">Specifies the word to be added to the dictionary.</param>
        </member>
        <member name="M:Syncfusion.Text.SpellChecker.WriteToDictionary(System.String,System.Collections.ArrayList)">
            <summary>
            Overwrites the specified wordlist to the dictionary.
            </summary>
            <param name="custDictPath">Specifies the path of the dictionay file.</param>
            <param name="wordList">List of words to overrite the dictionary.</param>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.Editor">
            <summary>
            SpellCheckerDialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.CloseReason">
            <summary>
            Gets/Sets the status of the dialog window
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeRepeatedWords">
            <summary>
            Gets or Sets a value specifying whether to ignore repeated words during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeWordsInMixedCase">
            <summary>
            Gets or Sets a value specifying whether to ignore words in mixed case during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeWordsInUpperCase">
            <summary>
            Gets or Sets a value specifying whether to ignore words in upper case during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeWordsWithNumbers">
            <summary>
            Gets or Sets a value specifying whether to ignore words with number during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.MaxSuggestions">
            <summary>
            Gets or Sets a value specifying the number of suggestions to be displayed in the suggestion list.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeSpecialSymbols">
            <summary>
            Gets or Sets a value specifying whether to ignore special symbols during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeFileNames">
            <summary>
            Gets or Sets a value specifying whether to ignore file names during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeInternetAddresses">
            <summary>
            Gets or Sets a value specifying whether to ignore internet address during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.DictionaryPath">
            <summary>
            Gets or Sets a value specifying the path of the dictionary. 
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.CustomDictionaryPath">
            <summary>
            Gets or Sets a value specifying the path of the custom dictionary. 
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeEmailAddress">
            <summary>
            Gets or Sets a value specifying whether to ignore email address during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ExcludeHtmlTags">
            <summary>
            Gets or Sets a value specifying whether to ignore html tags during spell check.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.MisspelledWords">
            <summary>
            Holds the list of misspelled words.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.IsSpreadsheetLikeSpellChecker">
            <summary>
            Gets/Sets the value to indendify the type of the SpellChecker.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.ChangeAllText">
            <summary>
            Holds the string of the change all.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.DictionaryStream">
            <summary>
            Gets or sets the stream that contains the dictionary.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.IsUppercase">
            <summary>
            Checks for the Upper case.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellChecker.IsCapitalize">
            <summary>
            Checks for the First letter captial.
            </summary>
        </member>
        <member name="E:Syncfusion.Text.SpellChecker.Error">
            <summary>
            Raised when there is an exception in the <see cref="T:Syncfusion.Text.SpellChecker"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Text.ISpellEditor">
            <summary>
            Defines a <see cref="T:Syncfusion.Text.SpellChecker"/> interface that provides methods to interact with the editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.ISpellEditor.SelectText(System.Int32,System.Int32)">
            <summary>
            Selects the word specified by the index.
            </summary>
            <param name="startIndex">Zero based index of the word on the Text.</param>
            <param name="length">length of the word to be selected.</param>
        </member>
        <member name="P:Syncfusion.Text.ISpellEditor.Control">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.ISpellEditor.Control"/> whose <see cref="!:Control.Text"/> is to be spell checked.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.ISpellEditor.CurrentWord">
            <summary>
            Gets or sets the current misspelled word.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.ISpellEditor.Text">
            <summary>
            Gets or sets the Text to be spell checked by the <see cref="T:Syncfusion.Text.SpellChecker"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Text.SpellEditorWrapper">
            <summary>
            Implements <see cref="T:Syncfusion.Text.ISpellEditor"/> interface to interact with instance of <see cref="T:System.Windows.Forms.TextBoxBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Text.SpellEditorWrapper.#ctor(System.Windows.Forms.TextBoxBase)">
            <summary>
            Initializes a new instance of <see cref="T:Syncfusion.Text.SpellEditorWrapper"/> class that hosts the <see cref="T:System.Windows.Forms.TextBoxBase"/> control.
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Syncfusion.Text.SpellEditorWrapper.SelectText(System.Int32,System.Int32)">
            <summary>
            Selects the word specified by the index.
            </summary>
            <param name="startIndex">Zero based index of the word on the Text.</param>
            <param name="length">length of the word to be selected.</param>
        </member>
        <member name="P:Syncfusion.Text.SpellEditorWrapper.Control">
            <summary>
            Gets or sets the <see cref="P:Syncfusion.Text.SpellEditorWrapper.Control"/> whose <see cref="!:Control.Text"/> is to be spell checked.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellEditorWrapper.CurrentWord">
            <summary>
            Gets or sets the current misspelled word.
            </summary>
        </member>
        <member name="P:Syncfusion.Text.SpellEditorWrapper.Text">
            <summary>
            Gets or sets the Text to be spell checked by the <see cref="T:Syncfusion.Text.SpellChecker"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextBoxExtSubClass">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtSubClass.#ctor(Syncfusion.Windows.Forms.Tools.TextBoxExt)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExtSubClass"/> class.
            </summary>
            <param name="textBoxExt">The instance subclasses <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExt"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtSubClass.StopListening">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtSubClass.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window.
            </summary>
            <param name="m">A <see cref="T:System.Windows.Forms.Message"/> that is associated with the current Windows message.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.OverflowIndicatorState">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OverflowIndicatorState.None">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OverflowIndicatorState.Left">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OverflowIndicatorState.Right">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.OverflowIndicatorState.LeftAndRight">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.m_txtBox">
            <summary>
            Instance of TextBoxExt
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            Initializes the designer with the specified component.
            </summary>
            <param name="component">The <see cref="T:System.ComponentModel.IComponent"/> to associate the designer with. This component must always be an instance of, or derive from, <see cref="T:System.Windows.Forms.Control"/>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Design.ControlDesigner"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.GetControlGlyph(System.Windows.Forms.Design.Behavior.GlyphSelectionType)">
            <summary>
            Returns a <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph"/> representing the bounds of this control.
            </summary>
            <param name="selectionType">A <see cref="T:System.Windows.Forms.Design.Behavior.GlyphSelectionType"/> value that specifies the selection state.</param>
            <returns>
            A <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.OnTextAlignChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the TextAlignChanged event.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.OnTextChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the TextChanged event.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.OnForeColorChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the ForeColorChanged event.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.OnCharacterCasingChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the CharacterCasingChanged event.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.OnBackColorChanged(System.Object,System.EventArgs)">
            <summary>
             Raises the BackColorChanged event.
            </summary>
            <param name="sender">The TextBox control that sends the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.ActionLists">
            <summary>
            Gets the design-time action lists supported by the component associated with the designer.
            </summary>
            <value></value>
            <returns>
            The design-time action lists supported by the component associated with the designer.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.SelectionRules">
            <summary>
            Gets the selection rules that indicate the movement capabilities of a component.
            </summary>
            <value></value>
            <returns>
            A bitwise combination of <see cref="T:System.Windows.Forms.Design.SelectionRules"/> values.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.TextBoxExtGlyph">
            <summary>
            Glyph for <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExt"/> representation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.TextBoxExtGlyph.#ctor(System.Drawing.Rectangle,System.Windows.Forms.Cursor,System.ComponentModel.IComponent,System.Windows.Forms.Design.ControlDesigner)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.TextBoxExtGlyph"/> class.
            </summary>
            <param name="bounds">The bounds.</param>
            <param name="cursor">The cursor.</param>
            <param name="relatedComponent">The related component.</param>
            <param name="designer">The designer.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtDesigner.TextBoxExtGlyph.GetHitTest(System.Drawing.Point)">
            <summary>
            Indicates whether a mouse click at the specified point should be handled by the <see cref="T:System.Windows.Forms.Design.Behavior.ControlBodyGlyph"/>.
            </summary>
            <param name="p">A point to hit test.</param>
            <returns>
            A <see cref="T:System.Windows.Forms.Cursor"/> if the <see cref="T:System.Windows.Forms.Design.Behavior.Glyph"/> is associated with <paramref name="p"/>; otherwise, null.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.m_TextBoxExt">
            <summary>
            TextBoxExt
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.TextBoxExt)">
            <summary>
            Constructor
            </summary>
            <param name="textBoxExt">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.TextBoxExtAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.VisualStyle">
            <summary>
            Specifies the style with which some controls will appear and behave.
            </summary>
            <remarks>
            Every control that incorporates these styles will define the styles differently, 
            so take a look at the individual control for more information.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Default">
            <summary>
            Classic appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.OfficeXP">
            <summary>
            Office XP-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Office2003">
            <summary>
            Office 2003-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.VS2005">
            <summary>
            Visual Studio 2005-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Office2007">
            <summary>
            Office 2007-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Office2007Outlook">
            <summary>
            Office 2007 Outlook-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Office2010">
            <summary>
            Office 2010-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.VS2010">
            <summary>
            Visual Studio 2010-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.VisualStyle.Metro">
            <summary>
            Metro-like appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MenuColors">
            <summary>
            Provides static properties to access the colors used by different components in the XPMenus framework.
            </summary>
            <remarks>
            <para>
            The primary objective of this class is to let you specify custom colors for the different
            regions of the XPMenus components. When no colors are provided, this class returns the default
            colors usually synthesized from the System Colors. If you have to reset a property that you set before,
            simply set it to be Color.Empty; the next time the property is queried, it will return the default color.
            </para>
            <para>
            If you are a consumer of the colors in this class, then note that the colors returned
            by properties in this class need to be reinitialized when the system color changes.
            This class doesn't listen to the system color change event, instead it expects the consumer to notify it
            when the system color changes. To avoid redundant updates by multiple consumers, a unique notification pattern 
            is recommended.
            </para>
            <para>
            To notify system color changes, you should listen to the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged"/>
            event and call the <see cref="M:Syncfusion.Windows.Forms.MenuColors.SysColorsChanged(System.Boolean)"/> method. The SysColorsChanged method will let you specify whether to
            update the colors immediately or later with a call to <see cref="M:Syncfusion.Windows.Forms.MenuColors.UpdateMenuColors"/>. You should
            choose to update immediately if you will use the new colors to update certain properties in your control (Backcolor, for example).
            On the other hand, if you use the colors within and only within your Paint event, then update the colors later in
            the beginning of your Paint method with a call to <b>UpdateMenuColors</b>. Note that the 
            <b>UpdateMenuColors</b> method will actually update the colors only if necessary, letting you call it multiple times
            without performance hit.
            </para>
            <para>
            There is also a <see cref="E:Syncfusion.Windows.Forms.MenuColors.MenuColorsChanged"/> event that gets fired whenever colors
            are updated, either due to change in System Colors (notified using the above pattern) or when a custom color is set on any of the properties.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MenuColors.UpdateMenuColors">
            <summary>
            Initializes default colors based on SystemColors.
            </summary>
            <remarks>
            Calling this will not affect the custom colors set using the properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MenuColors.#cctor">
            <summary>
            Initializes the default colors.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MenuColors.SysColorsChanged(System.Boolean)">
            <summary>
            Call this method to indicate that the system colors have changed.
            </summary>
            <param name="updateColorsNow">Indicates whether to update colors immediately or later with a call to <see cref="M:Syncfusion.Windows.Forms.MenuColors.UpdateMenuColors"/>.</param>
            <remarks>
            Take a look at the MenuColors class reference for the recommended system color change notification pattern.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.MenuColors.MenuColorsChanged">
            <summary>
            Fired when the colors have changed either because of change in system colors or
            when a custom color is specified using one of the properties.
            </summary>
            <remarks>
            Take a look at the class reference for this class for information on how to notify
            this class regarding system color changes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.SelColor">
            <summary>
            Gets / sets the selected color for a menu item in a toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.SelTextColor">
            <summary>
            Gets / sets the selected text color for an item in a toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.MenuBGColor">
            <summary>
            Gets / sets the background color of a drop-down menu.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.MenuColors.MenuLeftStripColor"/>
            <value>The default value is derived from a System Color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.MenuLeftStripColor">
            <summary>
            Gets / sets the color for the left aligned strip in a drop-down menu where images and check boxes are shown.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.MenuColors.MenuBGColor"/>
            <value>The default value is derived from a System Color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.PressedSelColor">
            <summary>
            Gets / sets the selected-pressed color for a menu item in a toolbar.
            </summary>
            <value>The default value is derived from a System Color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.CheckedSelColor">
            <summary>
            Gets / sets the selected color for a checked menu item in a toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.SelBorderColor">
            <summary>
            Gets / sets the border color for a selected menu item in a toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.DropDownBorderColor">
            <summary>
            Gets / sets the border color for a drop-down menu.
            </summary>
            <seealso cref="P:Syncfusion.Windows.Forms.MenuColors.MenuBGColor"/>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.CommandBarBackColor">
            <summary>
            Gets / sets the background color for a toolbar / commandbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.MainMenuBackColor">
            <summary>
            Gets / sets the background color for the main-menu bar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.StatusBarBackColor">
            <summary>
            Gets / sets the background color for the Status Bar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.FloatingCommandBarCaptionColor">
            <summary>
            Gets / sets the Caption background color for a floating toolbar / commandbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.ExpandedMenuStripBackColor">
            <summary>
            Gets / sets the Backcolor for the expanded,  
            left-aligned menu strip region. This is the region you see when a partial menu
            gets expanded to show all the menu items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.InactiveItemAlphaBlendFactor">
            <summary>
            Gets / sets the alpha-blend factor to use to shade the inactive menu item's icons. (255 for no alpha-blending; 0 will completely hide the item)
            </summary>
            <value>A value in the range 1 to 255; -1 will reset to default value. Default is 175.</value>
            <remarks>
            255 will draw the icon without any alpha blending; 1 will almost hide the icons. This setting will be ignored when XPThemes is turned on.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.DisabledMenuTextColorBase">
            <summary>
            Gets / sets the text color base for the text in the disabled menu items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            When you specify a custom color, ControlPaint.LightLight will be applied on it before using that color.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.DisabledToolbarItemTextColorBase">
            <summary>
            Gets / sets the text color base for the text in the disabled toolbar items.
            </summary>
            <value>The default value is derived from a system color.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.MenuTextColor">
            <summary>
            Gets / sets the text color of the menu and toolbar items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color, the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MenuColors.MenuActiveTextColor">
            <summary>
            Gets / sets the active text color of the menu and toolbar items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VistaMenuColors.UpdateMenuColors">
            <summary>
            Initializes default colors based on SystemColors.
            </summary>
            <remarks>
            Calling this will not affect the custom colors set using the properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VistaMenuColors.#cctor">
            <summary>
            Initializes the default colors.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.VistaMenuColors.MenuColorsChanged">
            <summary>
            Fired when the colors have changed either because of change in system colors or
            when a custom color is specified using one of the properties.
            </summary>
            <remarks>
            Take a look at the class reference for this class for information on how to notify
            this class regarding system color changes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VS2005Colors.UpdateStyleColors">
            <summary>
            Initializes default colors based on SystemColors.
            </summary>
            <remarks>
            Calling this will not affect the custom colors set using the properties.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.VS2005Colors.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.UseThemedColors">
            <summary>
            Gets a value indicating whether themed colors are used.
            </summary>
            <value><c>true</c> if themed colors are used, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.RightAHPanelColor">
            <summary>
            gets/sets color of right auto hide panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.LeftAHPanelColor">
            <summary>
            Gets/sets color of left AH panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.PanelColor">
            <summary>
            Gets or sets the color of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.InnerBorderColor">
            <summary>
            Gets or sets the color of the inner border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.TabItemColor">
            <summary>
            Gets or sets the color of the tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DDBarItemBorderColor">
            <summary>
            Gets or sets the color for border of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DDBarItemLightColor">
            <summary>
            Gets or sets the light color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DDBarItemDarkColor">
            <summary>
            Gets or sets the dark color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuBorderColor">
            <summary>
            Gets or sets the color for border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuSeparatorColor">
            <summary>
            Gets or sets the color for separator of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuSelectedItemBorderColor">
            <summary>
            Gets or sets the color for border selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuSelectedItemColor">
            <summary>
            Gets or sets the color for selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuColumnStyleDarkColor">
            <summary>
            Gets or sets the dark color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuColumnStyleLightColor">
            <summary>
            Gets or sets the light color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuCheckMarkColor">
            <summary>
            Gets or sets the color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuSelectedCheckMarkColor">
            <summary>
            Gets or sets the color for selected check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.MenuBackground">
            <summary>
            Gets or sets the background color of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemHighlightBorderColor">
            <summary>
            Gets or sets border color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemPressBorderColor">
            <summary>
            Gets or sets border color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemCheckBorderColor">
            <summary>
            Gets or sets border color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemCheckLightColor">
            <summary>
            Gets or sets light color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemCheckDarkColor">
            <summary>
            Gets or sets dark color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemHighlightLightColor">
            <summary>
            Gets or sets light color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemHighlightDarkColor">
            <summary>
            Gets or sets dark color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemPressLightColor">
            <summary>
            Gets or sets light color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemPressDarkColor">
            <summary>
            Gets or sets dark color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.BarItemSeparatorColor">
            <summary>
            Gets or sets color of the separator BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DockBarLightColor">
            <summary>
            Gets or sets light color of the DockBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DockBarDarkColor">
            <summary>
            Gets or sets dark color of the DockBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.CommandBarDropDownLightColor">
            <summary>
            Gets or sets light color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.CommandBarDropDownDarkColor">
            <summary>
            Gets or sets dark color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.CommandBarDarkColor">
            <summary>
            Gets or sets dark color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.CommandBarLightColor">
            <summary>
            Gets or sets light color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.CommandBarBorderColor">
            <summary>
            Gets or sets color for border of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DropDownHighlightLightColor">
            <summary>
            Gets or sets light color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DropDownHighlightDarkColor">
            <summary>
            Gets or sets dark color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DropDownPressedLightColor">
            <summary>
            Gets or sets light color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.DropDownPressedDarkColor">
            <summary>
            Gets or sets dark color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatPressButtonColor">
            <summary>
            Gets or sets color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatPressButtonBorderColor">
            <summary>
            Gets or sets border color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatCommandBarLightColor">
            <summary>
            Gets or sets light color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatCommandBarDarkColor">
            <summary>
            Gets or sets dark color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatLightBorderColor">
            <summary>
            Gets or sets color for light border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatBackgroundColor">
            <summary>
            Gets or sets background color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatBorderColor">
            <summary>
            Gets or sets color for border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.VS2005Colors.FloatCaptionColor">
            <summary>
            Gets or sets color for caption text of the floating CommandBar.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.VS2005Colors.MenuColorsChanged">
            <summary>
            Fired when the colors have changed either because of change in system colors or
            when a custom color is specified using one of the properties.
            </summary>
            <remarks>
            Take a look at the class reference for this class for information on how to notify
            this class regarding system color changes.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003Colors.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2003Colors.SysColorsChanged(System.Boolean)">
            <summary>
            Call this method to indicate that the system colors have changed.
            </summary>
            <param name="updateColorsNow">Indicates whether to update colors immediately or later with a call to <see cref="M:Syncfusion.Windows.Forms.Office2003Colors.UpdateMenuColors"/>.</param>
            <remarks>
            Follow the same system color change notification pattern as explained in the <see cref="T:Syncfusion.Windows.Forms.MenuColors"/> class reference.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Office2003Colors.MenuColorsChanged">
            <summary>
            Fired when the colors have changed either because of change in system colors or
            when a custom color is specified using one of the properties.
            </summary>
            <remarks>
            Take a look at the class reference for this class for information on how to notify
            this class regarding system color changes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.SelColor">
            <summary>
            Gets / sets the selected color for a menu item in a drop-down menu.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.PressedSelColor">
            <summary>
            Gets / sets the pressed-selected color for a menu item in a toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.CheckedSelColor">
            <summary>
            Gets / sets the background color of a selected check box in the drop-down menu margin or a checked item in the toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.CheckedColor">
            <summary>
            Gets / sets the background color of a check box in the drop-down menu margin or a checked item in the toolbar.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.SelBorderColor">
            <summary>
            Gets / sets the border color of a menu item selection in the drop-down menus and toolbars.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.DropdownBorderColor">
            <summary>
            Gets / sets the border color of a drop-down menu.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuMarginColorLight">
            <summary>
            Gets / sets the left-gradient color of the drop-down menu margin.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuMarginColorDark">
            <summary>
            Gets / sets the right-gradient color of the drop-down menu margin.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuExpandedItemsMarginColorLeft">
            <summary>
            Gets / sets the left-gradient color of the drop-down menu margin of the expanded menu items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuExpandedItemsMarginColorRight">
            <summary>
            Gets / sets the right-gradient color of the drop-down menu margin of the expanded menu items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.DockBarColorLight">
            <summary>
            Gets or sets the right-gradient color of docked bars.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.DockBarColorDark">
            <summary>
            Gets or sets the left-gradient color of docked bars.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.ControlGripperColor">
            <summary>
            Gets or sets the color of the gripper.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.ControlBorderColorLight">
            <summary>
            Gets or sets the light-gradient border color of bars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.ControlBorderColorDark">
            <summary>
            Gets or sets the dark-gradient border color of bars.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuItemHotColorLight">
            <summary>
            Gets or sets the light-gradient color of menu item for hot-tracking.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuItemHotColorDark">
            <summary>
            Gets or sets the dark-gradient color of menu item for hot-tracking.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuItemPressedColorLight">
            <summary>
            Gets or sets the light-gradient color of quick customize button when it is pressed.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.MenuItemPressedColorDark">
            <summary>
            Gets or sets the dark-gradient color of quick customize button when it is pressed.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.FloatingCommandBarCaptionColor">
            <summary>
            Gets or sets the caption background color of floating bars.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.FloatingCommandBarItemPressedColor">
            <summary>
            Gets or sets the color for the floating command bar item which is pressed.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.CommandBarDropDownColorLight">
            <summary>
            Gets or sets the light-gradient color of quick customize dropdown button.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.CommandBarDropDownColorDark">
            <summary>
            Gets or sets the dark-gradient color of quick customize dropdown button.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarHighlightColorLight">
            <summary>
            Gets or sets the light-gradient highlight color of groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarHighlightColorDark">
            <summary>
            Gets or sets the dark-gradient highlight color of groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarSelectedColorLight">
            <summary>
            Gets or sets the light-gradient color of selected groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarSelectedColorDark">
            <summary>
            Gets or sets the dark-gradient color of selected groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarSelectedHighlightColorLight">
            <summary>
            Gets or sets the light-gradient highlight color of selected groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarSelectedHighlightColorDark">
            <summary>
            Gets or sets the dark-gradient highlight color of selected groupBarItem.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarHeaderColorLight">
            <summary>
            Gets or sets the light-gradient color of groupBar header.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarHeaderColorDark">
            <summary>
            Gets or sets the dark-gradient color of groupBar header.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarItemTextColor">
            <summary>
            Gets / sets the color of the text in a GroupBar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.GroupBarItemTextSelectedHighlightColor">
            <summary>
            Gets / sets the highlight color to be used for the selected text of the GroupBar item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2003Colors.SeparatorColor">
            <summary>
            Gets / sets the color of the separator line between the bar items.
            </summary>
            <value>The default value is derived from a system color.</value>
            <remarks>
            Setting this property to Color.Empty will actually reset the previous set color and 
            make this property return the default color the next time it is queried.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WindowsXPThemeColors.UpdateColors">
            <summary>
            Initializes colors based on Windows XP color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvTabPanelBackGroundColor">
            <summary>
            Used for drawing the tabControlAdv tabPanel background.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvActiveTopTabColor">
            <summary>
            Used for drawing the active tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvActiveBottomTabColor">
            <summary>
            Used for drawing the active tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvInactiveTopTabColor">
            <summary>
            Used for drawing the inactive tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvInactiveBottomTabColor">
            <summary>
            Used for drawing the inactive tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvHighLightedTopTabColor">
            <summary>
            Used for drawing the highlighted tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvHighLightedBottomTabColor">
            <summary>
            Used for drawing the highlighted tabPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvActiveBorderColor">
            <summary>
            Used for drawing the borders of tabPages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvInactiveBorderColor">
            <summary>
            Used for drawing the borders of tabPages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WindowsXPThemeColors.TabControlAdvLightBorderColor">
            <summary>
            Used for drawing the borders of tabPages.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007Colors">
            <summary>
            Provides colors for Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_blueColors">
            <summary>
            Colors for blue colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_silverColors">
            <summary>
            Colors for silver colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_blackColors">
            <summary>
            Colors for black colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_managedColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_defaultTheme">
            <summary>
            Default colorscheme for office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.s_managedBaseColor">
            <summary>
            Base color for managed scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.GetColorTable(Syncfusion.Windows.Forms.Office2007Theme)">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.ApplyManagedColors(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Applies colors for managed scheme.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.ApplyManagedScheme(System.Windows.Forms.Form,Syncfusion.Windows.Forms.Office2007Theme)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.InitializeColors">
            <summary>
            Initialize colors general for all colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.UpdateColors(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="basicColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.UpdateScheme(Syncfusion.Windows.Forms.Office2007Theme)">
            <summary>
            
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.Default">
            <summary>
            Gets or sets default colors for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DefaultTheme">
            <summary>
            Gets or sets default colorscheme for office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ManagedColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ManagedBaseColor">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerHighLightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownHighLightLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownHighLightDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownSelectedLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerDropDownSelectedDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxBorderPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxBorderNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectBorderNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectBorderSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectBorderPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectFillNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectFillSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerCheckBoxInnerRectFillPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.DataTimePickerHighLightedForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.NumericUpDownBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.NumericUpDownHighLightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.NumericUpDownSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.NumericUpDownArrowLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.NumericUpDownArrowDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.MonthCalendarHeaderStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.MonthCalendarHeaderEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.MonthCalendarForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarItemColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarItemColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarHeaderColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarHeaderColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarHighlightColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarHighlightColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedTopColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedTopColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedHighlightColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSelectedHighlightColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarItemTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarHeaderTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSplitterColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarSplitterColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.GroupBarClientAreaBackground" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskPaneInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskPaneBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskPageBackColor" -->
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuBorderColor">
            <summary>
            Gets or sets the color for border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuSeparatorColor">
            <summary>
            Gets or sets the color for separator of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuItemDarkColor">
            <summary>
            Gets or sets the dark color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuItemLightColor">
            <summary>
            Gets or sets the light color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuItemBorderColor">
            <summary>
            Gets or sets the border color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuColumnColor">
            <summary>
            Gets or sets the dark color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuColumnSeparatorColor">
            <summary>
            Gets or sets the separator color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuItemArrowLightColor">
            <summary>
            Gets or sets the light color for arrow of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuItemArrowDarkColor">
            <summary>
            Gets or sets the dark color for arrow of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuCheckedColor">
            <summary>
            Gets or sets the color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuCheckedFillColor">
            <summary>
            Gets or sets the background color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuCheckedBorderColor">
            <summary>
            Gets or sets the color for border check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuTextBoxBorderColor">
            <summary>
            Gets or sets the border color for TextBox item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuTextBoxBackColor">
            <summary>
            Gets or sets the background color for TextBox item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonPushed1Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonPushed2Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonPushed3Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonPushed4Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonHighlightLightColor">
            <summary>
            Gets or sets the light color for highlighted ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonHighlightDarkColor">
            <summary>
            Gets or sets the dark color for highlighted ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuComboButtonArrowColor">
            <summary>
            Gets or sets the color for arrow ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.MenuBackground">
            <summary>
            Gets or sets the background color of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownLightColor">
            <summary>
            Gets or sets light color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownDarkColor">
            <summary>
            Gets or sets dark color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.CommandBarDarkColor">
            <summary>
            Gets or sets dark color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.CommandBarLightColor">
            <summary>
            Gets or sets light color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.CommandBarBorderColor">
            <summary>
            Gets or sets color for border of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DockBarBackColor">
            <summary>
            Gets or sets background color of the DockBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownHighlightLightColor">
            <summary>
            Gets or sets light color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownHighlightDarkColor">
            <summary>
            Gets or sets dark color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownPressedLightColor">
            <summary>
            Gets or sets light color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownPressedDarkColor">
            <summary>
            Gets or sets dark color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatHighlightButtonColor">
            <summary>
            Gets or sets color for highlighted dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatHighlightButtonBorderColor">
            <summary>
            Gets or sets border color for highlighted dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatPressButtonColor">
            <summary>
            Gets or sets color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatPressButtonBorderColor">
            <summary>
            Gets or sets border color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatPressCloseButtonBorderColor">
            <summary>
            Gets or sets border color for pressed close button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatPressCloseButtonColor">
            <summary>
            Gets or sets color for pressed close button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatCommandBarLightColor">
            <summary>
            Gets or sets light color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatCommandBarDarkColor">
            <summary>
            Gets or sets dark color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatLightBorderColor">
            <summary>
            Gets or sets color for light border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatBackgroundColor">
            <summary>
            Gets or sets background color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatBorderColor">
            <summary>
            Gets or sets color for border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.FloatCaptionColor">
            <summary>
            Gets or sets color for caption text of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemSeparatorColor">
            <summary>
            Gets or sets color for separator line of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemPressBorderColor">
            <summary>
            Gets or sets color for pressed border of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemHighlightBorderColor">
            <summary>
            Gets or sets color for highlighted border of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemPressLightColor">
            <summary>
            Gets or sets light color for background of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemPressDarkColor">
            <summary>
            Gets or sets dark color for background of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownBarItemLightColor">
            <summary>
            Gets or sets light color for background of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownBarItemDarkColor">
            <summary>
            Gets or sets dark color for background of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.DropDownBarItemBorderColor">
            <summary>
            Gets or sets color for border of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemCheckLightColor">
            <summary>
            Gets or sets light color for background of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemCheckDarkColor">
            <summary>
            Gets or sets dark color for background of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemCheckBorderColor">
            <summary>
            Gets or sets color for border of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemCheckFlashColor">
            <summary>
            Gets or sets color for flash of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemPressFlashColor">
            <summary>
            Gets or sets color for flash of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.BarItemSelectFlashColor">
            <summary>
            Gets or sets color for flash of the selected BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.TextBarItemBackColor">
            <summary>
            Gets or sets back color for the TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.TextBarItemBorderColor">
            <summary>
            Gets or sets color for border of the TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.TextBarItemBorderHighlightColor">
            <summary>
            Gets or sets color for border of the highlight TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonLightColor">
            <summary>
            Gets or sets light color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonPressLightColor">
            <summary>
            Gets or sets light color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonPressDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonHighlightLightColor">
            <summary>
            Gets or sets light color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonHighlightDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonBorder">
            <summary>
            Gets or sets border color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonPressBorder">
            <summary>
            Gets or sets border color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ComboButtonHighlightBorder">
            <summary>
            Gets or sets border color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonPressedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonPressedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonSelectedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonSelectedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDisabledTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDisabledBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonPressedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonSelectedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDisabledBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.ButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownArrowStartColor">
            <summary>
            Gets the arrow start color for UpDownButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownArrowEndColor">
            <summary>
            Gets the arrow end color for UpDownButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBorderNormalColor">
            <summary>
            Gets the border color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundNormalColor">
            <summary>
            Gets the background color for UpDownButtons in normal state. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundNormalStartColor">
            <summary>
            Gets the background start color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundNormalEndColor">
            <summary>
            Gets the background end color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBorderHotColor">
            <summary>
            Gets the border color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownInnerBorderHotStartColor">
            <summary>
            Gets the inner border start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownInnerBorderHotEndColor">
            <summary>
            Gets the inner border end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBorderPressedColor">
            <summary>
            Gets the border color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownInnerBorderPressedStartColor">
            <summary>
            Gets the inner border start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownInnerBorderPressedEndColor">
            <summary>
            Gets the inner border end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundDisabledStartColor">
            <summary>
            Gets the background start color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundDisabledEndColor">
            <summary>
            Gets the background end color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBorderDisabledColor">
            <summary>
            Gets the border color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundHotTopStartColor">
            <summary>
            Gets the background top start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundHotTopEndColor">
            <summary>
            Gets the background top end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundHotBottomStartColor">
            <summary>
            Gets the background bottom start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundHotBottomEndColor">
            <summary>
            Gets the background bottom end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundPressedTopStartColor">
            <summary>
            Gets the background top start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundPressedTopEndColor">
            <summary>
            Gets the background top end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundPressedBottomStartColor">
            <summary>
            Gets the background bottom start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007Colors.UpDownBackgroundPressedBottomEndColor">
            <summary>
            Gets the background bottom end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvButtonUpperLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvLowerArrowLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvHotBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvNormalBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvPushedBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvPushedBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvPushedBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ComboBoxAdvPushedBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvNormalTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvSelectedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvPushedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvDisabledTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvIndeterminateRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvDisabledBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvDisabledBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.CheckBoxAdvDisabledInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvCheckMarkBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvCheckMarkNormalBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvCheckMarkSelectedBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.RadioButtonAdvCheckMarkPushedBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterTabStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterTabEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterTabBarStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterTabBarEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterButtonHoveredStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterButtonHoveredEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterButtonPushedStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterButtonPushedEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterSizeGripperColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterSizeGripperLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.TabBarSplitterSizeGripperDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxHeaderUpperLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxHeaderLowerLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxActiveHighlightedItemColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.XPTaskBarBoxInactiveHighlightedItemColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvItemBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvHighlightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvSelectedHighlightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ColorUIAdvGroupHeaderBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeHoverGradientStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeHoverGradientEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeSelectionGradientStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeSelectionGradientEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeHoverFillColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeSelectionFillColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007Colors.ShapeSelectedColor" -->
        <member name="T:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs">
            <summary>
            Arguments class for <see cref="E:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsApplied"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Initializes <see cref="T:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs"/> instance.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs.Form">
            <summary>
            Container form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007Colors.ManagedColorsAppliedEventArgs.BaseColor">
            <summary>
            Base color for the managed theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007BlueColors">
            <summary>
            Provides colors for blue colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007BlueColors.InitializeColors">
            <summary>
            Initialize colors for Blue colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007SilverColors">
            <summary>
            Provides colors for silver colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007SilverColors.InitializeColors">
            <summary>
            Initialize colors for Silver colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2007BlackColors">
            <summary>
            Provides colors for black colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2007BlackColors.InitializeColors">
            <summary>
            Initialize colors for Black colorscheme of the Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.UseThemedColors">
            <summary>
            Gets a value indicating whether themed colors are used.
            </summary>
            <value><c>true</c> if themed colors are used, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.RightAHPanelColor">
            <summary>
            gets/sets color of right auto hide panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.LeftAHPanelColor">
            <summary>
            Gets/sets color of left AH panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.PanelColor">
            <summary>
            Gets or sets the color of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.InnerBorderColor">
            <summary>
            Gets or sets the color of the inner border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.TabItemColor">
            <summary>
            Gets or sets the color of the tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DDBarItemBorderColor">
            <summary>
            Gets or sets the color for border of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DDBarItemLightColor">
            <summary>
            Gets or sets the light color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DDBarItemDarkColor">
            <summary>
            Gets or sets the dark color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuBorderColor">
            <summary>
            Gets or sets the color for border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuSeparatorColor">
            <summary>
            Gets or sets the color for separator of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuSelectedItemBorderColor">
            <summary>
            Gets or sets the color for border selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuSelectedItemColor">
            <summary>
            Gets or sets the color for selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuColumnStyleColor">
            <summary>
            Gets or sets the color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuCheckMarkColor">
            <summary>
            Gets or sets the color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuSelectedCheckMarkColor">
            <summary>
            Gets or sets the color for selected check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuCheckMarkBorderColor">
            <summary>
            Gets or sets the color for check mark border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuSelectedCheckMarkBorderColor">
            <summary>
            Gets or sets the color for selected check mark border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.MenuBackground">
            <summary>
            Gets or sets the background color of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemHighlightBorderColor">
            <summary>
            Gets or sets border color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemPressBorderColor">
            <summary>
            Gets or sets border color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemCheckBorderColor">
            <summary>
            Gets or sets border color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemCheckLightColor">
            <summary>
            Gets or sets light color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemCheckDarkColor">
            <summary>
            Gets or sets dark color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemHighlightLightColor">
            <summary>
            Gets or sets light color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemHighlightDarkColor">
            <summary>
            Gets or sets dark color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemPressLightColor">
            <summary>
            Gets or sets light color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.BarItemPressDarkColor">
            <summary>
            Gets or sets dark color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DropDownHighlightLightColor">
            <summary>
            Gets or sets light color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DropDownHighlightDarkColor">
            <summary>
            Gets or sets dark color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DropDownPressedLightColor">
            <summary>
            Gets or sets light color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.DropDownPressedDarkColor">
            <summary>
            Gets or sets dark color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.ComboButtonLightColor">
            <summary>
            Gets or sets light color for CombobBox button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2007OutlookColors.ComboButtonDarkColor">
            <summary>
            Gets or sets dark color for CombobBox button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.UseThemedColors">
            <summary>
            Gets a value indicating whether themed colors are used.
            </summary>
            <value><c>true</c> if themed colors are used, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.RightAHPanelColor">
            <summary>
            gets/sets color of right auto hide panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.LeftAHPanelColor">
            <summary>
            Gets/sets color of left AH panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.PanelColor">
            <summary>
            Gets or sets the color of the panel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BorderColor">
            <summary>
            Gets or sets the color of the border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.InnerBorderColor">
            <summary>
            Gets or sets the color of the inner border.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.TabItemColor">
            <summary>
            Gets or sets the color of the tab item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DDBarItemBorderColor">
            <summary>
            Gets or sets the color for border of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DDBarItemLightColor">
            <summary>
            Gets or sets the light color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DDBarItemDarkColor">
            <summary>
            Gets or sets the dark color of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuBorderColor">
            <summary>
            Gets or sets the color for border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuSeparatorColor">
            <summary>
            Gets or sets the color for separator of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuSelectedItemBorderColor">
            <summary>
            Gets or sets the color for border selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuSelectedItemColor">
            <summary>
            Gets or sets the color for selected item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuColumnStyleColor">
            <summary>
            Gets or sets the color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuCheckMarkColor">
            <summary>
            Gets or sets the color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuSelectedCheckMarkColor">
            <summary>
            Gets or sets the color for selected check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuCheckMarkBorderColor">
            <summary>
            Gets or sets the color for check mark border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuSelectedCheckMarkBorderColor">
            <summary>
            Gets or sets the color for selected check mark border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.MenuBackground">
            <summary>
            Gets or sets the background color of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemHighlightBorderColor">
            <summary>
            Gets or sets border color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemPressBorderColor">
            <summary>
            Gets or sets border color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemCheckBorderColor">
            <summary>
            Gets or sets border color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemCheckLightColor">
            <summary>
            Gets or sets light color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemCheckDarkColor">
            <summary>
            Gets or sets dark color of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemHighlightLightColor">
            <summary>
            Gets or sets light color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemHighlightDarkColor">
            <summary>
            Gets or sets dark color of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemPressLightColor">
            <summary>
            Gets or sets light color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.BarItemPressDarkColor">
            <summary>
            Gets or sets dark color of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DropDownHighlightLightColor">
            <summary>
            Gets or sets light color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DropDownHighlightDarkColor">
            <summary>
            Gets or sets dark color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DropDownPressedLightColor">
            <summary>
            Gets or sets light color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.DropDownPressedDarkColor">
            <summary>
            Gets or sets dark color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.ComboButtonLightColor">
            <summary>
            Gets or sets light color for CombobBox button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010OutlookColors.ComboButtonDarkColor">
            <summary>
            Gets or sets dark color for CombobBox button.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010BlueColors">
            <summary>
            Provides colors for blue colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010Colors">
            <summary>
            Provides colors for Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_blueColors">
            <summary>
            Colors for blue colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_silverColors">
            <summary>
            Colors for silver colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_blackColors">
            <summary>
            Colors for black colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_managedColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_defaultTheme">
            <summary>
            Default colorscheme for office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.s_managedBaseColor">
            <summary>
            Base color for managed scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.GetColorTable(Syncfusion.Windows.Forms.Office2010Theme)">
            <summary>
            Gets color table for Office2010 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.ApplyManagedColors(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Applies colors for managed scheme.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.ApplyManagedScheme(System.Windows.Forms.Form,Syncfusion.Windows.Forms.Office2010Theme)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.InitializeColors">
            <summary>
            Initialize colors general for all colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.UpdateColors(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="basicColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.UpdateScheme(Syncfusion.Windows.Forms.Office2010Theme)">
            <summary>
            
            </summary>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.Default">
            <summary>
            Gets or sets default colors for Office2010 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DefaultTheme">
            <summary>
            Gets or sets default colorscheme for office2010 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ManagedColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ManagedBaseColor">
            <summary>
            
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerHighLightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownHighLightLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownHighLightDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownSelectedLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerDropDownSelectedDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxBorderPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxBorderNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectBorderNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectBorderSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectBorderPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectFillNormalColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectFillSelectedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerCheckBoxInnerRectFillPushedColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.DataTimePickerHighLightedForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.NumericUpDownBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.NumericUpDownHighLightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.NumericUpDownSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.NumericUpDownArrowLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.NumericUpDownArrowDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.MonthCalendarHeaderStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.MonthCalendarHeaderEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.MonthCalendarBackgroundColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.MonthCalendarForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarItemColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarItemColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarHeaderColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarHeaderColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarHighlightColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarHighlightColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedTopColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedTopColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedHighlightColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSelectedHighlightColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarItemTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarHeaderTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSplitterColorDark" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarSplitterColorLight" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.GroupBarClientAreaBackground" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskPaneInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskPaneBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskPageBackColor" -->
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuBorderColor">
            <summary>
            Gets or sets the color for border of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuSeparatorColor">
            <summary>
            Gets or sets the color for separator of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuItemDarkColor">
            <summary>
            Gets or sets the dark color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuItemLightColor">
            <summary>
            Gets or sets the light color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuItemBorderColor">
            <summary>
            Gets or sets the border color for highlighted item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuColumnColor">
            <summary>
            Gets or sets the dark color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuColumnSeparatorColor">
            <summary>
            Gets or sets the separator color for column of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuItemArrowLightColor">
            <summary>
            Gets or sets the light color for arrow of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuItemArrowDarkColor">
            <summary>
            Gets or sets the dark color for arrow of the menu item.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuCheckedColor">
            <summary>
            Gets or sets the color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuCheckedFillColor">
            <summary>
            Gets or sets the background color for check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuCheckedBorderColor">
            <summary>
            Gets or sets the color for border check mark of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuTextBoxBorderColor">
            <summary>
            Gets or sets the border color for TextBox item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuTextBoxBackColor">
            <summary>
            Gets or sets the background color for TextBox item of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonPushed1Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonPushed2Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonPushed3Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonPushed4Color">
            <summary>
            Gets or sets the color for ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonHighlightLightColor">
            <summary>
            Gets or sets the light color for highlighted ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonHighlightDarkColor">
            <summary>
            Gets or sets the dark color for highlighted ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuComboButtonArrowColor">
            <summary>
            Gets or sets the color for arrow ComboButton of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.MenuBackground">
            <summary>
            Gets or sets the background color of the menu.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownLightColor">
            <summary>
            Gets or sets light color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownDarkColor">
            <summary>
            Gets or sets dark color for dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.CommandBarDarkColor">
            <summary>
            Gets or sets dark color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.CommandBarLightColor">
            <summary>
            Gets or sets light color of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.CommandBarBorderColor">
            <summary>
            Gets or sets color for border of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DockBarBackColor">
            <summary>
            Gets or sets background color of the DockBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownHighlightLightColor">
            <summary>
            Gets or sets light color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownHighlightDarkColor">
            <summary>
            Gets or sets dark color for highlight dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownPressedLightColor">
            <summary>
            Gets or sets light color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownPressedDarkColor">
            <summary>
            Gets or sets dark color for pressed dropdown button of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatHighlightButtonColor">
            <summary>
            Gets or sets color for highlighted dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatHighlightButtonBorderColor">
            <summary>
            Gets or sets border color for highlighted dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatPressButtonColor">
            <summary>
            Gets or sets color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatPressButtonBorderColor">
            <summary>
            Gets or sets border color for pressed dropdown button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatPressCloseButtonBorderColor">
            <summary>
            Gets or sets border color for pressed close button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatPressCloseButtonColor">
            <summary>
            Gets or sets color for pressed close button of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatCommandBarLightColor">
            <summary>
            Gets or sets light color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatCommandBarDarkColor">
            <summary>
            Gets or sets dark color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatLightBorderColor">
            <summary>
            Gets or sets color for light border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatBackgroundColor">
            <summary>
            Gets or sets background color of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatBorderColor">
            <summary>
            Gets or sets color for border of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.FloatCaptionColor">
            <summary>
            Gets or sets color for caption text of the floating CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemSeparatorColor">
            <summary>
            Gets or sets color for separator line of the CommandBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemPressBorderColor">
            <summary>
            Gets or sets color for pressed border of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemHighlightBorderColor">
            <summary>
            Gets or sets color for highlighted border of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemPressLightColor">
            <summary>
            Gets or sets light color for background of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemPressDarkColor">
            <summary>
            Gets or sets dark color for background of the BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownBarItemLightColor">
            <summary>
            Gets or sets light color for background of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownBarItemDarkColor">
            <summary>
            Gets or sets dark color for background of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.DropDownBarItemBorderColor">
            <summary>
            Gets or sets color for border of the DropDownBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemCheckLightColor">
            <summary>
            Gets or sets light color for background of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemCheckDarkColor">
            <summary>
            Gets or sets dark color for background of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemCheckBorderColor">
            <summary>
            Gets or sets color for border of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemCheckFlashColor">
            <summary>
            Gets or sets color for flash of the checked BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemPressFlashColor">
            <summary>
            Gets or sets color for flash of the pressed BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.BarItemSelectFlashColor">
            <summary>
            Gets or sets color for flash of the selected BarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.TextBarItemBackColor">
            <summary>
            Gets or sets back color for the TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.TextBarItemBorderColor">
            <summary>
            Gets or sets color for border of the TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.TextBarItemBorderHighlightColor">
            <summary>
            Gets or sets color for border of the highlight TextBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonLightColor">
            <summary>
            Gets or sets light color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonPressLightColor">
            <summary>
            Gets or sets light color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonPressDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonHighlightLightColor">
            <summary>
            Gets or sets light color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonHighlightDarkColor">
            <summary>
            Gets or sets dark color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonBorder">
            <summary>
            Gets or sets border color for ComboButton of the ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonPressBorder">
            <summary>
            Gets or sets border color for ComboButton of the pressed ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ComboButtonHighlightBorder">
            <summary>
            Gets or sets border color for ComboButton of the highlighted ComboBoxBarItem.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonPressedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonPressedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonSelectedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonSelectedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDisabledTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDisabledBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonPressedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonSelectedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDisabledBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.ButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownArrowStartColor">
            <summary>
            Gets the arrow start color for UpDownButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownArrowEndColor">
            <summary>
            Gets the arrow end color for UpDownButtons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBorderNormalColor">
            <summary>
            Gets the border color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundNormalColor">
            <summary>
            Gets the background color for UpDownButtons in normal state. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundNormalStartColor">
            <summary>
            Gets the background start color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundNormalEndColor">
            <summary>
            Gets the background end color for UpDownButtons in normal state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBorderHotColor">
            <summary>
            Gets the border color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownInnerBorderHotStartColor">
            <summary>
            Gets the inner border start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownInnerBorderHotEndColor">
            <summary>
            Gets the inner border end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBorderPressedColor">
            <summary>
            Gets the border color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownInnerBorderPressedStartColor">
            <summary>
            Gets the inner border start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownInnerBorderPressedEndColor">
            <summary>
            Gets the inner border end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundDisabledStartColor">
            <summary>
            Gets the background start color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundDisabledEndColor">
            <summary>
            Gets the background end color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBorderDisabledColor">
            <summary>
            Gets the border color for UpDownButtons in disabled state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundHotTopStartColor">
            <summary>
            Gets the background top start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundHotTopEndColor">
            <summary>
            Gets the background top end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundHotBottomStartColor">
            <summary>
            Gets the background bottom start color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundHotBottomEndColor">
            <summary>
            Gets the background bottom end color for UpDownButtons in hot state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundPressedTopStartColor">
            <summary>
            Gets the background top start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundPressedTopEndColor">
            <summary>
            Gets the background top end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundPressedBottomStartColor">
            <summary>
            Gets the background bottom start color for UpDownButtons in pressed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Office2010Colors.UpDownBackgroundPressedBottomEndColor">
            <summary>
            Gets the background bottom end color for UpDownButtons in pressed state.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvButtonUpperLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvLowerArrowLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvHotBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvNormalBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvPushedBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvPushedBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvPushedBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ComboBoxAdvPushedBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvNormalTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvSelectedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvPushedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvDisabledTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvIndeterminateRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvDisabledBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvDisabledBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.CheckBoxAdvDisabledInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvCheckMarkBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvCheckMarkNormalBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvCheckMarkSelectedBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.RadioButtonAdvCheckMarkPushedBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterTabStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterTabEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterTabBarStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterTabBarEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterButtonHoveredStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterButtonHoveredEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterButtonPushedStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterButtonPushedEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterSizeGripperColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterSizeGripperLightColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.TabBarSplitterSizeGripperDarkColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxHeaderUpperLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxHeaderLowerLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxActiveHighlightedItemColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.XPTaskBarBoxInactiveHighlightedItemColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvTextColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvItemBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvHighlightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvSelectedHighlightedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ColorUIAdvGroupHeaderBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeHoverGradientStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeHoverGradientEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeSelectionGradientStartColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeSelectionGradientEndColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeHoverFillColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeSelectionFillColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2010Colors.ShapeSelectedColor" -->
        <member name="T:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsAppliedEventArgs">
            <summary>
            Arguments class for <see cref="E:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsApplied"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsAppliedEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Initializes <see cref="T:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsAppliedEventArgs"/> instance.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsAppliedEventArgs.Form">
            <summary>
            Container form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2010Colors.ManagedColorsAppliedEventArgs.BaseColor">
            <summary>
            Base color for the managed theme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010BlueColors.InitializeColors">
            <summary>
            Initialize colors for Blue colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010SilverColors">
            <summary>
            Provides colors for silver colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010SilverColors.InitializeColors">
            <summary>
            Initialize colors for Silver colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Office2010BlackColors">
            <summary>
            Provides colors for black colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Office2010BlackColors.InitializeColors">
            <summary>
            Initialize colors for Black colorscheme of the Office2010 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_purpleColors">
            <summary>
            Colors for silver colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_tealColors">
            <summary>
            Colors for black colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_limeColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_brownColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_pinkColors">
            /// <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_orangeColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_blueColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_redColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_greenColors">
            <summary>
            Colors for blue colorscheme of the metro visual style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MetroColors.s_managedColors" -->
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.MetroColors.s_defaultMetroTheme" -->
        <member name="F:Syncfusion.Windows.Forms.MetroColors.s_managedBaseColor">
            <summary>
            Base color for managed scheme.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.GetColorTable(Syncfusion.Windows.Forms.MetroTheme)">
            <summary>
            Gets color table for Metro Color.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.ApplyManagedColors(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Applies colors for managed scheme.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.ApplyManagedScheme(System.Windows.Forms.Form,Syncfusion.Windows.Forms.MetroTheme)">
            <summary>
            
            </summary>
            <param name="form"></param>
            <param name="scheme"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.InitializeColors">
            <summary>
            Initialize colors general for all colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.UpdateColors(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="basicColor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.UpdateScheme(Syncfusion.Windows.Forms.MetroTheme)">
            <summary>
            
            </summary>
            <param name="scheme"></param>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.MergeColors(System.Drawing.Color,System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="baseColor"></param>
            <param name="blendColor"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.MergeChannels(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="baseChannel"></param>
            <param name="blendChannel"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.Default">
            <summary>
            Gets or sets default colors for metro visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.DefaultTheme">
            <summary>
            Gets or sets default colorscheme for metro visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ManagedColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ManagedBaseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonPressedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonPressedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonSelectedTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonSelectedBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDisabledTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDisabledBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonPressedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonSelectedBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDisabledBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDefaultTopColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDefaultBottomColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDefaultBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonDefaultInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonPressedInternalBorderColor">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroColors.ButtonSelectedInternalBorderColor">
            <summary></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvButtonUpperLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvArrowColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvLowerArrowLineColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvHotBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvNormalBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundButtonColor1" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundButtonColor2" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundButtonColor3" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundButtonColor4" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemBorder" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemTop" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemTopFirst" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemTopLast" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemBottomFirst" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemBottomLast" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.ComboBoxAdvPushedBackgroundListItemBottom" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedInternalRectangleBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedInternalRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvNormalTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvSelectedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvPushedTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvDisabledTickColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvIndeterminateRectangleColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvDisabledBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvDisabledBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.CheckBoxAdvDisabledInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvNormalBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvNormalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvNormalInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvSelectedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvSelectedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvSelectedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvPushedBackColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvPushedBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvPushedInternalBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvCheckMarkBorderColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvCheckMarkNormalBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvCheckMarkSelectedBottomColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroColors.RadioButtonAdvCheckMarkPushedBottomColor" -->
        <member name="T:Syncfusion.Windows.Forms.MetroColors.ManagedColorsAppliedEventArgs">
            <summary>
            Arguments class for <see cref="E:Syncfusion.Windows.Forms.MetroColors.ManagedColorsApplied"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroColors.ManagedColorsAppliedEventArgs.#ctor(System.Windows.Forms.Form,System.Drawing.Color)">
            <summary>
            Initializes <see cref="T:Syncfusion.Windows.Forms.MetroColors.ManagedColorsAppliedEventArgs"/> instance.
            </summary>
            <param name="form">Container form.</param>
            <param name="baseColor">Base color for the managed theme.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.ManagedColorsAppliedEventArgs.Form">
            <summary>
            Container form.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroColors.ManagedColorsAppliedEventArgs.BaseColor">
            <summary>
            Base color for the managed theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroMagentaColors">
            <summary>
            Provides colors for Magenta colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroMagentaColors.InitializeColors">
            <summary>
            Initialize colors for Magenta colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroOrangeColors">
            <summary>
            Provides colors for Orange colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroOrangeColors.InitializeColors">
            <summary>
            Initialize colors for Blue colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroTealColors">
            <summary>
            Provides colors for Teal colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroTealColors.InitializeColors">
            <summary>
            Initialize colors for Teal colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroBrownColors">
            <summary>
            Provides colors for Brown colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroBrownColors.InitializeColors">
            <summary>
            Initialize colors for Brown colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroLimeColors">
            <summary>
            Provides colors for Lime colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroLimeColors.InitializeColors">
            <summary>
            Initialize colors for Lime colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroPurpleColors">
            <summary>
            Provides colors for Purple colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroPurpleColors.InitializeColors">
            <summary>
            Initialize colors for Purple colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroPinkColors">
            <summary>
            Provides colors for Pink colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroPinkColors.InitializeColors">
            <summary>
            Initialize colors for Pink colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroBlueColors">
            <summary>
            Provides colors for Blue colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroBlueColors.InitializeColors">
            <summary>
            Initialize colors for Blue colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroRedColors">
            <summary>
            Provides colors for Red colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroRedColors.InitializeColors">
            <summary>
            Initialize colors for Red colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MetroGreenColors">
            <summary>
            Provides colors for Green colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MetroGreenColors.InitializeColors">
            <summary>
            Initialize colors for Green colorscheme of the Metro visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportOffice2010Theme">
            <summary>
            Specifies that this object supports <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISupportOffice2010Theme.EnableOffice2010Style">
            <summary>
            Enables rendering with <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISupportOffice2010Theme.Office2010ColorTheme">
            <summary>
            Specifies <see cref="T:Syncfusion.Windows.Forms.Office2007Theme"/> to use.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ISupportMetroTheme">
            <summary>
            Specifies that this object supports <see cref="T:Syncfusion.Windows.Forms.MetroTheme"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ISupportMetroTheme.EnableMetroStyle">
            <summary>
            Enables rendering with <see cref="T:Syncfusion.Windows.Forms.MetroTheme"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ISupportMetroTheme.MetroColorTheme">
            <summary>
            Specifies <see cref="T:Syncfusion.Windows.Forms.MetroTheme"/> to use.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedButtonBase">
            <summary>
            Draws a themed button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedButtonBase.DEF_REDUCE_SIZE_IMAGE">
            <summary>
            Value for reduce ClientRectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedButtonBase.DEF_SHIFT_LOCATION_IMAGE">
            <summary>
            Value for shift image rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedButtonBase.m_image">
            <summary>
            Image for draw foreground.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedButtonBase.m_stretchImage">
            <summary>
            Indicate wether the image for button 
            is stretched or shrunk to fit the size of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedButtonBase.m_bIsMouseOver">
            <summary>
            Indicates whether mouse positionin is over control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.OnCheckStateChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.#ctor">
            <summary>
            Initializes a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.DrawControlText(System.Drawing.Graphics)">
            <summary>
            Draws the text.
            </summary>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.DrawThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <summary>
            Draws the button themed.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="buttonState">The button state.</param>
            <param name="checkState">The checked state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.DrawNotThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <summary>
            Draws the button without themes.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="buttonState">The button state.</param>
            <param name="checkState">The checked state.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedButtonBase.DrawStyledControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <summary>
            Draws the styled button without themes.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="buttonState">The button state.</param>
            <param name="checkState">The checked state.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.Image">
            <summary>
            Gets or sets image for draw foreground.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.IsMouseOver">
            <summary>
            Indicates whether mouse positionin is over control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.StretchImage">
            <summary>
            Indicate wether the image for button 
            is stretched or shrunk to fit the size of the button.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ThemedButtonBase.ImageChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.ThemedButtonBase.Image"/> is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ThemedButtonBase.StretchImageChanged">
            <summary>
            Occurs when <see cref="P:Syncfusion.Windows.Forms.ThemedButtonBase.StretchImage"/> is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.FlatColor">
            <summary>
            Gets / sets the flatcolor of the themed button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.Style">
            <summary>
            Gets or sets the visual style of the themed button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.Office2007Theme">
            <summary>
            Indicates the Office2007 theme used for drawing the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.Office2010Theme">
            <summary>
            Indicates the Office2010 theme used for drawing the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.DrawText">
            <summary>
            Indicates whether to draw the button text.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.TextAlign">
            <summary>
            Gets / sets the text alignment.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.CheckState">
            <summary>
            Gets / sets the checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedButtonBase.DefaultButtonState">
            <summary>
            Gets / sets the default button state.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedCheckButton">
            <summary>
            Draws a themed check button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedCheckButton.metroColor">
            <summary>
            MetroColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedCheckButton.Dispose(System.Boolean)">
            <summary>
            Disposes all resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedCheckButton.#ctor">
            <summary>
            Initializes a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedCheckButton.DrawThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedCheckButton.DrawNotThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedCheckButton.Checked">
            <summary>
            Indicates the checked state of the button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedCheckButton.MetroColor">
            <summary>
            Gets or setsthe metrocolor.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedDrawing">
            <summary>Cached version of themed controls instances. Class will 
            return NULL instead of instance if OS does not support XP Themes.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedDrawing.s_sync">
            <summary>Thread synchronization object. Used for instance clear and create 
            operations locks.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedDrawing.s_edit">
            <summary>Edit control.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedDrawing.s_button">
            <summary>Button control.</summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThemedDrawing.s_tree">
            <summary>Tree control.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedDrawing.ResetCache">
            <summary>Reset static class cache. All internal static resources will be released. 
            Operation is thread safe.</summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedDrawing.Edit">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedDrawing.Button">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedDrawing.TreeView">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.THEMESIZE">
            <summary>
            Specifies the theme size type requested using <see cref="M:Syncfusion.Windows.Forms.ThemedControlDrawing.GetPartSize(System.Drawing.Graphics,System.Int32,System.Int32,Syncfusion.Windows.Forms.THEMESIZE)"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.THEMESIZE.TS_MIN">
            <summary>
            Requesting the minimum size.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.THEMESIZE.TS_TRUE">
            <summary>
            Requesting the size of the theme part that will best fit the available space.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.THEMESIZE.TS_DRAW">
            <summary>
            Requesting the size that the theme manager uses to draw a part.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThemedScrollButton">
            <summary>
            Draws a themed scroll button.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedScrollButton.#ctor">
            <summary>
            Initializes a new object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedScrollButton.Dispose(System.Boolean)">
            <summary>
            Disposes all resources being used.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedScrollButton.DrawThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedScrollButton.DrawNotThemedControl(System.Drawing.Graphics,System.Windows.Forms.ButtonState,System.Windows.Forms.CheckState)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThemedScrollButton.GetBackColor(System.Windows.Forms.ButtonState)">
            <summary>
            Returns the color for paint control background.
            </summary>
            <param name="buttonState"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ThemedScrollButton.ButtonType">
            <summary>
            Gets / sets the type of scroll arrow.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IVisualStylesDrawing">
            <summary>
            Implement this interface to support skins across the Grid. Exposes some themed drawing methods.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the Header skins.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IVisualStylesDrawing.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IVisualStylesDrawing.VisualStyle">
            <summary>
            Gets the current VisualStyles.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IThemeStyle.GetHeaderBottomBorderStyle(System.Drawing.Color@,Syncfusion.Windows.Forms.GridBottomBorderWeight@)">
            <summary>
             Returns the Header Border styles.
            </summary>
            <param name="clrHeaderBottom">The bottom border color of header.</param>
            <param name="borderWeight">The bottom border weight.</param>
            <returns>returns the weight and color of bottom border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IThemeStyle.GetHeaderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Header style color of Grid
            </summary>
            <param name="backColor">Header color</param>
            <param name="hoverColor">hover color</param>
            <param name="pressedColor">pressed color</param>
            <returns>true</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IThemeStyle.GetHeaderTextColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            header style text color
            </summary>
            <param name="normalTextColor">Normal text color</param>
            <param name="hoverTextColor">hover text color</param>
            <param name="pressedTextColor">pressed text color</param>
            <returns>true</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IThemeStyle.VisualStyle">
            <summary>
            Gets the current VisualStyles.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridMetroStyle">
            <summary>
            Implements the Metro look and feel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridMetroStyle"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.GetHeaderBottomBorderStyle(System.Drawing.Color@,Syncfusion.Windows.Forms.GridBottomBorderWeight@)">
            <summary>
             Returns the Header Border styles.
            </summary>
            <param name="clrHeaderBottom">The bottom border color of header.</param>
            <param name="borderWeight">The bottom border weight.</param>
            <returns>returns the weight and color of bottom border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.GetHeaderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Header style color of Grid
            </summary>
            <param name="backColor">Header color</param>
            <param name="hoverColor">hover color</param>
            <param name="pressedColor">pressed color</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
             Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies Whether the button is Intermediate state</param>       
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroStyle.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroStyle.VisualStyle">
            <summary>
            Gets the current VisualStyles.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridMetroColors">
            <summary>
            Implement the SkinCollection for GridMetroColors
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridMetroColors.#ctor">
            <summary>
            Collecction initialize
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.HeaderColor">
            <summary>
            get / set Header color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.HeaderTextColor">
            <summary>
            get / set Header text color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.GroupDropAreaColor">
            <summary>
            get /set grop drop area color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.SortIconColor">
            <summary>
            get / set sort icon color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.CheckBoxColor">
            <summary>
            get / set collection of check box color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.ComboboxColor">
            <summary>
            get/ set combo box color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.SpinButtonColor">
            <summary>
            get / set spin button color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.PushButtonColor">
            <summary>
            get /set push button color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.RadiobuttonColor">
            <summary>
            get or set radio button color collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.HeaderBottomBorderColor">
            <summary>
            gets or sets header botom border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridMetroColors.HeaderBottomBorderWeight">
            <summary>
            Gets/Sets the header botom border weight.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridBottomBorderWeight">
            <summary>
            Specifies the weight of a header bottom border <see cref="!:GridBorder"/> class.
            None option is used to Show / hide the bottom border.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.ExtraThin">
            <summary>
                   A line with 0.25 point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.Thin">
            <summary>
                   A line with 0.5 point.
            </summary>    
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.Medium">
            <summary>
                   A line with 1 point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.Thick">
            <summary>
                   A line with 1.5 points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.ExtraThick">
            <summary>
                   A line with 2.0 points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.ExtraExtraThick">
            <summary>
                   A line with 3.0 points.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.GridBottomBorderWeight.None">
            <summary>
            This hide the header bottom border.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridHeader">
            <summary>
            Collectionn of Header color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeader.NormalColor">
            <summary>
            Get / set the Header Color in normal mode
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeader.HoverColor">
            <summary>
            Get / set the Header Color in mouse Hover
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeader.PressedColor">
            <summary>
            Get / set the header Color in mouse pressed
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridHeaderText">
            <summary>
            Collection of Header text color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeaderText.NormalTextColor">
            <summary>
            grt /set normal header text color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeaderText.HoverTextColor">
            <summary>
            get / set hover text color of header
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridHeaderText.PressedTextColor">
            <summary>
            get /set header pressed color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridSortIcon">
            <summary>
            Collection of sort icon color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSortIcon.NormalSortIconColor">
            <summary>
            Get / set the sort icon Color in normal
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSortIcon.HoverSortIconColor">
            <summary>
            Get / set the sort icon  Color in hover
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridCheckBox">
            <summary>
            Collection of Check box Color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridCheckBox.BorderColor">
            <summary>
            Get / set the border color of checkbox
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridCheckBox.BackColor">
            <summary>
            Get / set the back color of check box
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridCheckBox.CheckColor">
            <summary>
            Get / set the check marker color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridComboBox">
            <summary>
            Collection of GridCombobox color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.NormalBackColor">
            <summary>
            Get / set the combobox 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.NormalBorderColor">
            <summary>
            Get / set the combobox NormalBorderColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.HoverBackColor">
            <summary>
            Get / set the hoverBackColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.HoverBorderColor">
            <summary>
            Get / set the HoverBorderColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.PressedBackColor">
            <summary>
            Get / set the pressedBackColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridComboBox.PresedBorderColor">
            <summary>
            Get / set the presedBorderColor
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridSpinButton">
            <summary>
            Collection of Grid spin button colors
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.NormalBackColor">
            <summary>
            Get / set spin button normal back color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.NormalBorderColor">
            <summary>
            Get / set spin button normal border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.HoverBackColor">
            <summary>
            Get / set spin button hover back color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.HoverBorderColor">
            <summary>
            Get / set spin button hover border color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.PressedBackColor">
            <summary>
            Get / set spin button pressed back color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridSpinButton.PresedBorderColor">
            <summary>
            Get / set spin button pressed border color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridPushButton">
            <summary>
            Collection of grid push button colors
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridPushButton.NormalBackColor">
            <summary>
            Get / set normal push button color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridPushButton.HoverBackColor">
            <summary>
            Get / set bush button hover color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridPushButton.PushedBackColor">
            <summary>
            Get / set push button back color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridRadioButton">
            <summary>
            Collection of radio button color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridRadioButton.RadioButtonColor">
            <summary>
            Get / set radio button color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridRadioButton.CheckedColor">
            <summary>
            Get / set radio button checked color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridGroupDropAreaColor">
            <summary>
            collection of Group drop area color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridGroupDropAreaColor.BackColor">
            <summary>
            Get / set group srop area back color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridGroupDropAreaColor.BorderTopColor">
            <summary>
            Get / set grid gropu drop are border top color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridGroupDropAreaColor.BorderLeftColor">
            <summary>
            Get / set group drop area border left color
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2010">
            <summary>
            Implements the Office 2010 look and feel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2010"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.GetHeaderBottomBorderStyle(System.Drawing.Color@,Syncfusion.Windows.Forms.GridBottomBorderWeight@)">
            <summary>
             Returns the Header Border styles.
            </summary>
            <param name="clrHeaderBottom">The bottom border color of header.</param>
            <param name="borderWeight">The bottom border weight.</param>
            <returns>returns the weight and color of bottom border.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.GetHeaderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Header style color of Grid
            </summary>
            <param name="backColor">Header color</param>
            <param name="hoverColor">hover color</param>
            <param name="pressedColor">pressed color</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesOffice2010.VisualStyle">
            <summary>
            Gets the current VisualStyles.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue">
            <summary>
            Implements the Office 2007 Blue look and feel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue.VisualStyle">
            <summary>
            Gets the current VisualStyles.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black">
            <summary>
            Implements the Office 2007 Black look and feel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Black.VisualStyle">
            <summary>
            Gets the current visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver">
            <summary>
            Implements the Office 2007 Silver look and feel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
             Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is in intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Silver.VisualStyle">
            <summary>
            Gets the current visual style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2003">
            <summary>
            Implements the Office 2003 look and feel
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.Dispose(System.Boolean)">
            <summary>
            Dispose the resources being used.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesOffice2003.VisualStyle">
            <summary>
            Gets the current VisualStyle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme">
            <summary>
            Implements the SystemTheme for grid components.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.Dispose(System.Boolean)">
            <summary>
            Disposes all resources being used.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.#ctor(Syncfusion.Windows.Forms.GridVisualStyles)">
            <summary>
            Creates a new instance of <see cref="T:Syncfusion.Windows.Forms.GridVisualStylesOffice2007Blue"/> class.
            </summary>
            <param name="style">The current visual style.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawHeaderStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedHeaderDrawing.HeaderState)">
            <summary>
            Draws the header skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the header.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.GetHeaderBorderColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the Header Border Colors.
            </summary>
            <param name="clrBottom">The bottom border color</param>
            <param name="clrRight">The right border color</param>
            <param name="clrInteriorFirst">The gradient start color for the header interior</param>
            <param name="clrInteriorLast">The gradient end color for the header interior</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.GetSortIconBrush(System.Drawing.Brush@,System.Drawing.Pen@)">
            <summary>
            Returns the SortIcon interior
            </summary>
            <param name="brush">The brush used to fill the sort icon</param>
            <param name="pen">The pen used to draw the sort icon</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.GetGroupDropAreaColors(System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Returns the backcolor and header interior for GroupDropArea.
            </summary>
            <param name="backColor">The back color for GroupDropArea</param>
            <param name="headerBorderTop">The top border color for GroupDropArea header</param>
            <param name="headerBorderLeft">The left border color for GroupDropArea header</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawPushButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the PushButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawComboBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ThemedComboBoxDrawing.DropDownState,System.Drawing.Color)">
            <summary>
            Draws the ComboBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the combo button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawSpinButtonStyle(System.Drawing.Graphics,System.Drawing.Rectangle,Syncfusion.Windows.Forms.ButtonID,System.Windows.Forms.ButtonState,System.Drawing.Color)">
            <summary>
            Draws the SpinButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="btnId">An integer that represents the type of the button.</param>
            <param name="btnState">The current state of the spin button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawCheckBoxStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState,System.Boolean,System.Boolean)">
            <summary>
            Draws the CheckBox skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the checkbox</param>
            <param name="mixedState">Specifies whether the button is tri-stated.</param>
            <param name="intermediate">Specifies whether the button is intermediate state</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.DrawRadioStyle(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ButtonState)">
            <summary>
            Draws the RadioButton skins
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle"/> object that represents the drawing area.</param>
            <param name="state">The current state of the radio button</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.GridVisualStylesSystemTheme.VisualStyle">
            <summary>
            Gets the current VisualStyle.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.GridVisualStyles">
            <summary>
            Specifies the VisualStyle with which various components across the grid will appear and behave.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Off2003Colors">
            <summary>
            Represents the colors for Office2003 style. 
            Provides static members to access the colors used by different grid elements.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Off2007Colors">
            <summary>
            Represents the colors for Office2007 style. 
            Provides static members to access the colors used by different grid elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Off2007Colors.NormalBlue">
            <summary>
            Gets an array of colors used for Office2007Blue style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Off2007Colors.MouseHOverColor">
            <summary>
            Gets an array of colors used to represent Hot State color. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Off2007Colors.MouseDownColor">
            <summary>
            Gets an array of colors used to represent Pressed State color.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Off2010Colors">
            <summary>
            Represents the colors for Office2010style. 
            Provides static members to access the colors used by different grid elements.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Off2010Colors.MouseHOverColor">
            <summary>
            Gets an array of colors used to represent Hot State color. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Off2010Colors.MouseDownColor">
            <summary>
            Gets an array of colors used to represent Pressed State color.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ColorStyles">
            <summary>
            Specifies the VisualStyle with which various components across the grid will appear and behave.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.XPThemes">
            <summary>
            Provides some information regarding themes support and state in the OS.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.XPThemes.isThemedOS">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.XPThemes.isAppThemed">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.XPThemes.isThemeActive">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.XPThemes.dummyForm">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.XPThemes.htThemedControlDrawings">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.#cctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.GetIsThemedOS">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.RegisterControlDrawing(Syncfusion.Windows.Forms.ThemedControlDrawing)">
            <summary></summary>
            <param name="tcd"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.UnregisterControlDrawing(Syncfusion.Windows.Forms.ThemedControlDrawing)">
            <summary></summary>
            <param name="tcd"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.ResetThemeHandles">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.RefreshThemeHandles">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.OnThemeChanged(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.ApplicationExit(System.Object,System.EventArgs)">
            <summary></summary>
            <param name="sender"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.UnWireDummyForm">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.UnWireThemeChangeListenerForm">
            <summary>
            Used to unwire the ThemeChangeListenerForm class. 
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.UnWireDummyFormInternal">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.ThemeFileName">
            <summary>
            Returns the theme file name with the path.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.CurrentThemeColorScheme">
            <summary>
            Returns the current theme color scheme name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsDefaultBlueThemeOn">
            <summary>
            Indicates whether the default blue theme is on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsOliveGreenThemeOn">
            <summary>
            Indicates whether the Olive Green theme is on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsSilverThemeOn">
            <summary>
            Indicates whether the Silver theme is on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsThemedOS">
            <summary>
            Indicates whether this OS has themes support built-in.
            </summary>
            <value>True if themes are supported; False otherwise.</value>
            <remarks><para>This property returns True for Windows XP and later versions.</para></remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsThemeActive">
            <summary>
            Indicates whether themes are enabled in the current OS.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.IsAppThemed">
            <summary>
            Indicates whether the current application is themed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.XPThemes.ThemeChanged">
            <summary></summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm.OnThemeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm.ThemeChanged">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemes.ThemeChangeListenerForm.CreateParams">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.XPThemesThemeChangedWeakContainer">
            <summary>
            Class for automatic subscription management of <see cref="E:Syncfusion.Windows.Forms.XPThemes.ThemeChanged"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemesThemeChangedWeakContainer.#ctor(Syncfusion.Windows.Forms.ISupportThemeChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.XPThemesThemeChangedWeakContainer"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.XPThemesThemeChangedWeakContainer.ThemeChanged(System.Object,System.EventArgs)">
            <summary>
            Handles theme change.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the <see cref="E:Syncfusion.Windows.Forms.XPThemes.ThemeChanged"/> event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.XPThemesThemeChangedWeakContainer.Target">
            <summary>
            Gets or sets the object (the target) referenced by the current <see cref="T:System.WeakReference"/> object.
            </summary>
            <value></value>
            <returns>null if the object referenced by the current <see cref="T:System.WeakReference"/> object has been garbage collected; otherwise, a reference to the object referenced by the current <see cref="T:System.WeakReference"/> object.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.
            </exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoAppendInfo">
            <summary>
            Specifies the information required by the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> class to enable auto appending
            in a control.
            </summary>
            <remarks>
            Take a look at <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> for a usage example.
            </remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppendInfo.#ctor(System.Boolean,System.String,System.Collections.IList,System.Int32)">
            <summary>
            Creates a new instance of this class and initializes it with these values.
            </summary>
            <param name="autoAppend">Indicates whether to turn on AutoAppend; False if not.</param>
            <param name="categoryName">The Category to which the contents in this control belong to.</param>
            <param name="items">The reference to an IList which will get the new items entered by the user.</param>
            <param name="maxItems">The maximum number of items in the list.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoAppendInfo.AutoAppend">
            <summary>
            Indicates whether to turn on AutoAppend.
            </summary>
            <value>True to turn on auto appending; False to turn off.</value>
            <remarks>
            Take a look at <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> for a usage example.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoAppendInfo.CategoryName">
            <summary>
            Gets / sets the Category Name to which the contents of the list belong to.
            </summary>
            <value>The category name.</value>
            <remarks>
            Take a look at <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> for a usage example.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoAppendInfo.Items">
            <summary>
            Gets / sets the IList into which new entries will be appended.
            </summary>
            <value>A reference to an IList instance.</value>
            <remarks>
            Take a look at <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> for a usage example.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.AutoAppendInfo.MaxItems">
            <summary>
            Gets / sets the desired maximum number of items in the list.
            </summary>
            <value>The maximum count.</value>
            <remarks>If the count exceeds the maximum count, then AutoAppend will keep
            discarding the older entries.
            Take a look at <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> for a usage example.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.AutoAppend">
            <summary>
            The AutoAppend class provides choice-list auto-append capabilities for editable combo boxes, etc.
            </summary>
            <remarks>
            <para>
            Often editable combo boxes in your applications can benefit from reusing 
            previously user supplied entries in their choice-list, as in IE's address bar combo box and
            in the "Find" combo box in VS.NET.
            </para>
            <para>
            The AutoAppend class will easily enable this functionality in an associated combo box. 
            In fact, this class is more abstract in that
            it can take any control and an IList reference and enable "AutoAppend" logic on
            them as described below.
            </para>
            <para>
            Associate your control with this class through the <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppendInfo"/> structure.
            The <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppendInfo"/> structure will let you associate a control with an IList 
            reference and a Category string to an AutoAppend instance.
            </para>
            <para>Once you set up this association, the AutoAppend instance listens to the Validated event 
            thrown by the control
            and inserts the new entry on top of the supplied IList or if 
            already in the list, moves the entry to top of the list. When the control gets disposed, 
            it persists these entries in the registry in a key based on the corresponding Category string.
            The next time the control is created and associated, the AutoAppend instance will pick up 
            the persisted information corresponding to the Category and apply that information
            to the IList instance.
            </para>
            <para>
            Persistance is done in the registry under the HKLU key making the entries specific to the
            user and global to the machine (usable across applications). Due to the previous behavior,
            the very first instantiation of the above control will set the control's text and the IList
            to be empty.
            </para> 
            <para><bold>Note: </bold>Also make sure your control's Dispose() gets called before the ApplicationExit event
            thrown by the Application object. Otherwise, the control's state will not be persisted. This
            would normally be the case, unless the control gets "orphaned" (detached from the parent control) and the
            Dispose method never gets called until it is garbage collected.
            </para>
            <para>You can make any number of associations with one AutoAppend instance.</para>
            </remarks>
            <example>
            This is how you would associate a combo box with an instance of the AutoAppend class:
            <code lang="C#">
            this.autoAppend = new AutoAppend();
            this.autoAppend.SetAutoAppend(this.comboBox1, new AutoAppendInfo(true, "HttpAddress", this.comboBox1.Items, 30));
            // To disassociate call this:
            this.autoAppend.SetAutoAppend(this.comboBox1, new AutoAppendInfo(false, String.Empty, null, 30));
            </code>
            <code lang="VB">
            Me.autoAppend = New AutoAppend()
            Me.autoAppend.SetAutoAppend(Me.comboBox1, New AutoAppendInfo(True, "HttpAddress", Me.comboBox1.Items, 30))
            ' To disassociate call this:
            Me.autoAppend.SetAutoAppend(Me.comboBox1, New AutoAppendInfo(False, [String].Empty, Nothing, 30))
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.#ctor">
            <summary>
            Creates a new instance of the AutoAppend class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.Finalize">
            <summary>
            This member overrides Object.Finalize.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.Dispose">
            <summary>
            Releases all setup associations.
            </summary>
            <remarks>
            This will also persist the exisiting information before releasing the associations.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.Dispose(System.Boolean)">
            <summary>
            Override this to release the unmanaged resources used by the control and optionally releases the managed resources.
            </summary>
            <param name="disposing">True to release both managed and unmanaged resources; False to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.GetAutoAppend(System.Windows.Forms.Control)">
            <summary>
            Returns the AutoAppendInfo associated with a control.
            </summary>
            <param name="control">The control whose AutoAppend info is required.</param>
            <returns>The corresponding AutoAppendInfo value. If this control is not associated
            yet, then an AutoAppendInfo with its AutoAppend value set to False will be returned.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.SetAutoAppend(System.Windows.Forms.Control,Syncfusion.Windows.Forms.Tools.AutoAppendInfo)">
            <summary>
            Associates a control with this instance by providing its AutoAppendInfo.
            </summary>
            <param name="control">The control in which to AutoAppend.</param>
            <param name="autoAppendInfo">The AutoAppendInfo.</param>
            <remarks>
            <para>Calling this will enable <see cref="T:Syncfusion.Windows.Forms.Tools.AutoAppend"/> behavior in the control. Take a look at the AutoAppend 
            class reference for detailed information on this behavior.</para>
            To disassociate a control from the AutoAppend instance, call this method with the
            AutoAppendInfo's AutoAppend value set to False.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.AutoAppend.InsertOrMoveToTop(System.Windows.Forms.Control,System.String)">
            <summary>
            Forces an entry into the control's AutoAppend list.
            </summary>
            <param name="control">The control whose AutoAppend list is to be updated.</param>
            <param name="item">The value that is to be appended to the list.</param>
            <remarks>
            The AutoAppend instance automatically inserts entries into the list when the user
            enters a new value and leaves the control (when Validated will be fired).
            However, you might want new entries to be added when, for example, the user hits
            the Enter key. You do so by calling this method with the new value which will
            insert the new value into the list.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CancelMouseEventArgs">
            <summary>
            Provides data for a cancelable mouse event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CancelMouseEventArgs.#ctor(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.CancelMouseEventArgs"/> with data from a <see cref="P:Syncfusion.Windows.Forms.CancelMouseEventArgs.MouseEventArgs"/>.
            </summary>
            <param name="e">The <see cref="P:Syncfusion.Windows.Forms.CancelMouseEventArgs.MouseEventArgs"/> data for this event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CancelMouseEventArgs.ToString">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CancelMouseEventArgs.MouseEventArgs">
            <summary>
            The <see cref="P:Syncfusion.Windows.Forms.CancelMouseEventArgs.MouseEventArgs"/> data for this event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CancelMouseEventHandler">
            <summary>
            Handles a cancelable mouse event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxBase">
            <summary>
            An advanced combo box control.
            </summary>
            <remarks>
            <para>
            This advanced combo box control provides a lot of improvements over the standard <see cref="T:System.Windows.Forms.ComboBox"/>
            control. The improvements are as follows:
            <list type="bullet">
            <item>
            <term>Plug in any <see cref="T:System.Windows.Forms.ListControl"/> derived class as the list for the list portion of the combo box
            using the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/> property.</term>
            </item>
            <item>
            <term>Provides a <see cref="T:System.Windows.Forms.FlatStyle"/> mode for regular, flat or themed drawing.</term>
            </item>
            <item>
            <term>Written using native .NET controls, this control lets you customize everything in the combo box from the textbox to the drop-down window.</term>
            </item>
            </list>
            </para>
            <para>
            This control requires the plugged in <b>ListControl</b> to implement the <b>Items</b> property returning
            a valid <see cref="T:System.Collections.IList"/> instance. The <b>ListControl</b> can
            optionally implement an <b>IndexFromPoint</b> method that will take a single argument of type <see cref="T:System.Drawing.Point"/> and
            a <b>TopIndex</b> property of type int. The semantics of these above properties and methods are similar to
            that of a <see cref="T:System.Windows.Forms.ListBox"/>'s implementation.</para>
            <para>
            Implementing <b>IndexFromPoint</b> and <b>TopIndex</b> will enable QuickSelection capability for the combo box, wherein
            the user can click on the drop-down button and start selecting items in the list, all this
            without releasing the mouse.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.WM_TOUCH">
            <summary>
            Default windows message for gesture support.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.WM_MOUSEACTIVATE">
            <summary>
            Default windows message for Mouse captured.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.USERSIZE">
            <summary>
            User Size changed
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.FONTSTYLE">
            <summary>
            Default font style of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.USERFONTSTYLE">
            <summary>
            Font which stored after changed in design
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_bCaseSensitive">
            <summary>
            Indicates whether to perform case sensitive search.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.ComboBoxOfficeStyleDropDownWidth">
            <summary>
            The width of the drop-down button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.checkTouch">
            <summary>
            Collects the boolean value if Control is selected by Touch or Mouse control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.ignoreThemeBackground">
            <summary>
            Indicates whether theme BackColor is painted or ignored and BackColor of control is painted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.cachedBackColor">
            <summary>
            Cached BackColor of ComboBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.suppressdropdownevent">
            <summary>
            Indicates whether to suppress the DropDown Event
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.useMnemonic">
            <summary>
            Used to draw office 2007 scroller.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.useOffice2007ColorsInActiveMode">
            <summary>
            Used to draw office 2007 backcolors in ActiveMode when DropDownList style set.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.useMetroColorsInActiveMode">
            <summary>
            Used to draw metro backcolors in ActiveMode when DropDownList style set.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_scrollersFrame" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_office2007ColorTheme">
            <summary>
            Office 2007 color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_office2010ColorTheme">
            <summary>
            Office 2010 color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.allowMouseWheelSelection">
            <summary>
            Metro color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown._eventhooked">
            <summary>
            Variable to detect whether the event has been hooked.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown._canHookControl">
            <summary>
            Variable to detect whether the click event has been hooked.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.#ctor">
            <summary>
            Creates a new instance of the ComboDropDown class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ShowTouchKeyboard(System.Collections.Generic.List{System.Boolean})">
            <summary>
            To show/display the touch keyboard
            </summary>
            <param name="CheckTouch"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.HideTouchKeyboard">
            <summary>
            To hide the touch keyboad.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Overridden. See <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreatePopupContainer">
            <summary>
            Called once to create a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>
            that will host the drop-down list.
            </summary>
            <returns>A new instance of a <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/>.</returns>
            <remarks>
            Override this method to provide a custom implementation of the <b>PopupControlContainer</b>.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitPopupContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitPopupContainer">
            <summary>
            Called to initialize the drop-down container.
            </summary>
            <remarks>
            <para>
            This method is called once to initialize the drop-down container that hosts the
            drop-down list. Use the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupContainer"/> property to get a reference to 
            the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> from inside an override of this method.
            </para>
            <para>
            Make sure to call the base class when you override this method for default initialization.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreatePopupContainer"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateTextBox">
            <summary>
            Called once to create a <see cref="T:System.Windows.Forms.TextBox"/>
            for the editable text portion of the combo.
            </summary>
            <returns>A new instance of a <see cref="T:System.Windows.Forms.TextBox"/>.</returns>
            <remarks>
            Override this method to provide a custom implementation of a <b>text box</b>.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitTextBox"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateDropDownButton">
            <summary>
            Called once to create a <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButton"/>
            for the drop-down button portion of the combo.
            </summary>
            <returns>A new instance of a <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButton"/>.</returns>
            <remarks>
            Override this method to provide a custom implementation of a <b>DropDownButton</b>.
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitDropDownButton(Syncfusion.Windows.Forms.Tools.DropDownButton)"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitDropDownButton(Syncfusion.Windows.Forms.Tools.DropDownButton)">
            <summary>
            Called to initialize the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButton"/> used in the drop-down button portion of the combo.
            </summary>
            <remarks>
            <para>
            This method is called once to initialize the <b>DropDownButton</b> used to draw the 
            drop-down portion of the combo.
            </para>
            <para>
            Make sure to call the base class when you override this method for default initialization.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateDropDownButton"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitTextBox">
            <summary>
            Called to initialize the <see cref="T:System.Windows.Forms.TextBox"/> used in the editable text portion.
            </summary>
            <remarks>
            <para>
            This method is called once to initialize the <b>text box</b> used to draw the 
            editable portion of the combo. Use the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.TextBox"/> property to get a reference to 
            the <b>text box</b> from inside a override of this method.
            </para>
            <para>
            Make sure to call the base class when you override this method for default initialization.
            </para>
            <seealso cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateTextBox"/>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.Dispose(System.Boolean)">
            <overload>
            Releases all resources used by the control.
            </overload>
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdatePopupControlRelationship">
            <summary>
            Updates the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupControl"/>'s parent-child relationship.
            </summary>
            <remarks>
            If in ComboBoxStyle.Simple mode, the base class implementation 
            parents the Popup Control to the combo itself. Otherwise, it parents the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupContainer"/>
            to the Popup Control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetBackColor">
            <summary>
            Resets the <see cref="P:System.Windows.Forms.Control.BackColor"/> property to its default value.
            </summary>
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnEnabledChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnStyleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetDropDownWidth">
            <summary>
            Resets the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownWidth"/> property's value to its default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ShouldSerializeDropDownWidth">
            <summary>
            Indicates whether the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownWidth"/> property's value is the default.
            </summary>
            <returns>True if the value is not the default; false otherwise.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetUseMetroButtonColor">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.metroColor">
            <summary>
            Metrocolor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ShouldSerializeMetroColor">
             <summary>
            Serialize metrocolor.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetMetroColor">
            <summary>
            Resets the metrocolor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnEnter(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnGotFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnLostFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdateText(System.Boolean)">
            <summary>
            Updates the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Text"/> property based on the PopupControl's selected value.
            </summary>
            <param name="fireEvent">Indicates whether the <see cref="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.SelectionChangeCommitted"/> event should be fired if the text is changed.</param>
            <returns>True if the <see cref="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.SelectionChangeCommitted"/> event was fired; False otherwise.</returns>
            <remarks>You normally do not have to call this method. However when you 
            programmatically update the SelectedValue of a plug in the list control, 
            you might have to call this method to update the combo's text based on that new value.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OtherChangesMade">
            <summary>
            Indicates whether another change was made except text changing
            in control.
            </summary>
            <returns>True if changes were detected; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnBorderSidesChanged(System.EventArgs)">
            <summary>
            Raises the BorderSidesChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorderSidesChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OmBorderSidesChanged 
            in a derived class, be sure to call the base class's 
            OnBorderSidesChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnBorder3DStyleChanged(System.EventArgs)">
            <summary>
            Raises the Border3DStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnBorder3DStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnBorder3DStyleChanged 
            in a derived class, be sure to call the base class's 
            OnBorder3DStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnDropDown(System.EventArgs)">
            <summary>
            Raises the Drop-Down event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The OnDropDown method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnDropDown 
            in a derived class, be sure to call the base class's 
            OnDropDown method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnSelectionChangeCommitted(System.EventArgs)">
            <summary>
            Raises the SelectionChangeCommitted event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The OnSelectionChangeCommitted method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnSelectionChangeCommitted 
            in a derived class, be sure to call the base class's 
            OnSelectionChangeCommitted method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.RaiseSelectionChangeCommitted">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.SelectionChangeCommitted"/> event.
            </summary>
            <remarks>
            The event will be fired usually when
            the user commits selection change. You could use this method to raise an event manually for a 
            custom scenario.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnDropDownStyleChanged(System.EventArgs)">
            <summary>
            Raises the DropDownStyleChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see "Raising 
            an Event".</para> <para>The DropDownStyleChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnDropDownStyleChanged 
            in a derived class, be sure to call the base class's 
            OnDropDownStyleChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnReadOnlyChanged(System.EventArgs)">
            <summary>
            Raises the ReadOnlyChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see "Raising 
            an Event".</para> <para>The ReadOnlyChanged method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnReadOnlyChanged 
            in a derived class, be sure to call the base class's 
            OnReadOnlyChanged method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.PerformTextAutoComplete(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Performs auto complete in the text area.
            </summary>
            <param name="e">The arguments of the KeyPress event.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_IsPopControlType">
            <summary>
            Check whether the ComboBox is ComboDropDown or ComboBoxAdv
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.textBox_LostFocus(System.Object,System.EventArgs)">
            <summary>
            Event will be triggered when TextBox lost its Focus
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.textBox_MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Event will be triggered while clicking on the TextBox control of the ComboBox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.PerformAllowNewText(System.Windows.Forms.Message)">
            <summary>
            Verifies whether new text is allowed to be entered from native message.
            </summary>
            <param name="m">The message.</param>
            <returns>True if the message is handled.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.IsInputKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.IsInputChar(System.Char)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ProcessDialogKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ForwardKeyMessageToPopupControl(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Forwards the key message to the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupControl"/>.
            </summary>
            <param name="msg">The message id.</param>
            <param name="wparam">The first message parameter.</param>
            <param name="lparam">The second message parameter.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnPopupClosed(Syncfusion.Windows.Forms.PopupClosedEventArgs)">
            <summary>
            Called when the popup is closed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdatePopupControl">
            <summary>
            Updates the attached popup control based on the current <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Text"/> property.
            </summary>
            <remarks>
            Call this method to update the popup list box, for example, with the latest text
            value that the user might have entered. This is useful when you enable auto completion
            in the text area and force the list box's SelectedValue to be updated to the
            latest text value in this control's Validated event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnBeforePopup">
            <summary>
            Called before the popup gets dropped down.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ShowPopup">
            <summary>
            Shows the drop-down.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.HidePopup">
            <summary>
            Hides the drop-down list box.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdateLayout(System.Drawing.Graphics)" -->
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.SetNeedLayout(System.Boolean)">
            <summary>
            Forces laying out of the combo elements within the next Paint Message handler.
            </summary>
            <param name="needLayout">True to force; False to prevent layout.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DetermineHeightsBasedOnFont(System.Drawing.Graphics,System.Int32@)">
            <summary>
            Determines the heights of certain portions of this control.
            </summary>
            <param name="g">A <see cref="T:System.Drawing.Graphics"/> object.</param>
            <param name="textAreaHeight">A reference variable through which to return the height for the text area.</param>
            <remarks>
            <para>
            Make sure to call the base class when you override this method.
            </para>
            <para>
            This method expects you to return a height for the text area through the reference variable,
            set the height of this control (if not in ComboBoxStyle.Simple mode) and the height
            of the drop-down button (<see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButtonHeight"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdateEditPortionBounds(System.Int32)">
            <summary>
            Updates the internal textbox's bounds and visibility based on the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownStyle"/>.
            </summary>
            <param name="textAreaHeight">The height of the text area.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.GetComboBoxDropDownWidth">
            <summary>
            Returns the width for the combo box drop-down button.
            </summary>
            <returns>The button width.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.GetOfficeStyleComboBoxDropDownWidth">
            <summary>
            Returns the width for the combo box drop-down button when office style is on.
            </summary>
            <returns>The button width.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdateDropDownButtonBounds">
            <summary>
            Updates the bounds of the drop-down button bounds.
            </summary>
            <remarks>
            Sets the bounds based on the value returned by the 
            <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.GetComboBoxDropDownWidth"/> method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdatePopupControlBounds">
            <summary>
            Updates the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupControl"/>'s bounds.
            </summary>
            <remarks>
            The base class updates the PopupControl's bounds and visibility based on the 
            <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownStyle"/> settings.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.GetEmbeddedChildBounds(System.Int32)">
            <summary>
            Overloaded. The bounds for the control that is associated with this popup when in DropDownStyle.Simple mode.
            </summary>
            <param name="comboHeight">The height of the combo control.</param>
            <returns>The bounds for the embedded control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.GetEmbeddedChildBounds">
            <summary>
            The bounds for the control that is associated with this popup when in DropDownStyle.Simple mode.
            </summary>
            <returns>The bounds for the embedded control.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawEditPortion(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called from the <b>Paint</b> event handler to draw the text portion.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
            <remarks>
            This method calls the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawListModeEditPortion(System.Windows.Forms.PaintEventArgs,System.Drawing.Color,System.Drawing.Color,System.Boolean)"/> method
            to draw the edit portion only when in <b>ComboBoxStyle.DropDownList</b> mode
            or when in design-mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawListModeEditPortion(System.Windows.Forms.PaintEventArgs,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Called from <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawEditPortion(System.Windows.Forms.PaintEventArgs)"/> to draw the text area when in ComboBoxStyle.DropDownList mode.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
            <param name="highlightBG">The background color for the highlight.</param>
            <param name="highlightText">The text color for the highlight.</param>
            <param name="drawFocusRect">Indicates whether to draw a focus rectangle.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawDropDownPortion(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called from the <b>Paint</b> event handler to draw the drop-down button.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawEditPortionBorderAndBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called from the <b>Paint</b> event handler to draw the edit portion's border and background.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
            <remarks>
            This method calls the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> method with the appropriate
            dimension to draw the border around the text portion.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the border and background of the control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>
            This method is used to draw the border around the text area (when called from 
            <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawEditPortionBorderAndBackground(System.Windows.Forms.PaintEventArgs)"/> method) and around the list box area (when in 
            ComboBoxStyle.Simple mode and called from the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawListPortion(System.Windows.Forms.PaintEventArgs)"/> method).
            </para>
            <para>This method uses themes to draw if necessary or calls <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawUnThemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> and 
            <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawUnThemedBorder(System.Drawing.Graphics,System.Drawing.Rectangle)"/> to draw the background and border.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDown.metroBorderColor">
            <summary>
            Draws the unthemed border of this control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>Called by <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> to draw the border when
            not in themes mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ShouldSerializeMetroBorderColor">
             <summary>
            Serialize MetroBorderColor.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetMetroBorderColor">
            <summary>
            Reset the MetroBorderColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawUnThemedBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the unthemed background of this control.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context.</param>
            <param name="rect">The <see cref="T:System.Drawing.Rectangle"/> within which to draw.</param>
            <remarks>
            <para>Called by <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawBorderAndBackground(System.Drawing.Graphics,System.Drawing.Rectangle)"/> to draw the background when
            not in themes mode.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DrawListPortion(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called from the <b>Paint</b> event handler to draw the list portion.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> from the Paint event.</param>
            <remarks>
            This method draws the list portion when in ComboBoxStyle.Simple mode.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.RefreshBackColor(System.Boolean)">
            <summary>
            Refreshes the BackColor of the control after changing 'IgnoreThemeBackground' property.
            </summary>
            <param name="ignoreThemeBackColor">Value of 'IgnoreThemeBackground' property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateScrollersFrame">
            <summary>
            Creates new instance of the scrollersFrame.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.AttachScrollersFrame(System.Windows.Forms.Control)">
            <summary>
            Attaches scrollersFrame to the PopupControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DetachScrollersFrame">
            <summary>
            Detaches scrollersFrame from the PopupControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.InitScrollersFrame">
            <summary>
            Inits the scrollers frame.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ProcessMouseMove(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Processes mouse moves on the combo-box and textbox area.
            </summary>
            <param name="e">The event args of the MouseMove event.</param>
            <param name="fromTextBox">Indicates whether this was called due to mouse move in the text area or combo.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.UpdateIsActiveState">
             <summary>
            Gets the Isactive state
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnMouseLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnMouseEnter(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
            Sends the specified message to the default windows procedure.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.MoveSelelctionInPopupControl(System.Boolean)">
            <summary>
            Moves the current selection in the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupControl"/>.
            </summary>
            <param name="up">Indicates whether to move up.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnFontChanged(System.EventArgs)">
             <summary>
            Font chnaged
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.m_nativeWindow_ImeMessageReceived(System.Object,System.EventArgs)">
            <summary>
            Fired when an IMe message is received.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.IsInitializing">
            <summary>
            Gets a value indicating whether this instance is initializing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.SuppressDropDownEvent">
            <summary>
            Indicates whether to suppress the DropDown Event
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.UseOffice2007ColorsInActiveMode">
            <summary>
            Gets or sets a value indicating whether [use office2007 colors in active mode].
            </summary>
            <value>
            <c>true</c> if [use office2007 colors in active mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.UseMetroColorsInActiveMode">
            <summary>
            Gets or sets a value indicating whether [use metro colors in active mode].
            </summary>
            <value>
            <c>true</c> if [use metro colors in active mode]; otherwise, <c>false</c>.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Tools.ComboDropDown.UseMnemonic" -->
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.CaseSensitiveAutocomplete">
            <summary>
            Indicates whether the search in autocomplete is case-sensitive.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Focused">
            <summary>
            Specifies whether the control is focused. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.RightToLeft">
            <summary>
            Gets or sets a value indicating whether control's elements are aligned to
                support locales using right-to-left fonts.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.MatchFirstCharacterOnly">
            <summary>
            This property defines the autocomplete behavior in DropDownList mode.
            </summary>
            <remarks>This property is used when the DropDownStyle is set to DropDownList only.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupControl">
            <summary>
            The <see cref="T:System.Windows.Forms.Control"/> that will be used in the drop-down portion.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.Control"/> derived instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BackColor">
            <summary>
            Gets or sets the back color. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.NumberOnly">
            <summary>
            Indicates whether users should be forced to enter numbers.
            </summary>
            <value>True to force numbers; False otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.ReadOnly">
            <summary>
            Indicates whether the text in the edit portion can be changed.
            </summary>
            <value>If True, the edit portion is not editable by the user; False otherwise.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.CharacterCasing">
            <summary>
            Specifies the ComboBoxBase control modifies the case of characters as they are typed.
            </summary>
            <value>
            <para>One of the <see cref="T:System.Windows.Forms.CharacterCasing"/> enumeration values that specifies whether the ComboBoxBase control modifies the case of characters. The default is CharacterCasing.Normal.</para>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.IgnoreThemeBackground">
            <summary>
            Indicates whether the control will ignore the theme`s background color and draw the BackColor instead.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.TextAlign">
            <summary>
            Gets or sets the alignment of text in this control.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.HorizontalAlignment"/> enumeration 
            values that specifies how text is aligned in the control. 
            The default is <b>HorizontalAlignment.Left</b>.
            </value>
            <remarks>
            You can use this property to align the text within a ComboBoxBase 
            to match the layout of text on your form. For example, if your controls 
            are all located on the right side of the form, you can set the TextAlign 
            property to <b>HorizontalAlignment.Right</b> and the text will be aligned 
            along the right side of the control instead of the default left alignment.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.ContextMenu">
            <summary>
            Gets or sets the ContextMenu. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.ForeColor">
            <summary>
            Gets or sets the ForeColor. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Border3DStyle">
            <summary>
            Gets or sets the 3D border style for the control.
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BorderSides">
            <summary>
            Gets or sets the border sides for which you want the 3D border style applied.
            </summary>
            <remarks>
            This property is used only when BorderStyle is Fixed3D.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.FlatStyle">
            <summary>
            Gets or sets the flat style appearance of the combo box control.
            </summary>
            <value>
            One of the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboFlatStyle"/> values. The default value is <b>Standard</b>.
            </value>
            <remarks>
            <para>
            When you specify <see cref="F:Syncfusion.Windows.Forms.Tools.ComboFlatStyle.System"/> and the application is run
            in Windows XP, themes will be used to draw this control.
            </para>
            <para>
            Use <see cref="P:Syncfusion.Windows.Forms.XPThemes.IsThemedOS"/> and 
            <see cref="P:Syncfusion.Windows.Forms.XPThemes.IsThemeActive"/> to determine
            if themes are on during run-time.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Style">
            <summary>
            Gets or sets an advanced appearance and behavior for this control.
            </summary>
            <value>One of the <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> values.
            Default is <b>VisualStyle.Default</b>.</value>
            <remarks>
            <para>When a non-default style is specified here, it will override the
            other settings of the control such as <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BorderSides"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.FlatStyle"/>.
            The <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.FlatBorderColor"/> is used to draw the borders for the office styles, when
            the control is not active.</para>
            <para>
            The <b>Office2003</b> style behaves the same as <b>OfficeXP</b> in non-XP systems.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DroppedDown">
            <summary>
            Indicates whether the combo box is displaying its drop-down portion.
            </summary>
            <value>True if the drop-down portion is displayed; False otherwise. The default is False.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PopupContainer">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.PopupControlContainer"/> used to host the drop-down list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DefaultSize">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.TextBox">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.TextBox"/> used to draw the editable text portion of the combo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButton">
            <summary>
            Returns the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButton"/> used to draw the drop-down portion of the combo.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownButtonHeight">
            <summary>
            Gets or sets the height of the drop-down button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.EditPortionHeight">
            <summary>
            Gets or sets the height of the edit portion.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.PreventHeightChange">
            <summary>
            Indicates whether the Height property of the control can be changed.
            </summary>
            <value>True to prevent height change; False otherwise .</value>
            <remarks>
            Note that this property will be frequently set and reset within the control layout.
            You can use this temporarily to force a particular height on the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
            <remarks>
            <para>When in <b>DropDownList</b> mode, setting this property will also validate the
            new value against the attached popup control.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.MaxLength">
            <summary>
            Gets or sets the maximum number of characters allowed in the editable portion of a combo box.
            </summary>
            <value>The maximum number of characters the user can enter.
            Default value is 32767.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownWidth">
            <summary>
            Gets or sets the drop-down's width.
            </summary>
            <remarks>
            <para>
            The value provided here will be used to determine the width of the drop-down portion.
            If you do not set a value explicitly, the width of this control will be used as the preferred width.
            </para>
            <para>To reset your settings on this property, call the <see cref="M:Syncfusion.Windows.Forms.Tools.ComboDropDown.ResetDropDownWidth"/> method.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownStyle">
            <summary>
            Gets or sets the style of the combo box.
            </summary>
            <value>
            One of the <see cref="T:System.Windows.Forms.ComboBoxStyle"/> values. 
            The default is <see cref="F:System.Windows.Forms.ComboBoxStyle.DropDown"/>.
            </value>
            <remarks>
            The <b>DropDownStyle</b> property controls the interface that is presented 
            to the user. You can enter a value that allows for a simple drop-down list box, 
            where the list always displays a drop-down list box, where the text portion is 
            not editable and you must select an arrow to view the drop-down, 
            or the default drop-down list box where the text portion is editable and the 
            user must press the arrow key to view the list. 
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.FlatBorderColor">
            <summary>
            Gets or sets the color with which the flat border should be drawn.
            </summary>
            <value>
            A color value. Default is SystemColors.ControlDark.
            </value>
            <remarks>
            This is also the color used to draw the border when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Style"/>
            property is set to <b>OfficeXP</b> or <b>Office2003</b>.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BackgroundImage">
            <summary>
            Specifies the BackgroundImage.(overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BackgroundImageLayout">
            <summary>
            Gets or sets background image layout. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.AllowQuickSelection">
            <summary>
            Gets or sets a value indicating if quick selction on mouse move is on.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.GrayOnReadOnly">
            <summary>
            Gets or sets a value indicating to show the Gary BackColor on ReadOnly is set.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.UseBackColor">
            <summary>
            Gets or sets a value to have effect of BackColor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Office2007ColorTheme">
            <summary>
            Gets or sets office 2007 color theme. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Office2010ColorTheme">
            <summary>
            Gets or sets office 2010 color theme. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.MetroColor">
            <summary>
            Gets or sets the metrocolor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Office2010ColorTable">
            <summary>
            Gets color table for Office2010 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.AllowMouseWheelSelection">
            <summary>
            Gets or sets a value indicating whether selection changing can be done using mouse wheel rotation.
            </summary>
            <value>
            	<c>true</c> if seelction can be changed using mouse wheel; otherwise, <c>false</c>.
            </value>
            <remarks>
            Instead of handling mouse wheel event and handling it, user can set this bool property as per the needs.
            This property is used to work when the dropdown is not shown and changing selection through mouse wheel.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.BorderSidesChanged">
            <summary>
            Fired when BorderSides are changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.Border3DStyleChanged">
            <summary>
            Occurs when border's 3D style is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDown">
            <summary>
            Occurs before the drop-down portion is shown.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.SelectionChangeCommitted">
            <summary>
            Occurs when the user selects a new text for the combo in one of many possible ways.
            </summary>
            <remarks>
            <para>This event will be fired for the following cases:</para>
            <list type="bullet">
            <item>
            <term>
            When the user selects a new item in the list box by clicking or pressing Enter.
            </term>
            </item>
            <item>
            <term>
            When the user Tabs out of the combo after changing the current text and Validation was successful.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownStyleChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.DropDownStyle"/> of the combo changes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.ReadOnlyChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.ReadOnly"/> property of the combo changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.IsPopUpControlType">
            <summary>
            Check whether the ComboBox is ComboDropDown or ComboBoxAdv
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.NeedLayout">
            <summary>
            Indicates whether the layout method needs to be called to layout the combo
            elements.
            </summary>
            <remarks>
            Internal method. You will not have to call this property explicitly.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.MetroBorderColor">
            <summary>
            Gets or sets the BorderColor for metro style
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboDropDown.ThemeChanged">
            <summary>
            Fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.Syncfusion#Windows#Forms#IThemedControl#ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboBoxBase.m_bAutoComplete">
            <summary>
            Indicating whether the control uses AutoComplete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.#ctor">
            <summary>
            Creates a new instance of the ComboBoxBase class.
            </summary>
            <remarks>
            <para>
            Initializing this ComboBoxBase also requires you to set the
            <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/> property of this combo box.
            </para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnDropDownCloseOnClick(Syncfusion.Windows.Forms.Tools.MouseClickCancelEventArgs)">
            <summary>
            Raises the DropDownCloseOnClick event.
            </summary>
            <param name="args">A <see cref="T:Syncfusion.Windows.Forms.Tools.MouseClickCancelEventArgs"/> that contains the event data.</param>
            <remarks>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event. <para>The OnDropDownCloseOnClick method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnDropDownCloseOnClick 
            in a derived class, be sure to call the base class's 
            OnDropDownCloseOnClick method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnSelectedIndexChanging(Syncfusion.Windows.Forms.Tools.SelectedIndexChangingArgs)">
            <summary>
            Fires <see cref="E:Syncfusion.Windows.Forms.Tools.ComboBoxBase.SelectedIndexChanging"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.GetPopupControlItemText(System.Int32)">
            <summary>
            Returns the text representation of the specified item in PopUpControl.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.IsValidIndex(System.Int32)">
            <summary>
            Indicate whether ListControl contains item with such index.
            </summary>
            <param name="index">The index.</param>
            <returns>True - if there is such item, otherwise - false.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.FindItem(System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Called to find a matching item in the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/> given 
            the prefix of the item.
            </summary>
            <param name="prefix">The prefix string.</param>
            <param name="select">Indicates whether to change the selection in the list when a match occurs.</param>
            <param name="start">The index within each list item-string, where the search begins.</param>
            <param name="ignoreCase">Indicates whether to ignore case.</param>
            <returns>The index of the matching item; -1 otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.GetListControlList">
            <summary>
            Returns the <see cref="T:System.Collections.IList"/> interface representing the item's
            collection of the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/>.
            </summary>
            <returns>An <b>IList</b> interface.</returns>
            <remarks>
            The base class version looks for the "Items" property in the attached <b>ListControl</b>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.MoveSelelctionInPopupControl(System.Boolean)">
            <summary>
            Moves the current selection in the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/>.
            </summary>
            <param name="up">Indicates whether to move up.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the Validating event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnUpdateSelectionBeforeValidate">
            <summary>
            Called to update selection before validate.
            </summary>
            <remarks>
            This is useful when you enable auto completion
            in the text area and force the list box's SelectedValue to be updated to the
            latest text value in this control's Validated event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnBeforePopup">
            <summary>
            Called before the popup gets dropped down.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.SetPopupText(System.String)">
            <summary>
            Sets the popup text.
            </summary>
            <param name="value">The value.</param>
            <remarks>Compares the new PopUpText and resets if a match is not found. </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnMouseUpOnQuickSelect">
            <summary>
            Handles the PopupCloseType of PopUpContainer based on SelectedIndex.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.IsIndexFromPointAvaillable">
            <summary>
            Indicates whether the attached ListControl has an "IndexFromPoint"
            method.
            </summary>
            <returns>True if such a method is available; False otherwise.</returns>
            <remarks>
            This control relies on the attached <b>ListControl</b> providing this method
            to support quick-selection mode. This is the mode where the user can click on the
            drop-down arrow and start selecting in the drop-down list even before mouse up.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.GetIndexFromPoint(System.Drawing.Point)">
            <summary>
            Returns the index of the item at the specified point.
            </summary>
            <param name="pointScreen">A <see cref="T:System.Drawing.Point"/> in screen coordinates.</param>
            <returns>The zero based index; -1 if the point is not over an item.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.AttachPopupControl">
            <summary>
            Called when a new <see cref="T:System.Windows.Forms.ListControl"/> gets attached
            to this ComboBoxBase using the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/> property.
            </summary>
            <remarks>
            When you override this method, make sure to call the base class for proper initialization.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.DetachPopupControl(System.Boolean)">
            <summary>
            Called when an attached <see cref="T:System.Windows.Forms.ListControl"/> is being
            detached from this combo.
            </summary>
            <param name="disposing">Indicates whether this method is called from <b>Dispose</b>.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnListMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Called when the user clicks on the associated list box.
            </summary>
            <param name="e">The MouseEventArgs from the list box's MouseUp event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ProcessPopupControlMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes the mouse move over the PopupControl.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ProcessListMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes mouse move over the list.
            </summary>
            <param name="sender">The control source of the MouseMove event.</param>
            <param name="e">The event args of the MouseMove event.</param>
            <remarks>
            This method moves the selection of the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/> in some
            cases when the mouse moves over it and also to change the Top Index of the list control appropriately
            when QuickSelection is on.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.IsTextValid(System.String)">
            <summary>
            Indicates whether the supplied text is a valid entry in the attached <see cref="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl"/>.
            </summary>
            <param name="text">The text to validate.</param>
            <returns>True if valid; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.CorrectPopupLocation(System.Drawing.Point)">
            <summary>
            Correct popup control location.
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.ListControl">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.ListControl"/> that will be used in the drop-down portion.
            </summary>
            <value>A <see cref="T:System.Windows.Forms.ListControl"/> derived instance.</value>
            <remarks>
            <para>
            Take a look at the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBase"/> class description for more information
            on requirements and usage of this list control.
            </para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.PopupControl">
            <summary>
            This will be used in the drop-down portion.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.UpdateSelectionBeforeValidate">
            <summary>
            Indicates whether the selection in the list control should be updated
            with the new text entered by the user when the control loses focus.
            </summary>
            <remarks>This property is typically used only when the list mode is set to editable (<b>DropDown</b>).</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBase.AutoComplete">
            <summary>
            Gets a value indicating whether the control uses AutoComplete.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBase.DropDownCloseOnClick">
            <summary>
            Occurs when the user clicks in the list box in the drop-down to let you
            cancel the subsequent drop-down close.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBase.SelectedIndexChanging">
            <summary>
            Occurs when the selected Index of list is about to be changed.
            Can be canceled to avoid selection of the specific item.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.ComboBoxBase.AutoCompleteChanged">
            <summary>
            Risen by <see cref="M:Syncfusion.Windows.Forms.Tools.ComboBoxBase.OnAutoCompleteChanged"/> method.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.m_ComboBoxBase">
            <summary>
            ComboBoxBase
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.ComboBoxBase)">
            <summary>
            Constructor
            </summary>
            <param name="ComboBoxBase">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MouseClickCancelEventHandler">
            <summary>
            Handles a cancelable mouse-click event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.MouseClickCancelEventArgs">
            <summary>
            Provides data for a cancelable mouse click event.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.MouseClickCancelEventArgs.#ctor(System.Drawing.Point,System.Boolean)">
            <summary>
            Creates a new instance of the MouseClickCancelEventArgs.
            </summary>
            <param name="ptScreen">The point in screen coordinates where the click occurred.</param>
            <param name="cancel">True to cancel the event; False otherwise.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.MouseClickCancelEventArgs.MouseClickPoint">
            <summary>
            Returns the point in screen coordinates where the click occurred.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.SelectedIndexChangingArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBaseDesigner">
            <summary>
            ComboDropDown Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboBaseDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBaseDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBaseDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxExt">
            <summary>
            The ComboBoxExt type will soon be replaced with the ComboBoxBase for consistency in 
            control naming in our library. 
            Please replace all occurrences of ComboBoxExt with ComboBoxBase in your application.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the CheckBoxAdvActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.InitializeActionList">
            <summary>
            Overrridden InitializeActionList.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Readonly">
            <summary>
            Gets or sets Readonly.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.GrayonReadonly">
            <summary>
            Gets or sets Readonly.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Text">
            <summary>
            Gets or sets the Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Style">
            <summary>
            Gets or sets the visual style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Office2007ColorScheme">
            <summary>
            Gets or sets the Office2007 color scheme.
            </summary>
            <value>The Office2007 color scheme.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.Office2010ColorScheme">
            <summary>
            Gets or sets the Office2010 color scheme.
            </summary>
            <value>The Office2010 color scheme.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.BorderStyle">
            <summary>
            Gets or sets the Border style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboBoxBaseActionList.DropDownStyle">
            <summary>
            Gets or sets the Dropdown style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboFlatStyle">
            <summary>
            Specifies the appearance of the <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBase"/> control.
            </summary>
            <remarks>
            <para>
            This enumeration is used by the <see cref="P:Syncfusion.Windows.Forms.Tools.ComboDropDown.FlatStyle"/> property.
            </para>
            <para>
            Use <see cref="P:Syncfusion.Windows.Forms.XPThemes.IsThemedOS"/> and 
            <see cref="P:Syncfusion.Windows.Forms.XPThemes.IsThemeActive"/> to determine
            if Themes are on during run-time.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboFlatStyle.Flat">
            <summary>
            The control and the button appear flat.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboFlatStyle.Standard">
            <summary>
            The control and the button appear three-dimensional.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboFlatStyle.System">
            <summary>
            The appearance is determined by the user's operating system. 
            </summary>
            <remarks>
            If XP, then themes will be used to draw this control. For other operating systems,
            the behavior will be that of the <see cref="F:Syncfusion.Windows.Forms.Tools.ComboFlatStyle.Standard"/> style. This
            setting will also use XP Themes to draw the combo when an XP Theme is loaded in the OS.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DropDownNativeWindow">
            <summary>
            This class used for additional handling messages, that are sent
            to DropDown's child controls.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DropDownNativeWindow.m_cmb">
            <summary>
            ComboDropDown control, listen to messages for.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownNativeWindow.#ctor(Syncfusion.Windows.Forms.Tools.ComboDropDown)">
            <summary>
            Default Constructor.
            </summary>
            <param name="value"></param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DropDownNativeWindow.ImeMessageReceived">
            <summary>
            Fired when IME messages are received
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.m_ComboDropDown">
            <summary>
            ComboDropDown
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.ComboDropDown)">
            <summary>
            Constructor
            </summary>
            <param name="ComboDropDown">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.DropDownButton">
            <summary>
            Class that represents the drop-down portion of a <see cref="T:Syncfusion.Windows.Forms.Tools.ComboBoxBase"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates an instance of the DropDownButton class.
            </summary>
            <param name="control">The control that is using this class to draw the drop-down portion.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.ResetMetroArrowColor">
            <summary>
            Reset MetroArrowColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.ShouldSerializeMetroArrowColor">
            <summary>
            To serialize MetroArrowColor
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.DropDownButton._touchmode">
             <summary>
            Gets the touchmode value.
             </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnMouseDown(System.EventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The MouseDown method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnMouseDown 
            in a derived class, be sure to call the base class's 
            OnMouseDown method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.InvalidateBounds(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified portion in the underlying control.
            </summary>
            <param name="bounds">The area to invalidate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnPaint(System.Drawing.Graphics)">
            <summary>
            Call this method from the control's OnPaint method.
            </summary>
            <param name="g">The Graphics context using which to draw the button.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.CancelMouseTrack">
            <summary>
            Cancels any mouse tracking.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnMouseMove(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Call this method from the control's OnMouseMove to inform this class of mouse move events.
            </summary>
            <param name="e">The MouseEventArsg in the OnMouseMove method.</param>
            <param name="useFullControlBounds">Indicates whether the full control bounds should be considered 
            part of the button. Useful in a combo in list mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnMouseLeave(System.EventArgs)">
            <summary>
            Call this method from the control's OnMouseLeave to inform this class of mouse leave events.
            </summary>
            <param name="e">The EventArsg in the OnMouseLeave method.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnMouseDown(System.Windows.Forms.MouseEventArgs,System.Boolean)">
            <summary>
            Call this method from the control's OnMouseDown to inform this class of mouse down events.
            </summary>
            <param name="e">The MouseEventArsg in the OnMouseDown method.</param>
            <param name="useFullControlBounds">Indicates whether the full control bounds should be considered 
            part of the button. Useful in a combo in list mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.DropDownButton.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Call this method from the control's OnMouseUp to inform this class of mouse up events.
            </summary>
            <param name="e">The MouseEventArsg in the OnMouseUp method.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.MetroArrowColor">
            <summary>
            Gets/Sets Metro Arrow Color
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.DropDownButton.MouseDown">
            <summary>
            Fired when the user performs a mouse down in the drop-down area.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.ThemesEnabled">
            <summary>
            Indicates whether themes is currently enabled for this control.
            </summary>
            <remarks>This property doesn't check whether themes are currently enabled in the OS.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.IsControlActive">
            <summary>
            Indicates whether owner control is active.
            </summary>
            <value>
            	<c>true</c> if this instance is control active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Bounds">
            <summary>
            Set the bounds for the dropdown button. You typically should do this from the control's Layout event / method.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.IsActive">
            <summary>
            Indicates whether the button is active. Will be referred to when drawn hot with office style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.IsDroppedDown">
            <summary>
            Indicates whether the drop-down is showing. Will be referred to when drawn hot with office style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Hot">
            <summary>
            Indicates whether the button should be drawn hot.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.FlatStyle">
            <summary>
            Gets or sets the ComboFlatStyle with which to draw.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Style">
            <summary>
            Gets or sets the VisualStyle with which to draw.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Office2010ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.MetroColorTable">
            <summary>
            Gets color table for Metro visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Enabled">
            <summary>
            Indicates whether the buttons should be drawn enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.Pushed">
            <summary>
            Indicates whether the button is currently pushed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.DropDownButton.SuspendInvalidates">
            <summary>
            Gets or sets a value indicating whether invalidating of owner control is suspended.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboText">
            <summary>
            The Class that represents the TextBox placed inside the ComboBox
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboText.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboText.AutoSize">
            <summary>
            Gets or sets a value indicating whether the height of the TextBoxExt automatically
            adjusts when the font assigned to the control is changed.
            </summary>
            <returns> true if the height of the control automatically adjusts when the font is changed; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.m_ComboText">
            <summary>
            ComboText
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            Constructor
            </summary>
            <param name="ComboText">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboTextAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboDropDownDesigner">
            <summary>
            ComboDropDown Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ComboDropDownDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDownDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the CheckBoxAdvActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.InitializeActionList">
            <summary>
            Overrridden InitializeActionList.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Readonly">
            <summary>
            Gets or sets Readonly.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.GrayonReadonly">
            <summary>
            Gets or sets Readonly.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Text">
            <summary>
            Gets or sets the Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Style">
            <summary>
            Gets or sets the visual style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Office2007ColorScheme">
            <summary>
            Gets or sets the Office2007 color scheme.
            </summary>
            <value>The Office2007 color scheme.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.Office2010ColorScheme">
            <summary>
            Gets or sets the Office2010 color scheme.
            </summary>
            <value>The Office2010 color scheme.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.BorderStyle">
            <summary>
            Gets or sets the Border style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ComboDropDownActionList.DropDownStyle">
            <summary>
            Gets or sets the Dropdown style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ComboDropDownWeakContainer">
            <summary>
            Summary description for ComboDropDownWeakContainer.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DelayedWaitCursor">
            <summary>
            DelayedWaitCursor listens to OperationFeedback events and changes
            the cursor if a certain number of ticks have elapsed since the start
            of the operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedWaitCursor.#ctor">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Windows.Forms.DelayedWaitCursor"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedWaitCursor.#ctor(Syncfusion.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.DelayedWaitCursor"/> instance.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> interface.
            </param>
            <remarks>
            Adds an <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> that this object will listen to and
            provide user feedback for.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedWaitCursor.OnProgress(Syncfusion.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Overriden. Displays a wait cursor.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.ComponentModel.OperationFeedbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DelayedStatusDialog">
            <summary>
            DelayedStatusDialog listens to OperationFeedback events and displays
            a modeless status dialog if a certain number of ticks have elapsed since the start
            of the operation.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedStatusDialog.#ctor">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Windows.Forms.DelayedStatusDialog"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedStatusDialog.#ctor(Syncfusion.ComponentModel.IOperationFeedbackProvider)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.DelayedStatusDialog"/> instance.
            </summary>
            <param name="provider">An object that implements the <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> interface.
            </param>
            <remarks>
            Adds an <see cref="T:Syncfusion.ComponentModel.IOperationFeedbackProvider"/> that this object will listen to and
            provide user feedback for.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedStatusDialog.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedStatusDialog.OnProgress(Syncfusion.ComponentModel.OperationFeedbackEventArgs)">
            <summary>
            Overriden. Displays a dialog or wait cursor during progress and closes the dialog when operation is finished.
            </summary>
            <param name="e">An <see cref="T:Syncfusion.ComponentModel.OperationFeedbackEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowDialogPercentRule">
            <summary>
            The progress percentage value to be used for displaying a dialog bar. A dialog bar
            is displayed when the operation's progress in percentage is less than the specified value
            at the time progress should be displayed.
            </summary>
            <remarks>
            Typical values are 25 for <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowDialogPercentRule"/>
            and 75 for <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule"/>.
            <para/>
            In this example, if the operation takes longer than two seconds and after two seconds
            only 10% of the operation have completed, a dialog is displayed. If on the other side
            after two seconds more than 25% have been completed and less than 75%, a wait cursor is displayed.
            If more than 75% have been completed, no visual feedback at all will be given.
            </remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule">
            <summary>
            The progress percentage value to be used for displaying a wait cursor. A wait cursor 
            is shown when the operation's progress in percentage is less than the specified value
            at the time progress should be displayed.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule"/> is ignored if
            <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursor"/> is false.
            <para/>
            Typical values are 25 for <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowDialogPercentRule"/>
            and 75 for <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule"/>.
            <para/>
            In this example, if the operation takes longer than two seconds and after two seconds
            only 10% of the operation have completed, a dialog is displayed. If on the other side
            after two seconds more than 25% have been completed and less than 75%, a wait cursor is displayed.
            If more than 75% have been completed, no visual feedback at all will be given.
            </remarks>
            <seealso cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowDialogPercentRule"/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursor">
            <summary>
            Indicates whether wait cursors should be shown.
            </summary>
            <remarks>
            <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursorPercentRule"/> is ignored if
            <see cref="P:Syncfusion.Windows.Forms.DelayedStatusDialog.ShowWaitCursor"/> is False.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DelayedStatusDialog.StatusDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DelayedStatusDialog.StatusDialog.CreateParams">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DragHelper">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragHelper.lastDragDropEffect">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragHelper.dragWindow">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragHelper.m_bIsDragging">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragHelper.m_parentCursor">
            <summary>Cursor of the parent object.</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.#ctor">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.StartDrag(System.Drawing.Bitmap,System.Drawing.Point,System.Windows.Forms.DragDropEffects)">
            <summary></summary>
            <param name="bmp"/>
            <param name="startPoint"/>
            <param name="effects"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.DoDrag(System.Drawing.Point,System.Windows.Forms.DragDropEffects)">
            <summary></summary>
            <param name="p"/>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.CancelDrag">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.EndDrag">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.CheckDragCursor(System.Windows.Forms.DragDropEffects)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragHelper.StopDrag">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DragHelper.DragWindow">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DragHelper.LastDragDropEffect">
            <summary></summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DragHelper.IsDragging">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragWindow.m_parent">
            <summary>
            Parent control supporting Drag operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DragWindow.bShiftCalculated">
            <summary>
            Indicates whether shift value is calculated.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragWindow.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragWindow.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
                Handles the WM_SETCURSOR message.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DragWindow.OnSetCursor(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DragWindow.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.DragWindow.DragParent">
            <summary>
            Gets / sets the parent control supporting drag operation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IDragDispatcher">
            <summary>
            Interface for implementing by parent control supporting Drag operation.
            Methods of this interface invoke corresponding drag methods of parent control.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.Tools.EditableList.ItemChanging"/> event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs.m_iLastSelectedIndex">
            <summary>
            The last selected index for the edited row in the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new instance of the ListBoxTextChangingEventArgs class.
            </summary>
            <param name="pNewText">The new text after the change.</param>
            <param name="pSelectedIndex">Last selected index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the ListBoxTextChangingEventArgs class.
            </summary>
            <param name="pNewText">The new text after the change.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs.NewText">
            <summary>
            Returns the new text for the edited row in the list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs.LastSelectedIndex">
            <summary>
            Gets the last selected index for the edited row in the list.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.Tools.EditableList.ItemChanging"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.EditableList">
            <summary>
            A <see cref="T:System.Windows.Forms.UserControl"/> that provides you an editable <see cref="T:System.Windows.Forms.ListBox"/>
            with a <see cref="T:System.Windows.Forms.TextBox"/> and <see cref="T:System.Windows.Forms.Button"/>
            on the current row.
            </summary>
            <remarks>
            <para>
            During design-time (and in code) you can access the list box, text box and button components of this
            control using the <see cref="T:System.Windows.Forms.ListBox"/>, <see cref="T:System.Windows.Forms.TextBox"/> and <see cref="P:Syncfusion.Windows.Forms.Tools.EditableList.Button"/>
            properties. You can add certain items to the list and set some properties on the textbox and button.
            </para>
            <para>
            The <see cref="E:Syncfusion.Windows.Forms.Tools.EditableList.ButtonClick"/> event is thrown when the user clicks the button
            and <see cref="E:Syncfusion.Windows.Forms.Tools.EditableList.ItemChanging"/> event is thrown when the user completes editing an item.
            </para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.scrollFrame">
            <summary>
            Holds ScrollerFrame for ListBox
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.metroColorTbl">
            <summary>
            Holds MetroColorTable for ScrollerFrame
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.listBox">
            <summary>
            The <see cref="T:System.Windows.Forms.ListBox"/> used by the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.textBox">
            <summary>
            The <see cref="T:System.Windows.Forms.TextBox"/> used by the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.button">
            <summary>
            The <see cref="T:System.Windows.Forms.Button"/> used by the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.m_nEditedItem">
            <summary>
            Index of the item, that is being edited.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Syncfusion.Windows.Forms.Tools.EditableList.bIgnoreIndexChanging" -->
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.LISTITEMHEIGHT">
            <summary>
            Default height of the ListBoxItem
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.LISTBUTTONHEIGHT">
            <summary>
            Default height of the ListBoxItem
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.Tools.EditableList"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableList.style">
            <summary>
            Holds the Visual Style of EditableList
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ResetStyle">
            <summary>
            Reset the Style
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ShouldSerializeStyle">
            <summary>
            Serializes the Style
            </summary>
            
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ShouldSerializeListBoxTextAlignment">
            <summary>
            Indicates, whether <see cref="P:Syncfusion.Windows.Forms.Tools.EditableList.ListBoxTextAlignment"/> property value should be serialized.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ResetTextAlignment">
            <summary>
            Resets the <see cref="T:Syncfusion.Windows.Forms.Tools.TextAlignment"/> property to the default value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.StartEditing">
            <summary>
            Called just before a row goes into editing mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.EndEditing(System.Boolean)">
            <summary>
            Called just after a row comes out of editing mode.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.OnItemChanging(Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs)">
            <summary>
            Raises the ItemChanging event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.Tools.ListBoxTextChangingEventArgs"/> that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The OnItemChanging method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnItemChanging 
            in a derived class, be sure to call the base class's 
            OnItemChanging method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.OnBeforeListItemEdit(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the BeforeListItemEdit event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The OnBeforeListItemEdit method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnBeforeListItemEdit 
            in a derived class, be sure to call the base class's 
            OnBeforeListItemEdit method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableList.OnButtonClick(System.EventArgs)">
            <summary>
            Raises the ButtonClick event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks><para>Raising an event invokes the event handler 
            through a delegate. For more information, see Raising 
            an Event.</para> <para>The OnButtonClick method also 
            allows derived classes to handle the event without 
            attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnButtonClick 
            in a derived class, be sure to call the base class's 
            OnButtonClick method so that registered 
            delegates receive the event.</para>
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.EditableList.ButtonClick">
            <summary>
            Fired when the user clicks on the button.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.EditableList.ItemChanging">
            <summary>
            Fired when the user completes editing a row.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.EditableList.BeforeListItemEdit">
            <summary>
            Raised before a list item is edited.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.EditableList.ListItemDraw">
            <summary>
            Raised when a list item is to be drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.BeforeTouchSize">
            <summary>
            Gets/Sets Control size before touch enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.ListBox">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.ListBox"/> associated with this control.
            </summary>
            <remarks>
            You should access the list box to add items to it.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.TextBox">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.TextBox"/> associated with this control.
            </summary>
            <remarks>
            This textbox represents the textbox used in the editable current row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.Button">
            <summary>
            Returns the <see cref="T:System.Windows.Forms.Button"/> associated with this control.
            </summary>
            <remarks>
            This button represents the button drawn at the right of the current row.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.WantButton">
            <summary>
            Indicates whether you want the button to be shown to the right while editing.
            </summary>
            <value>True if button should be shown; False otherwise. Default is True.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.Style">
            <summary>
            Gets or sets the Visual Style for the EditableList
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.SetFocus">
            <summary>
            Gets/Sets whether to draw focus when item is selected.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.Editing">
            <summary>
            Indicates whether the current row is being edited.
            </summary>
            <value>
            True to indicate its being edited; False otherwise.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableList.ListBoxTextAlignment">
            <summary>
            Gets or sets the list box text alignment.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.EditableListAccessibility">
            <summary>
             Provides information about a control that can be used by an accessibility application.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.m_EditableList">
            <summary>
            EditableList
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.#ctor(Syncfusion.Windows.Forms.Tools.EditableList)">
            <summary>
            Constructor
            </summary>
            <param name="EditableList">The RibbonControlAdv instance.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves the child object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>An RibbonControlAdvAccessibility that represents the child object at the given screen coordinates.
            This method returns the calling object if the object itself is at the location specified.
            Returns null if no object is at the tested location.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.Bounds">
            <summary>
            Bounds of the Control
            </summary>
            <returns>The accessible object bounds.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.Role">
            <summary>
            Gets the role for the RibbonControlAdv. This is used by accessibility programs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.Name">
            <summary>
            Gets or sets the accessible object name
            </summary>
            <returns>The accessible object name.</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListAccessibility.Description">
            <summary>
            Gets the description of the RibbonControlAdvAccessibility
            </summary>
            <returns> A string describing the RibbonControlAdvAccessibility.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.EditableListDesigner">
            <summary>
            FolderBrowser Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.EditableListDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableListDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.CustomListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
             <summary>
            
             </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.CustomListBox.SetFocus">
            <summary>
            Gets/Sets whether to draw focus when item is selected.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.EditableListActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.EditableListActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the CheckBoxAdvActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListActionList.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListActionList.Text">
            <summary>
            Gets or sets the Text
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListActionList.Borderstyle">
            <summary>
            Gets or sets the border style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListActionList.Autoscroll">
            <summary>
            Gets or sets the auoscroll.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.EditableListActionList.Listbox">
            <summary>
            Gets or sets listbox text alignment
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowser">
             <summary>
             The FolderBrowser component provides a convenient and easy to use object oriented wrapper for the
             Win32 Shell folder browser API.
             </summary>
             <remarks>
             The FolderBrowser class completely abstracts the various complex Shell API functions,
             structures and callback routines required for invoking the folder selection dialog and allows
             you to work with a more .NET-centric programming model consisting of aptly named properties, methods and
             events. Most convenient of all, you no longer need to allocate PIDLs as specifying
             the location of the rootfolder; browsing is now a simple task of setting the
             FolderBrowser.StartLocation property from one of the values provided in the FolderBrowserFolder
             enumeration. Using the FolderBrowser class to browse the Shell folders is simple and
             to the .NET developer a completely familiar issue of instantiating the FolderBrowser
             component, setting the appropriate properties and events on it and invoking the
             <see cref="M:Syncfusion.Windows.Forms.FolderBrowser.ShowDialog"/> method. For more detailed information on the Shell APIs refer
             to the Platform SDK documentation on the SHBrowseForFolder method.
             </remarks>
             <example>
             The following code creates an instance of the FolderBrowser component, sets the folder dialog start location 
             and styles and invokes the FolderBrowser.ShowDialog() method: 
             
             <coderef file="Shared\Samples\FolderBrowserDemo\CS\Form1.cs" name="FolderBrowser" lang="C#"><code lang="C#">
            		private void ShowFolderBrowserDialog()
            		{
            			// Create the FolderBrowser component:
            			this.folderBrowser1 = new Syncfusion.Windows.Forms.FolderBrowser();
            
            			// Initialize the FolderBrowser component:
            			this.folderBrowser1.Description = "Syncfusion FolderBrowser";
            			this.folderBrowser1.StartLocation = Syncfusion.Windows.Forms.FolderBrowserFolder.Desktop;
            			this.folderBrowser1.Style = 
            				( Syncfusion.Windows.Forms.FolderBrowserStyles.RestrictToFilesystem | 
            				Syncfusion.Windows.Forms.FolderBrowserStyles.BrowseForComputer );
            
            			// Provide a handler for the FolderBrowserCallback validation event:
            			this.folderBrowser1.FolderBrowserCallback += new Syncfusion.Windows.Forms.FolderBrowserCallbackEventHandler(this.folderBrowser1_BrowseCallback);
            
            			// Display the folderbrowser dialog:
            			if (this.folderBrowser1.ShowDialog() == DialogResult.OK)
            				this.selectedFolder = this.folderBrowser1.DirectoryPath;
            		}</code></coderef>
             
             <coderef file="Shared\Samples\FolderBrowserDemo\CS\Form1.cs" name="FolderBrowserCallback" lang="C#"><code lang="C#">
            		// Event handler for the FolderBrowser.FolderBrowserCallback validation event.
            		// This handler is functionally equivalent of the Win32 BrowseCallbackProc callback function:
            		private void folderBrowser1_BrowseCallback(object sender, Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs e)
            		{
            			this.label1.Text = String.Format("Event: {0}, Path: {1}", e.FolderBrowserMessage, e.Path);
            
            			if (e.FolderBrowserMessage == FolderBrowserMessage.ValidateFailed)
            			{
            				e.Dismiss = e.Path != "NONE";
            			}
            		}</code></coderef>
             
             
             <coderef file="Shared\Samples\FolderBrowserDemo\VB\Form1.vb" name="FolderBrowser" lang="VB"><code lang="VB">
                    Private Sub ShowFolderBrowserDialog()
            
                        ' Create an instance of the FolderBrowser component:
                        Me.folderBrowser1 = New Syncfusion.Windows.Forms.FolderBrowser(Me.components)
            
                        ' Set the descriptor text that will appear on the folder dialog:
                        Me.folderBrowser1.Description = "Syncfusion FolderBrowser"
            
                        ' Specify the start location:
                        Me.folderBrowser1.StartLocation = Syncfusion.Windows.Forms.FolderBrowserFolder.Desktop
            
                        ' Specify the styles for the folder browser dialog:
                        Me.folderBrowser1.Style = Syncfusion.Windows.Forms.FolderBrowserStyles.RestrictToFilesystem Or Syncfusion.Windows.Forms.FolderBrowserStyles.BrowseForComputer
            
                        ' Provide a handler for the FolderBrowserCallback validation event:
                        AddHandler Me.folderBrowser1.FolderBrowserCallback, New Syncfusion.Windows.Forms.FolderBrowserCallbackEventHandler(AddressOf folderBrowser1_BrowseCallback)
            
                        ' Show the folder browser dialog:
                        Try
                            If folderBrowser1.ShowDialog() = DialogResult.OK Then
                                Me.label1.Text = [String].Concat("Selection: ", folderBrowser1.DirectoryPath)
                            End If
                        Catch ex As Exception
                            Console.WriteLine(ex.ToString())
                        End Try
            
                    End Sub</code></coderef>
                    
             <coderef file="Shared\Samples\FolderBrowserDemo\VB\Form1.vb" name="FolderBrowserCallback" lang="VB"><code lang="VB">
                    ' Event handler for the FolderBrowser.FolderBrowserCallback validation event.
                    ' This handler is functionally equivalent of the Win32 BrowseCallbackProc callback function:
                    Private Sub folderBrowser1_BrowseCallback(ByVal sender As Object, ByVal e As FolderBrowserCallbackEventArgs)
            
                        Me.label1.Text = String.Format("Event: {0}, Path: {1}", e.FolderBrowserMessage, e.Path)
                        If (e.FolderBrowserMessage = FolderBrowserMessage.ValidateFailed) Then
                            e.Dismiss = (e.Path Is "NONE") = False
                        End If
            
                    End Sub</code></coderef>
            
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.#ctor">
            <summary>
            Overloaded. Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> component.
            </summary>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a new instance of the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> and initializes it with the container.
            </summary>
            <param name="container">An object implementing IContainer that will host this instance 
            of the FolderBrowser component.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.ValidateProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Validates the procedure.
            </summary>
            <param name="hwnd"></param>
            <param name="uMsg"></param>
            <param name="lParam"></param>
            <param name="lpData"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.OnFolderBrowserCallback(Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback"/> event.
            </summary>
            <param name="arg">A <see cref="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.ShowDialog">
            <summary>
            Overloaded. Displays the folder browser dialog with a default owner.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the folder dialog; DialogResult.Cancel otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowser.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the folder browser dialog with the specified owner.
            </summary>
            <param name="owner">A top-level window that will serve as the owner for the dialog.</param>
            <returns>DialogResult.OK if the user clicks OK in the folder dialog; DialogResult.Cancel otherwise.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback">
            <summary>
            Occurs when an event within the folder browser dialog triggers a call to the validation callback.
            </summary>
            <remarks>
            <seealso cref="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventHandler"/>
            </remarks>		
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.Style">
            <summary>
            Gets or sets the options for the folder browser dialog.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.FolderBrowserStyles"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.DirectoryPath">
            <summary>
            Retrieves the location of the selected folder.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.StartLocation">
            <summary>
            Gets or sets the start location for the folder browser dialog.
            </summary>
            <remarks>
            The StartLocation property is the functional equivalent of the Win32 PIDLs.
            </remarks>
            <value>A <see cref="T:Syncfusion.Windows.Forms.FolderBrowserFolder"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.CustomStartLocation">
            <summary>
            Gets or sets custom start location for showing dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.SelectLocation">
            <summary>
            Gets or sets selected location for showing dialog.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowser.Description">
            <summary>
            Gets or sets the text displayed above the tree control in the folder browser dialog.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserMessage">
            <summary>
            Defines constants used by the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> component.
            </summary>
            <remarks>
            The FolderBrowserMessage enumeration specifies constants that define the event that 
            triggered the <see cref="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback"/> event to occur.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserMessage.Initialized">
            <summary>
            Indicates that the browse dialog box has finished initializing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserMessage.SelChanged">
            <summary>
            Indicates that the selection has changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserMessage.ValidateFailed">
            <summary>
            Indicates that the user typed an invalid name into the edit box.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventHandler">
            <summary>
            Handles the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> component's <see cref="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs"/> value that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState">
            <summary>
            Specifies constants that defines the folderbrowser dialog state.
            </summary>
            <remarks>
            Enumeration used for setting the folderbrowser dialog's state from the <see cref="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback"/> event handler.
            For detailed information on the folder browser callback function, refer to the Platform SDK 
            documentation on the BrowseCallbackProc function.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.None">
            <summary>
            Default State.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.EnableOK">
            <summary>
            Enables the OK button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.DisableOK">
            <summary>
            Disables the OK button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.SetExpanded">
            <summary>
            Specifies a path to expand in the Browse dialog box. The path can be set through the 
            FolderBrowserCallbackEventArgs.BrowseCallbackText property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.SetOKText">
            <summary>
            Sets the text to be displayed on the OK button. The text can be set through the 
            FolderBrowserCallbackEventArgs.BrowseCallbackText property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.SetSelection">
            <summary>
            Selects the specified folder. The folder's path can be set through the 
            FolderBrowserCallbackEventArgs.BrowseCallbackText property.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserCallbackSetState.SetStatusText">
            <summary>
            Sets the text to be displayed on the OK button. The text can be set through the 
            FolderBrowserCallbackEventArgs.BrowseCallbackText property. This state is inapplicable 
            with the new dialog style.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserDesigner">
            <summary>
            FolderBrowser Designer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserDesigner.actionLists">
            <summary>
            Designer ActionList collection
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowserDesigner.#ctor">
            <summary>
             Initializes a new instance of the CheckBoxAdvDesigner class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserDesigner.ActionLists">
            <summary>
            Gets a value indication the designer action
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs">
            <summary>
            Provides data for the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> component's FolderBrowserCallback event. 
            </summary>	
            <remarks>
            The <see cref="E:Syncfusion.Windows.Forms.FolderBrowser.FolderBrowserCallback"/> event occurs when an event within the folder browser dialog 
            triggers a call to the validation callback. Handling this event allows you to implement the 
            functional equivalent of the BrowseCallbackProc application-defined callback function. 
            The FolderBrowserCallbackEventArgs properties provide information specific to the event.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.#ctor(System.Windows.Forms.NativeWindow,Syncfusion.Windows.Forms.FolderBrowserMessage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs"/> class.
            </summary>
            <param name="window">A NativeWindow value that represents the window handle of the folderbrowser dialog.</param>
            <param name="browseForFolderMessage">A <see cref="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserMessage"/> value that identifies the event.</param>
            <param name="path">A String value that specifies the valid / invalid folder name.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.Window">
            <summary>
            Returns the window handle of the browse dialog box.
            </summary>
            <value>A NativeWindow value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.Path">
            <summary>
            Returns the valid / invalid folder name.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserMessage">
            <summary>
            Returns a value identifying the event.
            </summary>
            <value>A <see cref="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserMessage"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.Dismiss">
            <summary>
            Indicates whether the dialog is either dismissed or retained depending on this value.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserCallbackSetState">
            <summary>
            Gets / sets the folder browser dialog's state.
            </summary>
            <value>A <see cref="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserCallbackSetState"/> value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.BrowseCallbackText">
            <summary>
            Gets / sets the contextual string depending upon the value of the <see cref="P:Syncfusion.Windows.Forms.FolderBrowserCallbackEventArgs.FolderBrowserCallbackSetState"/> property.
            </summary>
            <value>A String value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserFolder">
            <summary>
            Specifies constants that define the location of the root folder in the folder browser dialog.
            </summary>
            <remarks>
            The FolderBrowserFolder enumeration specifies the location of the root folder from which 
            the <see cref="T:Syncfusion.Windows.Forms.FolderBrowser"/> component will start browsing. Only the specified folder 
            and folders beneath it in the namespace hierarchy will appear in the dialog. This 
            enumerator provides a simple way to set the ITEMIDLIST structure (PIDL) for the folder 
            browser dialog. For more information on the functional significance of these values
            please refer to the Platform SDK documentation on the Shell API and the CSIDL Values.
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Desktop">
            <summary>
            Windows desktop virtual folder that is the root of the name space.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Internet">
            <summary>
            Virtual folder that represents the Internet.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Programs">
            <summary>
            File system directory that contains the user's program groups.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Controls">
            <summary>
            Virtual folder that contains icons for Control Panel applications. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Printers">
            <summary>
            Virtual folder that contains installed printers. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Personal">
            <summary>
            File system directory that serves as a common repository for documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Favorites">
            <summary>
            File system directory that serves as a common repository for the user's favorite items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Startup">
            <summary>
            File system directory that corresponds to the user's Startup program group.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Recent">
            <summary>
            File system directory that contains the user's most recently used documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.SendTo">
            <summary>
            File system directory that contains Send To menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.BitBucket">
            <summary>
            Virtual folder that contains the objects in the user's Recycle Bin.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.StartMenu">
            <summary>
            File system directory that contains Start Menu items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.MyDocuments">
            <summary>
            Virtual folder that contains the objects in the user's My Documents folder.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.MyMusic">
            <summary>
            File system directory that serves as a common repository for music files.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.MyVideo">
            <summary>
            File system directory that serves as a common repository for video files.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.DesktopDirectory">
            <summary>
            File system directory used to physically store file objects on the desktop.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.MyComputer">
            <summary>
            My Computer virtual folder that contains everything on the local computer: storage devices, printers and Control Panel.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.NetworkNeighborhood">
            <summary>
            Network Neighborhood virtual folder that represents the root of the network namespace hierarchy. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.NetHood">
            <summary>
            A file system folder that contains the link objects that can exist in the My Network Places virtual folder. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Fonts">
            <summary>
            Virtual folder that contains fonts. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Templates">
            <summary>
            File system directory that serves as a common repository for document templates. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.MyPictures">
            <summary>
            My Pictures folder.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.ProgramFiles">
            <summary>
            Program files folder
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonDocuments">
            <summary>
            File system directory that contains documents that are common to all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonAdminTools">
            <summary>
            File system directory that contains administrative tools for all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.AdminTools">
            <summary>
             File system directory used to store administrative tools for an individual user.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.NetAndDialUpConnections">
            <summary>
            Virtual folder that contains network and dial-up connections.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonMusic">
            <summary>
            My Music folder for all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonPictures">
            <summary>
            My Pictures folder for all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonVideo">
            <summary>
            My Video folder for all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.Resources">
            <summary>
            System resource directory.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.ResourcesLocalized">
            <summary>
            Localized resource directory.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CommonOemLinks">
            <summary>
            Folder containing links to OEM specific applications for all users.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CDBurnArea">
            <summary>
            File system folder used to hold data for burning to a CD.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.ComputersNearMe">
            <summary>
            Computers Near Me folder.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.CustomStartLocation">
            <summary>
            Use custom start folder (<see cref="P:Syncfusion.Windows.Forms.FolderBrowser.CustomStartLocation"/>).
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.FlagPerUserInit">
            <summary>
            Combine this flag with the desired CSIDL_ value to indicate per-user initialization. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.FlagNoAlias">
            <summary>
            Combine this flag with the desired CSIDL_ value to force a non-alias version of the PIDL. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.FlagDontVerify">
            <summary>
            Combine this flag with the desired CSIDL_ value to return an unverified folder path. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.FlagCreate">
            <summary>
            Combine this flag with the desired CSIDL_ value to force the creation of the associated folder. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserFolder.FlagMask">
            <summary>
            Mask for all possible CSIDL flag values.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FolderBrowserStyles">
            <summary>
            Specifies constants that define the styles for the folder browser dialog.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.FolderBrowserStyles"/> enumeration specifies the options for the folder browser dialog. 
            For more detailed information, refer to the Platform SDK documentation on the 
            Win32 BROWSEINFO structure.
            <para>This enumeration has a FlagsAttribute attribute that allows a bitwise combination of its member values.</para>
            </remarks>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.RestrictToFilesystem">
            <summary>
            Restricts selection to file system directories.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.RestrictToDomain">
            <summary>
            Excludes network folders below the domain level.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.StatusText">
            <summary>
            Includes a status area in the dialog box. The status text can be specified in the FolderBrowserCallback event handler.
            This style does not apply to the new style dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.RestrictToSubfolders">
            <summary>
            Returns only file system ancestors.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.ShowTextBox">
            <summary>
            Displays a textbox control in the folder browser dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.Validate">
            <summary>
            Typing an invalid name in the textbox will trigger the FolderBrowser's FolderBrowserCallback event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.NewDialogStyle">
            <summary>
            Uses the new resizable folder selection dialog.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.UAHint">
            <summary>
            Adds a usage hint to the folder dialog. Valid only with the NewDialogStyle flag.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.AllowUrls">
            <summary>
            Displays URLs. The NewDialogStyle and BrowseForEverything values must be set along 
            with this flag. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.BrowseForComputer">
            <summary>
            Displays only computers.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.BrowseForPrinter">
            <summary>
            Displays only printers.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.BrowseForEverything">
            <summary>
            Displays files as well as folders.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.ShowShares">
            <summary>
            Displays shareable resources existing on remote systems.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.FolderBrowserStyles.ShowAdministrativeShares">
            <summary>
            Displays administrative shares existing on remote systems.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.FolderBrowserActionList">
            <summary>
            CheckBoxAdvActionList class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.FolderBrowserActionList.#ctor(System.ComponentModel.IComponent)">
            <summary>
            Initializes a new instance of the CheckBoxAdvActionList class.
            </summary>
            <param name="component"> Represents component</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FolderBrowserActionList.Style">
            <summary>
            Gets or sets the options style.
            </summary>
            <value>The style.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.FolderBrowserActionList.StartLocation">
            <summary>
            Gets or sets the start location
            </summary>
            <value>The style.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.FocuslessListBox">
            <summary>
            Implements a list box that can be displayed in a drop-down window for 
            a combo box or dropdown menus. It lets you select items and scroll the
            listbox without setting the focus to the listbox.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.FocuslessListBox"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.OnTimerEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of an internal
            timer that is started when the user has pressed the mouse down.
            </summary>
            <param name="sender">The source of the event.&gt;</param>
            <param name="e">The <see cref="T:System.EventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.FocuslessListBox.SetRedraw(System.Boolean)">
            <summary>
            Sends WM_SETREDRAW message to the window.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart">
            <summary>
            Implements the list box that can be displayed in a drop-down window for 
            a combo box. Handles autoscrolling and resize to fit contents.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart"/> control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.OnTimerEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:System.Windows.Forms.Timer.Tick"/> event of an internal
            timer that is started when the user has pressed the mouse down.
            </summary>
            <param name="sender">The source of the event.&gt;</param>
            <param name="e">The <see cref="T:System.EventArgs"/> with event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.GetOptimalWidth">
            <summary>
            Overloaded. Calculates optimal width for this list box based on current items.
            </summary>
            <returns>The width in pixels large enough so that no item text needs to be clipped.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.GetOptimalWidth(System.Drawing.Graphics)">
            <summary>
            Calculates optimal width for this list box based on current items using a
            provided <see cref="T:System.Drawing.Graphics"/> object.
            </summary>
            <returns>The width in pixels large enough so that no item text needs to be clipped.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.DropDownRows">
            <summary>
            Gets / sets the preferred number of visible rows.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Grid.GridComboBoxListBoxPart.BindingContext">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IMouseController">
            <summary>
            IMouseController defines the interface for mouse controllers to be used with MouseControllerDispatcher.
            </summary>
            <remarks>
            Any mouse controller needs to implement the IMouseController interface.<para/>
            In its implementation of MouseController.HitTest, the mouse controller should determine whether your
            controller wants to handle the mouse events based current context.<para/>
            See MouseControllerDispatcher for further discussion.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseHoverEnter">
            <summary>
            MouseHoverEnter is called when this controller signaled in HitTest that it wants to handle mouse events. MouseHoverEnter
            is called before the MouseHover is called for the first time.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseHover(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseHover is called when this controller signaled in HitTest that it wants to handle mouse events. MouseHover
            is called after MouseHoverEnter.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseHoverLeave(System.EventArgs)">
            <summary>
            MouseHoverLeave is called when hovering ends either because user dragged mouse out of the hit-test area or
            when context changes (e.g. user pressed the mouse button).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseDown is called when this controller signaled in HitTest that it wants to handle mouse events and the
            user pressed the mouse button.
            </summary>
            <remarks>
            MouseDown is called and this controller will become the active controller and receive all subsequent mouse messages
            until the mouse button is released or the mouse operation is cancelled.
            </remarks>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseMove is called for the active controller after a MouseDown message when the user moves the mouse pointer.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            MouseUp is called for the active controller after a MouseDown message when the user releases the mouse button.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.CancelMode">
            <summary>
            CancelMode is called for the active controller after a MouseDown message when the mouse operation is cancelled.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IMouseController.HitTest(System.Windows.Forms.MouseEventArgs,Syncfusion.Windows.Forms.IMouseController)">
            <summary>
            HitTest is called to determine whether your controller wants to handle the mouse events based current context.
            </summary>
            <remarks>
            The current winner of the vote is specified through the controller parameter. Your implementation of HitTest
            can decide if it wants to override the existing vote or leave it.
            </remarks>
            <param name="mouseEventArgs"></param>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IMouseController.Name">
            <summary>
            Returns the name of this mouse controller.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IMouseController.Cursor">
            <summary>
            Returns the cursor to be displayed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IContextMenuProvider">
            <summary>
            The IContextMenuProvider interface provides Essential Studio controls with a high-level API for creating and 
            working with context menus. Subscribing to this interface allows the Essential Studio controls to 
            seamlessly switch between the standard .NET <see cref="T:System.Windows.Forms.ContextMenu"/> and the 
            <see cref="!:Syncfusion.Windows.Forms.Tools.XPMenus.PopupMenu"/> classes depending on whether the 
            Essential Tools library is available or not.
            <seealso cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/>
            <seealso cref="!:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider"/>
            <seealso cref="T:Syncfusion.Windows.Forms.ContextMenuItem"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.InitializeContextMenu">
            <summary>
            Creates a new instance of the context menu object managed by this provider.	
            </summary>
            <remarks>
            If the provider contains a previously initialized context menu, then the existing menu will be disposed 
            before creating the new menu. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetItemsCount">
            <summary>
            Gets the Menu items count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.NeedAddRemoveButtons">
            <summary>
            Indicates whether "Add or Remove buttons" is needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetVisualStyle(Syncfusion.Windows.Forms.VisualStyle)">
            <summary>
            Sets the visual style for the context menu.
            </summary>
            <param name="style">A <see cref="T:Syncfusion.Windows.Forms.VisualStyle"/> value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.EventHandler)">
            <summary>
            Creates a new top-level menu item.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> that will handle the menu item Click event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.String,System.EventHandler)">
            <summary>
            Creates a new menu item and adds it to the specified parent menu item.
            </summary>
            <param name="parentitem">A <see cref="T:System.String"/> value representing the parent menu item.</param>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="handler">The <see cref="T:System.EventHandler"/> that will handle the menu item Click event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemImage(System.String,System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Sets the menu item image.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="imagelist">The <see cref="T:System.Windows.Forms.ImageList"/> containing the image.</param>
            <param name="image">The zero-based image index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemShortcut(System.String,System.Windows.Forms.Shortcut)">
            <summary>
            Sets a shortcut key for the menu item.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="key">The <see cref="T:System.Windows.Forms.Shortcut"/> key for the menu item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemShortcut(System.String)">
            <summary>
            Returns the menu item's shortcut key.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <returns>A <see cref="T:System.Windows.Forms.Shortcut"/> key value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemChecked(System.String,System.Boolean)">
            <summary>
            Sets the menu item's Checked property to the specified value.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="bchecked">The boolean value to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemChecked(System.String)">
            <summary>
            Gets the menu item's Checked property.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemEnabled(System.String,System.Boolean)">
            <summary>
            Sets the menu item's Enabled property to the specified value.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="benabled">The boolean value to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemEnabled(System.String)">
            <summary>
            Indicates the state of the menu item's Enabled property.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemSeparator(System.String,System.Boolean)">
            <summary>
            Inserts or removes a separator before the specified menu item's position.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
            <param name="binsertseparator">True to insert a new separator; False to remove an existing separator.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.RemoveContextMenuItem(System.String)">
            <summary>
            Removes the specified context menu item.
            </summary>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the menu item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Displays the context menu at the specified position.
            </summary>
            <param name="owner">A <see cref="T:System.Windows.Forms.Control"/> object that specifies the control with which this context menu is associated.</param>
            <param name="pt">A <see cref="T:System.Drawing.Point"/> object that specifies the coordinates at which to display the menu.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.DisposeContextMenu">
            <summary>
            Disposes the context menu associated with this provider.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IContextMenuProvider.Clear">
            <summary>
            Clears all menu items.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IContextMenuProvider.Popup">
            <summary>
            Occurs when menu is popped up.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.IContextMenuProvider.Collapse">
            <summary>
            Occurs when menu is collapsed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ContextMenuItem">
            <summary>
            The ContextMenuItem class is used by the Essential Studio menu providers - classes implementing the 
            <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> interface - for providing information to the context menu 
            command handler about the menu item that triggered the Click event.
            <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/>
            <see cref="!:Syncfusion.Windows.Forms.Tools.XPMenus.XPMenusProvider"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ContextMenuItem.#ctor(Syncfusion.Windows.Forms.IContextMenuProvider,System.String)">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.ContextMenuItem"/> class.
            </summary>
            <param name="provider">A <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> instance representing the menu provider.</param>
            <param name="itemtext">A <see cref="T:System.String"/> value representing the context menu item.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ContextMenuItem.ContextMenuProvider">
            <summary>
            Returns the menu provider instance.
            </summary>
            <value>A <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> instance.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.ContextMenuItem.ContextMenuItemText">
            <summary>
            Returns the text representing the context menu item.
            </summary>
            <value>A <see cref="T:System.String"/> value.</value>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MenuProviderFactory">
            <summary>
            Factory class for creating the context menu provider. If the Syncfusion Essential Tools library is present, the MenuProviderFactory will 
            create an instance of the <see cref="!:Syncfusion.Windows.Forms.InternalMenus.MenuFactory"/> type and if not it returns an instance of 
            the <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/> class.
            <seealso cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MenuProviderFactory.CreateContextMenuProvider">
            <summary>
            Creates the standard or XPMenus context menu provider.
            </summary>
            <returns>A <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Windows.Forms.StandardMenusProvider">
            <summary>
            The StandardMenusProvider class implements the <see cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/> interface and 
            serves as the menu provider for the standard .NET context menus. Controls that have a <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/> 
            object set as their menu provider will display a <see cref="T:System.Windows.Forms.ContextMenu"/> instance.
            <seealso cref="T:Syncfusion.Windows.Forms.IContextMenuProvider"/>
            <seealso cref="!:Sycnfusion.Windows.Forms.XPMenus.XPMenusProvider"/>
            </summary>	
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.StandardMenusProvider"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.GetItemsCount">
            <summary>
            Gets the ContextMenu  items Count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.NeedAddRemoveButtons">
            <summary>
            Indicates whether "Add or Remove buttons" is needed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.InitializeContextMenu">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.InitializeContextMenu"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetVisualStyle(Syncfusion.Windows.Forms.VisualStyle)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetVisualStyle(Syncfusion.Windows.Forms.VisualStyle)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.AddContextMenuItem(System.String,System.EventHandler)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.EventHandler)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.AddContextMenuItem(System.String,System.String,System.EventHandler)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.AddContextMenuItem(System.String,System.String,System.EventHandler)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetContextMenuItemImage(System.String,System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemImage(System.String,System.Windows.Forms.ImageList,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetContextMenuItemShortcut(System.String,System.Windows.Forms.Shortcut)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemShortcut(System.String,System.Windows.Forms.Shortcut)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.GetContextMenuItemShortcut(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemShortcut(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetContextMenuItemChecked(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemChecked(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.GetContextMenuItemChecked(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemChecked(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetContextMenuItemEnabled(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemEnabled(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.GetContextMenuItemEnabled(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.GetContextMenuItemEnabled(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.SetContextMenuItemSeparator(System.String,System.Boolean)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.SetContextMenuItemSeparator(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.RemoveContextMenuItem(System.String)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.RemoveContextMenuItem(System.String)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.ShowContextMenu(System.Windows.Forms.Control,System.Drawing.Point)"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.DisposeContextMenu">
            <summary>
            Overridden. See <see cref="M:Syncfusion.Windows.Forms.IContextMenuProvider.DisposeContextMenu"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.Clear">
            <summary>
            Clears all menu items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.ContextMenuCommandHandler(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.RecurseGetMenuItem(System.Windows.Forms.Menu.MenuItemCollection,System.String)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="itemtext"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.RecurseGetParentCollection(System.Windows.Forms.Menu.MenuItemCollection,System.String)">
            <summary>
            
            </summary>
            <param name="collection"></param>
            <param name="itemtext"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.StandardMenusProvider.RecurseDisposeMenuItems(System.Windows.Forms.Menu.MenuItemCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.StandardMenusProvider.Menu">
            <summary>
            Gets context menu instance.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.StandardMenusProvider.Popup">
            <summary>
            Occurs when menu is popped up.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.StandardMenusProvider.Collapse">
            <summary>
            Occurs when menu is collapsed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.MouseControllerDispatcher">
            <summary>
            MouseControllerDispatcher coordinates mouse events among competing mouse controllers. Based on
            the position of the mouse and context of the control every registered controller's HitTest method
            is called to determine the best controller for the following mouse action. This controller will then
            receive mouse events.
            </summary>
            <remarks>
            Any Mouse Controller needs to implement the IMouseController interface.<para/>
            In its implementation of MouseController.HitTest, the mouse controller should determine whether your
            controller wants to handle the mouse events based current context.<para/>
            MouseControllerDispatcher will call HitTest for each Mouse Controller that has been registered with
            Add(IMouseController). The Mouse Controller that wins the vote will receive all Mouse hovering events
            like MouseHoverEnter, MouseHover and MouseHoverLeave as long as its HitTest method indicates that it wants to
            handle the mouse event. A MouseHoverLeave notification is guaranteed after MouseHoverEnter has been called.<para/>
            When the user presses the mouse, a MouseDown will be sent to the controller. All subsequent mouse events
            will then go to that specific controller until the user releases the mouse or the mouse operations is cancelled.
            A call to either MouseUp or CancelMode is guaranteed after a controller MouseDown method was called.<para/>
            Mouse controllers are registered by calling the Add method.<para/>
            If the control that MouseControllerDispatcher should be associated with is derived from ScrollControl,
            you should use ScrollControllMouseControllerDispatcher because it will automatically hook itself up
            with mouse events from ScrollControl. <para/>
            Otherwise if you want to attach MouseControllerDispatcher to a different type of Control, you need to
            delegate mouse events to MouseControllerDispatcher. MouseControllerDispatcher provides ProcessXYZ methods
            for every mouse event that should be forwarded. Simply call these methods from your mouse event handlers in
            your control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new MouseControllerDispatcher object and associates it with the parent control.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.Dispose(System.Boolean)">
            <summary>
            Resets the dispatcher and calls Dispose for any registered mouse controller and unregisters all mouse controllers.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.Add(Syncfusion.Windows.Forms.IMouseController)">
            <summary>
            Registers a mouse controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.Remove(Syncfusion.Windows.Forms.IMouseController)">
            <summary>
            Removes a mouse controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.Contains(Syncfusion.Windows.Forms.IMouseController)">
            <summary>
            Indicates whether a mouse controller has previously been registered.
            </summary>
            <param name="controller"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.Find(System.String)">
            <summary>
            Search a mouse controller by comparing with the name returned from IMouseController.Name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.SetActiveController(Syncfusion.Windows.Forms.IMouseController)">
            <summary>
            Changes the active controller and raises an ActiveControllerChanged event.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.SetMouseHoverController(Syncfusion.Windows.Forms.IMouseController,System.EventArgs)">
            <summary>
            Sets the controller that will receive mouse hovering messages. If the controller is changed,
            MouseHoverLeave and MouseHoverEnter calls are made.
            </summary>
            <param name="value"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.OnActiveControllerChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.MouseControllerDispatcher.ActiveControllerChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.HitTest(System.Drawing.Point)">
            <overload>
            HitTest loops through all controllers and calls HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </overload>
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <returns>The result identifying the hit-test context.</returns>
            <remarks>
            The current result of the vote gets passed to the next mouse controller. If a controller wants
            to handle mouse events, it can decide based on the existing vote if it has higher priority for it
            to handle mouse messages than the existing vote.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <param name="mouseButton">The mouse button that is pressed.</param>
            <returns>The result identifying the hit-test context.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons,Syncfusion.Windows.Forms.IMouseController@)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <param name="mouseButton">The mouse button that is pressed.</param>
            <param name="controller">A placeholder where a reference to the winning <see cref="T:Syncfusion.Windows.Forms.IMouseController"/>
            is returned.</param>
            <returns>The result identifying the hit-test context.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.HitTest(System.Drawing.Point,System.Windows.Forms.MouseButtons,System.Int32,Syncfusion.Windows.Forms.IMouseController@)">
            <summary>
            HitTest loops through all controllers and call HitTest on each of them. Only one mouse controller
            can get voted to receive mouse messages. 
            </summary>
            <param name="point">The point in client coordinates to be hit tested.</param>
            <param name="mouseButton">The mouse button that is pressed.</param>
            <param name="clicks">1 for single-click; 2 for double click.</param>
            <param name="controller">A placeholder where a reference to the winning <see cref="T:Syncfusion.Windows.Forms.IMouseController"/>
            is returned.</param>
            <returns>The result identifying the hit-test context.</returns>
            <genoverload/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ProcessMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Call this method from your control's MouseMove handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ProcessMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Call this method from your control MouseDown handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ProcessMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Call this method from your control's MouseUp handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ProcessCancelMode">
            <summary>
            Call this method from your control's CancelMode handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.ResetTrackMouse">
            <summary>
            Resets support for mouse tracking.
            </summary>
            <remarks>Call this method after a user interaction that should switch the control back into
            normal mouse behavior. For example, when the control gets the focus or when the user clicks a scrollbar.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.MouseControllerDispatcher.OnTrackMouseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.MouseControllerDispatcher.TrackMouseChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.MouseControllerDispatcher.ActiveControllerChanged">
            <summary>
            Indicates that the active controller has changed.
            </summary>
            <remarks>
            Active controller is the controller that is receiving MouseDown, MouseMove and MouseUp messages when the user
            has pressed a mouse button.</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.ActiveController">
            <summary>
            Returns a reference to the active mouse controller that is receiving MouseDown, MouseMove and MouseUp messages when the user
            has pressed a mouse button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.MouseHoverController">
            <summary>
            Returns the controller that currently receives mouse hovering messages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.LastHitTestCode">
            <summary>
            Returns the last HitTest value returned that was non-zero. Check this property
            if you need to make decision on your mouse controller's HitTest.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.AllowDoubleClickTimer">
            <summary>
            Property AllowDoubleClickTimer (bool).
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.DisplayCursor">
            <summary>
            Returns the cursor to be displayed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.Owner">
            <summary>
            Returns a reference to the associated control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MouseControllerDispatcher.TrackMouse">
            <summary>
            Enables support for mouse tracking.
            </summary>
            <remarks>
            Specify the bounds where the mouse tracking should start. As soon as the user moves the mouse
            over the specified region, MouseControllerDispatcher will simulate a mouse down event. When the user presses
            any mouse button MouseControllerDispatcher will simulate a mouse up and resets the mouse tracking mode. After
            the initial click on a mouse button, mouse processing will work as usual.<par/>
            <note type="note">Mouse tracking lets you easily simulate the behavior of windows combo boxes.</note>
            </remarks>
            <example>This example enables Mouse Tracking after the drop-down has been shown.
            <code lang="C#">
            public override void DropDownContainerShowedDropDown(object sender, EventArgs e)
            {
                this.ListControlPart.grid.MouseControllerDispatcher.TrackMouse =
                    this.ListControlPart.grid.RangeInfoToRectangle(GridRangeInfo.Rows(
                            this.ListControlPart.grid.TopRowIndex,
                        this.ListControlPart.grid.RowCount));
            }
            </code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.MouseControllerDispatcher.TrackMouseChanged">
            <summary>
            Indicates that the value of the TrackMouse property has changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ScrollControllMouseControllerDispatcher">
            <summary>
            ScrollControllMouseControllerDispatcher is a specialized version of MouseControllerDispatcher
            that automatically wires itself up with a ScrollControl.
            </summary>
            <remarks>
            If the control that MouseControllerDispatcher should be associated with is derived from ScrollControl,
            you should use ScrollControllMouseControllerDispatcher because it will automatically hook itself up
            with mouse events from ScrollControl. <para/>
            No initialization is necessary.<para/>
            You can register MouseControllers with:
            <code>
            resizeCellsController = new GridResizeCellsMouseController(this);
            MouseControllerDispatcher.Add(resizeCellsController);
            </code>
            See ScrollControl.MouseControllerDispatcher property.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControllMouseControllerDispatcher.#ctor(Syncfusion.Windows.Forms.ScrollControl)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Windows.Forms.ScrollControllMouseControllerDispatcher"/> object and associates it with a <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Windows.Forms.ScrollControl"/> this object is associated with.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ScrollControllMouseControllerDispatcher.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.PropertyGridContextMenu">
            <summary>
            Provides designer-like context menu support for the PropertyGrid during run-time.
            </summary>
            <remarks>
            <p>This <see cref="T:System.Windows.Forms.ContextMenu"/> derived menu has a "Reset" menu item, which automatically
            provides the property-resetting service with the <b>ContextMenu</b> of
            a <see cref="T:System.Windows.Forms.PropertyGrid"/> during run-time. It also
            includes a "Description" menu item to let you show / hide the description portion of the property grid.
            Just as in the VS.NET property grid.</p>
            <p>
            To use this component, just create it passing the PropertyGrid in the constructor.
            The context menu will then start appearing for that PropertyGrid. There is no 
            design-time support for this component.
            </p>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PropertyGridContextMenu.#ctor(System.Windows.Forms.PropertyGrid)">
            <summary>
            Creates a new instance of the <b>PropertyGridContextMenu</b>.
            </summary>
            <param name="propertyGrid">The <see cref="T:System.Windows.Forms.PropertyGrid"/> to which
            this will be made a context menu.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PropertyGridContextMenu.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.PropertyGridContextMenu.OnPopup(System.EventArgs)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WhidbeyCompatibleControlStyles">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.ChangeStyle(System.Windows.Forms.Control,System.Windows.Forms.ControlStyles,System.Boolean)">
            <summary>
            Sets / resets the specified styles on the control.
            </summary>
            <param name="control">The control on which to set / reset the styles.</param>
            <param name="styles">The style to set / reset.</param>
            <param name="setOrReset">Indicates whether to set / reset the style. True to set, False to reset.</param>
            <remarks>This method uses reflection to call the protected SetStyle 
            method on the specified control.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.ActivateAllParents(System.Windows.Forms.ContainerControl)">
            <summary>
            Makes the specified control and all its parent controls the ActiveControl of its parent container.
            </summary>
            <param name="control">The control that needs to be made the ActiveControl of its parent.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.GetPropertyGridInControl(System.Windows.Forms.Control)">
            <summary>
            Returns the first PropertyGrid encountered in the container control's controls collection. Will recur.
            </summary>
            <param name="control">The instance to a ContainerControl.</param>
            <returns>A PropertyGrid instance, if found; NULL otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.UpdateDirectoryPath(System.Data.OleDb.OleDbConnection,System.String,System.String)">
            <summary>
            Updates the designer generated datasource full path to a different one based
            on the provided info.
            </summary>
            <param name="connection">The Connection object whose ConnectionString will be updated.</param>
            <param name="dataDirName">The directory name that will be sought after up in the exe's hierarchy (typically the "Data" dir).</param>
            <param name="fileName">A file in the above directory (typically an .mdb file).</param>
            <remarks>
            The designer generated path to the "Data" directory could have been changed if the user
            installed the product to a non-default directory.
            This routine will parse up the dir hierarchy from the exe file and try to find
            the "Data" dir and use it instead.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.FindFile(System.String,System.String)">
            <summary>
            Finds a file of the given name in the current directory or sibling "Data" directory.
            If file is not found, the parent folder is checked until the file is found. This method
            is used by our samples when they load data from a separate "Data" folder.
            </summary>
            <param name="dataDirName">The name of the "Data" folder.</param>
            <param name="fileName">The filename to be searched.</param>
            <returns>The full path of the file that was found; an empty string is returned if file is not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WinFormsUtils.MeasureSampleWString(System.Drawing.Graphics,System.Drawing.Font)">
            <summary>
            Returns the preferred size to be used for an empty cell.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics"/> context of the canvas.</param>
            <param name="font">The <see cref="T:System.Drawing.Font"/> to be used.</param>
            <returns>The <see cref="T:System.Drawing.Size"/> of the string "Wg;".</returns>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WinFormsUtils.MeasureEmptyCellString">
            <summary>
            Gets / sets the string used when doing a resize to fit for cells with empty text.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ICanCancel">
            <summary>
            Defines a mechanism for letting others know that you let others cancel your operation.
            </summary>
            <remarks>
            The <see cref="T:Syncfusion.Windows.Forms.CancelListener"/> class relies on this interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ICanCancel.CancelOperation">
            <summary>
            To let you know that any current operation should be cancelled.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CancelListener">
            <summary>
            A listener class that will listen to and notify Escape key press.
            </summary>
            <remarks>
            As soon as you create this class, it starts listening for the Esc key press using Application.AddMessageFilter.
            As soon as it encounters the Escape key, it notifies the source (ICanCancel implementor) and
            stops listening to further Escape presses. The Release method will make it stop listening at any point.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CancelListener.#ctor(Syncfusion.Windows.Forms.ICanCancel)">
            <summary>
            Creates a new instance of the CancelListener class.
            </summary>
            <param name="canCancel">The instance that will be notified on Escape key press.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.CancelListener.Release">
            <summary>
            Makes this instance stop listening for Escape key press.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageUtil.ConvertToImage(System.Byte[])">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ImageUtil.ConvertToImage(System.Object)">
            <internalonly/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.ThreadCulture">
            <summary>
            Wrapper class for setting the current <see cref="T:System.Threading.Thread"/>'s <see cref="P:System.Threading.Thread.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThreadCulture.HandleCultureChangedEvent(System.Object,Syncfusion.Windows.Forms.CultureChangedEventArgs)">
            <summary>
            Handles the CultureChanged event raised by the settings form.
            </summary>
            <param name="sender">The settings form.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThreadCulture.SetCurrentCulture(System.Globalization.CultureInfo)">
            <summary>
            Sets the current thread's CurrentCulture.
            </summary>
            <param name="newInfo">The culture to be set.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThreadCulture.RaiseCultureChangedEvent(System.Int32,System.Int32,Syncfusion.Windows.Forms.CultureChangedReason)">
            <summary>
            Raises the CultureChanged event.
            </summary>
            <param name="currentLCID">The previous culture's LCID.</param>
            <param name="newLCID">The new culture's LCID.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThreadCulture.OnCultureChanged(System.Object,Syncfusion.Windows.Forms.CultureChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.ThreadCulture.CultureChanged"/> event.
            </summary>
            <param name="sender">Object raising the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.ThreadCulture.CultureChanged">
            <summary>
            Event raised when the ThreadCulture is changed or the system settings 
            changed the culture.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.ThreadCultureSystem.settingsChangeForm">
            <summary>
            The form used for listening to the WM_SETTINGCHANGE messages.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.ThreadCultureSystem.#cctor">
            <summary>
            Static constructor for ThreadCultureSystem class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SystemSettings">
            <summary>
            Form derived class that is registered to receive WM_SETTINGCHANGE messages.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SystemSettings.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Overrides <see cref="M:Syncfusion.Windows.Forms.SystemSettings.WndProc(System.Windows.Forms.Message@)"/> to handle the WM_SETTINGCHANGE
            message.
            </summary>
            <param name="m">The message.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SystemSettings.Show">
            <summary>
            Overrides <see cref="M:System.Windows.Forms.Form.Show(System.Windows.Forms.IWin32Window)"/> to always set the location to be
            outside the screen bounds.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SystemSettings.OnCultureChanged(Syncfusion.Windows.Forms.CultureChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.SystemSettings.CultureChanged"/> event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.SystemSettings.CultureChanged">
            <summary>
            Event raised when the form senses that the culture has been changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CultureChangedEventHandler">
            <summary>
            Handles the locale changed event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CultureChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Syncfusion.Windows.Forms.ThreadCulture.CultureChanged"/> event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CultureChangedEventArgs.NewLCID">
            <summary>
            Returns the LCID of the new culture that has been applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CultureChangedEventArgs.CurrentLCID">
            <summary>
            Returns the LCID of the previous culture.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.CultureChangedEventArgs.Reason">
            <summary>
            Returns the reason for the CultureChange.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.CultureChangedReason">
            <summary>
            CultureChangedReason is used by the <see cref="T:Syncfusion.Windows.Forms.CultureChangedEventArgs"/> to denote
            what action initiated the culture change.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CultureChangedReason.SystemSettings">
            <summary>
            A System level setting change resulted in the culture change.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.CultureChangedReason.ThreadCulture">
            <summary>
            Thread level culture change resulted in the culture change.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SheetMovedReason">
            <summary>
            Specifies information about the originating action of SheetMoved event.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SheetMovedReason.None">
            <summary>
            None specified.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SheetMovedReason.MoveSheet">
            <summary>
            Sheet was moved.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SheetMovedReason.InsertSheet">
            <summary>
            Sheet was inserted.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SheetMovedReason.RemoveSheet">
            <summary>
            Sheet was removed.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.SheetMovedReason.ClearAll">
            <summary>
            All sheets were removed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SheetMovedEventHandler">
            <summary>
            Handles a <see cref="E:Syncfusion.Windows.Forms.WorksheetModelCollection.SheetMoved"/> event of a <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SheetMovedEventArgs">
            <summary>
            Provides data about a <see cref="E:Syncfusion.Windows.Forms.WorksheetModelCollection.SheetMoved"/> event of a <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SheetMovedEventArgs.#ctor(System.Int32,System.Int32,Syncfusion.Windows.Forms.SheetMovedReason)">
            <summary>
            Initializes a SheetMovedEventArgs with event data.
            </summary>
            <param name="index">The sheet index.</param>
            <param name="destination">The destination sheet index.</param>
            <param name="reason">The originating action for this event.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SheetMovedEventArgs.Index">
            <summary>
            Returns the sheet index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SheetMovedEventArgs.Destination">
            <summary>
            Returns the destination sheet index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SheetMovedEventArgs.Reason">
            <summary>
            Returns the originating action for this event.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SelectedIndexEventHandler">
            <summary>
            Handles a <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanged"/> and <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanging"/> events of a <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.SelectedIndexEventArgs">
            <summary>
            Provides data about a <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanged"/> and <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanging"/> events of a <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.SelectedIndexEventArgs.#ctor(System.Int32,Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.SelectedIndexEventArgs"/> with event data.
            </summary>
            <param name="index">The selected index.</param>
            <param name="tab">The tab associated with the index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SelectedIndexEventArgs.Index">
            <summary>
            Returns the selected index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.SelectedIndexEventArgs.Tab">
            <summary>
            Returns the tab associated with the index.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IInternalTabParent">
            <summary>
            An interface for hosting <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> objects and
            receiving clicks from these buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabParent.GetMeasureTools(System.Drawing.Graphics@,System.Drawing.Font@,System.Int32@)">
            <summary>
            Returns Graphics object, font and delta between tabs.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="font">Font.</param>
            <param name="delta">Delta between tabs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabParent.GetDrawingTools(Syncfusion.Windows.Forms.InternalTab,System.Drawing.Brush@,System.Drawing.Color@,System.Drawing.Font@,System.Int32@)">
            <summary>
            Returns <see cref="T:Syncfusion.Windows.Forms.InternalTab"/>, brush, text color, font and delta between tabs.
            </summary>
            <param name="tab">Tab object.</param>
            <param name="fillBrush">Brush for drawing the tab background.</param>
            <param name="textColor">Text color.</param>
            <param name="font">Font used to draw text.</param>
            <param name="delta">Delta between tabs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabParent.DisposeMeasureTools">
            <summary>
            Disposes any temporary drawing object.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalTabParent.ImageList">
            <summary>
            Returns the image list that these tabs get images from.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalTabParent.Style">
            <summary>
            Indicates the visual style of the tabBar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalTab">
            <summary>
            InternalTab draws tabs inside a <see cref="T:Syncfusion.Windows.Forms.TabBar"/> in a <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTab.m_renderer">
            <summary>
            Renderer used to draw the tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalTab"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalTab"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTab.visible">
            <summary>
            Gets or sets the visibility of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> with a label.
            </summary>
            <param name="label">The label to display in the tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.#ctor(System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> with a cookie.
            </summary>
            <param name="cookie">The cookie associated with this tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> with a cookie and a label.
            </summary>
            <param name="cookie">The cookie associated with this tab.</param>
            <param name="owner">The owner of this tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.OnOwnerChanged">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.GetPreferredSize(System.Drawing.Size)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.AdjustSize(System.Drawing.Graphics,System.Drawing.Font,System.Int32)">
            <overload>
            Recalculates the best size for the button and resizes it.
            </overload>
            <summary>
            Recalculates the best size for the button and resizes it.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="font">Font.</param>
            <param name="delta">Delta between tabs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.AdjustSize">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.CreateBitmap(System.Drawing.Size,System.Boolean)">
            <summary>
            Creates and initializes a bitmap for this tab. 
            </summary>
            <param name="size">The size of the bitmap.</param>
            <param name="flatLook">Indicates the flat look status.</param>
            <returns>The bitmap where the button is drawn into.</returns>
            <remarks>
            When you drag a tab, this function is called to create the dragging button image.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTab.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Rectangle)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTab.Visible">
            <summary>
            Gets or sets the visibility of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTab.Label">
            <summary>
            Gets / sets the label to display in the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTab.ImageIndex">
            <summary>
            Gets / sets the index of the image to display in this tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTab.GetTabRegion">
            <summary>
            Gets the region that contains the tab bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTab.Renderer">
            <summary>
            Gets the renderer that renders the tab.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.IInternalTabBarParent">
            <summary>
            An interface for hosting <see cref="T:Syncfusion.Windows.Forms.InternalTabBar"/> objects.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabBarParent.OnDraggingTab(System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified tab is being dragged.
            </summary>
            <param name="nTab">The tab index.</param>
            <param name="nTarget">Current target.</param>
            <returns>True if tab can be dropped; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabBarParent.OnDraggedTab(System.Int32,System.Int32)">
            <summary>
            Indicates that a tab has been dragged.
            </summary>
            <param name="nTab">The tab index.</param>
            <param name="nTarget">Current target</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabBarParent.OnScroll(Syncfusion.Windows.Forms.ArrowType,System.Int32)">
            <summary>
            Indicates whether the scroll button has been pressed.
            </summary>
            <param name="arrowKind">Indicates which type of arrow button.</param>
            <param name="pixels">The number of pixels to scroll.</param>
            <returns>True if scrolled; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.IInternalTabBarParent.OnScrolled">
            <summary>
            Scrolling finished.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.IInternalTabBarParent.OverrideCursor">
            <summary>
            Gets / sets the cursor to display.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabMovedEventArgs">
            <summary>
            Provides data about a <see cref="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoved"/> or <see cref="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoving"/> events of a <see cref="T:Syncfusion.Windows.Forms.InternalTabBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabMovedEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Windows.Forms.TabMovedEventArgs"/>.
            </summary>
            <param name="tab">The original tab index.</param>
            <param name="destTab">The destination tab index.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabMovedEventArgs.Tab">
            <summary>
            Gets / sets the original tab index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabMovedEventArgs.DestTab">
            <summary>
            Gets / sets the destination tab index.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.DrawAddNewSymbol">
            <summary>
            Class to Draw the AddNewPage rectangle in TabBar 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.DrawAddNewSymbol.plusHoverColor">
            <summary>
            Gets/Sets the Hover color for AddButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DrawAddNewSymbol.ResetPlusHoverColor">
            <summary>
            Resets the PlusHoverColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DrawAddNewSymbol.ShouldSerializePlusHoverColor">
            <summary>
            ShouldSerialize the AddButtonHoverColor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.DrawAddNewSymbol.PaintAddNewSymbol(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            To Draw Add symbol in TabBarPage.
            </summary>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabMovedEventHandler">
            <summary>
            Handles the <see cref="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoved"/> or <see cref="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoving"/> events of an <see cref="T:Syncfusion.Windows.Forms.InternalTabBar"/>
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalTabBarScrollBehavior">
            <summary>
            Specifies scroll behavior for a tab bar.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTabBarScrollBehavior.ScrollPixels">
            <summary>
            Scroll pixels.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTabBarScrollBehavior.ScrollTabs">
            <summary>
            Scroll tabs.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalTabBar">
            <summary>
               Helper class for <see cref="T:Syncfusion.Windows.Forms.ButtonBar"/>. Manages <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> items.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTabBar.tabclick">
            To check whether the tab is double clicked.
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTabBar.sym">
            <summary>
            To draw the Plus symbol near the Tab Bounds
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.InternalTabBar.AddNewButtonRect">
            <summary>
            To Get the bounds of the AddNewPage button.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes an <see cref="T:Syncfusion.Windows.Forms.InternalTabBar"/> and attaches it to a control.
            </summary>
            <param name="parent">The parent control.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.Paint(System.Drawing.Graphics,System.Int32)">
            <summary>
            Called from parent control to draw this bar.
            </summary>
            <param name="g">A Graphics object.</param>
            <param name="delta">The delta in pixels between tabs.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnClickedButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Called when a button is clicked.
            </summary>
            <param name="button">The <see cref="T:Syncfusion.Windows.Forms.InternalButton"/> that was clicked.</param>
            <remarks>
            Called by OnMouseDownEvent.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.DragTabMouseMove(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.DragTabMouseUp(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnTabMoving(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.MoveTab(System.Int32,System.Int32)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.HitTest(System.Int32,System.Int32)">
            <summary>
            Checks if mouse is over a button and returns the zero-based button index or -1.
            </summary>
            <param name="x">X-coordinate of mouse pointer.</param>
            <param name="y">Y-coordinate of mouse pointer.</param>
            <returns>Zero-based button index; -1 if not over a button.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.AdjustSize(System.Boolean,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.InvalidateIfDirty">
            <summary>
            Repaints only if marked dirty.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.FindButton(Syncfusion.Windows.Forms.InternalButton)">
            <summary>
            Returns the index for the specified button.
            </summary>
            <param name="button">The button to search.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.FindTab(System.Object)">
            <summary>
            Returns the index for a button with the specified cookie.
            </summary>
            <param name="cookie">The cookie to search for.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.CancelMode">
            <summary>
            Cancels current action.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnCancelModeEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnMouseDownEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnMouseUpEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnMouseMoveEvent(System.Object,System.Windows.Forms.MouseEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.OnMouseLeaveEvent(System.Object,System.EventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ScrollInView(Syncfusion.Windows.Forms.InternalTab)">
            <overload>
            Scrolls a specified tab into view.
            </overload>
            <summary>
            Scrolls a specified tab into view.
            </summary>
            <param name="tab">The tab that should be made visible.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ScrollInView(System.Int32)">
            <summary>
            Scrolls a specified tab into view.
            </summary>
            <param name="tab">The index of the tab that should be made visible.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.AlignFirstTab">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.AlignNextTab">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ScrollTab(Syncfusion.Windows.Forms.ArrowType)">
            <overload>
            Scrolls the tabs in the specified direction.
            </overload>
            <summary>
            Scrolls the tabs in the specified direction.
            </summary>
            <param name="arrowKind">The direction to scroll.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.Scroll(Syncfusion.Windows.Forms.ArrowType,System.Int32)">
            <summary>
            Overloaded. Scrolls the tabs in the specified direction with the specified number of pixels.
            </summary>
            <param name="arrowKind">The direction to scroll.</param>
            <param name="pixels">The pixels to scroll.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.Scroll(Syncfusion.Windows.Forms.ArrowType,System.Int32,System.Boolean)">
            <summary>
            Scrolls the tabs in the specified direction with the number of pixels.
            </summary>
            <param name="arrowKind">The direction to scroll.</param>
            <param name="pixels">The pixels to scroll.</param>
            <param name="ignoreLast">Indicates whether scrolling should abort when last button is visible and you scroll further.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.InitToolTips">
            <summary>
            Initializes ToolTips boundaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ResetToolTips">
            <summary>
            Reinitializes and hides ToolTips.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ResetHovered">
            <summary>
            Resets hovered state for all buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ResetPushed">
            <summary>
            Resets pushed state for all buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ResetChecked">
            <summary>
            Resets checked state for all buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.ResetDragTarget">
            <summary>
            Resets DragTarget state for all buttons.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabBar.RefreshCurrentTab(System.Boolean)">
            <summary>
            Refreshes the current tab and optionally scrolls it into view.
            </summary>
            <param name="scroll">True if current tab should be scrolled into view.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoved">
            <summary>
            Occurs when a tab has been moved.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.InternalTabBar.TabMoving">
            <summary>
            Occurs before a tab is moved.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Capture">
            <summary>
            Indicates whether a button is currently pressed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.EnableButtonFlags">
            <summary>
            Returns a value that indicates which buttons to show enabled. Other buttons are disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Tabs">
            <summary>
            Gets / sets the button list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Bounds">
            <summary>
            Gets / sets the boundaries of this bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.FlatLook">
            <summary>
            Indicates the flat look status for buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Dirty">
            <summary>
            Indicates whether any button is dirty or sets all buttons dirty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Enabled">
            <summary>
            Indicates whether any button is enabled or sets all buttons enabled / disabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Hovered">
            <summary>
            Indicates whether any button is in hovered state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Pushed">
            <summary>
            Indicates whether any button is in pushed state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.Checked">
            <summary>
            Indicates whether any button is in checked state.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.DragTarget">
            <summary>
            Indicates whether any button is in DragTarget state or sets DragTarget state for the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.ScrollBehavior">
            <summary>
            Gets / sets the scroll behavior of this tab bar: pixel or tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.CurrentTab">
            <summary>
            Gets / sets the current tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.LogicalWidth">
            <summary>
            Gets / sets the total logical width of this button bar including all buttons. If the logical
            width is greater than the actual width, the tab bar lets the user scroll it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.ScrollPos">
            <summary>
            Gets / sets the current scroll position.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabBar.IsDragTabMode">
            <summary>
            Indicates whether the user is in the process of dragging a tab.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.InternalTabCollection">
            <summary>
            A collection OF <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> items.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.#ctor(Syncfusion.Windows.Forms.TabBar)">
            <summary>
            Initializes a <see cref="T:Syncfusion.Windows.Forms.InternalTabCollection"/> and associates it with an owner.
            </summary>
            <param name="owner">The owner.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.AddRange(Syncfusion.Windows.Forms.InternalTab[])">
            <summary>
            Adds an array of InternalTab into the list.
            </summary>
            <param name="value">An InternalTab array.</param>
            <remarks><para>Available to enable serialization using AddRange in designer.</para></remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.Add(Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Adds an <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> to the list.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> to be added.</param>
            <returns>The index of the added value.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.Insert(System.Int32,Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Inserts an <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> at the specified index.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> to be added.</param>
            <param name="index">The index of the added value.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.IndexOf(Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Returns the index of the specific tab.
            </summary>
            <param name="value">The tab to search for.</param>
            <returns>The index of the tab; -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.Contains(Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Indicates whether the specified object is a member of this collection.
            </summary>
            <param name="value">The object to search for.</param>
            <returns>True if is a member; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.Remove(Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Removes an <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> from the collection.
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> to be removed.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.CopyTo(Syncfusion.Windows.Forms.InternalTab[],System.Int32)">
            <overload>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </overload>
            <summary>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </summary>
            <param name="array">
              <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the collection.</para>
            </param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.InternalTabCollection.CopyTo(System.Array,System.Int32)">
            <summary>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </summary>
            <param name="array">
              <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the collection.</para>
            </param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.InternalTabCollection.Item(System.Int32)">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.InternalTab"/> at the specified index.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabsRendererBase.m_parent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabsRendererBase.m_bounds">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabsRendererBase.m_measure">
            <summary>
            Special graphics for text measuring.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabsRendererBase.m_defaultFont">
            <summary>
            Default tab font.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabsRendererBase.m_imageTextIndent">
            <summary>
            Indent from borders to the text.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.TabsRendererBase.#ctor(Syncfusion.Windows.Forms.InternalTab)" -->
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawTab(System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawBorders(System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawBackground(System.Drawing.Graphics)">
            <summary>
            
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawTextAndImage(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="rectTextAndImage"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawText(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="text"></param>
            <param name="font"></param>
            <param name="foreColor"></param>
            <param name="rectText"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.GetItemPreferredSize">
            <summary>
            Gets tab preferred size.
            </summary>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.GetOverlappedWidth">
            <summary>
            Returns the overlapped size of the tabs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Component and optionally releases the managed resources.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
            <remarks>See the documentation for the <see cref="T:System.ComponentModel.Component"/> class and its Dispose member.</remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.MeasureText(System.String,System.Drawing.Font)">
            <summary>
            Measures the text.
            </summary>
            <param name="text">The text to be measured.</param>
            <param name="font">The font of the text.</param>
            <returns>Size of the text.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawTextInternal(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Draws the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabsRendererBase.DrawTextNative(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Color,System.Drawing.RectangleF)">
            <summary>
            Draw text by native GDI API.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.TabBar">
            <summary>
            Returns the parent.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.Bounds">
            <summary>
            Bounds of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.GetTabRegion">
            <summary>
            Gets the region which contains tab bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.Parent">
            <summary>
            Gets the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.TabText">
            <summary>
            Text of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.InactiveTabFont">
            <summary>
            Font of the active tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.ActiveTabFont">
            <summary>
            Font of the active tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.ForeColor">
            <summary>
            Color used to draw the text of the tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabsRendererBase.MeasureGraphics">
            <summary>
            Get special measure graphics that allowing measuring without control creation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroTabsRenderer.metroHighlightColor">
             <summary>
            Gets metro highight color
             </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.MetroTabsRenderer.metroNormalColor">
            <summary>
            Gets metronormal color.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.MetroTabsRenderer.DrawBackground(System.Drawing.Graphics)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.MetroTabsRenderer.DrawBorders(System.Drawing.Graphics)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.MetroTabsRenderer.GetItemPreferredSize" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.MetroTabsRenderer.GetOverlappedWidth" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroTabsRenderer.ActiveTabFont" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.MetroTabsRenderer.ForeColor" -->
        <member name="P:Syncfusion.Windows.Forms.MetroTabsRenderer.MetroHighlightColor">
            <summary>
            Gets or sets metrohighlight color
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.MetroTabsRenderer.MetroNormalColor">
            <summary>
            Gets or sets metro normal color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007TabsRenderer.m_tabNormalBlend">
            <summary>
            Blend used to draw the tab.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007TabsRenderer.m_tabPushedBlend">
            <summary>
            Blend used to draw the tab.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Office2007TabsRenderer.m_tabHoveredBlend">
            <summary>
            Blend used to draw the tab.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Office2007TabsRenderer.DrawBackground(System.Drawing.Graphics)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Office2007TabsRenderer.DrawBorders(System.Drawing.Graphics)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Office2007TabsRenderer.GetItemPreferredSize" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.Office2007TabsRenderer.GetOverlappedWidth" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007TabsRenderer.ActiveTabFont" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007TabsRenderer.ForeColor" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.Office2007TabsRenderer.GetTabRegion" -->
        <member name="T:Syncfusion.Windows.Forms.TabBar">
            <summary>
                A control for creating Tabbed Dialogs or Excel workbook type
                windows. This control provides a row of tabs that the
                user can select from one at a time. After each selection, a notification
                is provided that allows for changing of UI.
                The tab bar can share the row with an associated scrollbar. The
                user can adjust the width of the tab bar and increase the scrollbar's
                size by dragging a splitter found in the middle of the row.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.isHovered">
            <summary>
            Indicates whether TabBar is mouse pointed or not
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.AddNewPageButtonBounds">
            <summary>
            Specifies AddNewPageButton Image rendering bound
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.toolTip">
            <summary>
            Creates the ToolTip.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.edit">
            <summary>
            Creates the text box during edit
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.scrollBar">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.selectedIndex">
            <internalonly/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.m_colorScheme">
            <summary>
            Specifies office 2007 color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.m_style">
            <summary>
            Style of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.m_office2007ColorTable">
            <summary>
            Color table for Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.AddPageRect">
            <summary>
            To get the Bounds of the AddNewButton.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.#ctor">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.TabBar"/> with a scrollbar.
            </summary>
            <param name="scrollBar">The scrollbar to be displayed to the right of the tab bar.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBar.editlostfocus">
            <summary>
            Indicates whether edit custom control lost its focus.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.BeginEdit">
            <summary>
            Assign the text to the TabBar
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ShouldSerializeEditOnTabPage">
            <summary>
            To Specify EditOnTabPage to be serialized or not
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnClickedTab(Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Occurs when the user clicks on a tab.
            </summary>
            <param name="tab">The tab that was clicked.</param>
            <remarks>
            Sets the <see cref="P:Syncfusion.Windows.Forms.TabBar.SelectedIndex"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnDraggingTab(Syncfusion.Windows.Forms.TabMovedEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBar.DraggingTab"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.TabMovedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnMoveSplitter(System.Object,System.Int32,System.Int32)">
            <summary>
            Occurs when the users drags the splitbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="x">The current horizontal position in pixels.</param>
            <param name="y">The current vertical position in pixels.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnMovedSplitter(System.Object)">
            <summary>
            Occurs after the user moved the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnRelativeWidthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBar.RelativeWidthChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.InvalidateSplitter(System.Object)">
            <summary>
            Repaints the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnCreateInternalSplitter">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
                Handles the WM_SETCURSOR message.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnSetCursor(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ResetAddButtonHoverColor">
            <summary>
            Resets the AddButtonHoverColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ShouldSerializeAddButtonHoverColor">
            <summary>
            ShouldSerialize the AddButtonHoverColor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ResetToolTips">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ComputeTabBarBounds">
            <summary>
            Calculates the boundaries of the tab bar (both tabs and arrows) within the current control.
            </summary>
            <returns>The boundaries of the tab bar.</returns>
            <remarks>
            Will return <see cref="P:System.Windows.Forms.Control.ClientRectangle"/> unless overriden in derived class.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ComputeTabBarChildBounds(System.Drawing.Rectangle)">
            <summary>
            Calculates the boundaries of the tab bar child (without arrow bar) within the current control.
            </summary>
            <param name="buttonBarRect">The size of the tab bar.</param>
            <returns>The boundaries of the inner tab bar.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.ComputeButtonBarChildBounds">
            <summary>
            Calculates the boundaries of the arrow bar within the current control.
            </summary>
            <returns>The boundaries of the arrow bar.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.Refresh">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnCreateTabBarChild">
            <summary>
            Creates the inner tab bar that displays the tabs.
            </summary>
            <returns>The <see cref="T:Syncfusion.Windows.Forms.InternalTabBar"/> for the inner tabs.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnButtonLookChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnCreateInternalSpacerChild">
            <summary>
            Creates an instance of the <see cref="T:Syncfusion.Windows.Forms.InternalSpacer"/> and initializes it with the layout information.
            </summary>
            <returns>The initialized <see cref="T:Syncfusion.Windows.Forms.InternalSpacer"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnStyleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.RaiseSelectedIndexChangedEvent(Syncfusion.Windows.Forms.SelectedIndexEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.RaiseSelectedIndexChangingEvent(Syncfusion.Windows.Forms.SelectedIndexEventArgs)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.FindItem(System.Object)">
            <summary>
                Finds and returns the tab that holds the specified item as cookie.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.RemoveItem(System.Object)">
            <summary>
                Removes the tab that holds the specified item as cookie.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.RemoveAll">
            <summary>
            Removes all tabs.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnImageListChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBar.ImageListChanged"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnSelectedIndexChanging(System.Int32,Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanging"/> event.
            </summary>
            <param name="index">The new tab index.</param>
            <param name="tab">The object for the tab.</param>
            <returns>False if cancelled; True if successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnSelectedIndexChanged(System.Int32,Syncfusion.Windows.Forms.InternalTab)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanged"/> event.
            </summary>
            <param name="index">The new tab index.</param>
            <param name="tab">The object for the tab.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBar.OnCancelMode(System.EventArgs)">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanged">
            <summary>
            Occurs after the selected tab index has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBar.SelectedIndexChanging">
            <summary>
            Occurs before the selected tab index is changing.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.EditOnTabPage">
            <summary>
            Enable the edit mode in TabBarPage
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBar.DraggingTab">
            <summary>
            Occurs when a tab is dragged by the user. You can set e.Cancel = True
            to prevent dragging a tab.
            </summary>
            <example>
            <code lang="C#">
            public Form1()
            {
            	InitializeComponent();
            
            	this.tabControl1.Bar.DraggingTab += new TabMovedEventHandler(Bar_DraggingTab);
            }
            
            private void Bar_DraggingTab(object sender, TabMovedEventArgs e)
            {
            	Console.WriteLine("Bar_DraggingTab {0}, {1}", e.Tab, e.DestTab);
            	e.Cancel = true; // Do not allow dragging the tab
            }</code>
            </example>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBar.RelativeWidthChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.TabBar.RelativeWidth"/> property has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.ShowAddNewOption">
            <summary>
            Gets/Sets whether to show/hide AddNewButton Image
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.AddButtonHoverColor">
            <summary>
            Gets/Sets the Hover color for AddButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.AddButtonImage">
            <summary>
            Gets/Sets AddNewTabBarOption Image in TabBarSplitterControl
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.HoveredTabBarPage">
            <summary>
            Gets/Sets TabBarPage which is being mouse pointed
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.TabFolderDelta">
            <summary>
            Gets / sets the delta used for drawing the tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.ScrollBehavior">
            <summary>
            Gets / sets the scroll behavior of this tab bar: pixel or tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.TabBarChild">
            <summary>
            Gets / sets the inner tab bar that displays the tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.LeftSpacerChild">
            <summary>
            Gets or sets a <see cref="P:Syncfusion.Windows.Forms.TabBar.LeftSpacerChild"/> that holds an array of buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.RightSpacerChild">
            <summary>
            Gets or sets a <see cref="P:Syncfusion.Windows.Forms.TabBar.LeftSpacerChild"/> that holds an array of buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Site">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.RelativeWidth">
            <summary>
            Gets / sets the width of the tab bar relative to the width of the client bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.SelectedIndex">
            <summary>
                Gets / sets the index of the currently selected tab in the strip, if there
                is one. If the value is -1, there is currently no selection. If the
                value is 0 or greater, then the value is the index of the currently
                selected tab.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Resizable">
            <summary>
            Enables / disables the resizing of tab bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Tabs">
            <summary>
            Returns the list of tabs displayed in the tab bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Style">
            <summary>
            Gets or sets the visual style of the tabBar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Office2007ColorScheme">
            <summary>
            Gets or sets office 2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Windows.Forms.TabBar.DisplayArrowButtons" -->
        <member name="P:Syncfusion.Windows.Forms.TabBar.ImageList">
            <summary>
                Returns the imageList the control points at. This is where tabs that have imageIndex
                set will get their images from.
            </summary>
            <returns>
                An image list control.
            </returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBar.ImageListChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.TabBar.ImageList"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.SelectedItem">
            <summary>
            Gets / sets the cookie of the current selected tab or sets the tab with the specified cookie.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.ShowToolTips">
            <summary>
                Indicates whether ToolTips are being shown for tabs that have ToolTips set on
                them.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.TabCount">
            <summary>
                Returns the number of tabs in the strip.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBar.Text">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBar.custom">
            <summary>
            Class to derive the TextBox to Edit
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarDesigner">
            <summary>
               <para>
                  Provides design-time functionality for the <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.</para>
            </summary>
            <remarks>
            <para><see cref="T:Syncfusion.Windows.Forms.TabBarDesigner"/> provides a way to add and remove
               tabs at design-time, as well as tab hit testing logic at design-time.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.GetHitTest(System.Drawing.Point)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.Initialize(System.ComponentModel.IComponent)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>
                 Called when the current selection changes. Here we check to
                 see if the newly selected component is one of our tabs. If it
                 is, we make sure that the tab is the currently visible tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.OnTabRelativeWidthChanged(System.Object,System.EventArgs)">
            <summary>
                 Called when the tab property changes. We just set a flag here to
                 indicate to the later index changed event that the change was the
                 result of a property change, so there is no need to update the
                 selection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarDesigner.OnTabSelectedIndexChanged(System.Object,Syncfusion.Windows.Forms.SelectedIndexEventArgs)">
            <summary>
                 Called when the selected tab changes. This accesses the design
                 time selection service to surface the new tab as the current
                 selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarDesigner.PersistedSelectedIndex">
            <summary>
            <para>Accessor method for the <see cref="P:Syncfusion.Windows.Forms.TabBar.SelectedIndex"/> property on
            <see cref="T:Syncfusion.Windows.Forms.TabBar"/>.</para>
            </summary>
            <value>
               <para>The selected index.</para>
            </value>
            <remarks>
               <para>This property is shadowed at design-time.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarPage">
            <summary>
                TabPage implements a single page of a tab bar control. It is essentially
                a panel that can host other child controls. The TabBarSplitterControl will
                display the text property of this control as a label in the associated tab.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage._gestureConfigSize">
            <summary>
            The size of the GESTURECONFIG.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage._gestureInfoSize">
            <summary>
            The size of the GESTUREINFO.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage._ptFirst">
            <summary>
            The starting Gesture points
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage._ptSecond">
            <summary>
            The ending gesture point.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage.lastVerticalScrollValue">
            <summary>
            Initialize the last vertical scroll value.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage.lastHorizontalScrollValue">
            <summary>
            Initialize the last horizontal scroll value.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.DecodeGesture(System.Windows.Forms.Message@)">
            <summary>
            Handles the gesture information.
            </summary>
            <param name="m"> The Messagge</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage.m_tabBackColor">
            <summary>
            Back color for TabBarPage Tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage.m_TabBarColor">
            <summary>
            Holds TabBar back color
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.ResetTabBarColor">
            <summary>
            To Reset TabBarColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.ShouldSerializeTabBarColor">
            <summary>
            Indicate whether to serialize TabBarColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.SplitRow(System.Int32)">
            <summary>
            Indicates whether we can split the rows at the given y coordinate.
            </summary>
            <param name="cy">The vertical position in percentages of the splitter control's height.</param>
            <returns>True if rows were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.SplitColumn(System.Int32)">
            <summary>
            Indicates whether we can split the columns horizontally at the specified x coordinate.
            </summary>
            <param name="cx">The horizontal position in percentages of the splitter control's width.</param>
            <returns>True if columns were split successfully; False if they were already split or the operation aborted.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnPaneCreated(Syncfusion.Windows.Forms.SplitterPaneEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.PaneCreated"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.SplitterPaneEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnPaneClosing(Syncfusion.Windows.Forms.SplitterPaneEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.PaneClosing"/> event.
            </summary>
            <param name="e">A <see cref="T:Syncfusion.Windows.Forms.SplitterPaneEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.DisposePane(System.Int32,System.Int32)">
            <summary>
            Closes the specified pane.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.DeleteRow(System.Int32)">
            <summary>
            Closes the splitter panes at the specified row.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.DeleteColumn(System.Int32)">
            <summary>
            Closes the splitter panes at the specified column.
            </summary>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.IsActive(System.Windows.Forms.Control,System.Windows.Forms.ScrollBars)">
            <summary>
            Indicates whether the scrollbar belongs to the active pane.
            </summary>
            <param name="control">The control associated with the scrollbar.</param>
            <param name="sbType">Specifies the vertical or horizontal scrollbar.</param>
            <returns>True if active; False otherwise.</returns>
            <remarks>
            
            </remarks>
            <example>
            ScrollControl checks IsActive to find out if it is target of a HScroll event
            <code lang="C#">
            		protected virtual void OnHScroll(object sender, ScrollEventArgs se)
            		{
            			try
            			{
            				IScrollBarFrame sbf = GetScrollBarFrameOfComponent(this);
            				if (sbf != null &amp;&amp; !sbf.IsActive(this, ScrollBars.Horizontal))
            					return;
            
            				...
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.GetPane(System.Int32,System.Int32)">
            <summary>
            Returns the splitter pane at the specified row and column. If there is no pane found at the
            specified row and column a pane will be created on demand with a call to <see cref="M:Syncfusion.Windows.Forms.SplitterControl.OnCreateNewControl(System.Int32,System.Int32,System.Windows.Forms.Control)"/>.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <returns>The control at the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.GetPaneInternal(System.Int32,System.Int32)">
            <summary>
            Returns the splitter pane at the specified row and column. If there is no pane found at the
            specified row and column a null reference will be returned.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
            <returns>The control at the pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.FindPane(System.Windows.Forms.Control,System.Int32@,System.Int32@)">
            <summary>
            Returns the row and column index for a child pane.
            </summary>
            <param name="control">The control to search for.</param>
            <param name="row">A placeholder where the row is returned.</param>
            <param name="column">A placeholder where the column is returned.</param>
            <returns>True if the control is a pane; False if the control was not a child pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.SetActivePane(System.Int32,System.Int32)">
            <summary>
            Sets the active pane in the splitter control specified by the row and column indices.
            </summary>
            <param name="row">The zero-based index for the splitter pane row.</param>
            <param name="column">The zero-based index for the splitter pane column.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.CanActivateNext(System.Boolean)">
            <summary>
            Indicates whether there is a next or previous pane that can be activated. 
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
            <returns>True if activating next or previous pane is good; False if already at last or first pane.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.ActivateNext(System.Boolean)">
            <summary>
            Activates the next or previous pane. 
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnMoveSplitter(System.Object,System.Int32,System.Int32)">
            <summary>
            Occurs when the user drags the splitterbar.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="x">The current horizontal position in pixels.</param>
            <param name="y">The current vertical position in pixels.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnMovedSplitter(System.Object)">
            <summary>
            Occurs after the user has moved the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.InvalidateSplitter(System.Object)">
            <summary>
            Repaints the splitter bar.
            </summary>
            <param name="sender">The source of the event.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.WmSetCursor(System.Windows.Forms.Message@)">
            <summary>
                Handles the WM_SETCURSOR message.
            </summary>
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnSetCursor(System.Windows.Forms.Message@)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.#ctor(System.String)">
            <overload>
                Initializes a new TabBarPage.
            </overload>
            <summary>
                Constructs a TabBarPage with text for the tab.
            </summary>
            <param name='text'>
                The text for this tab.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.#ctor">
            <summary>
                Initializes a new TabBarPage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.GetTabBarPageOfComponent(System.Object)">
            <summary>
                Given a component, this retrieves the tab page that it is parented to or
            NULL if it is not parented to any tab page.
            </summary>
            <param name='comp'>
                The component to check.
            </param>
            <returns>
                A TabBarPage that the component is parented to or NULL if
                no such page exists. This will return the component if it
                is an instance of TabBarPage.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.CreateControlsInstance">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnTextChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnToolTipTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.ToolTipTextChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarPage.visible">
            <summary>
            Gets or sets the visibility of the control.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnSplitBarsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.SplitBarsChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnHSplitPosChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.HSplitPosChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnVSplitPosChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.VSplitPosChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnSplitterLayoutChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.SplitterLayoutChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.ActivateControl(System.Windows.Forms.Control)">
            <summary>
            Activates a specified control.
            </summary>
            <param name="c">The <see cref="T:System.Windows.Forms.Control"/> being activated.</param>
            <returns>True if the control is successfully activated; False otherwise.</returns>
            <remarks>
            The control must be a child of the container control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnEnter(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnValidating(System.ComponentModel.CancelEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnValidated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnLostFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnGotFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarPage.Deactivated"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.QueryFocusInside">
            <summary>
            Indicates whether this control contains focus. If <see cref="P:Syncfusion.Windows.Forms.TabBarPage.ActiveControl"/> 
            implements <see cref="T:Syncfusion.Windows.Forms.IQueryFocusInside"/>, the <see cref="M:Syncfusion.Windows.Forms.IQueryFocusInside.QueryFocusInside"/>
            method is called on the <see cref="P:Syncfusion.Windows.Forms.TabBarPage.ActiveControl"/>.
            </summary>
            <returns>True if the control or any child control has focus; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnControlGotFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event. This method is called when the control
            or any child control gets focus and this control did not have focus before.
            </summary>
            <remarks>
            Inheriting classes should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlGotFocus"/> is also called when child controls get focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnControlLostFocus">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event. This method is called when the control
            or any child control loses focus and the newly focused control is not a child of this control. 
            </summary>
            <remarks>
            Inheriting classed should override this method instead of overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>
            because <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlLostFocus"/> is also called when child controls lose focus and it
            is not called when focus is moved within child controls of this control.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnValidatingLostFocus">
            <summary>
            This method is called if the control's <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlLostFocus"/> notification occurs
            while handling a <see cref="E:System.Windows.Forms.Control.Validating"/> event. This typically occurs if a
            message box is displayed from a <see cref="E:System.Windows.Forms.Control.Validating"/> event handler.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.ToolTipTextChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.TabBarPage.ToolTipText"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.SplitBarsChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.TabBarPage.SplitBars"/> property has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.VSplitPosChanged">
            <summary>
            Occurs when the vertical splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.HSplitPosChanged">
            <summary>
            Occurs when the horizontal splitter position has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.SplitterLayoutChanged">
            <summary>
            Occurs when the splitter layout has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.SplitterParent">
            <summary>
            Returns the parent splitter frame.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.RowCount">
            <summary>
            Returns the number of visible row panes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.ColumnCount">
            <summary>
            Returns the number of visible column panes.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.PaneCreated">
            <summary>
            Occurs after the control to be displayed in a new pane has been created. Use this
            event to implement additional initialization for the new control. 
            </summary>
            <remarks>
            PaneCreated is an ideal hook to add handler for events in the new control.
            </remarks>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.PaneClosing">
            <summary>
            Occurs after a row or column is hidden and before the control that is displayed in the pane 
            is disposed. Use this event to implement additional clean up for the control before <see cref="M:Syncfusion.Windows.Forms.TabBarPage.DisposePane(System.Int32,System.Int32)"/>
            is called. 
            </summary>
            <remarks>
            PaneClosing is an ideal hook to unwire event handlers from the control.
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.ActivePane">
            <summary>
            Gets / sets the active pane in the splitter control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Anchor">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Dock">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Enabled">
            <summary>
            Enables / disables this page in a <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.TabEnabled">
            <summary>
            Gets or set the value indicating whether the TabBarPage is enabled or not
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.TabIndex">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.TabStop">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Text">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.ToolTipText">
            <summary>
                Gets / sets the ToolTip text for the tab that will appear when the mouse hovers
                over the tab and the TabBarSplitterControl's showToolTips property is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.TabMaxWidth">
            <summary>
            Sets the Maximum width for the TabBarPage
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Visible">
            <summary>
            Gets or sets the visibility of the control.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.SplitBars">
            <summary>
            Gets / sets a value indicating what split behavior is supported. Rows, columns or both.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.HSplitPos">
            <summary>
            Gets / sets the horizontal splitter position in percentages of the splitter control's width.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.VSplitPos">
            <summary>
            Gets / sets the vertical splitter position in percentages of the splitter control's height.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.SplitterLayout">
            <summary>
            Gets / sets the <see cref="P:Syncfusion.Windows.Forms.TabBarPage.SplitterLayout"/> that holds information about current vertical and horizontal split positions.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Size">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.ThemeChanged">
            <summary>
            Fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.ActiveControl">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.IsValidating">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnValidating(System.ComponentModel.CancelEventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.IsValidated">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnValidated(System.EventArgs)"/> method has been called. <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnLeave(System.EventArgs)"/> and <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.IsActiveControl">
            <summary>
            Indicates whether the <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnEnter(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnLeave(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.IsDeactivated">
            <summary>
            Indicates whether both <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnDeactivated(System.EventArgs)"/> has been called. <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnEnter(System.EventArgs)"/> resets this flag.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.HasControlFocus">
            <summary>
            Indicates whether both <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlGotFocus"/> has been called. <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlLostFocus"/> resets this flag.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarPage.Deactivated">
            <summary>
            Occurs when both <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnControlLostFocus"/> and <see cref="M:Syncfusion.Windows.Forms.TabBarPage.OnLeave(System.EventArgs)"/> occurs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.Icon">
            <summary>
            Gets / sets the icon displayed on the tab. 
            </summary>
            <value>An Icon value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPage.TabBackColor">
            <summary>
            Gets or sets back color for TabBarPage Tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.TabBarPageControlCollection.#ctor(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
                 Creates a new TabBarPageControlCollection.
            </summary>
            <param name='owner'>
                 The owner of this collection. This is the control whose child
                 controls we are to represent.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPage.TabBarPageControlCollection.Add(System.Windows.Forms.Control)">
            <summary>
               <para>Adds a child control to this control. The control becomes the last control
                  in the child control list. If the control is already a child of another
                  control, it is first removed from that control. The tab page overrides
                  this method to ensure that child tab pages are not added to it, as these
                  are illegal.</para>
            </summary>
            <param name="value">The child control to be added.</param>
            <exception cref="T:System.SystemException">If the specified control is a toplevel control or if a circular control reference would result.</exception>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarPageDesigner">
            <summary>
                  Provides design-time functionality for <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/>
                  controls.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageDesigner.CanBeParentedTo(System.ComponentModel.Design.IDesigner)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPageDesigner.SelectionRules">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarPageAddingHandler">
            <summary>
            TabBarPageAdding Event DelegateHandler
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarPageAddingEventArgs">
            <summary>
            TabBarPageAdding event arguement class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageAddingEventArgs.#ctor">
            <summary>
            TabBarPageAdding event arguement class initializer
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelEditBeginEventHandler">
            <summary>
            LabelEditing Event DelegateHandler
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelEditBeginEventArgs">
            <summary>
            LabelEditing event arguement class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelEditBeginEventArgs.#ctor(System.String)">
            <summary>
            LabelEdit ends event arguement class initializer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.LabelEditBeginEventArgs.args">
            <summary>
            Cancel args
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelEditBeginEventArgs.Text">
            <summary>
            Gets the TabBarText
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelEditBeginEventArgs.Cancel">
            <summary>
            Cancel the selection 
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelEditEventHandler">
            <summary>
            LabelEditing Event DelegateHandler
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.LabelEditEventArgs">
            <summary>
            LabelEditing event arguement class
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.LabelEditEventArgs.#ctor(System.String)">
            <summary>
            LabelEdit ends event arguement class initializer
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.LabelEditEventArgs.Text">
            <summary>
            Gets the TabBarText
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarSelectionHandler">
            <summary>
            TabBarMouseEventArgs event delegate handler
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarSelectionArgs">
            <summary>
            TabBarMouseEventArgs class
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSelectionArgs.m_Buttons">
            <summary>
            Holds button instances.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSelectionArgs.m_InternalTab">
            <summary>
            Holds TabBarPage which is selected.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSelectionArgs.m_Bounds">
            <summary>
            Holds bar location.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSelectionArgs.#ctor(Syncfusion.Windows.Forms.InternalTab,System.Drawing.Rectangle,System.Windows.Forms.MouseButtons)">
            <summary>
            TabBarSelectionArgs class initializer
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSelectionArgs.Button">
            <summary>
            Gets the Mouse Button
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSelectionArgs.InternalTab">
            <summary>
            Gets the selected TabBarPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSelectionArgs.Bounds">
            <summary>
            Gets the TabBounds bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabPageSelectedEventArgs.Location">
            <summary>
            Gets Mouse Pointer Location
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarSplitterControl">
            <summary>
            Provides functionality for displaying several <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> controls
            in an Excel-like workbook control. Each <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> might optionally
            support splitting its view with a dynamic splitter frame.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPageEditMode">
            <summary>
            Variable for TabBar page is in EditMode
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.CTRLSIZE">
            <summary>
            Default size of the control
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.m_colorScheme">
            <summary>
            Specifies office 2007 color scheme.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.m_style">
            <summary>
            Style of the control.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.m_office2007ColorTable">
            <summary>
            Color table for Office2007 visual style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.temp">
            <summary>
            Used to move the TabBarPage in TabBarSplitterControl
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetEnableTouchMode">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ApplyScaleToControl(System.Single)">
            <summary>
            Scale the control based on the scale factor passed in the argument.
            </summary>
            <param name="scaleFactor">value to scale the factor based upon.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.InitLayout">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.CreateScrollBarContainer(System.Windows.Forms.ScrollBars,System.Int32)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.Refresh">
            <summary>
            Overridden method of refresh.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ToString">
            <summary>
            Overridden method of Tostring()
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.TabsMoving(System.Object,Syncfusion.Windows.Forms.TabMovedEventArgs)">
            <summary>
            Called when the user is dragging a tab.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.TabsMoved(System.Object,Syncfusion.Windows.Forms.TabMovedEventArgs)">
            <summary>
            Called when the user finishes dragging a tab.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnStyleChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.style">
            <summary>
            Get or Set of Skin Manager Interface
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnPaint(System.Windows.Forms.PaintEventArgs)" -->
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Windows.Forms.TabBarSplitterControl.WndProc(System.Windows.Forms.Message@)" -->
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.RaiseTabBarPageAdding(Syncfusion.Windows.Forms.TabBarPageAddingEventArgs)">
            <summary>
            To raise TabBarPageAdding Event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.LabelEditEnds(Syncfusion.Windows.Forms.LabelEditEventArgs)">
            <summary>
            To raise LabelEditEnds Event
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterControl.cancelLabelEdit">
            <summary>
            Cancels the editable state of the Tabpage.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.LabelEditBegins(Syncfusion.Windows.Forms.LabelEditBeginEventArgs)">
            <summary>
            To raise LabelEditBegin Event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.RaiseTabBarMouseDownEvent(Syncfusion.Windows.Forms.InternalTab,System.Drawing.Rectangle,System.Windows.Forms.MouseButtons)">
            <summary>
            To raise TabBarMouseDown Event
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeActivePageBorderColor">
            <summary>
            Indicates whether to Serialize ActivePageBorderColor API
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetActivePageBorderColor">
            <summary>
            Resets the ActivePageBorderColor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeShowMetroSeperator">
            <summary>
            Indicates whether to Serialize ShowMetroSeperator 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetShowMetroSeperator">
            <summary>
            Resets the ShowMetroSeperator.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeEnableOffice2013Style">
            <summary>
            Indicates whether to Serialize EnableOffice2013Style API
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetEnableOffice2013Style">
            <summary>
            Resets the EnableOffice2013Style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnActivePageChanged(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePageChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnActivePageChanging(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnActivePageChanging(System.Windows.Forms.ControlEventArgs)"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetEnabledColor">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.TabBarSplitterControl.EnabledColor"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetDisabledColor">
            <summary>
            Resets <see cref="P:Syncfusion.Windows.Forms.TabBarSplitterControl.DisabledColor"/> to default.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnButtonLookChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.CreateControlsInstance">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnCreateTabBarPageCollection">
            <summary>
            Creates the <see cref="T:Syncfusion.Windows.Forms.TabBarPageCollection"/>.
            </summary>
            <returns>The new <see cref="T:Syncfusion.Windows.Forms.TabBarPageCollection"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ProcessKeyEventArgs(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ProcessKeyPreview(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ProcessKeyMessage(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.MoveTabBarPage(Syncfusion.Windows.Forms.TabBarPage,Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Move the Tabbarpage with respect to given pages.
            </summary>
            <param name="copy"></param>
            <param name="MoveTo"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.MoveTabBarPage(System.Int32,System.Int32)">
            <summary>
            Move Tabbarpage with respect to given index.
            </summary>
            <param name="tab"></param>
            <param name="destTab"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.HidePage(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Hides the <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/>.
            </summary>
            <param name="page"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivateNextPage(System.Boolean)">
            <summary>
            Activates the next or previous page.
            </summary>
            <param name="prev">True if previous pane should be activated; False if next pane should be activated.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnCancelMode(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnValidatingLostFocus">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnVisibleChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetLabelEdit">
            <summary>
            To reset LabelEdit
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeLabelEdit">
            <summary>
            To Specify LabelEdit to be serialized or not
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetEditOnTab">
            <summary>
            To reset EditOnTab
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeEditOnTab">
            <summary>
            To Specify EditOnTab to be serialized or not
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ResetAddButtonHoverColor">
            <summary>
            Resets the AddButtonHoverColor
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.ShouldSerializeAddButtonHoverColor">
            <summary>
            ShouldSerialize the AddButtonHoverColor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnFontChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnSizeChanged(System.EventArgs)">
            <summary></summary>
            <param name="e"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControl.OnShowToolTipsChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePageChanged">
            <summary>
            Occurs after the active page has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePageChanging">
            <summary>
            Occurs before the active page is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarVisibleChanged">
            <summary>
            Occurs when the TabBarPage is show or Hide or Add or Remove.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPageMouseEnter">
            <summary>
            Occurs when Mouse pointer rest on TabBarPage bounds
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPageMouseLeave">
            <summary>
            Occurs when Mouse pointer leave TabBarPage bounds
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPageAdding">
            <summary>
            Occurs when Mouse pointer leave TabBarPage bounds
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.LabelEditEnd">
            <summary>
            Occurs after edting the TabBarPage.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.LabelEditBegin">
            <summary>
            Occurs before edting the TabBarPage.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarMouseDown">
            <summary>
            Triggers mouse down occurs on TabBar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.EnableTouchMode">
            <summary>
            Gets or sets value to enable or disable the Touchmode to the controls.
            </summary>
            <remarks>Scale factor will be updated automatically if scalefactor is equal to 1</remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Bar">
            <summary>
            Returns the tab bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ShowIcons">
            <summary>
            Indicates whether Icons should be displayed in the tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Style">
            <summary>
            Gets or sets the visual style of the tabBarSplitterControl.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Office2007ColorScheme">
            <summary>
            Gets or sets office 2007 color scheme.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Office2007ColorTable">
            <summary>
            Gets color table for Office2007 visual style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Office2007ScrollBars">
            <summary>
            Gets or sets office 2007 style scroll bars. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Office2007ScrollBarsColorScheme">
            <summary>
            Gets or sets office 2007 scroll bars colorScheme. (overridden property)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.CreateParams">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePageIndex">
            <summary>
            Gets or sets the index of the active page.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePageBorderColor">
            <summary>
            Specifies the color with which the ActivePageBorder bottom border should be drawn.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ShowMetroSeperator">
            <summary>
            Gets or sets whether to show/hide the Seperator in MetroStyle
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.EnableOffice2013Style">
            <summary>
            Gets or sets value to enable or disable the EnableOffice2013Style in MetroStyle
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ActivePage">
            <summary>
                Gets or sets the currently visible TabBarPage.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.RepeatClickDelay">
            <summary>
            Gets or sets the number of milliseconds to wait before repeatedly firing scroll event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.EnabledColor">
            <summary>
            Gets or sets the color of the arrows in the enabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.DisabledColor">
            <summary>
            Gets or sets the color of the arrows in the disabled buttons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPages">
            <summary>
                Returns the list of TabBarPages displayed in the TabBar. Each TabBarPage
                will have a tab associated with it.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.TabFolderDelta">
            <summary>
            Gets or sets the delta used for drawing the tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ScrollBehavior">
            <summary>
            Gets or sets the scroll behavior of this tab bar: pixel or tabs.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.SizeFactor">
            <summary>
            Gets or sets the size factor with that TabBar size to be increased
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ShowAddNewTabBarPageOption">
            <summary>
            Gets/Sets whether to display AddNewPageTabBarPage Option or not
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.LabelEdit">
            <summary>
            Enable the edit mode when Double Click on TabBarPage
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.EditOnTab">
            <summary>
            Enable the edit mode in Selected TabBar
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.AddNewButtonImage">
            <summary>
            Gets/Sets background image for AddNewTabBarPageButton
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.AddButtonHoverColor">
            <summary>
            Gets/Sets the Hover color for AddButton.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.RelativeWidth">
            <summary>
            Gets or sets the width of the tab bar relative to the width of the client bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.Resizable">
            <summary>
            Enables or disables the resizing of tab bar.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControl.ScrollButtons">
            <summary>
            Gets or sets the arrow buttons to be shown in an arrow bar.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarPageCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> objects.
            </summary>
            <remarks>
            You can access this collection with the <see cref="P:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPages"/> of a <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.#ctor(Syncfusion.Windows.Forms.TabBarSplitterControl)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.TabBarPageCollection"/> and
            associates it with a <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/> that manages this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that lets you enumerate through the list of <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> items.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index.
            </summary>
            <param name="index">The item index.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.Clear">
            <summary>
            Clears all entries from the list.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.Insert(System.Int32,Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Inserts a <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> at the specified index.
            </summary>
            <param name="index">The index where the page should be inserted.</param>
            <param name="value">The page to be inserted.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.Add(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Adds a <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> to the collection.
            </summary>
            <param name="value">The page to be added.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.AddRange(Syncfusion.Windows.Forms.TabBarPage[])">
            <summary>
            Adds an array of <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> to this collection.
            </summary>
            <param name="value">The pages to be added.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.Contains(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Indicates whether the specified <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> belongs to this collection.
            </summary>
            <param name="page">The page to be tested.</param>
            <returns>True if page belongs to collection; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.IndexOf(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Returns the index of the specified page to be queried.
            </summary>
            <param name="page">The page to look up.</param>
            <returns>The zero-based index of the page; -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.Remove(Syncfusion.Windows.Forms.TabBarPage)">
            <summary>
            Removes a page from the collection.
            </summary>
            <param name="value">The page to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarPageCollection.CopyTo(Syncfusion.Windows.Forms.TabBarPage[],System.Int32)">
            <overload>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </overload>
            <summary>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </summary>
            <param name="pages">
              <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the collection.</para>
            </param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPageCollection.Count">
            <summary>
            Returns the number of pages.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPageCollection.IsReadOnly">
            <summary>
            Returns False.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarPageCollection.Item(System.Int32)">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.TabBarPage"/> at the specified index.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarSplitterStyle">
            <summary>
            Specifies the style with which tabBarSplitterControl will appear.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterStyle.Default">
            <summary>
            Default appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterStyle.Office2007">
            <summary>
            Office 2007-like appearance.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.TabBarSplitterStyle.Metro">
            <summary>
            Metro like appearance.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner">
            <summary>
               <para>
                  Provides design-time functionality for the <see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControl"/>.</para>
            </summary>
            <remarks>
            <para><see cref="T:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner"/> provides a way to add and remove
               tabs at design-time, as well as tab hit testing logic at design-time.</para>
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.#ctor">
            <summary>
            Initializes a new TabBarSplitterControlDesigner.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.GetHitTest(System.Drawing.Point)">
            <summary>
               <para>
                  Indicates whether the
                  specified point was within the bounds of the component.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.WndProc(System.Windows.Forms.Message@)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.GetTabBarPageOfComponent(System.Object)">
            <summary>
                Given a component, this retrieves the tab page that it is parented to or
                NULL if it is not parented to any tab page.
            </summary>
            <param name='comp'>
                The component to check.
            </param>
            <returns>
                A TabPage that the component is parented to or NULL if
                no such page exists.  This will return the component if it
                is an instance of TabPage.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
               <para>Initializes the designer using the specified component.</para>
            </summary>
            <param name="component">The component to associate this designer with. This must always be an instance of the control.</param>
            <seealso cref="T:System.ComponentModel.Design.IDesigner"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.OnAdd(System.Object,System.EventArgs)">
            <summary>
                 Called in response to a verb to add a tab. This adds a new
                 tab with a default name.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.OnRemove(System.Object,System.EventArgs)">
            <summary>
                 This is called in response to a verb to remove a tab. It removes
                 the current tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.OnSelectionChanged(System.Object,System.EventArgs)">
            <summary>
                 Called when the current selection changes. Here we check to
                 see if the newly selected component is one of our tabs. If it
                 is, we make sure that the tab is the currently visible tab.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.OnTabRelativeWidthChanged(System.Object,System.EventArgs)">
            <summary>
                 Called when the tab property changes. We just set a flag here to
                 indicate to the later index changed event that the change was the
                 result of a property change, so there is no need to update the
                 selection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.OnTabActivePageChanged(System.Object,System.Windows.Forms.ControlEventArgs)">
            <summary>
            Called when the selected tab changes. This accesses the design
            time selection service to surface the new tab as the current
            selection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.PersistedActivePageIndex">
            <summary>
            Gets / sets the persisted active page index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.DrawGrid">
            <summary>
               <para>Indicates whether to draw a grid for the control.</para>
            </summary>
            <value>
            <para><see langword='True'/> if a grid should be drawn; 
            <see langword='False'/> otherwise.</para>
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Forms.TabBarSplitterControlDesigner.Verbs">
            <summary>
               <para>
                  Gets / sets the design-time verbs supported by the component associated with the designer.</para>
            </summary>
            <value>
            <para>An array of <see cref="T:System.ComponentModel.Design.DesignerVerb"/> objects.</para>
            </value>
            <remarks>
               <para>The verbs returned by this method are typically displayed in a right-click
                  menu by the design-time environment. The return value may be NULL if the
                  component has no design-time verbs. When a user selects one of the verbs, the
                  performVerb() method is invoked with the the corresponding DesignerVerb object.
                  NOTE: A design-time environment will typically provide a "Properties..." entry
                  on a component's right-click menu. The getVerbs() method should therefore not
                  include such an entry in the returned list of verbs.</para>
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Forms.TabPaint">
            <summary>
                 This class fully encapsulates the painting logic for a tab in a TabBarSplitterControl.  
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabPaint.DrawTab(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ImageList,System.Int32,System.String,System.Drawing.Brush,System.Drawing.Color,System.Drawing.Font,System.Boolean,System.Int32,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabPaint.DrawTabButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.String,System.Drawing.Brush,System.Int32,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabPaint.DrawTabText(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.ImageList,System.Int32,System.String,System.Drawing.Color,System.Drawing.Font,System.Boolean)">
            <internalonly/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.TabPaint.DrawTextInternal(System.Drawing.Graphics,System.Drawing.Font,System.Drawing.Color,System.Drawing.Rectangle,System.String)">
            <summary>
            Draws text by native GDI API.
            </summary>
            <param name="g"> Graphics object which ised for drawing. </param>
            <param name="f"> Font of the text. </param>
            <param name="color"> Color of the text. </param>
            <param name="rcBounds"> Bounds of tge text. </param>
            <param name="text"> Text which has to be drawn. </param>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorkbookForm">
             <summary>
                A form that hosts a <see cref="P:Syncfusion.Windows.Forms.WorkbookForm.WorkbookView"/>. The <see cref="P:Syncfusion.Windows.Forms.WorkbookForm.WorkbookView"/> fills the whole form.
             </summary>
            	<example>
            	<code lange="C#">
            	public class NewWorkbookFile : BasicAction
            	{
            		int windowCount = 0;
            		WorkbookModel workbook;
            		public override void InvokeAction(object sender, EventArgs e)
            		{
            			windowCount++;
            			workbook = new WorkbookModel("Workbook");
            			GridModel sheet1 = new GridModel();
            			SampleGrid.SetupGridModel(sheet1);
            			GridModel sheet2 = new GridModel();
            			SampleGrid.SetupGridModel(sheet2);
            
            			workbook.Worksheets.Add(new WorksheetModel(workbook, "Sheet 1", sheet1));
            			workbook.Worksheets.Add(new WorksheetModel(workbook, "Sheet 2", sheet2));
            
            			WorkbookForm doc = new WorkbookForm(workbook);
            			doc.Text = workbook.Name + windowCount;
            			doc.MdiParent = MainWindow;
            			doc.Show();
            		}
            	}
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookForm.#ctor(Syncfusion.Windows.Forms.WorkbookView)">
            <summary>
            Overloaded. Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookForm"/> and associates it with a <see cref="P:Syncfusion.Windows.Forms.WorkbookForm.WorkbookView"/>.
            </summary>
            <param name="workbookView">The view to be displayed in the form.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookForm.#ctor(Syncfusion.Windows.Forms.WorkbookModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookForm"/> and associates it with a new default <see cref="P:Syncfusion.Windows.Forms.WorkbookForm.WorkbookView"/>
            that is created for the specified <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </summary>
            <param name="workbookModel">The model for the workbook view to be displayed in the form.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookForm.#ctor">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookForm"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookForm.Dispose(System.Boolean)">
            <summary>
               Cleans up any resources being used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookForm.OnThemeChanged(System.EventArgs)">
            <summary>
            Raises the ThemeChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
            <remarks>
            <para>The OnThemeChanged method also allows derived classes to handle the event
            without attaching a delegate. This is the preferred technique for
            handling the event in a derived class.</para>
            <para>Note to Inheritors: When overriding OnThemeChanged in a derived
            class, be sure to call the base class's OnThemeChanged method so that
            registered delegates receive the event.</para>
            </remarks>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookForm.WorkbookView">
            <summary>
            Gets / sets the view that is displayed in the form.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookForm.ThemesEnabled">
            <summary>
            Indicates whether themes are enabled for this control.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorkbookForm.ThemeChanged">
            <summary>
            Fired when the ThemesEnabled property changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorkbookModel">
            <summary>
               Provides the data / model part for an Excel-like Workbook display. A <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> has a <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/>
               with multiple <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>s to display in the workbook. 
            </summary>
            <remarks>
            This class can be serialized into a serialization stream. <para/>
            Multiple <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> controls can share the same <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>. Each <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/>
            that is displayed in a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> is associated with a <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> from the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/>
            collection in this object.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.#ctor(System.String)">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> and sets a name for the workbook.
            </summary>
            <param name="name">The name of this workbook.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.OnActiveViewChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.WorkbookModel.ActiveViewChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.OnNameChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.WorkbookModel.NameChanged"/> event.
            </summary>
            <param name="e">Event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookModel.ToString">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorkbookModel.NameChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Name"/> has changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorkbookModel.ActiveViewChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.ActiveView"/> has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets">
            <summary>
            Returns the collection with <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> items.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookModel.ActiveView">
            <summary>
            Gets / sets the active <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> for this model.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookModel.Name">
            <summary>
            Gets / sets the name for this workbook.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorkbookView">
             <summary>
              Provides functionality for displaying several <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/> controls in an Excel-like workbook. 
             </summary>
             <remarks>
             A <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> is associated with a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>. The <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>
             has a <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/> collection. For each of the <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> objects in
             the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/> collection of the <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>, a <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/>
             is created and displayed in this <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>.
             </remarks>
            	<example>
            	<code lange="C#">
            	public class NewWorkbookFile : BasicAction
            	{
            		int windowCount = 0;
            		WorkbookModel workbook;
            		public override void InvokeAction(object sender, EventArgs e)
            		{
            			windowCount++;
            			workbook = new WorkbookModel("Workbook");
            			GridModel sheet1 = new GridModel();
            			SampleGrid.SetupGridModel(sheet1);
            			GridModel sheet2 = new GridModel();
            			SampleGrid.SetupGridModel(sheet2);
            
            			workbook.Worksheets.Add(new WorksheetModel(workbook, "Sheet 1", sheet1));
            			workbook.Worksheets.Add(new WorksheetModel(workbook, "Sheet 2", sheet2));
            
            			WorkbookForm doc = new WorkbookForm(workbook);
            			doc.Text = workbook.Name + windowCount;
            			doc.MdiParent = MainWindow;
            			doc.Show();
            		}
            	}
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookView.#ctor(Syncfusion.Windows.Forms.WorkbookModel)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> for the specified <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </summary>
            <param name="workbook">The <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> which holds data to be displayed in this view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookView.OnHandleCreated(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookView.TabsMoving(System.Object,Syncfusion.Windows.Forms.TabMovedEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookView.OnCreateTabBarPageCollection">
            <summary>
            Creates the <see cref="T:Syncfusion.Windows.Forms.WorksheetViewCollection"/>.
            </summary>
            <returns>The new <see cref="T:Syncfusion.Windows.Forms.WorksheetViewCollection"/>.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorkbookView.CreateControlsInstance">
            <override/>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorkbookView.Activated">
            <summary>
            Occurs when the view is activated.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorkbookView.Workbook">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> which holds data to be displayed in this view.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorksheetViewCollection">
            <summary>
            A collection of <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/> items.
            </summary>
            <remarks>
            You access this collection with the <see cref="P:Syncfusion.Windows.Forms.TabBarSplitterControl.TabBarPages"/> property of 
            a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetViewCollection.#ctor(Syncfusion.Windows.Forms.WorkbookView)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetViewCollection"/> and
            associates it with a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>.
            </summary>
            <param name="owner">The <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> that manages this collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetViewCollection.Add(Syncfusion.Windows.Forms.TabBarPage)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorksheetModel">
            <summary>
               Provides the data / model part for a worksheet in an Excel-like Workbook display. A <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> is a member of the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/>
               collection of a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </summary>
            <remarks>
            This class can be serialized into a serialization stream. <para/>
            Multiple <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> controls can share the same <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>. Each <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/>
            that is displayed in a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/> is associated with a <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> from the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/>
            collection in a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.#ctor(Syncfusion.Windows.Forms.WorkbookModel,System.String)">
            <overload>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>.
            </overload>
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> and associates it with a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </summary>
            <param name="workbook">The <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> this sheet belongs to.</param>
            <param name="name">The name of this sheet.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.#ctor(Syncfusion.Windows.Forms.WorkbookModel,System.String,System.Object)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> and associates it with a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/>.
            </summary>
            <param name="workbook">The <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> this sheet belongs to.</param>
            <param name="name">The name of this sheet.</param>
            <param name="content">The object with data to be displayed in this control, e.g. a Syncfusion.Windows.Forms.Grid.GridModel
            with grid data. The object should implement <see cref="T:Syncfusion.Windows.Forms.ICreateControl"/> the interface and be able to create a <see cref="T:System.Windows.Forms.Control"/> 
            object to be displayed as pane in a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>. <see langword="Syncfusion.Windows.Forms.Grid.GridModel"/> will create a
             <see langword="Syncfusion.Windows.Forms.Grid.GridControlBase"/> for example.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.CreateControl">
            <summary>
            Creates the <see cref="T:System.Windows.Forms.Control"/> that knows how to display the <see cref="F:Syncfusion.Windows.Forms.WorksheetModel.content"/> in a form.
            </summary>
            <returns>The <see cref="T:System.Windows.Forms.Control"/> to be displayed in the <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/>
            </returns>
            <remarks>
            The <see cref="F:Syncfusion.Windows.Forms.WorksheetModel.content"/> object should implement <see cref="T:Syncfusion.Windows.Forms.ICreateControl"/> interface and be able to create a <see cref="T:System.Windows.Forms.Control"/> 
            object to be displayed as pane in a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>. <see langword="Syncfusion.Windows.Forms.Grid.GridModel"/> will create a
             <see langword="Syncfusion.Windows.Forms.Grid.GridControlBase"/> for example.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.OnNameChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.WorksheetModel.NameChanged"/> event.
            </summary>
            <param name="e">EventArgs.Empty.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.OnContentChanged(System.EventArgs)">
            <summary>
            Occurs when the <see cref="F:Syncfusion.Windows.Forms.WorksheetModel.content"/> property is changed.
            </summary>
            <param name="e">EventArgs.Empty.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.OnToolTipTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.WorksheetModel.ToolTipTextChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModel.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Syncfusion.Windows.Forms.WorksheetModel.VisibleChanged"/> event.
            </summary>
            <param name="e">EventArgs.Empty.</param>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorksheetModel.NameChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorksheetModel.Name"/> is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorksheetModel.ToolTipTextChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorksheetModel.ToolTipText"/> is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorksheetModel.VisibleChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorksheetModel.Visible"/> property is changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorksheetModel.ContentChanged">
            <summary>
            Occurs when the <see cref="P:Syncfusion.Windows.Forms.WorksheetModel.Content"/> property is changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModel.Name">
            <summary>
            Gets / sets the name of this worksheet.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModel.Content">
            <summary>
            Gets / sets the object with data to be displayed in this control, e.g. a Syncfusion.Windows.Forms.Grid.GridModel
            with grid data. The object should implement <see cref="T:Syncfusion.Windows.Forms.ICreateControl"/> interface and be able to create a <see cref="T:System.Windows.Forms.Control"/> 
            object to be displayed as pane in a <see cref="T:Syncfusion.Windows.Forms.WorkbookView"/>. <see langword="Syncfusion.Windows.Forms.Grid.GridModel"/> will create a
             <see langword="Syncfusion.Windows.Forms.Grid.GridControlBase"/> for example.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModel.ToolTipText">
            <summary>
                Gets / sets the ToolTip text for the tab that will appear when the mouse hovers
                over the tab and the TabBarSplitterControl's showToolTips property is True.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModel.Visible">
            <summary>
            Indicates whether this worksheet is visible in the parent workbook.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModel.Workbook">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> this sheet is associated with.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorksheetModelCollection">
            <summary>
              <para>Represents a collection of <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> objects.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.#ctor">
            <overload>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> class.</para>
            </overload>
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> class.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Dispose">
            <summary>
            Releases any resources used.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.#ctor(Syncfusion.Windows.Forms.WorksheetModelCollection)">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> class containing the
            elements of the specified source collection.</para>
            </summary>
            <param name="value">A <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> with which to initialize the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.#ctor(Syncfusion.Windows.Forms.WorksheetModel[])">
            <summary>
              <para>Initializes a new instance of the <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> class containing the specified array of <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> objects.</para>
            </summary>
            <param name="value">An array of <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> objects with which to initialize the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.IndexOf(System.String)">
            <summary>
            Returns the index of a sheet with the specified name.
            </summary>
            <param name="name">The name of the sheet to find.</param>
            <returns>The index of the sheet with the specified name; -1 if not found.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Add(Syncfusion.Windows.Forms.WorksheetModel)">
            <summary>
              <para>Adds the specified <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to the collection.</para>
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to add.</param>
            <returns>
              <para>The index at which the new element was inserted.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.AddRange(Syncfusion.Windows.Forms.WorksheetModel[])">
            <summary>
              <para>Overloaded. Copies the elements of the specified array to the
             end of the collection.</para>
            </summary>
            <param name="value">An array of type <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> containing the objects to add to the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.AddRange(Syncfusion.Windows.Forms.WorksheetModelCollection)">
            <summary>
              <para>Adds the contents of another <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> to the end of the collection.</para>
            </summary>
            <param name="value">A <see cref="T:Syncfusion.Windows.Forms.WorksheetModelCollection"/> containing the objects to add to the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Contains(Syncfusion.Windows.Forms.WorksheetModel)">
            <summary>
              <para>Indicates whether the collection contains the specified <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>.</para>
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to search for in the collection.</param>
            <returns>
              <para>
                <see langword="True"/> if the collection contains the specified object;
            <see langword="False"/> otherwise.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.CopyTo(Syncfusion.Windows.Forms.WorksheetModel[],System.Int32)">
            <summary>
              <para>Copies the collection objects to a one-dimensional <see cref="T:System.Array"/> instance beginning at the
            specified index.</para>
            </summary>
            <param name="array">
              <para>The one-dimensional <see cref="T:System.Array"/> that is the destination of the values copied from the collection.</para>
            </param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.IndexOf(Syncfusion.Windows.Forms.WorksheetModel)">
            <summary>
              <para>Returns the index in the collection of the specified <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>, if it exists in the
            collection.</para>
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to locate in the collection.</param>
            <returns>
              <para>The index in the collection of the specified object, if found; -1 otherwise.</para>
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Insert(System.Int32,Syncfusion.Windows.Forms.WorksheetModel)">
            <summary>
              <para>Inserts the specified <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> into the collection at the specified index.</para>
            </summary>
            <param name="index">The zero-based index where the specified object should be inserted.</param>
            <param name=" value">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to insert.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Remove(Syncfusion.Windows.Forms.WorksheetModel)">
            <summary>
              <para> Removes the specified <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> from the collection.</para>
            </summary>
            <param name="value">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> to remove from the collection.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.Move(System.Int32,System.Int32)">
            <summary>
            Moves a worksheet from one position to another.
            </summary>
            <param name="index">The original index of the worksheet.</param>
            <param name="destination">The new index of the worksheet.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnSheetMoved(System.Int32,System.Int32,Syncfusion.Windows.Forms.SheetMovedReason)">
            <summary>
            Called when the order of the worksheet has changed.
            </summary>
            <param name="index">The original index of an affected worksheet.</param>
            <param name="destination">The new index of an affected worksheet</param>
            <param name="reason">The reason for the change.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnRemoveComplete(System.Int32,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnClearComplete">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnInsertComplete(System.Int32,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.OnValidate(System.Object)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.BeginUpdate">
            <summary>
            Suspend updating the display.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.EndUpdate">
            <summary>
            Resumes updating the display.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetModelCollection.CreateEmptyWorksheet(Syncfusion.Windows.Forms.WorkbookModel)">
            <summary>
            Creates a new empty <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> and names it "Sheet #".
            </summary>
            <param name="workbook">The <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> this new sheet is added to.</param>
            <returns>The new <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Forms.WorksheetModelCollection.SheetMoved">
            <summary>
            Occurs when the order of sheets has been changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModelCollection.Item(System.Int32)">
            <summary>
            Gets / sets the <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> at the specified index.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetModelCollection.Updating">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Windows.Forms.WorksheetModelCollection.BeginUpdate"/> was called.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Forms.WorksheetView">
            <summary>
               WorksheetView implements a single page in a <see cref="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView"/>. It is essentially a panel that hosts a child control
               that is created from the <see cref="P:Syncfusion.Windows.Forms.WorksheetModel.Content"/> of a <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>.
            </summary>
            <remarks>
            Multiple <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/> controls can share the same <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/>. Each <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/>
            that is displayed in a <see cref="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView"/> is associated with a <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> from the <see cref="P:Syncfusion.Windows.Forms.WorkbookModel.Worksheets"/>
            collection in a <see cref="T:Syncfusion.Windows.Forms.WorkbookModel"/> object.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetView.#ctor(Syncfusion.Windows.Forms.WorksheetModel,Syncfusion.Windows.Forms.WorkbookView)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Windows.Forms.WorksheetView"/> for an existing <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> and a <see cref="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView"/>
            that displays this sheet.
            </summary>
            <param name="worksheet">The <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> that manages the data for this view.</param>
            <param name="workbookView">The <see cref="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView"/> that displays this sheet as a page.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetView.InitLayout">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetView.OnTextChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetView.OnToolTipTextChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.WorksheetView.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView">
            <summary>
            Returns the <see cref="P:Syncfusion.Windows.Forms.WorksheetView.WorkbookView"/> that displays this sheet as a page.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.WorksheetView.Worksheet">
            <summary>
            Returns the <see cref="T:Syncfusion.Windows.Forms.WorksheetModel"/> that manages the data for this view.
            </summary>
        </member>
        <member name="T:Syncfusion.XmlSerializersCreator.IXmlSerializationReader">
            <summary>
            Interface for XmlSerializationReader children.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.IXmlSerializationReader.ReadDataFromXml">
            <summary>
            Returns deserialized object.
            </summary>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:Syncfusion.XmlSerializersCreator.IXmlSerializationWriter">
            <summary>
            Interface for XmlSerializationWriter children.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.IXmlSerializationWriter.WriteDataToXml(System.Object)">
            <summary>
            Serializes given object.
            </summary>
        </member>
        <member name="T:Syncfusion.XmlSerializersCreator.SerialiserWrapper">
            <summary>
            Inherits XmlSerializer and uses manual Xml reader and writer.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.SerialiserWrapper.m_reader">
            <summary>
            Serialization reader. Used in overriden CreateReader() method.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.SerialiserWrapper.m_writer">
            <summary>
            Serialization writer. Used in overriden CreateWriter() method.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerialiserWrapper.#ctor(System.Xml.Serialization.XmlSerializationReader,System.Xml.Serialization.XmlSerializationWriter)">
            <summary>
            Creates new instance of SerialiserWrapper.
            </summary>
            <param name="reader">Serialization reader.</param>
            <param name="writer">Serialization writer.</param>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerialiserWrapper.CreateReader">
            <summary>
            Forces using of manual reader.
            </summary>
            <returns>Xml serialization reader to use.</returns>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerialiserWrapper.CreateWriter">
            <summary>
            Forces using of manual writer.
            </summary>
            <returns>Xml serialization writer to use.</returns>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerialiserWrapper.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
            <summary>
            Serialization.
            </summary>
            <param name="o"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerialiserWrapper.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
            <summary>
            Deserialization.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.XmlSerializersCreator.SerializersManager">
            <summary>
            Class for managing custom Xml serializers.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.SerializersManager.GetSerializer(System.Type)">
            <summary>
            Gets serializer for given type.
            </summary>
            <param name="type">Type to get serializer for.</param>
            <returns>Custom serializer instance or standard XmlSerializer instance if it canot be found.</returns>
        </member>
        <member name="T:Syncfusion.XmlSerializersCreator.XmlSerializersCreator">
            <summary>
            Creates files with code of XmlSerializationReader and XmlSerializationWriter derived classes
            for manual serialization of sepcified types.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_TEMP_DIR_NAME">
            <summary>
            Temporary subdirectory for storing temporary files.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_SC_MASK">
            <summary>
            Mask for searching .cs files.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_ATTR_TO_REMOVE">
            <summary>
            String that should be removed from created code.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_INITIAL_NAMESPACE">
            <summary>
            Initial namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_SER_WRITER_INHERIT">
            <summary>
            Place in code where writer base type is defined.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_SER_READER_INHERIT">
            <summary>
            Place in code where reader base type is defined.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_WRITER_INTERFACE">
            <summary>
            Expression for implementing IXmlSerializationWriter.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_READER_INTERFACE">
            <summary>
            Expression for implementing IXmlSerializationReader.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_XML_READING_METHOD_NAME">
            <summary>
            Name of Xml reading method in reader class.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_XML_WRITING_METHOD_NAME">
            <summary>
            Name of Xml writing method in reader class.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_INITIAL_READER_CLASS_NAME">
            <summary>
            Initial name of reader class.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.DEF_INITIAL_WRITER_CLASS_NAME">
            <summary>
            Initial name of writer class.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.m_strOutputPath">
            <summary>
            Ouput path to store .cs files.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.m_strOutputNamespace">
            <summary>
            Namespace of output classes.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.m_inputTypes">
            <summary>
            List of names of types to create serializer classes for.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator._tempAssemblyInfo">
            <summary>
            XmlSerializer.tempAssembly field info.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator._methodIndexInfo">
            <summary>
            XmlSerializer.methodIndex field info.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator._methodsInfo">
            <summary>
            TempAssembly.methods field info.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator._readMethodInfo">
            <summary>
            TempAssembly.TempMethod.readMethod field info.
            </summary>
        </member>
        <member name="F:Syncfusion.XmlSerializersCreator.XmlSerializersCreator._writeMethodInfo">
            <summary>
            TempAssembly.TempMethod.writeMethod field info.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.#ctor(System.String,System.String,System.Collections.IList)">
            <summary>
            Creates new instance of XmlSerializersCreator.
            </summary>
            <param name="strOutputPath">Ouput path to store .cs files.</param>
            <param name="strOutputNamespace">Namespace of output classes.</param>
            <param name="inputTypes">List of names of types to create serializer classes for.</param>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.#cctor">
            <summary>
            Static constructor. Initializes data for reflexion.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.SetEnvironmentVariable(System.String,System.String)">
            <summary>
            API function for setting value to environment variable.
            </summary>
            <param name="VariableName">Name of variable.</param>
            <param name="VariableValue">New value.</param>
            <returns>True if succeeded, otherwise false.</returns>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.CreateSerializers">
            <summary>
            Creates needed files with required classes.
            </summary>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.GetSerializationMethodsNames(System.Xml.Serialization.XmlSerializer)">
            <summary>
            Gets names of Xml reading and writing methods from given Xml serializer.
            </summary>
            <param name="serializer">Xml serializer instance to extract data from.</param>
            <returns>Array of two strings with required names.</returns>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.CorrectClassNamesAndSaveText(System.String,System.String,System.String)">
            <summary>
            Changes classes names and saves code to files.
            </summary>
            <param name="text">Generated text with code.</param>
            <param name="type">Name of type to create serializers for.</param>
            <param name="path">Path to the directory where result files should be stored.</param>
        </member>
        <member name="M:Syncfusion.XmlSerializersCreator.XmlSerializersCreator.AddInterfacesToCode(System.String)">
            <summary>
            Adds interfaces implementation to code.
            </summary>
            <param name="text">String with code to modifie.</param>
            <returns>String with corrected code.</returns>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.StyleGradientObject.m_clrStart">
            <summary>
            Start gradient color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.StyleGradientObject.m_clrEnd">
            <summary>
            End gradient color.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.StyleGradientObject.m_gradient">
            <summary>
            Gradient style.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.FillRectangle(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw control background.
            </summary>
            <param name="g">Graphics for paint.</param>
            <param name="bounds">Rectangle it sketch.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.FillRectangle(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draw control background.
            </summary>
            <param name="g">Graphics for paint.</param>
            <param name="bounds">Rectangle it sketch.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.CreateBrush(System.Drawing.RectangleF)">
            <summary>
            Create gradient brush.
            </summary>
            <param name="bounds">Rectangle it sketch.</param>
            <returns>Gradient brush.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.ToString">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.OnStartColorChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	start color changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.OnEndColorChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	end color changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObject.OnGradientModeChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	gradient mode changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StyleGradientObject.StartColor">
            <summary>
            Get or set start gradient color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StyleGradientObject.EndColor">
            <summary>
            Get or set end gradient color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.StyleGradientObject.GradientMode">
            <summary>
            Get or set gradient style.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.StyleGradientObject.OnChanged">
            <summary>
            Occurs when this class changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.StyleGradientObject.StartColorChanged">
            <summary>
            Occurs when	start color changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.StyleGradientObject.EndColorChanged">
            <summary>
            Occurs when	end color changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.StyleGradientObject.GradientModeChanged">
            <summary>
            Occurs when	gradient mode changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObjectConvertor.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.StyleGradientObjectConvertor.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <override/>
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XpUserEntry">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_textStringFormat">
            <summary>
            String format outputing text.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_style">
            <summary>
            This component style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_bSkipEvents">
            <summary>
            Skip all evants if QuietMode runing.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_ThumbnailSize">
            <summary>
            User icon size thumbnail.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_DefaultIcon">
            <summary>
            User icon as default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_SelectIcon">
            <summary>
            User icon as select mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_indexButtonDrawing">
            <summary>
            Order of the drawing button. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_strUserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_strHelpString">
            <summary>
            User help.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_bActive">
            <summary>
            Active mode as mouse overhead component.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_bSelect">
            <summary>
            Select mode as user password enter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rectIcon">
            <summary>
            GraphicsPath for rectangle in user icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rectTextBox">
            <summary>
            GraphicsPath for rectangle in user TextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_imgList">
            <summary>
            Images List. image can be choosed from this	list and be	displayed as
            menu item icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_iImageIndex">
            <summary>
            Image index	from image list.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_iSelectedImageIndex">
            <summary>
            Image index	from image list.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rgIconRect">
            <summary>
            Regions user icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_bNeedRelayout">
            <summary>
            Neeeded recalculate layout graphics element.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rectUserName">
            <summary>
            Regions for user name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rectUserHelp">
            <summary>
            Regions for user help.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_buttons">
            <summary>
            Collection of Buttons
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_ButtonEnter">
            <summary>
            Button to enter password.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_textBox">
            <summary>
            TextBox for password enter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_rectPasswordBox">
            <summary>
            TextBox layout.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_ButtonEnterIcon">
            <summary>
            Icon button password enter.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_textRenderingHint">
            <summary>
            Text Rendering Hint.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_autoHideTextBox">
            <summary>
            Auto hide text box as control lost focus.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserEntry.m_autoResetPassword">
            <summary>
            Auto reset password as text box show.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.#ctor">
            <summary>
            Constructor this component.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.Finalize">
            	<summary>
            
            	</summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.BeginInit">
            <summary>
            Begin initialize.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.EndInit">
            <summary>
            Begin initialize.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.Dispose(System.Boolean)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnResize(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnMouseLeave(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnMouseEnter(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnGotFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnLostFocus(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnRightToLeftChanged(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnQuietModeChanged">
            <summary>
            Occurs when quiet mode changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnThumbnailSizeChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary> 
            Occurs when thumbnail size changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnDefaultIconChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when default icon changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnSelectIconChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when select icon changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnUserNameChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when user name changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnHelpStringChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when help string changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnImageListChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when image list changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnDefaultImageIndexChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when default image index changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnPasswordBoxChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when password box changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnButtonEnterIconChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when button enter icon changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnClick(System.EventArgs)">
            <override/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnPasswordEnter(Syncfusion.Windows.Forms.Tools.PasswordEnterEventArgs)">
            <summary>
            Occurs when user enter password.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.style_OnChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when component style changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnTextRenderingHintChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when text rendering hint changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnTextBoxCreate">
            <summary>
            Occurs when text box create.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnTextBoxInitialize">
            <summary>
            Occurs when	text box initialize.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.ConstructTextBox">
            <summary>
            Text box constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnAutoHideTextBoxChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when auto hide text box changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.OnAutoResetPasswordChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when auto reset password changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.GetRoundRect(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw rounded rectangle.
            </summary>
            <param name="x">X - coordinate of rectangle.</param>
            <param name="y">Y - coordinate of rectangle.</param>
            <param name="w">Width rectangle.</param>
            <param name="h">Heigth rectangle.</param>
            <param name="r">Radius evening-out.</param>
            <returns>GraphicsPath rounded rectangle.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.CalculateLayout(System.Drawing.Graphics)">
            <summary>
            Calculate layout graphics element.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.CalculateUserNameLayout(System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Calculate user name layout.
            </summary>
            <param name="gph"></param>
            <param name="textAreaWidth"></param>
            <param name="thumbWidth"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.CalculateUserHelpLayout(System.Drawing.Graphics,System.Int32,System.Int32,System.Drawing.SizeF)">
            <summary>
            Calculate user help layout.
            </summary>
            <param name="gph"></param>
            <param name="textAreaWidth"></param>
            <param name="thumbWidth"></param>
            <param name="m_sizeUserName"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.CalculateTextBoxLayout(System.Int32,System.Drawing.SizeF,System.Drawing.Graphics)">
            <summary>
            Calculate text box layout.
            </summary>
            <param name="thumbWidth"></param>
            <param name="m_sizeUserName"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.CalculateButtonsLayout(System.Int32,System.Drawing.Rectangle)">
            <summary>
            Calculate buttons layout.
            </summary>
            <param name="thumbWidth"></param>
            <param name="rectPasswordBox"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draw icon shadow.
            </summary>
            <param name="g">Graphics for paint.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.HitTest(System.Int32,System.Int32)">
            <summary>
            Retrieves object at the specified screen coordinates.
            </summary>
            <param name="x">The horizontal screen coordinate.</param>
            <param name="y">The vertical screen coordinate.</param>
            <returns>Retrieves the child object at the specified screen coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.HitTest(System.Drawing.Point)">
            <summary>
            Retrieves object at the specified screen coordinates.
            </summary>
            <param name="pt">Screen coordinate</param>
            <returns>Retrieves object at the specified screen coordinates.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.MirrorRectangleF(System.Drawing.RectangleF)">
            <summary>
            Mirror RectangleF for RigthToLeft representation.
            </summary>
            <param name="rect">RectangleF as mirror.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.MirrorRegion(System.Drawing.Region,System.Drawing.Graphics)">
            <summary>
            Mirror Region for RigthToLeft representation.
            </summary>
            <param name="rg">Region as mirror.</param>
            <param name="g"></param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.MirrorGraphicsPath(System.Drawing.Drawing2D.GraphicsPath@)">
            <summary>
            Mirror GraphicsPath for RigthToLeft representation.
            </summary>
            <param name="gp">GraphicsPath as mirror.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserEntry.MirrorAll(System.Drawing.Graphics)">
            <summary>
            Mirror all graphics element for RigthToLeft representation.
            </summary>
            <param name="g"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.Style">
            <summary>
            Get or set component style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.ThumbnailSize">
            <summary>
            Get or set user icon size.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.ImageList">
            <summary>
            Get or set image list user icons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.DefaultImageIndex">
            <summary>
            Get or set user icon index from image list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.SelectedImageIndex">
            <summary>
            Get or set user icon index from image list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.DefaultIcon">
            <summary>
            Get or set default user icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.SelectIcon">
            <summary>
            Get or set select user icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.ButtonEnterIcon">
            <summary>
            Get or set user icon as select mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.UserName">
            <summary>
            Get or set user name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.HelpString">
            <summary>
            Get or set user help.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.QuietMode">
            <summary>
            True - do not raise	any	events,	otherwise False.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.IsActive">
            <summary>
            Get active mode as mouse overhead component.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.IsSelected">
            <summary>
            Get select mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.TextBox">
            <summary>
            Get password box.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.TextRenderingHint">
            <summary>
            Get or set Text Rendering Hint.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.AutoHideTextBox">
            <summary>
            Get or set auto hide text box as control lost focus.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.AutoResetPassword">
            <summary>
            Get or set auto reset password as text box show.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.Buttons">
            <summary>
            Collection of buttons.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.QuietModeChanged">
            <summary>
            Occurs when quiet mode changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.ThumbnailSizeChanged">
            <summary>
            Occurs when thumbnail size changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.DefaultIconChanged">
            <summary>
            Occurs when default icon changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.SelectIconChanged">
            <summary>
            Occurs when select icon changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.UserNameChanged">
            <summary>
            Occurs when user name changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.HelpStringChanged">
            <summary>
            Occurs when help string changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.ImageListChanged">
            <summary>
            Occurs when image list changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.DefaultImageIndexChanged">
            <summary>
            Occurs when default image index changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.PasswordBoxChanged">
            <summary>
            Occurs when password box changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.ButtonEnterIconChanged">
            <summary>
            Occurs when button enter icon changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.PasswordEnter">
            <summary>
            Occurs when when user enter password.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.TextRenderingHintChanged">
            <summary>
            Occurs when text rendering hint changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.AutoHideTextBoxChanged">
            <summary>
            Occurs when auto hide text box changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserEntry.AutoResetPasswordChanged">
            <summary>
            Occurs when auto reset password changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserEntry.IconForDrawing">
            <summary>
            Get user icon for drawing this time.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.BUTTONNAME">
            <summary>
            Button name.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.c_cBackgroundHot">
            <summary>
            Backgroundcolor color of the highlighted button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.c_cBackgroundPressed">
            <summary>
            Backgroundcolor color of the pressed button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_bounds">
            <summary>
            Represent bounds of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_cTransparentImageColor">
            <summary>
            Transparent color of the button's image. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_buttonIndex">
            <summary>
            Index of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_type">
            <summary>
            Shows type of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_bEnable">
            <summary>
            Indicate whether the button is enabled. 
            Default value is true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_bVisible">
            <summary>
            Indicate whether the button is Visible. 
            Default value is true.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_name">
            <summary>
            Name of the button.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_image">
            <summary>
            Represent button's image.
            Default value is null. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.m_state">
            <summary>
            Indicate button's state.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.DrawGreyImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.RectangleF)">
            <summary>
            Draws grayed image.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Bounds">
            <summary>
            Gets or set button bounds.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.TransparentImageColor">
            <summary>
            Gets or sets transparent image color.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Index">
            <summary>
            Gets or sets index of the button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.PredefinedType">
            <summary>
            Gets or sets type of the button.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Enable">
            <summary>
            Gets or sets if button is enabled.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Visible">
            <summary>
            Gets or sets if button is Visible.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Name">
            <summary>
            Gets or sets button's name.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.Image">
            <summary>
            Gets or sets image of the button. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XPUserEntryButton.State">
            <summary>
            Gets or sets button' state.
            </summary>	
        </member>
        <member name="T:Syncfusion.Windows.Forms.Tools.XpUserStyle">
            <summary>
            Class component style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_bSkipEvents">
            <summary>
            Skip events for quiet mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_ActiveFont">
            <summary>
            User name text font for active mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_clrUserNameDefault">
            <summary>
            User name text color for default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_clrUserNameActive">
            <summary>
            User name text color for active mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_font">
            <summary>
            User name text font for default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_background">
            <summary>
            Background gradient style.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_normalRect">
            <summary>
            Gradient style rectangle in user icon for default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_activeRect">
            <summary>
            Gradient style rectangle in user icon for active mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_fontActiveUserHelp">
            <summary>
            User name text font for active mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_fontDefaultUserHelp">
            <summary>
            User help text font for default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_clrUserHelpActive">
            <summary>
            User name text color for active mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_clrUserHelpDefault">
            <summary>
            User name text color for default mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_rectRadius">
            <summary>
            Radius rounded rectangle in icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_iconRadius">
            <summary>
            Radius rounded icons.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_drawShadow">
            <summary>
            Draw shadow rectangle in icon.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Forms.Tools.XpUserStyle.m_shadowSize">
            <summary>
            Shadow size at pixel.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.#ctor">
            <summary>
            Constructor this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.DrawImageRect(System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath,System.Boolean)">
            <summary>
            Draw image rounded rectangle.
            </summary>
            <param name="g">Graphics for paint.</param>
            <param name="rc">GraphicsPath rounded rectangle.</param>
            <param name="bActive">Active mode.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.DrawControlBackground(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw control background.
            </summary>
            <param name="g">Graphics for paint.</param>
            <param name="bounds">Rectangle it sketch.</param>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnQuietModeChanged">
            <summary>
            Occurs when quiet mode changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnActiveFontChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	active font changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnRectColorDefaultChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when RectColorDefault �hanged.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnRectColorActiveChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when RectColorActive �hanged.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnUserNameColorDefaultChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when user name color default changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnUserNameColorActiveChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when user name color active changed.
            </summary>
            <param name="args"/>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnFontChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when font changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnBackgroundStartColorChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when background start color changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnBackgroundEndColorChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when background end color changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnBackgroundGradientChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	background gradient changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnActiveUserHelpFontChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	active user help font changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnDefaultUserHelpFontChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	default user help font changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnUserHelpColorActiveChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	user help color active changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnUserHelpColorDefaultChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	user help color default changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnRectRadiusChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	RectRadius changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnIconRadiusChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	icon radius changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnDrawShadowChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when draw shadow changed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnShadowSizeChanged(Syncfusion.Windows.Forms.Tools.ValueChangedEventArgs)">
            <summary>
            Occurs when	shadow size changed
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Forms.Tools.XpUserStyle.gradients_OnChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when StyleGradientObject changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.Font">
            <summary>
            Get or set user name text font for default mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.ActiveFont">
            <summary>
            Get or set user name text font for active mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.ActiveUserHelpFont">
            <summary>
            Get or set help name text color for active mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.DefaultUserHelpFont">
            <summary>
            Get or set help name text color for default mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.Background">
            <summary>
            Get or set background gradient style.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.NormalRectangle">
            <summary>
            Get or set gradient style rectangle in user icon for default mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.ActiveRectangle">
            <summary>
            Get or set gradient style rectangle in user icon for active mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserNameColorDefault">
            <summary>
            User name text font for default mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserNameColorActive">
            <summary>
            Get or set User name text font for active mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserHelpColorActive">
            <summary>
            Get or set user name text color for active mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserHelpColorDefault">
            <summary>
            Get or set user name text color for default mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.RectRadius">
            <summary>
            Get or set radius rounded rectangle in icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.IconRadius">
            <summary>
            Get or set radius rounded icons.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.DrawShadow">
            <summary>
            Get or set draw shadow rectangle in icon.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.ShadowSize">
            <summary>
            Get or set shadow size at pixel.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Forms.Tools.XpUserStyle.QuietMode">
            <summary>
            True - do not raise any events, otherwise False.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.QuietModeChanged">
            <summary>
            Occurs when quiet mode changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.OnChanged">
            <summary>
            Occurs when StyleGradientObject changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.ActiveFontChanged">
            <summary>
            Occurs when	active font changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.RectColorDefaultChanged">
            <summary>
            Occurs when RectColorDefault �hanged.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.RectColorActiveChanged">
            <summary>
            Occurs when RectColorActive �hanged.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserNameColorDefaultChanged">
            <summary>
            Occurs when user name color default changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserNameColorActiveChanged">
            <summary>
            Occurs when user name color active changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.FontChanged">
            <summary>
            Occurs when font changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.BackgroundStartColorChanged">
            <summary>
            Occurs when background start color changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.BackgroundEndColorChanged">
            <summary>
            Occurs when background end color changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.BackgroundGradientChanged">
            <summary>
            Occurs when	background gradient changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.ActiveUserHelpFontChanged">
            <summary>
            Occurs when	active user help font changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.DefaultUserHelpFontChanged">
            <summary>
            Occurs when	default user help font changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserHelpColorActiveChanged">
            <summary>
            Occurs when	user help color active changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.UserHelpColorDefaultChanged">
            <summary>
            Occurs when	user help color default changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.RectRadiusChanged">
            <summary>
            Occurs when	RectRadius changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.IconRadiusChanged">
            <summary>
            Occurs when	icon radius changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.DrawShadowChanged">
            <summary>
            Occurs when	draw shadow changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Forms.Tools.XpUserStyle.ShadowSizeChanged">
            <summary>
            Occurs when	shadow size changed
            </summary>
        </member>
    </members>
</doc>
