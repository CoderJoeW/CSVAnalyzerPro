<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Presentation.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Presentation.INotesSize">
            <summary>
            Represents the size and bounds of notes.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.INotesSize.Height">
            <summary>
            Gets or sets the height, in percentage.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISections">
            <Summary>
            Specifies a collection of sections in a presentation.
            </Summary> 
        </member>
        <member name="M:Syncfusion.Presentation.ISections.Add">
             <summary>
             Adds a new section at the last index position and returns the instance of the newly created section.
             </summary>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.ISection"/> instance.</returns>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISections.Clear">
             <summary>
             Removes all the sections in the presentation.
             </summary>        
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();        
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Removes the sections
             presentation.Sections.Clear();
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()        
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Removes the sections
             presentation.Sections.Clear()
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISections.Insert(System.Int32,Syncfusion.Presentation.ISection)">
             <summary>
             Inserts an element into the section collection at the specified index.
             </summary>
             <param name="index">The zero-based index at which section should be inserted.</param>
             <param name="section">The section instance to insert.</param>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section1 = presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             ISection section2 = presentation.Sections.Add();       
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Insert a section at the specified index.
             presentation.Sections.Insert(0,section2);
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section1 As ISection = presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             Dim section2 As ISection = presentation__1.Sections.Add()     
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Insert a section at the specified index
             presentation.Sections.Insert(0,section2)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISections.Remove(Syncfusion.Presentation.ISection)">
             <summary>
             Removes the first occurrence of a specified section from the section collection.
             </summary>
             <param name="section">Represent the <see cref="T:Syncfusion.Presentation.ISection"/> instance to be removed.</param>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section1 = presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             ISection section2 = presentation.Sections.Add();       
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Remove the section.
             presentation.Sections.Remove(section2);
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section1 As ISection = presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             Dim section2 As ISection = presentation__1.Sections.Add()     
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Remove the section
             presentation.Sections.Remove(section2)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISections.RemoveAt(System.Int32)">
             <summary>
             Removes the section at the specified index, from the section collection.
             </summary>
             <param name="index">Represents the index at which the section is to be removed.</param>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section1 = presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             ISection section2 = presentation.Sections.Add();       
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Remove the section at the specified index.
             presentation.Sections.RemoveAt(1);
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section1 As ISection = presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             Dim section2 As ISection = presentation__1.Sections.Add()     
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Remove the section at the specified index
             presentation.Sections.RemoveAt(1)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISections.Count">
             <summary>
             Returns the number of <see cref="T:Syncfusion.Presentation.ISection"/> instance in the section collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();        
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Get the count of the section in a presentation 
             int count = presentation.Sections.Count;
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()        
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Get the count of the section in a presentation
             int count = presentation.Sections.Count
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISections.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:Syncfusion.Presentation.ISection"/> instance at the specified index in section collection. Read-only.
             </summary>
             <param name="index">The index to locate the section.</param>
             <returns>Returns the section at the specified index in section collection.</returns>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section1 = presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             presentation.Sections.Add();       
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Get the section
             ISection section2 = presentation.Sections[1];
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section1 As ISection = presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             presentation__1.Sections.Add()     
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Get the section
             Dim section2 As ISection = presentation.Sections(1)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ISection">
            <Summary>
            Specifies a section in the presentation
            </Summary> 
        </member>
        <member name="M:Syncfusion.Presentation.ISection.Move(System.Int32)">
             <summary>
             Moves the specified section to the specified index position within the presentation.
             </summary>
             <param name="toPosition">The position at which the section is to be moved.</param>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             presentation.Sections.Add();
             //Adds a section to the PowerPoint presentation
             presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             // Move the section at the specified index
             presentation.Sections[1].Move(2);
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             presentation__1.Sections.Add()
             'Adds a section to the PowerPoint presentation
             presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Move the section at the specified index
             presentation.Sections(2).Move(3)
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISection.AddSlide(Syncfusion.Presentation.SlideLayoutType)">
             <summary>
             Creates a slide with the specified layout type and adds the new slide to the end of section.
             </summary>
             <param name="slideLayoutType">Specifies the slide layout type.</param>
             <returns>Returns the newly created <see cref="T:Syncfusion.Presentation.ISlide"/> instance.</returns>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISection.InsertSlide(System.Int32,Syncfusion.Presentation.ISlide)">
             <summary>
             Inserts an element into the slide collection at the specified index within the section.
             </summary>
             <param name="slideIndex">The zero-based index at which the section should be inserted.</param>
             <param name="slide">The section instance to be inserted.</param>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Adds a slide to the created section
             ISlide slide1 = section.AddSlide(SlideLayoutType.Blank);        
             //Adds a slide to the created section
             ISlide slide2 = section.AddSlide(SlideLayoutType.Blank);
             //Insert a slide at the specified index
             section.InsertSlide(0,slide2);
             //Adds a text box to the slide
             slide1.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide1 As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a slide to the created section
             Dim slide2 As ISlide = section.AddSlide(SlideLayoutType.Blank)
             //Insert a slide at the specified index
             section.InsertSlide(0,slide2);
             'Adds a text box to the slide
             slide1.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISection.Clone">
             <summary>
             Creates an independent copy of <see cref="T:Syncfusion.Presentation.ISlides"/> instance.
             </summary>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.ISlides"/> instance.</returns>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation1
             IPresentation presentation1 = Presentation.Create();
             //Creates a PowerPoint presentation2
             IPresentation presentation2 = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation1.Sections.Add();        
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Clones the slides in 3rd section
             ISlides slides = presentation.Sections[0].Clone();
             //Iterates the cloned slides and adds the slides to the destination presentation
             foreach (ISlide slide1 in slides)
                 presentation2.Slides.Add(slide1);
             //Saves the PowerPoint presentation
             presentation2.Save("Section.pptx");
            </code>
            <code lang="VB.NET">        
             'Creates a PowerPoint presentation1
             Dim presentation1 As IPresentation = Presentation.Create()
             'Creates a PowerPoint presentation2
             Dim presentation2 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation1.Sections.Add()
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Clones the slides in 3rd section
             Dim slides As ISlides = presentation.Sections(1).Clone()
             'Iterates the cloned slides and adds the slides to the destination presentation
             For Each slide1 As ISlide In slides
             presentation2.Slides.Add(slide1)
             Next
             'Saves the PowerPoint presentation
             presentation2.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISection.Name">
             <summary>
             Gets or sets the name of the specified section. 
             </summary>
             <Remark>  One or more sections may share a same name within the presentation. </Remark>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISection.SlidesCount">
             <summary>
             Gets the number of slides in the specified section. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Gets the number of slides in the specified section
             int slidesCount = section.SlidesCount;
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Gets the number of slides in the specified section
             Dim slidesCount As int = section.SlidesCount
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISection.Slides">
             <summary>
             Gets the slide collection of <see cref="T:Syncfusion.Presentation.ISlides"/> instance. Read-only.
             </summary>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.ISlides"/> instance.</returns>
             <example>
             <code lang="CS">
             //Creates a PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Adds a section to the PowerPoint presentation
             ISection section = presentation.Sections.Add();
             //Sets a name to the created section
             section.Name = "SectionDemo";
             //Adds a slide to the created section
             ISlide slide = section.AddSlide(SlideLayoutType.Blank);
             //Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo");
             //Gets the collection of slides in the specified section
             ISlides slides = section.Slides;
             //Saves the PowerPoint presentation
             presentation.Save("Section.pptx");
            </code>
            <code lang="VB.NET">
             'Creates a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Adds a section to the PowerPoint presentation
             Dim section As ISection = presentation__1.Sections.Add()
             'Sets a name to the created section
             section.Name = "SectionDemo"
             'Adds a slide to the created section
             Dim slide As ISlide = section.AddSlide(SlideLayoutType.Blank)
             'Adds a text box to the slide
             slide.AddTextBox(10, 10, 100, 100).TextBody.AddParagraph("Slide in SectionDemo")
             'Gets the collection of slides in the specified section
             Dim slides As ISlides = section.Slides
             'Saves the PowerPoint presentation
             presentation__1.Save("Section.pptx")
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.INotesSlide">
            <summary>
            Represents the notes slide in a slide of the presentation.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IBaseSlide">
            <summary>
            Represents a base slide in a presentation.
            </summary>
            <remarks>
            Contains members which are common for slide, layout slide and master slide.
            </remarks>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Name">
             <summary>
             Gets or sets the name of a slide.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the name of the slide
             slide.Name = "My Slide";
             //Save the presentation
             presentation.Save("Slide.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set the name of the slide
            slide.Name = "My Slide"
            'Save the presentation
            presentation__1.Save("Slide.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Shapes">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.IShapes"/> collection that represents all the elements in the slide. Read-only.
             </summary>
             <remarks>The <see cref="T:Syncfusion.Presentation.IShapes"/> collection can contain the drawings, shapes, pictures, text objects, titles, headers, footers, slide numbers, and date and time objects on a slide.</remarks>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add auto shape - rectangle to slide
             IShape shape = shapes.AddShape(AutoShapeType.Rectangle,300,400,150,200);
             //Save the presentation
             presentation.Save("Shapes.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add auto shape - rectangle to slide
            Dim shape As IShape = shapes.AddShape(AutoShapeType.Rectangle, 300, 400, 150, 200)
            'Save the presentation
            presentation__1.Save("Shapes.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Background">
             <summary>
             Gets the background of a slide. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add();
             //Retrieve the background.
             IBackground background = slide.Background;
             //Retrieve the fill of the background.
             IFill fill = background.Fill;
             //Set the fill type as gradient.
             fill.FillType = FillType.Gradient;
             //Retrieve the gradient fill.
             IGradientFill gradientFill = fill.GradientFill;
             //Add the first gradient stop.
             gradientFill.GradientStops.Add();
             //Add the second gradient stop.
             gradientFill.GradientStops.Add();
             //Save the presentation.
             presentation.Save("Output.pptx");
             //Close the presentation.
             presentation.Close();        
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add()
            'Retrieve the background.
            Dim background As IBackground = slide.Background
            'Retrieve the fill of the background.
            Dim fill As IFill = background.Fill
            'Set the fill type as gradient.
            fill.FillType = FillType.Gradient
            'Retrieve the gradient fill.
            Dim gradientFill As IGradientFill = fill.GradientFill
            'Add the first gradient stop.
            gradientFill.GradientStops.Add()
            'Add the second gradient stop.
            gradientFill.GradientStops.Add()
            'Save the presentation.
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>       
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.GroupShapes">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IGroupShapes"/> instance that represents the GroupShape collection in a slide. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes, it is read only
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //Save the presentation
             presentation.Save("GroupShapes.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes, it is read only
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'Save the presentation
            presentation__1.Save("GroupShapes.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Pictures">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IPictures"/> instance that represents the collection of all pictures in a slide. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Get the image from file path
             Image image = Image.FromFile("Image.gif");
             // Add the image to the slide by specifying position and size
             shapes.AddPicture(new MemoryStream(image.ImageData), 300, 120, 70, 40);
             //Save the presentation
             presentation.Save("Picture.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Get the image from file path
            Dim image__2 As Image = Image.FromFile("Image.gif")
            ' Add the image to the slide by specifying position and size
            shapes.AddPicture(New MemoryStream(image__2.ImageData), 300, 120, 70, 40)
            'Save the presentation
            presentation__1.Save("Picture.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Tables">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ITables"/> collection that represents the tables in a slide. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection
             ITables tables = slide.Tables;
             //Add table to the slide
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell.
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Give simple description to table shape
             table.Description = "Table arrangement";
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection
            Dim tables As ITables = slide.Tables
            'Add table to the slide
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell.
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Give simple description to table shape
            table.Description = "Table arrangement"
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.Charts">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IPresentationCharts"/> collection that represents the charts in a slide. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Get the chart collection from slide
             IPresentationCharts charts = slide.Charts;
             //Add chart to slide
             IPresentationChart chart =charts.AddChart(400, 300, 100, 100);
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Get the chart collection from slide
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide
            Dim chart As IPresentationChart = charts.AddChart(400, 300, 100, 100)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBaseSlide.SlideSize">
             <summary>
             Gets the slide size for the presentation. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Retrieve the side size
             ISlideSize slideSize = slide.SlideSize;
             //Set slide orientation
             slideSize.SlideOrientation = SlideOrientation.Landscape;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Retrieve the side size
            Dim slideSize As ISlideSize = slide.SlideSize
            'Set slide orientation
            slideSize.SlideOrientation = SlideOrientation.Landscape
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.INotesSlide.NotesTextBody">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in the notes page. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SlideImplementation.NotesSlide.NotesTextBody">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in the notes page. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISmartArt">
            <summary>
            Represents the smart art graphic with different smart art types.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArt.Nodes">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.ISmartArtNodes"/> object that contains all the nodes within the SmartArt. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArt.Layout">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.SmartArtType"/> value that represents the layout associated with the SmartArt. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArt.Background">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.IFill"/> object that represents the SmartArt background.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArt.LineFormat">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ILineFormat"/> object that represents the line and arrowhead properties of the SmartArt. Read only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISmartArtNode">
            <summary>
            Represents a single semantic node within the data model of a SmartArt graphic.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.ChildNodes">
            <summary>
            Gets the child nodes associated with the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.Shapes">
            <summary>
            Gets the shape collection associated with the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.TextBody">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.Level">
            <summary>
            Gets the node level in the hierarchy.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.Parent">
            <summary>
            Gets the parent of the SmartArt node.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNode.IsAssistant">
            <summary>
            Gets or sets the node as assistant.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISmartArtNodes">
            <summary>
            Represents a collection of nodes within a SmartArt diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ISmartArtNodes.Add">
            <summary>
            Adds a new SmartArt node at the end of the SmartArt node collection.
            </summary>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance that represents the new SmartArt diagram.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ISmartArtNodes.Clear">
            <summary>
            Removes all the nodes from the SmartArt.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ISmartArtNodes.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index of SmartArt node collection.
            </summary>
            <param name="index">The zero-based index of the element to be removed.</param>
        </member>
        <member name="M:Syncfusion.Presentation.ISmartArtNodes.Remove(Syncfusion.Presentation.ISmartArtNode)">
            <summary>
            Removes the first occurrence of a specified node from the SmartArt node collection.
            </summary>
            <param name="smartArtNode">The SmartArt node to be removed from the collection.</param>
            <returns>Returns true if the specified SmartArt node is removed from the node collection otherwise returns false.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ISmartArtNodes.IndexOf(Syncfusion.Presentation.ISmartArtNode)">
            <summary>
            Returns the first occurrence of a specified node from the SmartArt node collection.
            </summary>
            <param name="smartArtNode">The <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance to locate in the collection.</param>
            <returns>Returns the zero-based index of the first occurrence of SmartArt node within the collection, if found; otherwise, �1.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNodes.Count">
            <summary>
            Gets the number of nodes contained in the SmartArt node collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtNodes.Item(System.Int32)">
            <summary>
            Gets a node at the specified index of a SmartArt node collection. Read-only.
            </summary>
            <param name="index">Determines the index of the SmartArt node.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtImplementation.SmartArtShapes">
            <summary>
            Represents the collection of shapes within a SmartArt node.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISmartArtShapes">
            <summary>
            Represents the collection of shapes within a SmartArt node.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISmartArtShapes.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.ISmartArtShape"/> instance at the specified index from the collection. Read-only.
            </summary>
            <param name="index">Determines the index of the SmartArt shape.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtShape"/> instance.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtShapes.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.ISmartArtShape"/> instance at the specified index from the collection. Read-only.
            </summary>
            <param name="index">Determines the index of the SmartArt shape.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtShape"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.ISmartArtShape">
            <summary>
            Represents a shape within the SmartArt node.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IShape">
            <summary>
            Represents an object in the drawing layer, such as an AutoShape, text box or picture.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISlideItem">
            <summary>
            Represents an individual item in a slide.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ISlideItem.Clone">
            <summary>
            Creates a copy of the <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance.
            </summary>
            <returns>Returns the cloned instance</returns>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Description">
             <summary>
             Gets or sets the item description.
             </summary>
             <value>
             The description of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the description for slide item
             slideItem.Description = "This is a SlideItem";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the description for slide item
            slideItem.Description = "This is a SlideItem"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.SlideItemType">
             <summary>
             Gets the slide item type. Read-only.
             </summary>
             <value>
             The type of the slide item.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the description for slide item
             slideItem.Description = "This is a SlideItem";
             //Set the title
             slideItem.Title = "SlideItem";
             //Get the type of slide item, it is read only
             SlideItemType type = slideItem.SlideItemType;
             //Add the slide item to shape collection
             slide.Shapes.Add(slideItem);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the description for slide item
            slideItem.Description = "This is a SlideItem"
            'Set the title
            slideItem.Title = "SlideItem"
            'Get the type of slide item, it is read only
            Dim type As SlideItemType = slideItem.SlideItemType
            'Add the slide item to shape collection
            slide.Shapes.Add(slideItem)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Height">
             <summary>
             Gets or sets height.
             The Height value ranges from 0 to 169056, in points.
             </summary>
             <value>
             The height of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the height
             slideItem.Height = 200;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the height
            slideItem.Height = 200
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Hidden">
             <summary>
             Gets or sets the boolean value which indicates whether the shape is hidden or not.
             </summary>
             <value>
               <c>true</c> if hidden; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Hide the shape  from slide
             slideItem.Hidden = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Hide the shape  from slide
            slideItem.Hidden = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Left">
             <summary>
             Gets or sets left position.
             The Left value ranges from -169056 to 169056, in points.
             </summary>
             <value>
             The left position of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the Left
             slideItem.Left = 120;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the Left
            slideItem.Left = 120
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.LineFormat">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ILineFormat"/> instance which represents the line and arrowhead properties. Read only.
             </summary>
             <value>
             The line format object of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the length of begin arrow head of line format
             slideItem.LineFormat.BeginArrowheadLength = ArrowheadLength.Long;
             //Set the dash style of line format
             slideItem.LineFormat.DashStyle = LineDashStyle.DashDotDot;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the length of begin arrow head of line format
            slideItem.LineFormat.BeginArrowheadLength = ArrowheadLength.[Long]
            'Set the dash style of line format
            slideItem.LineFormat.DashStyle = LineDashStyle.DashDotDot
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.ShapeName">
             <summary>
             Gets or sets the shape name.
             </summary>
             <value>
             The name of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the shape name for the slide item
             slideItem.ShapeName = "SlideItem";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the shape name for the slide item
            slideItem.ShapeName = "SlideItem"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Title">
             <summary>
             Gets or sets the shape title.
             </summary>
             <value>
             The title of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the title
             slideItem.Title = "SlideItem";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the title
            slideItem.Title = "SlideItem"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Top">
             <summary>
             Gets or sets top position.
             The Top value ranges from -169056 to 169056, in points.
             </summary>
             <value>
             The top position of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the Top
             slideItem.Top = 100;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the Top
            slideItem.Top = 110
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideItem.Width">
             <summary>
             Gets  or sets width.
             The Width value ranges from 0 to 169056, in points.
             </summary>
             <value>
             The width of the shape.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for SlideItem
             ISlideItem slideItem = slide.Shapes[0];
             //Set the Width
             slideItem.Width = 250;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = slide.Shapes(0)
            'Set the Width
            slideItem.Width = 300
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShape.SetHyperlink(System.String)">
            <summary>
            Sets the hyperlink to the shape.
            </summary>
            <param name="url">Represents the address of the target hyperlink</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
            <remarks>The target can be a document path, web url, target slide index (index is valid from 0 to slides count – 1) or an email_id.</remarks>
            <example>
            <code lang="CS">
            //Create a new PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 0, 0, 100, 100);
             //Set the hypelink to the rectangle
             shape.SetHyperlink("www.syncfusion.com");
             //Save the presentation
             presentation.Save("Hyperlink.pptx");
             //Close the Presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 0, 0, 100, 100)
            'Set the hypelink to the rectangle
            shape.SetHyperlink("www.syncfusion.com")
            'Save the presentation
            presentation__1.Save("Hyperlink.pptx")
            'Close the Presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Presentation.IShape.RemoveHyperlink" -->
        <member name="P:Syncfusion.Presentation.IShape.AutoShapeType">
             <summary>
             Gets the type of the AutoShape instance. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Retrieve the autoShape 
             AutoShapeType autoShape = shape.AutoShapeType;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Retrieve the autoShape 
            Dim autoShape As AutoShapeType = shape.AutoShapeType
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShape.Fill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFill"/> instance that represents the fill formatting options of the shape. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Set solid fill as fill type for the shape
             shape.Fill.FillType = FillType.Solid;
             //Set the solid fill color
             shape.Fill.SolidFill.Color = ColorObject.Lime;
             //Save the presentation
             presentation.Save("FillShape.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Set solid fill as fill type for the shape
            shape.Fill.FillType = FillType.Solid
            'Set the solid fill color
            shape.Fill.SolidFill.Color = ColorObject.Lime
            'Save the presentation
            presentation__1.Save("FillShape.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShape.TextBody">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in the shape. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for shape's textBody
             ITextBody textBody = shape.TextBody;
             //Add text to text body
             textBody.Paragraphs.Add().AddTextPart("Hello World");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();        
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for shape's textBody
            Dim textBody As ITextBody = shape.TextBody
            'Add text to text body
            textBody.Paragraphs.Add().AddTextPart("Hello World")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShape.Hyperlink">
             <summary>
             Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance that represents the hyperlink for the specified shape.
             </summary>
             <example>
             <code lang="CS">
             //Load a PowerPoint presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide from the presentation
             ISlide slide = presentation.Slides[0];
             //Get the shape which have the hyperlink
             IShape shape = (IShape)slide.Shapes[0];
             //Get the hyperlink from the shape
             IHyperLink hyperLink = shape.Hyperlink;
             //Get the action type of the hyperlink
             HyperLinkType hypelinkType = hyperLink.Action;
             //Get the target slide of the hyperlink
             ISlide targetSlide = hyperLink.TargetSlide;
             //Get the url of the hyperlink
             string url = hyperLink.Url;
             //Save the presentation
             presentation.Save("Hyperlink.pptx");
             //Close the Presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
             'Load a PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Open("Sample.pptx")
             'Get the first slide from the presentation
             Dim slide As ISlide = presentation__1.Slides(0)
             'Get the shape which have the hyperlink
             Dim shape As IShape = DirectCast(slide.Shapes(0), IShape)
             'Get the hyperlink from the shape
             Dim hyperLink As IHyperLink = shape.Hyperlink
             'Get the action type of the hyperlink
             Dim hypelinkType As HyperLinkType = hyperLink.Action
             'Get the target slide of the hyperlink
             Dim targetSlide As ISlide = hyperLink.TargetSlide
             'Get the url of the hyperlink
             Dim url As String = hyperLink.Url
             'Save the presentation
             presentation__1.Save("Hyperlink.pptx")
             'Close the Presentation
             presentation__1.Close()
            </code>
             </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShape.PlaceholderFormat">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IPlaceholderFormat"/> object that contains the properties that are unique to placeholders.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Retrieve the place holder
             IPlaceholderFormat placeHolder = shape.PlaceholderFormat;
             //Set the name of the place holder
             placeHolder.Name = "My Placeholder";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Retrieve the place holder
            Dim placeHolder As IPlaceholderFormat = shape.PlaceholderFormat
            'Set the name of the place holder
            placeHolder.Name = "My Placeholder"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShape.Rotation">
            <summary>
            Gets or sets the number of degrees the specified shape is rotated.
            </summary>
            <remarks>
            The rotation value ranges from -3600 degrees to 3600 degrees.
            </remarks>
            <value>
            The rotation angle of the shape.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a blank slide to the presentation.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add a rectangle to the slide
            IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
            //Set the rotation value to the shape instance.
            shape.Rotation = 300;
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Set the rotation value to the shape instance.
            shape.Rotation = 300
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtImplementation.SmartArt">
            <summary>
            Represents the smart art graphic with different smart art types.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shape.SetHyperlink(System.String)">
            <summary>
            Sets the hyperlink to the textpart.
            </summary>
            <param name="link">Represents the address of the target hyperlink</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
            <remarks>The target can be a document path, web url, target slide, email_id.</remarks>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shape.RemoveHyperlink">
            <summary>
            Removes the hyperlink from the current <see cref="T:Syncfusion.Presentation.IShape"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shape.GetThemeColor(System.String)">
            <summary>
            Parse TextBox Graphics data
            </summary>
            <param name="localName"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shape.SkipWhitespaces(System.Xml.XmlReader)">
            <summary>
            Skip whitespaces and moves the reader to the next node.
            </summary>
            <param name="reader">The xml reader</param>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Shape.Hyperlink">
            <summary>
            Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance that represents the hyperlink for the specified shape.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Shape.PlaceholderFormat">
            <summary>
            Returns a IPlaceholderFormat object that contains the properties that are unique to placeholders.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Shape.Rotation">
            <summary>
            Gets or sets the number of degrees the specified shape is rotated.
            </summary>
            <remarks>
            The rotation value ranges from -3600 degrees to 3600 degrees.
            </remarks>
            <value>
            The rotation angle of the shape.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a blank slide to the presentation.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add a rectangle to the slide
            IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
            //Set the rotation value to the shape instance.
            shape.Rotation = 300;
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Set the rotation value to the shape instance.
            shape.Rotation = 300
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Shape.ShapeGuide">
            <summary>
            Gets the shape guide
            </summary>
            <value>The shape guide.</value>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArt.SetParent(Syncfusion.Presentation.SlideImplementation.BaseSlide)">
            <summary>
            Sets the BaseSlide parent to the current SmartArt and its members.
            </summary>
            <param name="newParent">Represents the parent BaseSlide instance which needs to be assigned to the current SmartArt instance and its members.</param>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArt.Background">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.IFill"/> object that represents the SmartArt background.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArt.Layout">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.SmartArtType"/> value that represents the layout associated with the SmartArt. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArt.Nodes">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.ISmartArtNodes"/> object that contains all the nodes within the SmartArt. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode">
            <summary>
            Represents a single semantic node within the data model of a SmartArt graphic.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.Parent">
            <summary>
            Gets the parent of the SmartArt node.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.ChildNodes">
            <summary>
            Gets the child nodes associated with the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.Level">
            <summary>
            Gets the node level in the hierarchy.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.Shapes">
            <summary>
            Gets the shape collection associated with the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.IsAssistant">
            <summary>
            Gets or sets the node as assistant.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNode.TextBody">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in the SmartArt node. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes">
            <summary>
            Represents a collection of nodes within a SmartArt diagram.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.IndexOf(Syncfusion.Presentation.ISmartArtNode)">
            <summary>
            Returns the first occurrence of a specified node from the SmartArt node collection.
            </summary>
            <param name="smartArtNode">The <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance to locate in the collection.</param>
            <returns>Returns the zero-based index of the first occurrence of SmartArt node within the collection, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.Add">
            <summary>
            Adds a new SmartArt node at the end of the SmartArt node collection.
            </summary>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance that represents the new SmartArt diagram.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.Clear">
            <summary>
            Removes all the nodes from the SmartArt.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index of SmartArt node collection.
            </summary>
            <param name="index">The zero-based index of the element to be removed.</param>
        </member>
        <member name="M:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.Remove(Syncfusion.Presentation.ISmartArtNode)">
            <summary>
            Removes the first occurrence of a specified node from the SmartArt node collection.
            </summary>
            <param name="smartArtNode">The SmartArt node to be removed from the collection.</param>
            <returns>Returns true if the specified SmartArt node is removed from the node collection otherwise returns false.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.Count">
            <summary>
            Gets the number of nodes contained in the SmartArt node collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SmartArtImplementation.SmartArtNodes.Item(System.Int32)">
            <summary>
            Gets a node at the specified index of a SmartArt node collection. Read-only.
            </summary>
            <param name="index">Determines the index of the SmartArt node.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArtNode"/> instance.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtImplementation.SmartArtShape">
            <summary>
            Represents a shape within the SmartArt node.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IComment">
            <summary>
            Represents the comment in the slide.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Syncfusion.Presentation.IComment.GetChild" -->
        <member name="P:Syncfusion.Presentation.IComment.Left">
             <summary>
             Gets or sets the left position of the comment in slide
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the left position for the comment
             slide.Comments[1].Left = 0.50;
             //Get the left position of the comment
             double leftPosition = slide.Comments[0].Left;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the left position for the comment
             slide.Comments(1).Left = 0.50
             'Get the left position of the comment
             Dim leftPosition As double = slide.Comments(0).Left
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.Top">
             <summary>
             Gets or sets the top position of the comment in slide
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the top position for the comment
             slide.Comments[1].Top = 0.50;
             //Get the top position of the comment
             double topPosition = slide.Comments[0].Top;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the top position for the comment
             slide.Comments(1).Top = 0.50
             'Get the top position of the comment
             Dim topPosition As double = slide.Comments(0).Top
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.AuthorName">
             <summary>
             Gets or sets the author name of the comment
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the author name for the comment
             slide.Comments[1].AuthorName = "Manager";
             //Get the author name of the comment
             string authorName = slide.Comments[0].AuthorName;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the author name for the comment
             slide.Comments(1).AuthorName = "Manager"
             'Get the author name of the comment
             Dim authorName As string = slide.Comments(0).AuthorName
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.Initials">
             <summary>
             Gets or sets the comment author initials
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the initial for the comment author.
             slide.Comments[1].Initials = "M";
             //Get the initial of the comment author
             string authorInitial = slide.Comments[0].Initials;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the initial for the comment author
             slide.Comments(1).Initials = "M"
             'Get the initial of the comment author
             Dim authorInitial As string = slide.Comments(0).Initials
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.Text">
             <summary>
             Gets or sets the comment text
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the text of the comment
             slide.Comments[1].Text = "How can i convert a slide to image or PDF?";
             //Get the text of the comment
             string authorInitial = slide.Comments[0].Text;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the text of the comment
             slide.Comments(1).Text = "How can i convert a slide to image or PDF?"
             'Get the text of the comment
             Dim authorInitial As string = slide.Comments(0).Text
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.DateTime">
             <summary>
             Gets or sets the created or modified date and time of the comment
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Set the date and time of the comment
             DateTime date = new DateTime(2017, 1, 18);       
             slide.Comments[1].DateTime = date ;
             //Get the date and time of the comment
             DateTime date = slide.Comments[0].DateTime;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Set the date and time of the comment
             DateTime date = new DateTime(2017, 1, 18)
             slide.Comments(1).DateTime = date
             'Get the date and time of the comment
             Dim date As DateTime = slide.Comments(0).DateTime
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComment.HasChild">
             <summary>
             Returns a boolean value that indicates the comment is a parent comment or a reply comment
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Get the text of the the bool value that indicates whether a comment has reply or not
             bool hasReply = slide.Comments[0].HasChild;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Get the bool value that indicates whether a comment has reply or not
             Dim hasReply As bool = slide.Comments(0).HasChild
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>   
        </member>
        <member name="P:Syncfusion.Presentation.IComment.Parent">
             <summary>
             Returns the parent comment otherwise returns null if there is no parent comment 
             </summary>
             <returns> Returns an <see cref="T:Syncfusion.Presentation.IComment"/> instance of parent comment </returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Get the parent comment
             IComment parentComment = slide.Comments[1].Parent;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Get the parent comment
             Dim parentComment As IComment = slide.Comments(1).Parent
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IComments">
            <summary>
            Represents the comment collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.Add(System.Double,System.Double,System.String,System.String,System.String,System.DateTime)">
             <summary>
             Adds a comment for an author in the slide.
             </summary>
             <param name="left">left poisiton of the comment in slide</param>
             <param name="top">top position of comment in slide</param>
             <param name="authorName">name of the comment author</param>
             <param name="authorInitials">initial of the author</param>
             <param name="text">specifies the comment</param>
             <param name="dateTime">specifies the date time of the comment added</param>
             <remarks>The comment gets added in the slide</remarks>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.IComment"/> instance of added comment.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);        
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)        
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.Add(System.String,System.String,System.String,System.DateTime,Syncfusion.Presentation.IComment)">
             <summary>
             Adds a reply for an author to a specific comment.
             </summary>
             <param name="authorName">name of the comment author</param>
             <param name="initials">initial of the author</param>
             <param name="replyText">specifies the comment</param>
             <param name="dateTime">specifies the date time of the reply added</param>
             <param name="parent">specifies the parent comment</param>
             <remarks>The reply is made to a comment added in the slide</remarks>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.IComment"/> instance of added comment.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);        
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)        
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.RemoveAt(System.Int32)">
             <summary>
             Removes the comment at the specified index, from the comment collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Remove the comment at the specified index
             slide.Comments.RemoveAt(1);
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)           
             'Remove the comment at the specified index
             slide.Comments.RemoveAt(1)
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.Remove(Syncfusion.Presentation.IComment)">
             <summary>
             Removes the first occurrence of a specified comment from the comment collection.
             </summary>
             <param name="value">The comment to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Remove the comment at the specified index from the comment collection
             slide.Comments.Remove(comment);
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Remove the comment at the specified index from the comment collection
             slide.Comments.Remove(comment)
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.IndexOf(Syncfusion.Presentation.IComment)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IComment"/> instance within the comment collection.
             </summary>
             <param name="value">The <see cref="T:Syncfusion.Presentation.IComment"/> instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of comment within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Get the index of the comment from the comment collection
             int index = slide.Comments.IndexOf(comment);
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Get the index of the comment from the comment collection
             Dim index As int = slide.Comments.IndexOf(comment)
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.Insert(System.Int32,Syncfusion.Presentation.IComment)">
             <summary>
             Inserts the specified comment into the comment collection at specified index.
             </summary>
             <param name="index">The zero-based index at which the comment should be inserted.</param>
             <param name="comment">The comment instance to insert.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment1 = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             IComment comment2 = slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Insert the comment at the specified index in comment collection
             int index = slide.Comments.Insert(0 , comment2);
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment1 As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             Dim comment2 As IComment = slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)            
             'Insert the comment at the specified index in comment collection
             slide.Comments.Insert(0,comment2)
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IComments.Clear">
             <summary>
             Removes all the comments in the slide.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment1 = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             IComment comment2 = slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Clear the comment from the slide
             slide.Comments.Clear();
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment1 As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             Dim comment2 As IComment = slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Clear the comment from the slide
             slide.Comments.Clear()
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComments.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:Syncfusion.Presentation.IComment"/> instance at the specified index in comment collection. Read-only.
             </summary>
             <param name="index">The index to locate the comment.</param>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.IComment"/> instance at the specified index in comment collection.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Get the comment
             IComment comment = slide.Comments[1];
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Get the comment
             Dim comment As IComment = slide.Comments(1)
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IComments.Count">
             <summary>
             Gets the number of elements in the comment collection. Read-only.
             </summary>
             <value>
             The total count of the comments.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);                     
             //Get the count comment
             int count = slide.Comments.Count;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now)
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment)             
             'Get the count of the comment
             Dim count As int = slide.Comments.Count
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IBackground">
            <summary>
            Represents the background of a slide.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IBackground.Fill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFill"/> instance that contains fill formatting properties.
             Read-only.
             </summary>
             <example>
             <code lang="C#">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide background
             IBackground background = slide.Background;
             //Set the fill type for background as Pattern fill
             background.Fill.FillType = FillType.Pattern;
             //Set the pattern
             background.Fill.PatternFill.Pattern = PatternFillType.DashedHorizontal;
             //set the fore color of pattern
             background.Fill.PatternFill.ForeColor = ColorObject.Lavender;
             //Set the back color of pattern
             background.Fill.PatternFill.BackColor = ColorObject.Brown;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB">
             'Create a new presentation.
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add a slide to the presentation
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
             'Create instance for slide background
             Dim background As IBackground = slide.Background
             'Set the fill type for background as Pattern fill
             background.Fill.FillType = FillType.Pattern
             'Set the pattern
             background.Fill.PatternFill.Pattern = PatternFillType.DashedHorizontal
             'set the fore color of pattern
             background.Fill.PatternFill.ForeColor = ColorObject.Lavender
             'Set the back color of pattern
             background.Fill.PatternFill.BackColor = ColorObject.Brown
            'Save the presentation
             presentation__1.Save("Output.pptx")
             'Close the presentation
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="T:Syncfusion.Presentation.Charts.ChartCollection">
            <summary>
            Represents the collection of charts.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPresentationCharts">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance in a slide.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.AddChart(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a chart to the shape collection with the specified bounds.
             </summary>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation 
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold chart collection
             IPresentationCharts charts = slide.Charts;            
             //Add chart to slide           
             IPresentationChart chart =charts.AddChart(400, 300, 100, 100);
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation 
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold chart collection
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide           
            Dim chart As IPresentationChart = charts.AddChart(400, 300, 100, 100)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.AddChart(System.IO.Stream,System.Int32,System.String,System.Drawing.RectangleF)">
            <summary>
            Creates a chart for the data in specified excel document and adds the chart to the shape collection.
            </summary>
            <param name="excelStream">Excel document stream having the data for chart[Only the "*.xlsx" format is supported].</param>
            <param name="sheetNumber">Worksheet number of the excel document.</param>
            <param name="dataRange">Data range in the worksheet for the chart to be created.</param>
            <param name="bounds">Position and size of the chart, in points.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.AddChart(System.Object[][],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a chart for the specified data and adds the chart to the shape collection.
            </summary>
            <param name="data">Specifies the two dimensional chart data.</param>
            <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.AddChart(System.Collections.IEnumerable,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a chart from the specified enumerable and adds the chart to the shape collection.
            </summary>
            <param name="enumerable">Specifies the <see cref="T:System.Collections.IEnumerable"/> object with desired data</param>
            <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.IndexOf(Syncfusion.Presentation.IPresentationChart)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance within the collection.
             </summary>
             <param name="chart">The IPresentationChart instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of object within the entire collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold chart collection
             IPresentationCharts charts = slide.Charts;            
             //Add chart to slide           
             IPresentationChart chart =charts.AddChart(400, 300, 100, 100);
             //Get the index of specific chart
             int index = shapes.IndexOf(chart);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold chart collection
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide           
            Dim chart As IPresentationChart = charts.AddChart(400, 300, 100, 100)
            'Get the index of specific chart
            Dim index As Integer = shapes.IndexOf(chart)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationCharts.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the chart collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold chart collection
             IPresentationCharts charts = slide.Charts;            
             //Add chart to slide           
             IPresentationChart chart =charts.AddChart(400, 300, 100, 100);
             //Remove chart specific index
             chart.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold chart collection
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide           
            Dim chart As IPresentationChart = charts.AddChart(400, 300, 100, 100)
            'Remove chart specific index
            chart.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationCharts.Item(System.Int32)">
             <summary>
             Gets a single <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance from the collection. Read-only.
             </summary>
             <param name="index">Index from the collection.</param>
             <returns>Returns the particular chart based on the index.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold chart collection
             IPresentationCharts charts = slide.Charts;            
             //Add chart to slide           
             charts.AddChart(400, 300, 100, 100);
             //Retrieve the chart at index 0
             IPresentationChart chart = charts[0];
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold chart collection
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide           
            charts.AddChart(400, 300, 100, 100)
            'Retrieve the chart at index 0
            Dim chart As IPresentationChart = charts(0)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationCharts.Count">
             <summary>
             Gets the number of elements in the chart collection. Read-only.
             </summary>
             <value>
             The total count of the charts in the chart collection.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold chart collection
             IPresentationCharts charts = slide.Charts;            
             //Add chart to slide           
             IPresentationChart chart =charts.AddChart(400, 300, 100, 100);
             //Get the count for chart collection
             int count = charts.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold chart collection
            Dim charts As IPresentationCharts = slide.Charts
            'Add chart to slide           
            Dim chart As IPresentationChart = charts.AddChart(400, 300, 100, 100)
            'Get the count for chart collection
            Dim count As Integer = charts.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.AddChart(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="left">The left position of the chart from left edge of the slide, in points</param>
            <param name="top">The top position of the chart from top edge of the slide, in points</param>
            <param name="width">Width of the chart, in points</param>
            <param name="height">Height of the chart, in points</param>
            <returns>Returns a chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.AddChart(System.IO.Stream,System.Int32,System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="excelStream">Excel document stream that has the data for chart,excel document should be in "*.xlsx" format</param>
            <param name="sheetNumber">Worksheet number of the excel document.</param>
            <param name="dataRange">Data range in the worksheet for which the chart to be created.</param>
            <param name="bounds">Size and Position of chart in the slide.</param>
            <returns>Returns a chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.AddChart(System.Object[][],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="data">Chart data in 2-dimensional array format.</param>
            <param name="left">The left position of the chart from left edge of the slide, in points</param>
            <param name="top">The left position of the chart from left edge of the slide, in points</param>
            <param name="width">The width of the chart, in points</param>
            <param name="height">The height of the chart, in points.</param>
            <returns>Returns a chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.AddChart(System.Collections.IEnumerable,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="enumerable">IEnumerable object with desired data</param>
            <param name="left">The left position of the chart from left edge of the shape, in points</param>
            <param name="top">The top position of the chart from top edge of the shape, in points</param>
            <param name="width">The width of the chart, in points</param>
            <param name="height">The height of the chart, in points.</param>
            <returns>Returns a chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.IndexOf(Syncfusion.Presentation.IPresentationChart)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified chart
            </summary>
            <param name="chart">Represents a chart from the collection.</param>
            <returns>The zero-based index position of the chart, if found otherwise -1.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the chart at the specified index of the chart collection
            </summary>
            <param name="index">The zero-based index of the chart to remove.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.ChartCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the chart collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the chart collection.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.ChartCollection.Item(System.Int32)">
             <summary>
            Gets the chart at the specified index.
             </summary>
             <param name="index">Index of the chart.</param>
             <returns></returns>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.ChartCollection.Count">
            <summary>
            Gets the number of elements contained in the chart collection.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPresentationChart">
            <summary>
            Represents the charts in the presentation
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationChart.Refresh">
             <summary>
             Refreshes the chart object according its excel data.
             </summary>
             <example>
             <code lang="CS">
             //Open a presentation containing charts
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Get the slide from presentation
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Charts[0];
             //Refresh the chart to set worksheet data to current chart
             chart.Refresh();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open a presentation containing charts
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Get the slide from presentation
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = slide.Charts(0)
            'Refresh the chart to set worksheet data to current chart
            chart.Refresh()
            'Save the presentation
            presentation.Save("Sample.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationChart.SaveAsImage(System.IO.Stream)">
             <summary>
             Converts the chart to image and saves the image in the specified stream.
             </summary>
             <param name="imageAsStream">The stream to save the image.</param>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Initialize the ChartToImageConverter class; this is mandatory
             presentation.ChartToImageConverter = new ChartToImageConverter();
             //Set the scaling mode for quality
             presentation.ChartToImageConverter.ScalingMode = Syncfusion.OfficeChart.ScalingMode.Best;
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Create a stream instance to store the image
             MemoryStream stream = new MemoryStream();
             //Save the image to stream
             chart.SaveAsImage(stream);
             //Save the stream to a file
             using (FileStream fileStream = File.Create("ChartImage.png", (int)stream.Length))
                fileStream.Write(stream.ToArray(), 0, stream.ToArray().Length);
             //Close the stream
             stream.Close();
             //Save the Presentation
             presentation.Save("output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Initialize the ChartToImageConverter class; this is mandatory
            presentation.ChartToImageConverter = New ChartToImageConverter()
            'Set the scaling mode for quality
            presentation.ChartToImageConverter.ScalingMode = Syncfusion.OfficeChart.ScalingMode.Best
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Create a stream instance to store the image
            Dim stream As New MemoryStream()
            'Save the image to stream
            chart.SaveAsImage(stream)
            'Save the stream to a file
            Using fileStream As FileStream = File.Create("ChartImage.png", CInt(stream.Length))
            	fileStream.Write(stream.ToArray(), 0, stream.ToArray().Length)
            End Using
            'Close the stream
            stream.Close()
            'Save the Presentation
            presentation.Save("output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationChart.SetChartData(System.Object[][])">
             <summary>
             Sets the chart data with the specified two dimensional object array.
             </summary>
             <param name="data">Represents the two dimensional chart data</param>
             <returns></returns>
             <example>
             <code lang="CS">
             //Create a new PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Charts.AddChart(100, 100, 300, 200);
             //Create an instance of object array
             object[][] chartData = { new object[3], new object[4] };
             //Invoke setChartData method by passing object array
             chart.SetChartData(chartData);
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Save the Presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 100, 300, 200)
            'Create an instance of object array
            Dim chartData As Object()() = {New Object(2) {}, New Object(3) {}}
            'Invoke setChartData method by passing object array
            chart.SetChartData(chartData)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Save the Presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationChart.SetDataRange(System.Object[][],System.Int32,System.Int32)">
             <summary>
             Sets the chart data with the specified two dimensional object array, row index and column index.
             </summary>
             <param name="data">Represents the two dimensional chart data</param>
             <param name="rowIndex">Row of the first cell where array should be imported.</param>
             <param name="columnIndex">Column of the first cell where array should be imported.</param>
             <example>
             <code lang="CS">
             //Create a new PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Charts.AddChart(100, 100, 300, 300);
             //Create an instance of object array
             object[][] dataRange = { new object[5], new object[5] };
             //Invoke set data Range method
             chart.SetDataRange(dataRange, 1, 3);
             //Save the Presentation
             presentation.Save("output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart= slide.Charts.AddChart(100, 100, 300, 300)
            'Create an instance of object array
            Dim dataRange As Object()() = {New Object(4) {}, New Object(4) {}}
            'Invoke set data Range method
            chart.SetDataRange(dataRange, 1, 3)
            'Save the Presentation
            presentation.Save("output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentationChart.SetDataRange(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Sets the chart data with the specified enumerable, row index and column index.
            </summary>
            <param name="enumerable">IEnumerable object with desired data</param>
            <param name="rowIndex">Row of the first cell where array should be imported.</param>
            <param name="columnIndex">Column of the first cell where array should be imported.</param>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.ChartType">
             <summary>
             Gets or sets the Chart Type.
             <remarks>Initiate series, ranges and update the ChartType.</remarks>
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis"; 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Specify the chart type
             chart.ChartType = OfficeChartType.Surface_3D;
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];    
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim  presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide =  presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Specify the chart type
            chart.ChartType = OfficeChartType.Surface_3D
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Save the presentation
             presentation.Save("Output.pptx")
            'Close the presentation
             presentation.Close()    
            </code>
            </example>    
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.DataRange">
             <summary>
             Gets or sets the DataRange for the chart series.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Create();
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Shapes.AddChart(100, 120, 500, 300);
             //Sets the data range of chart
             chart.DataRange = chart.ChartData[1, 2, 4, 3];
             //Set data to the chart- RowIndex, columnIndex and data
             chart.ChartData.SetValue(1, 2, "2012");
             chart.ChartData.SetValue(2, 2, 330);
             chart.ChartData.SetValue(3, 2, 490);
             chart.ChartData.SetValue(4, 2, 700);
             chart.ChartType = OfficeChartType.Area;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Create()
            Dim slide As ISlide =  presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart = slide.Shapes.AddChart(100, 120, 500, 300)
            'Sets the data range of chart
            chart.DataRange = chart.ChartData(1, 2, 4, 3)
            'Set data to the chart- RowIndex, columnIndex and data
            chart.ChartData.SetValue(1, 2, "2012")
            chart.ChartData.SetValue(2, 2, 330)
            chart.ChartData.SetValue(3, 2, 490)
            chart.ChartData.SetValue(4, 2, 700)
            chart.ChartType = OfficeChartType.Area
            'Save the presentation
             presentation.Save("Output.pptx")
            'Close the presentation
             presentation.Close()   
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.IsSeriesInRows">
            <summary>
            Gets or sets whether series in rows or not. True if series are in rows in DataRange;
            False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.ChartTitle">
             <summary>
             Gets or sets the Title of the chart.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis";
             //Specify the chart type
             chart.ChartType = OfficeChartType.Column_Clustered;
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Specify the chart type
            chart.ChartType = OfficeChartType.Column_Clustered
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.ChartTitleArea">
             <summary>
             Gets title text area. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis"; 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Specify the chart type
             chart.ChartType = OfficeChartType.Surface_3D;
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Get the chart title text area
             IOfficeChartTextArea textArea = chart.ChartTitleArea;
             //Set the background mode of the title area
             textArea.BackgroundMode = OfficeChartBackgroundMode.Transparent;
             //Set bold font style
             textArea.Bold = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Specify the chart type
            chart.ChartType = OfficeChartType.Surface_3D
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Get the chart title text area
            Dim textArea As IOfficeChartTextArea = chart.ChartTitleArea
            'Set the background mode of the title area
            textArea.BackgroundMode = OfficeChartBackgroundMode.Transparent
            'Set bold font style
            textArea.Bold = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()  
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.XPos">
             <summary>
             Gets or sets the X coordinate of the upper-left corner
             of the chart in points (1/72 inch).
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300); 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the x - position of the chart 
             chart.XPos = 300;
             //Set the y - position of the chart
             chart.YPos = 140;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the x - position of the chart 
            chart.XPos = 300
            'Set the y - position of the chart
            chart.YPos = 140
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()   
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.YPos">
             <summary>
             Gets or sets the Y coordinate of the upper-left corner
             of the chart in points (1/72 inch).
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300); 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the x - position of the chart 
             chart.XPos = 300;
             //Set the y - position of the chart
             chart.YPos = 140;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the x - position of the chart 
            chart.XPos = 300
            'Set the y - position of the chart
            chart.YPos = 140
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()   
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Width">
             <summary>
             Gets or sets the Width of the chart in points (1/72 inch).
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Modify the chart height
             chart.Height = 500;
             //Modify the chart width
             chart.Width = 700;
             //Change the title
             chart.ChartTitle = "New title";
             //Change the serie name of first chart serie
             chart.Series[0].Name = "Modified serie name";
             //Hiding the category labels
             chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone;
             //Show Data Table.
             chart.HasDataTable = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Modify the chart height
            chart.Height = 500
            'Modify the chart width
            chart.Width = 700
            'Change the title
            chart.ChartTitle = "New title"
            'Change the serie name of first chart serie
            chart.Series(0).Name = "Modified serie name"
            'Hiding the category labels
            chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone
            'Show Data Table.
            chart.HasDataTable = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Height">
             <summary>
             Gets or sets the Height of the chart in points (1/72 inch).
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Modify the chart height
             chart.Height = 500;
             //Modify the chart width
             chart.Width = 700;
             //Change the title
             chart.ChartTitle = "New title";
             //Change the serie name of first chart serie
             chart.Series[0].Name = "Modified serie name";
             //Hiding the category labels
             chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone;
             //Show Data Table.
             chart.HasDataTable = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Modify the chart height
            chart.Height = 500
            'Modify the chart width
            chart.Width = 700
            'Change the title
            chart.ChartTitle = "New title"
            'Change the serie name of first chart serie
            chart.Series(0).Name = "Modified serie name"
            'Hiding the category labels
            chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone
            'Show Data Table.
            chart.HasDataTable = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Series">
             <summary>
             Gets the collection of the all series of this chart. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Modify the chart height
             chart.Height = 500;
             //Modify the chart width
             chart.Width = 700;
             //Change the title
             chart.ChartTitle = "New title";
             //Change the serie name of first chart serie
             chart.Series[0].Name = "Modified serie name";
             //Hiding the category labels
             chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone;
             //Show Data Table.
             chart.HasDataTable = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Modify the chart height
            chart.Height = 500
            'Modify the chart width
            chart.Width = 700
            'Change the title
            chart.ChartTitle = "New title"
            'Change the serie name of first chart serie
            chart.Series(0).Name = "Modified serie name"
            'Hiding the category labels
            chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone
            'Show Data Table.
            chart.HasDataTable = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.PrimaryCategoryAxis">
             <summary>
             Gets the primary category axis. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300); 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Get the primary category axis 
             IOfficeChartCategoryAxis primaryCategoryAxis = chart.PrimaryCategoryAxis;
             //Set the data range of the category axis
             primaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Get the primary category axis 
            Dim primaryCategoryAxis As IOfficeChartCategoryAxis = chart.PrimaryCategoryAxis
            'Set the data range of the category axis
            primaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.PrimaryValueAxis">
             <summary>
             Gets the primary value axis. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300); 
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Get the primary value axis
             IOfficeChartValueAxis primaryValueAxis = chart.PrimaryValueAxis;   
             //Set bold font style 
             primaryValueAxis.Font.Bold = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Get the primary value axis
            Dim primaryValueAxis As IOfficeChartValueAxis = chart.PrimaryValueAxis
            'Set bold font style 
            primaryValueAxis.Font.Bold = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.PrimarySerieAxis">
             <summary>
             Gets the primary series axis. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Get the primary serie axis 
             IOfficeChartSeriesAxis primarySerieAxis = chart.PrimarySerieAxis;
             //Set the font style of serie axis
             primarySerieAxis.Font.Italic = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Get the primary serie axis 
            Dim primarySerieAxis As IOfficeChartSeriesAxis = chart.PrimarySerieAxis
            'Set the font style of serie axis
            primarySerieAxis.Font.Italic = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.SecondaryCategoryAxis">
             <summary>
             Gets the secondary category axis. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Open a presentation with Combinational chart type
             IPresentation presentation = Presentation.Open("Template.pptx");  
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Get the secondary category axis 
             IOfficeChartCategoryAxis secondaryCategoryAxis = chart.PrimaryCategoryAxis;  
             //Set the minor grid lines
             secondaryCategoryAxis.HasMinorGridLines = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open a presentation with Combinational chart type
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Get the secondary category axis 
            Dim secondaryCategoryAxis As IOfficeChartCategoryAxis = chart.PrimaryCategoryAxis
            'Set the minor grid lines
            secondaryCategoryAxis.HasMinorGridLines = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.SecondaryValueAxis">
             <summary>
             Gets the secondary value axis. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Open a presentation with Combinational chart type
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Get the secondary value axis 
             IOfficeChartValueAxis secondaryValueAxis = chart.SecondaryValueAxis;   
             //Set the tick label position
             secondaryValueAxis.TickLabelPosition = OfficeTickLabelPosition.TickLabelPosition_NextToAxis;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open a presentation with Combinational chart type
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Get the secondary value axis 
            Dim secondaryValueAxis As IOfficeChartValueAxis = chart.SecondaryValueAxis
            'Set the tick label position
            secondaryValueAxis.TickLabelPosition = OfficeTickLabelPosition.TickLabelPosition_NextToAxis
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.ChartArea">
             <summary>
             Gets an object that represents the complete chart area for the chart. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Shapes.AddChart(100, 100, 400, 300);
             //Set the chart data value
             chart.ChartData.SetValue(1, 2, "1");
             chart.ChartData.SetValue(2, 1, "A");
             chart.ChartData.SetValue(2, 2, 20);
             //Set chart data range
             chart.DataRange = chart.ChartData[2, 2, 4, 4];
             //Set the chart type
             chart.ChartType = OfficeChartType.Column_Clustered;
             //Get the chart area
             IOfficeChartFrameFormat chartArea = chart.ChartArea;
             //Set the line pattern of chart border
             chartArea.Border.LinePattern = OfficeChartLinePattern.DashDotDot;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
            'Create a new presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart = slide.Shapes.AddChart(100, 100, 400, 300)
            'Set the chart data value
            chart.ChartData.SetValue(1, 2, "1")
            chart.ChartData.SetValue(2, 1, "A")
            chart.ChartData.SetValue(2, 2, 20)
            'Set chart data range
            chart.DataRange = chart.ChartData(2, 2, 4, 4)
            'Set the chart type
            chart.ChartType = OfficeChartType.Column_Clustered
            'Get the chart area
            Dim chartArea As IOfficeChartFrameFormat = chart.ChartArea
            'Set the line pattern of chart border
            chartArea.Border.LinePattern = OfficeChartLinePattern.DashDotDot
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.PlotArea">
             <summary>
             Gets plot area frame format. Read-only.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Create();
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Shapes.AddChart(100, 120, 500, 300);
             //Set the data range of chart
             chart.DataRange = chart.ChartData[1, 2, 4, 3];
             //Set data to the chart- RowIndex, columnIndex and data
             chart.ChartData.SetValue(1, 2, "2012");
             chart.ChartData.SetValue(2, 2, 330);
             chart.ChartData.SetValue(3, 2, 490);
             chart.ChartData.SetValue(4, 2, 700);
             chart.ChartType = OfficeChartType.Area;
             //Edge: Specifies that the width or Height will be interpreted as right or bottom of the chart element
             //Factor: Specifies that the width or Height will be interpreted as the width or height of the chart element
             chart.PlotArea.Layout.LeftMode = LayoutModes.auto;
             chart.PlotArea.Layout.TopMode = LayoutModes.factor;
             //Value in points should not be a negative value if LayoutMode is Edge
             //It can be a negative value if the LayoutMode is Factor.
             chart.ChartTitleArea.Layout.Left = 10;
             chart.ChartTitleArea.Layout.Top = 100;
             //Manually positioning chart plot area
             chart.PlotArea.Layout.LayoutTarget = LayoutTargets.outer;
             chart.PlotArea.Layout.LeftMode = LayoutModes.edge;
             chart.PlotArea.Layout.TopMode = LayoutModes.edge;
             //Manually positioning chart legend 	
             chart.Legend.Layout.LeftMode = LayoutModes.factor;
             chart.Legend.Layout.TopMode = LayoutModes.factor;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Create()
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart = slide.Shapes.AddChart(100, 120, 500, 300)
            'Sets the data range of chart
            chart.DataRange = chart.ChartData(1, 2, 4, 3)
            'Set data to the chart- RowIndex, columnIndex and data
            chart.ChartData.SetValue(1, 2, "2012")
            chart.ChartData.SetValue(2, 2, 330)
            chart.ChartData.SetValue(3, 2, 490)
            chart.ChartData.SetValue(4, 2, 700)
            chart.ChartType = OfficeChartType.Area
            'Edge: Specifies that the width or Height will be interpreted as right or bottom of the chart element
            'Factor: Specifies that the width or Height will be interpreted as the width or height of the chart element
            chart.PlotArea.Layout.LeftMode = LayoutModes.auto
            chart.PlotArea.Layout.TopMode = LayoutModes.factor
            'Value in points should not be a negative value if LayoutMode is Edge
            'It can be a negative value if the LayoutMode is Factor.
            chart.ChartTitleArea.Layout.Left = 10
            chart.ChartTitleArea.Layout.Top = 100
            'Manually positioning chart plot area
            chart.PlotArea.Layout.LayoutTarget = LayoutTargets.outer
            chart.PlotArea.Layout.LeftMode = LayoutModes.edge
            chart.PlotArea.Layout.TopMode = LayoutModes.edge
            'Manually positioning chart legend 	
            chart.Legend.Layout.LeftMode = LayoutModes.factor
            chart.Legend.Layout.TopMode = LayoutModes.factor
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Walls">
             <summary>
             Gets the chart walls. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the fill type of wall as pattern
             chart.Walls.Fill.FillType = OfficeFillType.Pattern;
             //set the back color of the pattern fill
             chart.Walls.Fill.BackColor = Color.AliceBlue;
             //Set the fore color of the pattern fill
             chart.Walls.Fill.ForeColor = Color.Brown;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the fill type of wall as pattern
            chart.Walls.Fill.FillType = OfficeFillType.Pattern
            'set the back color of the pattern fill
            chart.Walls.Fill.BackColor = Color.AliceBlue
            'Set the fore color of the pattern fill
            chart.Walls.Fill.ForeColor = Color.Brown
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.SideWall">
             <summary>
             Gets the chart BackWall. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Change the chart type to 3D
             chart.ChartType = OfficeChartType.Bar_Clustered_3D;
             //Set the rotation
             chart.Rotation = 80;
             //Set the shadow angle
             chart.SideWall.Shadow.Angle = 60;
             //Set the backwall border weight
             chart.BackWall.Border.LineWeight = OfficeChartLineWeight.Narrow;
             //Save the presentation
             presentation.Save("output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Change the chart type to 3D
            chart.ChartType = OfficeChartType.Bar_Clustered_3D
            'Set the rotation
            chart.Rotation = 80
            'Set the shadow angle
            chart.SideWall.Shadow.Angle = 60
            'Set the backwall border weight
            chart.BackWall.Border.LineWeight = OfficeChartLineWeight.Narrow
            'Save the presentation
            presentation.Save("output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.BackWall">
             <summary>
             Gets the chart BackWall. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis";
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Specify the chart type
             chart.ChartType = OfficeChartType.Surface_3D;
             //Get the back wall of the chart
             IOfficeChartWallOrFloor backWall = chart.BackWall;
             //Set the line properties of the back wall
             backWall.LineProperties.LineWeight = OfficeChartLineWeight.Narrow;           
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Specify the chart type
            chart.ChartType = OfficeChartType.Surface_3D
            'Get the back wall of the chart
            Dim backWall As IOfficeChartWallOrFloor = chart.BackWall
            'Set the line properties of the back wall
            backWall.LineProperties.LineWeight = OfficeChartLineWeight.Narrow
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Floor">
             <summary>
             Gets the chart floor. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Get the floor of chart
             IOfficeChartWallOrFloor floor = chart.Floor;
             //Set the filltype of floor as pattern fill
             floor.Fill.FillType = OfficeFillType.Pattern;
             //Set the back and fore color of the pattern fill
             floor.Fill.BackColor = Color.Blue;
             floor.Fill.ForeColor = Color.Brown;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Get the floor of chart
            Dim floor As IOfficeChartWallOrFloor = chart.Floor
            'Set the filltype of floor as pattern fill
            floor.Fill.FillType = OfficeFillType.Pattern
            'Set the back and fore color of the pattern fill
            floor.Fill.BackColor = Color.Blue
            floor.Fill.ForeColor = Color.Brown
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.DataTable">
             <summary>
             Gets the charts dataTable object.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Set the chart with data table
             chart.HasDataTable = true;
             //Get the data table, read only
             IOfficeChartDataTable dataTable = chart.DataTable;
             //set borders for data table
             dataTable.HasBorders = true;
             //Set the show serie keys
             dataTable.ShowSeriesKeys = true;  
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Set the chart with data table
            chart.HasDataTable = True
            'Get the data table, read only
            Dim dataTable As IOfficeChartDataTable = chart.DataTable
            'set borders for data table
            dataTable.HasBorders = True
            'Set the show serie keys
            dataTable.ShowSeriesKeys = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example> 
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.HasDataTable">
             <summary>
             Gets or sets whether the chart has data table.
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Modify the chart height
             chart.Height = 500;
             //Modify the chart width
             chart.Width = 700;
             //Change the title
             chart.ChartTitle = "New title";
             //Change the serie name of first chart serie
             chart.Series[0].Name = "Modified serie name";
             //Hiding the category labels
             chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone;
             //Show Data Table.
             chart.HasDataTable = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Modify the chart height
            chart.Height = 500
            'Modify the chart width
            chart.Width = 700
            'Change the title
            chart.ChartTitle = "New title"
            'Change the serie name of first chart serie
            chart.Series(0).Name = "Modified serie name"
            'Hiding the category labels
            chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelNone
            'Show Data Table.
            chart.HasDataTable = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Legend">
             <summary>
             Gets the chart legend.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Create();
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to slide
             IPresentationChart chart = slide.Shapes.AddChart(100, 120, 500, 300);
             //Sets the data range of chart
             chart.DataRange = chart.ChartData[1, 2, 4, 3];
             //Set data to the chart- RowIndex, columnIndex and data
             chart.ChartData.SetValue(1, 2, "2012");
             chart.ChartData.SetValue(2, 2, 330);
             chart.ChartData.SetValue(3, 2, 490);
             chart.ChartData.SetValue(4, 2, 700);
             chart.ChartType = OfficeChartType.Area;
             //Edge: Specifies that the width or Height will be interpreted as right or bottom of the chart element
             //Factor: Specifies that the width or Height will be interpreted as the width or height of the chart element
             chart.PlotArea.Layout.LeftMode = LayoutModes.auto;
             chart.PlotArea.Layout.TopMode = LayoutModes.factor;
             //Value in points should not be a negative value if LayoutMode is Edge
             //It can be a negative value if the LayoutMode is Factor.
             chart.ChartTitleArea.Layout.Left = 10;
             chart.ChartTitleArea.Layout.Top = 100;
             //Manually positioning chart plot area
             chart.PlotArea.Layout.LayoutTarget = LayoutTargets.outer;
             chart.PlotArea.Layout.LeftMode = LayoutModes.edge;
             chart.PlotArea.Layout.TopMode = LayoutModes.edge;
             //Manually positioning chart legend 	
             chart.Legend.Layout.LeftMode = LayoutModes.factor;
             chart.Legend.Layout.TopMode = LayoutModes.factor;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Create()
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to slide
            Dim chart As IPresentationChart = slide.Shapes.AddChart(100, 120, 500, 300)
            'Sets the data range of chart
            chart.DataRange = chart.ChartData(1, 2, 4, 3)
            'Set data to the chart- RowIndex, columnIndex and data
            chart.ChartData.SetValue(1, 2, "2012")
            chart.ChartData.SetValue(2, 2, 330)
            chart.ChartData.SetValue(3, 2, 490)
            chart.ChartData.SetValue(4, 2, 700)
            chart.ChartType = OfficeChartType.Area
            'Edge: Specifies that the width or Height will be interpreted as right or bottom of the chart element
            'Factor: Specifies that the width or Height will be interpreted as the width or height of the chart element
            chart.PlotArea.Layout.LeftMode = LayoutModes.auto
            chart.PlotArea.Layout.TopMode = LayoutModes.factor
            'Value in points should not be a negative value if LayoutMode is Edge
            'It can be a negative value if the LayoutMode is Factor.
            chart.ChartTitleArea.Layout.Left = 10
            chart.ChartTitleArea.Layout.Top = 100
            'Manually positioning chart plot area
            chart.PlotArea.Layout.LayoutTarget = LayoutTargets.outer
            chart.PlotArea.Layout.LeftMode = LayoutModes.edge
            chart.PlotArea.Layout.TopMode = LayoutModes.edge
            'Manually positioning chart legend
            chart.Legend.Layout.LeftMode = LayoutModes.factor
            chart.Legend.Layout.TopMode = LayoutModes.factor
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.HasLegend">
             <summary>
             Gets or sets whether the chart has legends.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Hide the legend 
             chart.HasLegend = false;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Hide the legend 
            chart.HasLegend = False
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Rotation">
             <summary>
             Gets or sets the rotation of the 3-D chart view
             (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
             </summary>
             <example>
             <code lang="CS">
             //Open the presentation
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Get the first slide
             ISlide slide = presentation.Slides[0];
             //Get the chart in slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //Change the chart type to 3D
             chart.ChartType = OfficeChartType.Bar_Clustered_3D;
             //Set the rotation
             chart.Rotation = 80;
             //Set the shadow angle
             chart.SideWall.Shadow.Angle = 60;
             //Set the backwall border weight
             chart.BackWall.Border.LineWeight = OfficeChartLineWeight.Narrow;
             //Save the presentation
             presentation.Save("output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open the presentation
            Dim presentation As IPresentation = Presentation.Open("Sample.pptx")
            'Get the first slide
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart in slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'Change the chart type to 3D
            chart.ChartType = OfficeChartType.Bar_Clustered_3D
            'Set the rotation
            chart.Rotation = 80
            'Set the shadow angle
            chart.SideWall.Shadow.Angle = 60
            'Set the backwall border weight
            chart.BackWall.Border.LineWeight = OfficeChartLineWeight.Narrow
            'Save the presentation
            presentation.Save("output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Elevation">
             <summary>
             Gets or sets the elevation of the 3-D chart view, in degrees (–90 to 90 degrees).
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the elevation of chart
             chart.Elevation = -50;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the elevation of chart
            chart.Elevation = -50
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Perspective">
             <summary>
             Gets or sets the perspective for the 3-D chart view (0 to 100).
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the perspective 
             chart.Perspective = 100;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the perspective of chart
            chart.Perspective = 100
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.HeightPercent">
             <summary>
            Gets or sets the height of a 3-D chart as a percentage of the chart width
             (between 5 and 500 percent).
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the height percent
             chart.HeightPercent = 400;
             //Set the Depth percent
             chart.DepthPercent = 200;
             //Set the gap depth of data series
             chart.GapDepth = 400;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the height percent
            chart.HeightPercent = 400
            'Set the Depth percent
            chart.DepthPercent = 200
            'Set the gap depth of data series
            chart.GapDepth = 400
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.DepthPercent">
             <summary>
             Gets or sets the depth of a 3-D chart as a percentage of the chart width
             (between 20 and 2000 percent).
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the height percent
             chart.HeightPercent = 400;
             //Set the Depth percent
             chart.DepthPercent = 200;
             //Set the gap depth of data series
             chart.GapDepth = 400;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the height percent
            chart.HeightPercent = 400
            'Set the Depth percent
            chart.DepthPercent = 200
            'Set the gap depth of data series
            chart.GapDepth = 400
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.GapDepth">
             <summary>
             Gets or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.( 0 - 500 )
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the height percent
             chart.HeightPercent = 400;
             //Set the Depth percent
             chart.DepthPercent = 200;
             //Set the gap depth of data series
             chart.GapDepth = 400;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the height percent
            chart.HeightPercent = 400
            'Set the Depth percent
            chart.DepthPercent = 200
            'Set the gap depth of data series
            chart.GapDepth = 400
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.RightAngleAxes">
             <summary>
             Gets or sets whether if the chart axes are at right angles, independent of chart rotation or elevation.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the right angle axes
             chart.RightAngleAxes = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the right angle axes
            chart.RightAngleAxes = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.AutoScaling">
             <summary>
             Gets or sets whether if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis";
             //Specify the chart type
             chart.ChartType = OfficeChartType.Column_Clustered;
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80"); 
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Set the right angle axes property of the chart
             chart.RightAngleAxes = true;
             //Set the auto scaling of chart
             chart.AutoScaling = true;
             //Save the presentation
             presentation.Save("sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the right angle axes
            chart.RightAngleAxes = True
            'Set the auto scaling of chart
            chart.AutoScaling = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.WallsAndGridlines2D">
             <summary>
             Gets or sets if grid lines are drawn two-dimensionally on a 3-D chart.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the 2D gridlines for chart
             chart.WallsAndGridlines2D = true;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the 2D gridlines for chart
            chart.WallsAndGridlines2D = True
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.HasPlotArea">
            <summary>
            Gets or sets whether chart has plot area.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.DisplayBlanksAs">
             <summary>
             Gets or sets the way that blank cells are plotted on a chart.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Set the way blank cells to be plotted
             chart.DisplayBlanksAs = OfficeChartPlotEmpty.Interpolated;           
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Set the way blank cells to be plotted
            chart.DisplayBlanksAs = OfficeChartPlotEmpty.Interpolated
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.PlotVisibleOnly">
             <summary>
             Gets or sets whether if only visible cells are plotted. False if both visible and hidden cells are plotted.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Hide the plot visiblity of cells
             chart.PlotVisibleOnly = false;
             //Hide the chart size with sheet window
             chart.SizeWithWindow = false;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Hide the plot visiblity of cells
            chart.PlotVisibleOnly = False
            'Hide the chart size with sheet window
            chart.SizeWithWindow = False
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.SizeWithWindow">
             <summary>
             Gets or sets whether the chart size matches with the chart sheet window. True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
             False if the chart size isn't attached to the window size. Applies only to chart sheets.
             </summary>
             <example>
             <code lang="CS">
             IPresentation presentation = Presentation.Open("Template.pptx");
             ISlide slide = presentation.Slides[0];
             //Get the chart from slide
             IPresentationChart chart = slide.Shapes[0] as IOfficeChart;
             //set the chart type
             chart.ChartType = OfficeChartType.Column_3D;
             //Hide the plot visiblity of cells
             chart.PlotVisibleOnly = false;
             //Hide the chart size with sheet window
             chart.SizeWithWindow = false;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            Dim slide As ISlide = presentation.Slides(0)
            'Get the chart from slide
            Dim chart As IPresentationChart = TryCast(slide.Shapes(0), IOfficeChart)
            'set the chart type
            chart.ChartType = OfficeChartType.Column_3D
            'Hide the plot visiblity of cells
            chart.PlotVisibleOnly = False
            'Hide the chart size with sheet window
            chart.SizeWithWindow = False
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.Categories">
            <summary>
            Gets the collection of the all categories of this chart. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.SeriesNameLevel">
             <summary>
             Gets or sets the series name filter option
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 500, 300);
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //set the serie name level
             chart.SeriesNameLevel = OfficeSeriesNameLevel.SeriesNameLevelNone;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 500, 300)
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'set the serie name level
            chart.SeriesNameLevel = OfficeSeriesNameLevel.SeriesNameLevelNone
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.CategoryLabelLevel">
             <summary>
             Gets or sets the category name filter option
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis";   
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Specify the chart type
             chart.ChartType = OfficeChartType.Surface_3D;
             //Set the category label level
             chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelAll;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Specify the chart type
            chart.ChartType = OfficeChartType.Surface_3D
            'Set the category label level
            chart.CategoryLabelLevel = OfficeCategoriesLabelLevel.CategoriesLabelLevelAll
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentationChart.ChartData">
             <summary>
             Gets the chart data. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a presentation instance
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add chart to the slide with position and size
             IPresentationChart chart = slide.Charts.AddChart(100, 10, 700, 500);
             //Specify the chart title
             chart.ChartTitle = "Sales Analysis";
             //Specify the chart type
             chart.ChartType = OfficeChartType.Column_Clustered;
             //Set chart data - Row1
             chart.ChartData.SetValue(1, 2, "Jan");
             chart.ChartData.SetValue(1, 3, "Feb");
             chart.ChartData.SetValue(1, 4, "March");
             //Set chart data - Row2
             chart.ChartData.SetValue(2, 1, "2010");
             chart.ChartData.SetValue(2, 2, "60");
             chart.ChartData.SetValue(2, 3, "70");
             chart.ChartData.SetValue(2, 4, "80");
             //Set chart data - Row3
             chart.ChartData.SetValue(3, 1, "2011");
             chart.ChartData.SetValue(3, 2, "80");
             chart.ChartData.SetValue(3, 3, "70");
             chart.ChartData.SetValue(3, 4, "60");
             //Set chart data - Row4
             chart.ChartData.SetValue(4, 1, "2012");
             chart.ChartData.SetValue(4, 2, "60");
             chart.ChartData.SetValue(4, 3, "70");
             chart.ChartData.SetValue(4, 4, "80");
             //Create a new chart series with the name
             IOfficeChartSerie serieJan = chart.Series.Add("Jan");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieJan.Values = chart.ChartData[2, 2, 4, 2];
             //Create a new chart series with the name
             IOfficeChartSerie serieFeb = chart.Series.Add("Feb");
             //Set the data range of chart serie – start row, start column, end row, end column
             serieFeb.Values = chart.ChartData[2, 3, 4, 3];
             //Create a new chart series with the name
             IOfficeChartSerie serieMarch = chart.Series.Add("March");
             //Set the data range of chart series – start row, start column, end row, end column
             serieMarch.Values = chart.ChartData[2, 4, 4, 4];
             //Set the data range of the category axis
             chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData[2, 1, 4, 1];
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation instance
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add chart to the slide with position and size
            Dim chart As IPresentationChart = slide.Charts.AddChart(100, 10, 700, 500)
            'Specify the chart title
            chart.ChartTitle = "Sales Analysis"
            'Specify the chart type
            chart.ChartType = OfficeChartType.Column_Clustered
            'Set chart data - Row1
            chart.ChartData.SetValue(1, 2, "Jan")
            chart.ChartData.SetValue(1, 3, "Feb")
            chart.ChartData.SetValue(1, 4, "March")
            'Set chart data - Row2
            chart.ChartData.SetValue(2, 1, "2010")
            chart.ChartData.SetValue(2, 2, "60")
            chart.ChartData.SetValue(2, 3, "70")
            chart.ChartData.SetValue(2, 4, "80")
            'Set chart data - Row3
            chart.ChartData.SetValue(3, 1, "2011")
            chart.ChartData.SetValue(3, 2, "80")
            chart.ChartData.SetValue(3, 3, "70")
            chart.ChartData.SetValue(3, 4, "60")
            'Set chart data - Row4
            chart.ChartData.SetValue(4, 1, "2012")
            chart.ChartData.SetValue(4, 2, "60")
            chart.ChartData.SetValue(4, 3, "70")
            chart.ChartData.SetValue(4, 4, "80")
            'Create a new chart series with the name
            Dim serieJan As IOfficeChartSerie = chart.Series.Add("Jan")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieJan.Values = chart.ChartData(2, 2, 4, 2)
            'Create a new chart series with the name
            Dim serieFeb As IOfficeChartSerie = chart.Series.Add("Feb")
            'Set the data range of chart serie – start row, start column, end row, end column
            serieFeb.Values = chart.ChartData(2, 3, 4, 3)
            'Create a new chart series with the name
            Dim serieMarch As IOfficeChartSerie = chart.Series.Add("March")
            'Set the data range of chart series – start row, start column, end row, end column
            serieMarch.Values = chart.ChartData(2, 4, 4, 4)
            'Set the data range of the category axis
            chart.PrimaryCategoryAxis.CategoryLabels = chart.ChartData(2, 1, 4, 1)
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.Charts.PresentationChart._useExcelDataRange">
            <summary>
            Determines whether to use the excel data range for the chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Charts.PresentationChart._chartDataRangeSet">
            <summary>
            Determines whether the chart data range is set or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.SaveAsImage(System.IO.Stream)">
            <summary>
            Converts the chart to image and saves the image to the specified stream.
            </summary>
            <param name="imageAsStream">The stream to save the image.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.SetChartData(System.Object[][])">
            <summary>
            Sets the chart data with the specified two dimensional data.
            </summary>
            <param name="data">Represents the two dimensional chart data</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.SetDataRange(System.Int32,System.String)">
            <summary>
            Set data range for chart from the sheet.
            </summary>
            <param name="sheetNumber">Worksheet number in the excel document that contains data for a chart.</param>
            <param name="dataRange">Data range in the worksheet from which the chart to be created.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.SetDataRange(System.Object[][],System.Int32,System.Int32)">
            <summary>
            Sets the chart data with the specified two dimensional data,row and column index.
            </summary>
            <param name="data">Represents the two dimensional chart data</param>
            <param name="rowIndex">Row of the first cell where array should be imported.</param>
            <param name="columnIndex">Column of the first cell where array should be imported.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.SetDataRange(System.Collections.IEnumerable,System.Int32,System.Int32)">
            <summary>
            Sets the chart data.
            </summary>
            <param name="enumerable">IEnumerable object with desired data</param>
            <param name="rowIndex">Row of the first cell where array should be imported.</param>
            <param name="columnIndex">Column of the first cell where array should be imported.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.Refresh">
            <summary>
            Sets the Worksheet data into the current chart.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Charts.PresentationChart.GetChartImpl">
            <summary>
            Returns the current chart object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartType">
            <summary>
            Type of the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.DataRange">
            <summary>
            DataRange for the chart series.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.IsSeriesInRows">
            <summary>
            True if series are in rows in DataRange;
            False otherwise.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartTitle">
            <summary>
            Title of the chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartTitleArea">
            <summary>
            Returns object that describes chart title area. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PageSetup">
            <summary>
            Page setup for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.XPos">
            <summary>
            X coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.YPos">
            <summary>
            Y coordinate of the upper-left corner
            of the chart in points (1/72 inch).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Series">
            <summary>
            Collection of the all series of this chart. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PrimaryCategoryAxis">
            <summary>
            Primary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PrimaryValueAxis">
            <summary>
            Primary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PrimarySerieAxis">
            <summary>
            Primary series axis. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.SecondaryCategoryAxis">
            <summary>
            Secondary category axis. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.SecondaryValueAxis">
            <summary>
            Secondary value axis. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartArea">
            <summary>
            Returns an object that represents the complete chart area for the chart. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PlotArea">
            <summary>
            Returns plot area frame format. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Walls">
            <summary>
            Represents chart walls. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.SideWall">
            <summary>
            Represents chart BackWall. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.BackWall">
            <summary>
            Represents chart BackWall. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Floor">
            <summary>
            Represents chart floor. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.DataTable">
            <summary>
            Represents charts dataTable object.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.HasDataTable">
            <summary>
            True if the chart has a data table.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Legend">
            <summary>
            Represents chart legend.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.HasLegend">
            <summary>
            True if the chart has a legend object.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Rotation">
            <summary>
            Returns or sets the rotation of the 3-D chart view
            (the rotation of the plot area around the z-axis, in degrees).(0 to 360 degrees).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Elevation">
            <summary>
            Returns or sets the elevation of the 3-D chart view, in degrees (–90 to +90 degrees).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Perspective">
            <summary>
            Returns or sets the perspective for the 3-D chart view (0 to 100).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.HeightPercent">
             <summary>
            Returns or sets the height of a 3-D chart as a percentage of the chart width
             (between 5 and 500 percent).
             </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.DepthPercent">
            <summary>
            Returns or sets the depth of a 3-D chart as a percentage of the chart width
            (between 20 and 2000 percent).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.GapDepth">
            <summary>
            Returns or sets the distance between the data series in a 3-D chart, as a percentage of the marker width.( 0 - 500 )
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.RightAngleAxes">
            <summary>
            True if the chart axes are at right angles, independent of chart rotation or elevation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.AutoScaling">
            <summary>
            True if Microsoft Excel scales a 3-D chart so that it's closer in size to the equivalent 2-D chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.WallsAndGridlines2D">
            <summary>
            True if gridlines are drawn two-dimensionally on a 3-D chart.This is only for Binary file format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.HasPlotArea">
            <summary>
            Indicates whether chart has plot area.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.DisplayBlanksAs">
            <summary>
            Represents the way that blank cells are plotted on a chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PlotVisibleOnly">
            <summary>
            True if only visible cells are plotted. False if both visible and hidden cells are plotted.This is only for Binary file format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.SizeWithWindow">
            <summary>
            True if Microsoft Excel resizes the chart to match the size of the chart sheet window.
            False if the chart size isn't attached to the window size. Applies only to chart sheets.
            This is only for Binary file format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.PivotChartType">
            <summary>
            Gets or sets the type of the pivot chart.
            </summary>
            <value>The type of the pivot chart.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ShowAllFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show all field buttons].
            </summary>
            <value>
            	<c>true</c> if [show all field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ShowValueFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show value field buttons].
            </summary>
            <value>
            	<c>true</c> if [show value field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ShowAxisFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show axis field buttons].
            </summary>
            <value>
            	<c>true</c> if [show axis field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ShowLegendFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show legend field buttons].
            </summary>
            <value>
            	<c>true</c> if [show legend field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ShowReportFilterFieldButtons">
            <summary>
            Gets or sets a value indicating whether [show report filter field buttons].
            </summary>
            <value>
            	<c>true</c> if [show report filter field buttons]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.Categories">
            <summary>
            Collection of the all categories of this chart. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.SeriesNameLevel">
            <summary>
            Represents the series name filter option
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.CategoryLabelLevel">
            <summary>
            Represents the category name filter option
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartData">
            <summary>
            Represents chart data. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.UseExcelDataRange">
            <summary>
            Returns or sets whether to use the excel data range for chart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Charts.PresentationChart.ChartDataRangeSet">
            <summary>
            Determines whether Chart data range is set or not.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BuiltInDocumentProperties">
            <summary>
            Represents the document properties in a MS Word document.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IBuiltInDocumentProperties">
            <summary>
            Represents the built-in document properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the Title.
            builtInDocumentProperties.Title = "Presentation Title";
            //Save the presentation.
            presentation.Save("Title.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the Title
            builtInDocumentProperties.Title = "Presentation Title"
            'Save the presentation.
            presentation__1.Save("Title.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Subject">
            <summary>
            Gets or sets the subject.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the Subject
            builtInDocumentProperties.Subject = "Subject";
            //Save the presentation.
            presentation.Save("Subject.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the Subject
            builtInDocumentProperties.Subject = "Subject"
            'Save the presentation.
            presentation__1.Save("Subject.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Author">
            <summary>
            Gets or sets the author.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the Author
            builtInDocumentProperties.Author = "Author";
            //Save the presentation.
            presentation.Save("Author.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the Author
            builtInDocumentProperties.Author = "Author"
            'Save the presentation.
            presentation__1.Save("Author.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Keywords">
            <summary>
            Gets or sets the keywords.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the keywords.
            builtInDocumentProperties.Keywords = "Keywords";
            //Save the presentation.
            presentation.Save("Keywords.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the keywords.
            builtInDocumentProperties.Keywords = "Keywords"
            'Save the presentation.
            presentation__1.Save("Keywords.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Comments">
            <summary>
            Gets or sets the comments.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the comments.
            builtInDocumentProperties.Comments = "Comments";
            //Save the presentation.
            presentation.Save("Comments.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the comments.
            builtInDocumentProperties.Comments = "Comments"
            'Save the presentation.
            presentation__1.Save("Comments.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the template.
            builtInDocumentProperties.Template = "Presentation Template";
            //Save the presentation.
            presentation.Save("Template.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the template.
            builtInDocumentProperties.Template = "Presentation Template"
            'Save the presentation.
            presentation__1.Save("Template.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.LastAuthor">
            <summary>
            Gets or sets the last author.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the last author.
            builtInDocumentProperties.LastAuthor = "Last Author";
            //Save the presentation.
            presentation.Save("LastAuthor.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the last author.
            builtInDocumentProperties.LastAuthor = "Last Author"
            'Save the presentation.
            presentation__1.Save("LastAuthor.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.RevisionNumber">
            <summary>
            Gets or sets the revision number.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the revision number.
            builtInDocumentProperties.RevisionNumber = "200";
            //Save the presentation.
            presentation.Save("RevisionNumber.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the revision number.
            builtInDocumentProperties.RevisionNumber = "200"
            'Save the presentation.
            presentation__1.Save("RevisionNumber.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.EditTime">
            <summary>
            Gets or sets the edit time.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the edit time.
            builtInDocumentProperties.EditTime = TimeSpan.FromDays(22);
            //Save the presentation.
            presentation.Save("EditTime.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the edit time.
            builtInDocumentProperties.EditTime = TimeSpan.FromDays(22)
            'Save the presentation.
            presentation__1.Save("EditTime.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.LastPrinted">
            <summary>
            Gets or sets the last printed.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the last printed.
            builtInDocumentProperties.LastPrinted = DateTime.Now;
            //Save the presentation.
            presentation.Save("LastPrinted.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the last printed.
            builtInDocumentProperties.LastPrinted = DateTime.Now
            'Save the presentation.
            presentation__1.Save("LastPrinted.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.CreationDate">
            <summary>
            Gets or sets the creation date.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set  the creation date.
            builtInDocumentProperties.CreationDate = DateTime.Today;
            //Save the presentation.
            presentation.Save("CreationDate.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set  the creation date.
            builtInDocumentProperties.CreationDate = DateTime.Today
            'Save the presentation.
            presentation__1.Save("CreationDate.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.LastSaveDate">
            <summary>
            Gets or sets the last save date.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the last save date.
            builtInDocumentProperties.LastSaveDate = DateTime.Today;
            //Save the presentation.
            presentation.Save("LastSaveDate.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the last save date.
            builtInDocumentProperties.LastSaveDate = DateTime.Today
            'Save the presentation.
            presentation__1.Save("LastSaveDate.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.PageCount">
            <summary>
            Gets or sets the page count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the page count.
            builtInDocumentProperties.PageCount = 300;
            //Save the presentation.
            presentation.Save("PageCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the page count.
            builtInDocumentProperties.PageCount = 300
            'Save the presentation.
            presentation__1.Save("PageCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.WordCount">
            <summary>
            Gets or sets the word count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the word count.
            builtInDocumentProperties.WordCount = 551;
            //Save the presentation.
            presentation.Save("WordCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the word count.
            builtInDocumentProperties.WordCount = 551
            'Save the presentation.
            presentation__1.Save("WordCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.CharCount">
            <summary>
            Gets or sets the character count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the character count.
            builtInDocumentProperties.CharCount = 10;
            //Save the presentation.
            presentation.Save("CharCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set  the character count.
            builtInDocumentProperties.CharCount = 10
            'Save the presentation.
            presentation__1.Save("CharCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Category">
            <summary>
            Gets or sets the category.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the category.
            builtInDocumentProperties.Category = "Category";
            //Save the presentation.
            presentation.Save("Category.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the category.
            builtInDocumentProperties.Category = "Category"
            'Save the presentation.
            presentation__1.Save("Category.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.PresentationTarget">
            <summary>
            Gets or sets the target format (35mm, printer, video, and so on).
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the PresentationTarget
            builtInDocumentProperties.PresentationTarget = "Presentation Target";
            //Save the presentation.
            presentation.Save("Output.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the PresentationTarget
            builtInDocumentProperties.PresentationTarget = "Presentation Target"
            'Save the presentation.
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.ByteCount">
            <summary>
            Gets or sets the byte count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the byte count.
            builtInDocumentProperties.ByteCount = 20;
            //Save the presentation.
            presentation.Save("ByteCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the byte count.
            builtInDocumentProperties.ByteCount = 20
            'Save the presentation.
            presentation__1.Save("ByteCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.LineCount">
            <summary>
            Gets or sets the line count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the line count.
            builtInDocumentProperties.LineCount = 3;
            //Save the presentation.
            presentation.Save("LineCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the line count.
            builtInDocumentProperties.LineCount = 3
            'Save the presentation.
            presentation__1.Save("LineCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.ParagraphCount">
            <summary>
            Gets or sets the paragraph count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the paragraph count.
            builtInDocumentProperties.ParagraphCount = 84;
            //Save the presentation.
            presentation.Save("ParagraphCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the paragraph count.
            builtInDocumentProperties.ParagraphCount = 84
            'Save the presentation.
            presentation__1.Save("ParagraphCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.SlideCount">
            <summary>
            Gets or sets the SlideCount.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the SlideCount.
            builtInDocumentProperties.SlideCount = 10;
            //Save the presentation.
            presentation.Save("SlideCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the SlideCount.
            builtInDocumentProperties.SlideCount = 10
            'Save the presentation.
            presentation__1.Save("SlideCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.NoteCount">
            <summary>
            Gets or sets the note count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the note count.
            builtInDocumentProperties.NoteCount = 100;
            //Save the presentation.
            presentation.Save("NoteCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the note count.
            builtInDocumentProperties.NoteCount = 100
            'Save the presentation.
            presentation__1.Save("NoteCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.HiddenCount">
            <summary>
            Gets or sets the hidden count.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the hidden count.
            builtInDocumentProperties.HiddenCount = 40;
            //Save the presentation.
            presentation.Save("NoteCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the hidden count.
            builtInDocumentProperties.HiddenCount = 40
            'Save the presentation.
            presentation__1.Save("NoteCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.MultimediaClipCount">
            <summary>
            Gets or sets the MultimediaClipCount.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the MultimediaClipCount.
            builtInDocumentProperties.MultimediaClipCount = 0;
            //Save the presentation.
            presentation.Save("MultimediaClipCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the MultimediaClipCount.
            builtInDocumentProperties.MultimediaClipCount = 0
            'Save the presentation.
            presentation__1.Save("MultimediaClipCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Manager">
            <summary>
            Gets or sets the manager name.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the manager name.
            builtInDocumentProperties.Manager = "Manager";
            //Save the presentation.
            presentation.Save("MultimediaClipCount.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the manager name.
            builtInDocumentProperties.Manager = "Manager"
            'Save the presentation.
            presentation__1.Save("MultimediaClipCount.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Company">
            <summary>
            Gets or sets the company name.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the company name.
            builtInDocumentProperties.Company = "Company";
            //Save the presentation.
            presentation.Save("Company.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the company name.
            builtInDocumentProperties.Company = "Company"
            'Save the presentation.
            presentation__1.Save("Company.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.LinksDirty">
            <summary>
            Indicates whether the custom links are
            hampered by excessive noise, for all applications.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the LinksDirty
            builtInDocumentProperties.LinksDirty = true;
            //Save the presentation.
            presentation.Save("Company.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the LinksDirty
            builtInDocumentProperties.LinksDirty = true
            'Save the presentation.
            presentation__1.Save("Company.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.ApplicationName">
            <summary>
            Gets or sets the application name.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the application name.
            builtInDocumentProperties.ApplicationName = "Application Name";
            //Save the presentation.
            presentation.Save("ApplicationName.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the application name.
            builtInDocumentProperties.ApplicationName = "Application Name"
            'Save the presentation.
            presentation__1.Save("ApplicationName.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.ContentStatus">
            <summary>
            Gets or sets the content status.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the content status.
            builtInDocumentProperties.ContentStatus = "Content Status";
            //Save the presentation.
            presentation.Save("ContentStatus.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the content status.
            builtInDocumentProperties.ContentStatus = "Content Status"
            'Save the presentation.
            presentation__1.Save("ContentStatus.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set the language.
            builtInDocumentProperties.Language = "English";
            //Save the presentation.
            presentation.Save("Language.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the language.
            builtInDocumentProperties.Language = "English"
            'Save the presentation.
            presentation__1.Save("Language.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IBuiltInDocumentProperties.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <example>
            <code lang="C#">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the built in document properties from the presentation.
            IBuiltInDocumentProperties builtInDocumentProperties = presentation.BuiltInDocumentProperties;
            //Set  the version.
            builtInDocumentProperties.Version = "1";
            //Save the presentation.
            presentation.Save("Version.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built in document properties from the presentation.
            Dim builtInDocumentProperties As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the version.
            builtInDocumentProperties.Version = "1"
            'Save the presentation.
            presentation__1.Save("Version.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInDocumentProperties.GuidSummary">
            <summary>
            Guid for parsing/serialization summary properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInDocumentProperties.GuidDocument">
            <summary>
            Guid for parsing/serialization document properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInDocumentProperties._documentHash">
            <summary>
            Dictionary with document properties, key - property name/id, value - property object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInDocumentProperties._summaryHash">
            <summary>
            Dictionary with summary document properties, key - property id, value - property object.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.BuiltInDocumentProperties.#ctor(Syncfusion.Presentation.Presentation)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.BuiltInDocumentProperties.Close">
            <summary>
            Returns dictionary where property must be placed.
            </summary>
            <param name="propertyId">Property id.</param>
            <returns>Dictionary where property must be placed.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Title">
            <summary>
            Title document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Subject">
            <summary>
            Subject document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Author">
            <summary>
            Author document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Keywords">
            <summary>
            Keywords document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Comments">
            <summary>
            Comments document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Template">
            <summary>
            Template document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.LastAuthor">
            <summary>
            LastAuthor document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.RevisionNumber">
            <summary>
            Revision number document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.EditTime">
            <summary>
            EditTime document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.LastPrinted">
            <summary>
            LastPrinted document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.CreationDate">
            <summary>
            CreationDate document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.LastSaveDate">
            <summary>
            LastSaveDate document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.PageCount">
            <summary>
            PageCount document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.WordCount">
            <summary>
            WordCount document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.CharCount">
            <summary>
            CharCount document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.HasHeadingPair">
            <summary>
            Indicates whether the file has Headpair tag.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Category">
            <summary>
            Category.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.PresentationTarget">
            <summary>
            Target format for presentation (35mm, printer, video, and so on).
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.ByteCount">
            <summary>
            ByteCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.LineCount">
            <summary>
            LineCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.ParagraphCount">
            <summary>
            ParCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.SlideCount">
            <summary>
            SlideCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.NoteCount">
            <summary>
            NoteCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.HiddenCount">
            <summary>
            HiddenCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.MultimediaClipCount">
            <summary>
            MmclipCount.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.ScaleCrop">
            <summary>
            Set to True when scaling of the thumbnail is desired. If not set, cropping is desired.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Manager">
            <summary>
            Manager.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.Company">
            <summary>
            Company.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.BuiltInDocumentProperties.LinksDirty">
            <summary>
            Boolean value to indicate whether the custom links are
            hampered by excessive noise, for all applications.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ClipboardData">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ClipboardData.Format">
            <summary>
            Clipboard format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ClipboardData.Data">
            <summary>
            Clipboard data.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ClipboardData.Clone">
            <summary>
            Createas copy of the current object.
            </summary>
            <returns>A copy of the current object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ClipboardData.Serialize(System.IO.Stream)">
            <summary>
            Saves clipboard data into stream.
            </summary>
            <param name="stream">Stream to write data into.</param>
            <returns>Size of the written data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ClipboardData.Parse(System.IO.Stream)">
            <summary>
            Extracts data from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="T:Syncfusion.Presentation.CloneUtils">
            <summary>
            Contains utility methods for object cloning.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneIntArray(System.Int32[])">
            <summary>
            Clones int array.
            </summary>
            <param name="array">Array to clone</param>
            <returns>Returns cloned array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneUshortArray(System.UInt16[])">
            <summary>
            Clones ushort array.
            </summary>
            <param name="array">Array to clone.</param>
            <returns>Returns cloned array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneStringArray(System.String[])">
            <summary>
            Clones string array.
            </summary>
            <param name="array">Array to clone.</param>
            <returns>Returns cloned array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneArray(System.Object[])">
            <summary>
            Clones object array.
            </summary>
            <param name="array">Array to clone.</param>
            <returns>Returns cloned array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneCloneable(System.ICloneable)">
            <summary>
            Clones object that implements ICloneable interface.
            </summary>
            <param name="toClone">Object to clone.</param>
            <returns>A clone of the object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneByteArray(System.Byte[])">
            <summary>
            Clones byte array.
            </summary>
            <param name="arr">Array to clone.</param>
            <returns>Return cloned array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneHash``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            Clone Dictionary.
            </summary>
            <param name="hash">Dictionary to clone</param>
            <returns>Returns a copy of the Dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneHash(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Clone Dictionary.
            </summary>
            <param name="hash">Dictionary to clone</param>
            <returns>Returns a copy of the Dictionary.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CloneUtils.CloneStream(System.IO.Stream)">
            <summary>
            Creates copy of the stream.
            </summary>
            <param name="stream">Stream to copy.</param>
            <returns>Created stream.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.CustomDocumentProperties">
            <summary>
            Summary description for CustomDocumentProperties.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ICustomDocumentProperties">
            <summary>
            Represents the custom document properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ICustomDocumentProperties.Remove(System.String)">
            <summary>
            Removes the property with specified name, from the document property collection.
            </summary>
            <param name="strName">The name of the property to remove.</param>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("PropertyA");
            //Check if the item exist in document properties and remove
            if (customDocumentProperties.Contains("PropertyA"))
            customDocumentProperties.Remove("PropertyA");
            //Save the presentation
            presentation.Save("Output.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("PropertyA")
            'Check if the item exist in document properties and remove
            If customDocumentProperties.Contains("PropertyA") Then
            customDocumentProperties.Remove("PropertyA")
            End If
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ICustomDocumentProperties.Contains(System.String)">
             <summary>
             Determines whether the property with specified name is in the document property collection.
             </summary>
             <param name="strName">The name of the document property to locate.</param>
             <returns>true if property is present in the collection; otherwise, false.</returns>
            <example>
            <code lang="CS">
             //Create a new presentation
             IPresentation presentation = Presentation.Create();
             //Retrieve the custom document properties.
             ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
             //Add a new custom document property
             customDocumentProperties.Add("PropertyA");
             //Check if the item exist in document properties
             if (customDocumentProperties.Contains("PropertyA"))
             //Sets a four byte signed integer value.
             customDocumentProperties["PropertyA"].Int32 = 256;
             //Save the presentation
             presentation.Save("Clear.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create a new presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Retrieve the custom document properties.
             Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
             'Add a new custom document property
             customDocumentProperties.Add("PropertyA")
             'Check if the item exist in document properties
             If customDocumentProperties.Contains("PropertyA") Then
            	'Sets a four byte signed integer value.
            	customDocumentProperties("PropertyA").Int32 = 256
             End If
             'Save the presentation
             presentation__1.Save("Clear.pptx")
             'Close the presentation
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.ICustomDocumentProperties.Add(System.String)">
            <summary>
            Adds a document property to the presentation with the specified name.
            </summary>
            <param name="strName">The name of the document property.</param>
            <returns>The <see cref="T:Syncfusion.Presentation.IDocumentProperty"/> instance</returns>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Clear the properties
            customDocumentProperties.Clear();
            //Save the presentation
            presentation.Save("Output.pptx");
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Clear the properties
            customDocumentProperties.Clear()
            'Save the presentation
            presentation__1.Save("Output.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ICustomDocumentProperties.Clear">
            <summary>
            Removes all the document properties from the presentation.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Add a new custom document property
            customDocumentProperties.Add("Property2");
            //Set a date time.
            customDocumentProperties["Property2"].DateTime = DateTime.Now;
            //Clear the properties
            customDocumentProperties.Clear();
            //Save the presentation
            presentation.Save("Clear.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Add a new custom document property
            customDocumentProperties.Add("Property2")
            'Set a date time.
            customDocumentProperties("Property2").DateTime = DateTime.Now
            'Clear the properties
            customDocumentProperties.Clear()
            'Save the presentation
            presentation__1.Save("Clear.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICustomDocumentProperties.Item(System.String)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.IDocumentProperty"/> instance with the specified name, from the document property collection. Read-only.
            </summary>
            <param name="strName">The name of the document property to locate.</param>
            <returns>Returns the element at the particular name.</returns>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Add a new custom document property
            customDocumentProperties.Add("Property2");
            //Set a date time.
            customDocumentProperties["Property2"].DateTime = DateTime.Now;
            //Get the specific property, read only
            IDocumentProperty documentProp = customDocumentProperties["Property1"];
            //Save the presentation
            presentation.Save("CustomProperty.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Add a new custom document property
            customDocumentProperties.Add("Property2")
            'Set a date time.
            customDocumentProperties("Property2").DateTime = DateTime.Now
            'Get the specific property, read only
            Dim documentProp As IDocumentProperty = customDocumentProperties("Property1")
            'Save the presentation
            presentation__1.Save("CustomProperty.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICustomDocumentProperties.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.IDocumentProperty"/> instance at the specified index of document property collection. Read-only.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>Returns the element at the particular index.</returns>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Add a new custom document property
            customDocumentProperties.Add("Property2");
            //Set a date time.
            customDocumentProperties["Property2"].DateTime = DateTime.Now;
            //Get the property at specific index, read only
            IDocumentProperty documentProperty = customDocumentProperties[0];
            //Save the presentation
            presentation.Save("CustomProperty.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Add a new custom document property
            customDocumentProperties.Add("Property2")
            'Set a date time.
            customDocumentProperties("Property2").DateTime = DateTime.Now
            'Get the property at specific index, read only
            Dim documentProperty As IDocumentProperty = customDocumentProperties(0)
            'Save the presentation
            presentation__1.Save("CustomProperty.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICustomDocumentProperties.Count">
            <summary>
            Gets the number of document properties in the presentation. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Add a new custom document property
            customDocumentProperties.Add("Property2");
            //Set a date time.
            customDocumentProperties["Property2"].DateTime = DateTime.Now;
            //Add a new custom document property
            customDocumentProperties.Add("Property3");
            //Sets a four byte signed integer value.
            customDocumentProperties["Property3"].Int32 = 256;
            //Get the count of custom document properties, read only
            int count = customDocumentProperties.Count;
            //Save the presentation
            presentation.Save("Count.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Add a new custom document property
            customDocumentProperties.Add("Property2")
            'Set a date time.
            customDocumentProperties("Property2").DateTime = DateTime.Now
            'Add a new custom document property
            customDocumentProperties.Add("Property3")
            'Sets a four byte signed integer value.
            customDocumentProperties("Property3").Int32 = 256
            'Get the count of custom document properties, read only
            Dim count As Integer = customDocumentProperties.Count
            'Save the presentation
            presentation__1.Save("Count.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.CustomDocumentProperties.CustomGuidString">
            <summary>
            Custom guid string.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.CustomDocumentProperties.GuidCustom">
            <summary>
            Guid used for parsing/serialization of custom properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.CustomDocumentProperties._propertiesHash">
            <summary>
            Dictionary with document properties, key - property name/id, value - property value.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.#ctor(Syncfusion.Presentation.Presentation)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.GetProperty(System.String)">
            <summary>
            Returns custom property by name.
            </summary>
            <param name="strName">Custom property.</param>
            <returns>Custom property.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.GetDocumentPropertyList">
            <summary>
            Returns the document property list of the custom document properties.
            </summary>
            <returns>Document property list.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.Remove(System.String)">
            <summary>
            Removes specified object from the collection.
            </summary>
            <param name="strName">Property name.</param>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.Add(System.String)">
            <summary>
            Adds element to the collection.
            </summary>
            <param name="strName">Property name to add.</param>
            <returns>Newly created property.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.CustomDocumentProperties.Contains(System.String)">
            <summary>
            Checks whether collection contains property with specified name.
            </summary>
            <param name="strName">Name to check.</param>
            <returns>True if property is contained by collection; false otherwise.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.CustomDocumentProperties.Item(System.String)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.CustomDocumentProperties.Item(System.Int32)">
            <summary>
            Returns single entry from the collection. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.DocProp">
            <summary>
            This class contains constants required for document properties parsing and serialization in Excel 2007 format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CorePropertiesTagName">
            <summary>
            Core properties enable users to get and set well-known and common sets of property metadata within packages.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CategoryTagName">
            <summary>
            Represents a categorization of the content of this package.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CreatedTagName">
            <summary>
            Represents the date of creation of the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CreatorTagName">
            <summary>
            Represents an entity primarily responsible for making the content of the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.DescriptionTagName">
            <summary>
            Represents an explanation of the content of the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.KeywordsTagName">
            <summary>
            Represents a delimited set of keywords to support searching and indexing.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.LastModifiedByTagName">
            <summary>
            Represents the user who performed the last modification.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.LastPrintedTagName">
            <summary>
            Represents the date and time of the last printing.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.ModifiedTagName">
            <summary>
            Represents the date on which the resource was changed.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.SubjectTagName">
            <summary>
            Represents the topic of the content of the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TitleTagName">
            <summary>
            Represents the name given to the resource.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.XsiTypeAttributeName">
            <summary>
            Represents Xsi attribute.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.XsiTypeAttributeValue">
            <summary>
            Represents Xsi attribute value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.DateTimeFormatStructure">
            <summary>
            Represents date time format structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.ApplicationSpecificFilePropertiesTagName">
            <summary>
            This element specifies the application properties of a document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.ApplicationNameTagName">
            <summary>
            This element specifies the name of the application that created this document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TotalNumberOfCharacters">
            <summary>
            This element specifies the total number of characters in a document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NameOfCompanyTagName">
            <summary>
            This element specifies the name of a company associated with the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.HeadingPairsTagName">
            <summary>
            MS Excel uses this Tag to represents the xml parts. In our XlsIO,
            this tag is used to find the document is generated by MS Excel.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.EssentialPresentation">
            <summary>
            Tag to represents the file is generated by Essential Presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NumberOfLinesTagName">
            <summary>
            This element specifies the total number of lines in a document when last saved by a conforming producer if applicable.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NameOfManagerTagName">
            <summary>
            This element specifies the name of a supervisor associated with the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TotalNumberOfMultimediaClipsTagName">
            <summary>
            This element specifies the total number of sound or video clips that are present in the document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NumberOfSlidesContainingNotesTagName">
            <summary>
            This element specifies the number of slides in a presentation containing notes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TotalNumberOfPagesTagName">
            <summary>
            This element specifies the total number of pages of a document if applicable.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TotalNumberOfParagraphsTagName">
            <summary>
            This element specifies the total number of paragraphs found in a document if applicable.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.IntendedFormatOfPresentationTagName">
            <summary>
            This element specifies the intended format for a presentation document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.SlidesMetadataElementTagName">
            <summary>
            This element specifies the total number of slides in a presentation document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NameOfDocumentTemplateTagName">
            <summary>
            This element specifies the name of an external document template containing format and style information
            used to create the current document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.TotalEditTimeMetadataElementTagName">
            <summary>
            Total time that a document has been edited. The default time unit is minutes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.WordCountTagName">
            <summary>
            This element specifies the total number of words contained in a document when last saved.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.RelativeHyperlinkBaseTagName">
            <summary>
            This element specifies the base string used for evaluating relative hyperlinks in this document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.RelativeHyperlinkExcel97Name">
            <summary>
            Represents default Excel97-03 hyperlink base name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CustomFilePropertiesTagName">
            <summary>
            Parent element for the custom file properties part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.CustomFilePropertyTagName">
            <summary>
            This element specifies a single custom file property.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.FormatIDAttributeName">
            <summary>
            Uniquely relates a custom property with an OLE property.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.PropertyIDAttributeName">
            <summary>
            Uniquely relates a custom property with an OLE property.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.NameAttributeName">
            <summary>
            Specifies the name of this custom file property.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.BooleanVarianYype">
            <summary>
            This element specifies a Boolean variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.LPWSTRVariantType">
            <summary>
            This element specifies a wide string variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.LPSTRVariantType">
            <summary>
            This element specifies a string variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.DateAndTimeVariantType">
            <summary>
            This element specifies a date variant type of type date-time as defined in RFC 3339.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.FourByteSignedIntegerVariantType">
            <summary>
            This element specifies a 4-byte signed integer variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.EightByteRealNumberVariantType">
            <summary>
            This element specifies a 8-byte real number variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.IntegerVariantType">
            <summary>
            This element specifies an integer variant type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocProp.FileTimeVariantType">
            <summary>
            This element specifies a file-time variant type of type date-time.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.DocumentPropertyImpl">
            <summary>
            Summary description for DocumentPropertyImpl.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IDocumentProperty">
            <summary>
            Represents the custom or built-in document property.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.IsBuiltIn">
            <summary>
            Indicates whether the property is built-in or not. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set a Boolean value.
            documentProperty.Boolean = true;
            //Get boolean value to check if built-in property or not, it is read only
            bool value = documentProperty.IsBuiltIn;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set a Boolean value.
            documentProperty.[Boolean] = True
            'Get boolean value to check if built-in property or not, it is read only
            Dim value As Boolean = documentProperty.IsBuiltIn
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.BuiltInProperty">
            <summary>
            Gets the property id for the built-in property. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Get the built-in property, it is read only
            BuiltInProperty builtinProp = documentProperty.BuiltInProperty;
            //Save the presentation
            presentation.Save("Sample.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Get the built-in property, it is read only
            Dim builtinProp As BuiltInProperty = documentProperty.BuiltInProperty
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Name">
            <summary>
            Gets the property name. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set a Boolean value.
            documentProperty.Boolean = true;
            //Get the name of document property
            string name = documentProperty.Name;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set a Boolean value.
            documentProperty.[Boolean] = True
            'Get the name of document property
            Dim name As String = documentProperty.Name
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the timespan value
            documentProperty.TimeSpan = TimeSpan.FromMinutes(20.30);    
            //Set the value of document property
            documentProperty.Value = 100;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set the timespan value
            documentProperty.TimeSpan = TimeSpan.FromMinutes(20.3)   
            //Set the value of document property
            documentProperty.Value = 100;
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Boolean">
            <summary>
            Gets or sets the boolean value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set a Boolean value.
            documentProperty.Boolean = true;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set a Boolean value.
            documentProperty.[Boolean] = True
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Integer">
            <summary>
            Gets or sets the integer value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the integer property
            documentProperty.Integer = 130;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set integer property
            documentProperty.[Integer] = 130
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Int32">
            <summary>
            Gets or sets the 4-bytes signed integer value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set value for Int32
            documentProperty.Int32 = 25;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set value for Int32
            documentProperty.Int32 = 25
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Double">
            <summary>
            Gets or sets the double value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set a double value.
            documentProperty.Double = 345.00;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set a double value.
            documentProperty.[Double] = 345.0
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.Text">
            <summary>
            Gets or sets the string value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the text
            documentProperty.Text = "Document Property";
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set the text
            documentProperty.Text = "Document Property"
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.DateTime">
             <summary>
             Gets or sets the DateTime value.
             </summary>
            <example>
            <code lang="CS">
             //Create a new presentation
             IPresentation presentation = Presentation.Create();
             //Retrieve the custom document properties.
             ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
             //Add a new document property.
             IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
             //Set a date time.
             documentProperty.DateTime = DateTime.Now;
             //Save the presentation
             presentation.Save("DateTime.pptx");           
             //Close the presentation.
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create a new presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Retrieve the custom document properties.
             Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
             'Add a new document property.
             Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
             'Set a date time.
             documentProperty.DateTime = DateTime.Now
             'Save the presentation
             presentation__1.Save("DateTime.pptx")
             'Close the presentation.
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.TimeSpan">
            <summary>
            Gets or sets the TimeSpan value.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the timespan value
            documentProperty.TimeSpan = TimeSpan.FromMinutes(20.30);       
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set the timespan value
            documentProperty.TimeSpan = TimeSpan.FromMinutes(20.3)      
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.LinkSource">
            <summary>
            Gets or sets the source of a linked custom document property.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the link source
            documentProperty.LinkSource = "www.google.com";
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set the link source
            documentProperty.LinkSource = "www.google.com"
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IDocumentProperty.LinkToContent">
            <summary>
            Gets or sets a boolean value indicates whether the property is linked to the content.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;
            //Add a new document property.
            IDocumentProperty documentProperty = customDocumentProperties.Add("PropertyA");
            //Set the link source
            documentProperty.LinkSource = "www.google.com";
            //Set the link to content
            documentProperty.LinkToContent = true;
            //Save the presentation
            presentation.Save("Output.pptx");           
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new document property.
            Dim documentProperty As IDocumentProperty = customDocumentProperties.Add("PropertyA")
            'Set the link source
            documentProperty.LinkSource = "www.google.com"
            'Set the link to content
            documentProperty.LinkToContent = True
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.DEF_START_ID2">
            <summary>
            Start index for Id2 PropVariant property.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.DEF_FILE_TIME_START_YEAR">
            <summary>
            Start year for FILETIME structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_propertyId">
            <summary>
            Property id.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_strName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_value">
            <summary>
            Property value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_type">
            <summary>
            Property type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_strLinkSource">
            <summary>
            The source of a linked custom document property.  String.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DocumentPropertyImpl.m_bLinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content
            of the container document. False if the value is static.  Boolean.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.#ctor(System.String,System.Object)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="strName">Property name.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.#ctor(Syncfusion.Presentation.BuiltInProperty,System.Object)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="propertyId">Property id.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.DetectStringType(System.String)">
            <summary>
            Detects type of the string.
            </summary>
            <param name="value">String value to check.</param>
            <returns>Detected string type.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.DetectPropertyType">
            <summary>
            Tries to detect and set property type.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.DocumentPropertyImpl.CloneValue">
            <summary>
            Creates copy of the internal value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.IsBuiltIn">
            <summary>
            Indicates whether property is built-in. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.BuiltInProperty">
            <summary>
            Returns / sets property id for built-in properties.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Name">
            <summary>
            Returns property name. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Value">
            <summary>
            Gets / sets property value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Boolean">
            <summary>
            Gets / sets boolean value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Integer">
            <summary>
            Gets / sets integer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Int32">
            <summary>
            Gets / sets 4-bytes signed integer value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Double">
            <summary>
            Gets / sets double value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Text">
            <summary>
            Gets / sets string value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.DateTime">
            <summary>
            Gets / sets DateTime value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.TimeSpan">
            <summary>
            Gets / sets TimeSpan value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.Blob">
            <summary>
            Gets / sets Blob value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.ClipboardData">
            <summary>
            Gets or sets clipboard data value.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.StringArray">
            <summary>
            Gets / sets array of strings.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.ObjectArray">
            <summary>
            Gets / sets array of objects. Supported object types are string and Int32.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.PropertyType">
            <summary>
            Gets / sets document property type.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.LinkSource">
            <summary>
            Returns or sets the source of a linked custom document property.  String.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.LinkToContent">
            <summary>
            True if the value of the custom document property is linked to the content of the container document. False if the value is static.  Boolean.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.DocumentPropertyImpl.InternalName">
            <summary>
            Internal name of the document property.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BuiltInProperty">
            <summary>
            Specifies the built-in document properties of the PowerPoint presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Title">
            <summary>
            Specifies the Title of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Subject">
            <summary>
            Specifies the Subject of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Author">
            <summary>
            Specifies the Author of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Keywords">
            <summary>
            Specifies the Keywords of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Comments">
            <summary>
            Specifies the Comments of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Template">
            <summary>
            Specifies the Template of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.LastAuthor">
            <summary>
            Specifies the Last Author of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.RevisionNumber">
            <summary>
            Specifies the Revision number of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.EditTime">
            <summary>
            Specifies the Edit Time of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.LastPrinted">
            <summary>
            Specifies the Last Printed property of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.CreationDate">
            <summary>
            Specifies the Creation Date of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.LastSaveDate">
            <summary>
            Specifies the Last Save Date of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.PageCount">
            <summary>
            Specifies the Page Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.WordCount">
            <summary>
            Specifies the Word Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.CharCount">
            <summary>
            Specifies the Character Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Thumbnail">
            <summary>
            Specifies the Thumbnail of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.ApplicationName">
            <summary>
            Specifies the Application Name of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Security">
            <summary>
            Specifies the Security of the presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Category">
            <summary>
            Specifies the Category of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.PresentationTarget">
            <summary>
            Specifies the Target format for presentation (35mm, printer, video, and so on) id.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.ByteCount">
            <summary>
            Specifies the Byte Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.LineCount">
            <summary>
            Specifies the Line Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.ParagraphCount">
            <summary>
            Specifies the Paragraph Count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.SlideCount">
            <summary>
            Specifies the slide count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.NoteCount">
            <summary>
            Specifies the note count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.HiddenCount">
            <summary>
            Specifies the hidden count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.MultimediaClipCount">
            <summary>
            Specifies the multimedia clip count of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.ScaleCrop">
            <summary>
            Specifies the ScaleCrop of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.HeadingPair">
            <summary>
            Specifies the heading pair of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.DocParts">
            <summary>
            Specifies the document parts of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Manager">
            <summary>
            Specifies the manager of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.Company">
            <summary>
            Specifies the company of presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInProperty.LinksDirty">
            <summary>
            Specifies the dirty links of presentation.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PropertyType">
            <summary>
            Enumeration with all supported property types.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Bool">
            <summary>
            Indicates a Boolean value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Int">
            <summary>
            Indicates an integer value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Int32">
            <summary>
            Indicates a 4-bytes signed integer value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Int16">
            <summary>
            Indicates a 2-bytes signed interger value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.UInt32">
            <summary>
            Indicates a 4-bytes unsigned interger value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.String">
            <summary>
            Indicates a wide string terminated by a null.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.AsciiString">
            <summary>
            Indicates a string terminated by a null.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.DateTime">
            <summary>
            Indicates a FILETIME value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Blob">
            <summary>
            Indicates length prefixed bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Vector">
            <summary>
            Indicates a simple, counted array.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Object">
            <summary>
            Indicates an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Double">
            <summary>
            Indicates a double value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Empty">
            <summary>
            Indicates an empty value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.Null">
            <summary>
            Indicates null value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.ClipboardData">
            <summary>
            Indicates clipboard data.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.AsciiStringArray">
            <summary>
            Indicates an array of strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.StringArray">
            <summary>
            Indicates an array of strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PropertyType.ObjectArray">
            <summary>
            Indicates an array of objects. Supported types are string and integer values.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Net.StreamHelper.IntSize">
            <summary>
            Size of the Int32 in bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Net.StreamHelper.ShortSize">
            <summary>
            Size of the Int162 in bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Net.StreamHelper.DoubleSize">
            <summary>
            Size of the Double in bytes.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.ReadInt16(System.IO.Stream,System.Byte[])">
            <summary>
            Reads Int16 value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="buffer">Temporary buffer to put extracted bytes into.</param>
            <returns>Extracted Int32 value.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.ReadInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Reads Int32 value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="buffer">Temporary buffer to put extracted bytes into.</param>
            <returns>Extracted Int32 value.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.ReadDouble(System.IO.Stream,System.Byte[])">
            <summary>
            Reads Double value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="buffer">Temporary buffer to put extracted bytes into.</param>
            <returns>Extracted Double value.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteInt16(System.IO.Stream,System.Int16)">
            <summary>
            Writes Int16 value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="value">Value to write.</param>
            <returns>Size of the written data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Writes Int32 value from the stream.
            </summary>
            <param name="stream">Stream to write data into.</param>
            <param name="value">Value to write.</param>
            <returns>Size of the written data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteDouble(System.IO.Stream,System.Double)">
            <summary>
            Reads Double value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="buffer">Temporary buffer to put extracted bytes into.</param>
            <returns>Extracted Double value.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.GetAsciiString(System.IO.Stream,System.Int32)">
            <summary>
            Gets ASCII string from the stream starting from the current position.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="roundedSize">Approximate string size.</param>
            <returns>Extracted string.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.GetUnicodeString(System.IO.Stream,System.Int32)">
            <summary>
            Extracts unicode string from the stream.
            </summary>
            <param name="stream"></param>
            <param name="roundedSize"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteAsciiString(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Gets ASCII string from the stream starting from the current position.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="roundedSize">Approximate string size.</param>
            <returns>Extracted string.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteUnicodeString(System.IO.Stream,System.String)">
            <summary>
            Writes unicode string into steram.
            </summary>
            <param name="stream">Stream to write data into.</param>
            <param name="value">Value to write.</param>
            <returns>Size of the written data in bytes.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.WriteString(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Writes string into stream using specified encoding.
            </summary>
            <param name="stream">Stream to write data into.</param>
            <param name="value">Value to write.</param>
            <param name="encoding">Encoding to use.</param>
            <returns>Size of the written data in bytes.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.AddPadding(System.IO.Stream,System.Int32@)">
            <summary>
            Adds padding if necessary.
            </summary>
            <param name="stream"></param>
            <param name="iWrittenSize"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Net.StreamHelper.RemoveLastZero(System.String)">
            <summary>
            Removes last zero character from the string if it is present.
            </summary>
            <param name="value">Value to check.</param>
            <returns>String after removal.</returns>
        </member>
        <member name="T:Syncfusion.CompoundFile.Net.VarEnum">
            <summary>
            Specifies the VarEnum.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_ARRAY">
            <summary>
            Specifies the VarEnum is vt_ array
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_BLOB">
            <summary>
            Specifies the VarEnum is vt_ BLOB
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_BLOB_OBJECT">
            <summary>
            Specifies the VarEnum is vt_ blo b_ object
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_BOOL">
            <summary>
            Specifies the VarEnum is vt_ bool
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_BSTR">
            <summary>
            Specifies the VarEnum is vt_ BSTR
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_BYREF">
            <summary>
            Specifies the VarEnum is vt_ byref
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_CARRAY">
            <summary>
            Specifies the VarEnum is vt_ carray
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_CF">
            <summary>
            Specifies the VarEnum is vt_ cf
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_CLSID">
            <summary>
            Specifies the VarEnum is vt_ CLSID
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_CY">
            <summary>
            Specifies the VarEnum is vt_ cy
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_DATE">
            <summary>
            Specifies the VarEnum is vt_ date
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_DECIMAL">
            <summary>
            Specifies the VarEnum is vt_ decimal
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_DISPATCH">
            <summary>
            Specifies the VarEnum is vt_ dispatch
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_EMPTY">
            <summary>
            Specifies the VarEnum is vt_ empty
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_ERROR">
            <summary>
            Specifies the VarEnum is vt_ error
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_FILETIME">
            <summary>
            Specifies the VarEnum is vt_ filetime
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_HRESULT">
            <summary>
            Specifies the VarEnum is vt_ hresult
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_I1">
            <summary>
            Specifies the VarEnum is vt_ i1
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_I2">
            <summary>
            Specifies the VarEnum is vt_ i2
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_I4">
            <summary>
            Specifies the VarEnum is vt_ i4
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_I8">
            <summary>
            Specifies the VarEnum is vt_ i8
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_INT">
            <summary>
            Specifies the VarEnum is vt_ int
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_LPSTR">
            <summary>
            Specifies the VarEnum is vt_ LPSTR
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_LPWSTR">
            <summary>
            Specifies the VarEnum is vt_ LPWSTR
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_NULL">
            <summary>
            Specifies the VarEnum is vt_ null
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_PTR">
            <summary>
            Specifies the VarEnum is vt_ PTR
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_R4">
            <summary>
            Specifies the VarEnum is vt_ r4
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_R8">
            <summary>
            Specifies the VarEnum is vt_ r8
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_RECORD">
            <summary>
            Specifies the VarEnum is vt_ record
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_SAFEARRAY">
            <summary>
            Specifies the VarEnum is vt_ safearray
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_STORAGE">
            <summary>
            Specifies the VarEnum is vt_ storage
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_STORED_OBJECT">
            <summary>
            Specifies the VarEnum is vt_ store d_ object
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_STREAM">
            <summary>
            Specifies the VarEnum is vt_ stream
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_STREAMED_OBJECT">
            <summary>
            Specifies the VarEnum is vt_ streame d_ object
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UI1">
            <summary>
            Specifies the VarEnum is vt_ u i1
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UI2">
            <summary>
            Specifies the VarEnum is vt_ u i2
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UI4">
            <summary>
            Specifies the VarEnum is vt_ u i4
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UI8">
            <summary>
            Specifies the VarEnum is vt_ u i8
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UINT">
            <summary>
            Specifies the VarEnum is vt_ uint
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_UNKNOWN">
            <summary>
            Specifies the VarEnum is vt_ unknown
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_USERDEFINED">
            <summary>
            Specifies the VarEnum is vt_ userdefined
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_VARIANT">
            <summary>
            Specifies the VarEnum is vt_ variant
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_VECTOR">
            <summary>
            Specifies the VarEnum is vt_ vector
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Net.VarEnum.VT_VOID">
            <summary>
            Specifies the VarEnum is vt_ void
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.XmlNamespaceConstant">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.XmlNamespaceConstant.E_Namespace">
            <summary>
            Encryption namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.XmlNamespaceConstant.P_Namespace">
            <summary>
            Namespace definition for key encryptor password.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.XmlNamespaceConstant.Cert_Namespace">
            <summary>
            Namespace definition for key encryptor certificate.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.InternalConstants">
            <summary>
            Represents the internal constants for Presentation.
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.PlaceholderTypeNone">
            <summary>
            Defines the none placeholder type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.HundredthOfPoint">
            <summary>
            Hundredths of a point.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultOffsetValueForPictureFill">
            <summary>
            Defines the default offset value for a picture fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultScaleValueForPictureFill">
            <summary>
            Defines the default scale value for the picture fill.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.ThousandthOfPercentage">
            <summary>
            Defines thousandths of a percentage.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.PercentageValue">
            <summary>
            Defines the percentage value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultSmartArtLeft">
            <summary>
            Default smart art left value is used when the smartart is create from scratch.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultSmartArtTop">
            <summary>
            Default smart art top value is used when the smartart is create from scratch.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultSmartArtWidth">
            <summary>
            Default smart art width is used when the smartart is create from scratch.        
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.DefaultSmartArtHeight">
            <summary>
            Default smart art height is used when the smartart is create from scratch.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.SimpleTypeRotationAngle">
            <summary>
            Default rotation angle constants of a shape.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.IntSize">
            <summary>
            Size of the Int32 value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.LongSize">
            <summary>
            Size of the Int64 value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.InternalConstants.BitsInByte">
            <summary>
            Number of bits inside single byte value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.VNamespace">
            <summary>
            Name of a namespace used by VML (marked by 'v' in MS PowerPoint 2007 documents).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.ONamespace">
            <summary>
            Name of a namespace used by VML (marked by 'o' in MS PowerPoint 2007 documents).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.XNamespace">
            <summary>
            Name of a namespace used by VML (marked by 'x' in MS PowerPoint 2007 documents).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.VPreffix">
            <summary>
            Namespace prefix used in vml shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.OPreffix">
            <summary>
            Namespace prefix used in vml shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VmlConstants.XmlTagName">
            <summary>
            Root tag for vml shapes.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.DrawingSerializator.SerializeExtensionList(System.Xml.XmlWriter,System.String)">
            <summary>
            Serailize the child elements of a extLst.
            </summary>
            <param name="xmlWriter">Represent the xmlWritter</param>
            <param name="relationId">Represent the relation id of the svg image</param>
        </member>
        <member name="F:Syncfusion.Presentation.ColorExtension.Empty">
            <summary>
            Contains empty color.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ColorExtension.FromArgb(System.Int32)">
            <summary>
            Converts Int32 value into Color.
            </summary>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.ColorObject">
            <summary>
            Represents the ARGB(alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IColor">
            <summary>
            Represents the ARGB (alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IColor.ToArgb">
             <summary>
             Converts the <see cref="T:Syncfusion.Presentation.IColor"/> structure to 32-bit ARGB value.
             </summary>
             <returns>The 32-bit ARGB value of the <see cref="T:Syncfusion.Presentation.IColor"/> structure.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide background
             IBackground background = slide.Background;
             //Set the fill type for background as Solid fill
             background.Fill.FillType = FillType.Solid;
             //Set the color to slide background
             background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
             //Create instance for color 
             IColor color = background.Fill.SolidFill.Color;
             //Convert color to argb
             int argb = color.ToArgb();
             //Save the presentation 
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();      
             </code>
             <code lang="VB.NET">
             'Create a new presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add a slide to the presentation
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
             'Create instance for slide background
             Dim background As IBackground = slide.Background
             'Set the fill type for background as Solid fill
             background.Fill.FillType = FillType.Solid
             'Set the color to slide background
             background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
             'Create instance for color 
             Dim color As IColor = background.Fill.SolidFill.Color
             'Convert color to argb
             Dim argb As Integer = color.ToArgb()
             'Save the presentation 
             presentation__1.Save("Output.pptx")
             'Close the presentation
             presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.SystemColor">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Color"/> value.
            </summary>
            <value>
            The System.Drawing.Color.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;
            //Set the system color by specifying the rgb values
            color.SystemColor = Color.Red;
            //Save the presentation 
            presentation.Save("SystemColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color__2 As IColor = background.Fill.SolidFill.Color
            'Set the system color by specifying the rgb values
            color__2.SystemColor = Color.Red
            'Save the presentation 
            presentation__1.Save("SystemColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.A">
            <summary>
            Gets the alpha color value. Read-only.
            </summary>
            <value>
            A.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //Get the transparency value of color
            byte alpha = color.A;
            //Save the presentation 
            presentation.Save("AlphaValue.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'Get the transparency value of color
            Dim alpha As Byte = color.A
            'Save the presentation 
            presentation__1.Save("AlphaValue.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.B">
            <summary>
            Gets the blue color value. Read-only.
            </summary>
            <value>
            The B.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //Get the blue color
            byte blue = color.B;
            //Save the presentation 
            presentation.Save("BlueColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'Get the blue color
            Dim blue As Byte = color.B
            'Save the presentation 
            presentation__1.Save("BlueColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.G">
            <summary>
            Gets the green color value. Read-only.
            </summary>
            <value>
            The G.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //Get the green color value
            byte green = color.G;
            //Save the presentation 
            presentation.Save("GreenColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'Get the green color value
            Dim green As Byte = color.G
            'Save the presentation 
            presentation__1.Save("GreenColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.IsEmpty">
            <summary>
            Specifies whether this <see cref="T:Syncfusion.Presentation.IColor"/> structure is uninitialized. Read-only.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //To check if it is a empty
            bool _isEmpty = color.IsEmpty;
            //Save the presentation 
            presentation.Save("Empty.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'To check if it is a empty
            Dim _isEmpty As Boolean = color.IsEmpty
            'Save the presentation 
            presentation__1.Save("Empty.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.IsKnownColor">
            <summary>
            Gets a value indicating whether the color object is a predefined color. Predefined colors are represented by the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
            <value>
            <c>true</c> if this instance is known color; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //To check if it is a known color
            bool _isKnownColor = color.IsKnownColor;
            //Save the presentation 
            presentation.Save("KnownColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'To check if it is a known color
            Dim _isKnownColor As Boolean = color.IsKnownColor
            'Save the presentation 
            presentation__1.Save("KnownColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.IsNamedColor">
            <summary>
            Gets a value indicating whether the color object is a named color or a member of the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
            <value>
            <c>true</c> if this instance is named color; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //To check if it is a named color
            bool _isNamedColor = color.IsNamedColor;
            //Save the presentation 
            presentation.Save("NamedColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'To check if it is a known color
            Dim _isNamedColor As Boolean = color.IsNamedColor
            'Save the presentation 
            presentation__1.Save("NamedColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.IsSystemColor">
            <summary>
            Gets a value indicating whether the color object is a system color. System colors are represented by elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
            <value>
            <c>true</c> if this instance is system color; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //To check if it is a system color
            bool _isSystemColor = color.IsSystemColor;
            //Save the presentation 
            presentation.Save("SystemColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'To check if it is a system color
            Dim _isSystemColor As Boolean = color.IsSystemColor
            'Save the presentation 
            presentation__1.Save("SystemColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IColor.R">
            <summary>
            Gets the red color value. Read-only.
            </summary>
            <value>
            The R.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Create instance for slide background
            IBackground background = slide.Background;
            //Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid;
            //Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89);
            //Create instance for color 
            IColor color = background.Fill.SolidFill.Color;       
            //Get the red color value
            byte red = color.R;
            //Save the presentation 
            presentation.Save("RedColor.pptx");
            //Close the presentation
            presentation.Close();      
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Set the color to slide background
            background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 23, 12, 89)
            'Create instance for color 
            Dim color As IColor = background.Fill.SolidFill.Color
            'Get the red color value
            Dim red As Byte = color.R
            'Save the presentation 
            presentation__1.Save("RedColor.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.ColorObject.Empty">
            <summary>
            Represents a color that is null.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.#ctor(System.Drawing.KnownColor)">
            <summary>
            Initialize the ColorObject type with KnowColor object
            </summary>
            <param name="knownColor"></param>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.#ctor">
            <summary>
            Default Constructor for ColorObject.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.FromArgb(System.Int32)">
             <summary>
             Creates an <see cref="T:Syncfusion.Presentation.IColor"/> structure from a 32-bit ARGB value.
             </summary>
             <param name="argb">A value specifying the 32-bit ARGB value.</param>
             <returns>The <see cref="T:Syncfusion.Presentation.IColor"/> structure this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the color for solid fill
             slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(146880);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close(); 
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Set the color for solid fill
            slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(146880);
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Creates an <see cref="T:Syncfusion.Presentation.IColor"/> structure from the four ARGB component (alpha, red, green, and blue) values.
             </summary>
             <param name="alpha">The alpha component. Valid values are 0 through 255. </param>
             <param name="red">The red component. Valid values are 0 through 255. </param>
             <param name="green">The green component. Valid values are 0 through 255. </param>
             <param name="blue">The blue component. Valid values are 0 through 255. </param>
             <returns>The <see cref="T:Syncfusion.Presentation.IColor"/> structure this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the argb value for solid fill
             slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(90, 120, 120, 120);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close(); 
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Set the argb value for solid fill
            slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(90, 120, 120, 120);
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.FromArgb(System.Int32,Syncfusion.Presentation.IColor)">
             <summary>
             Creates an <see cref="T:Syncfusion.Presentation.IColor"/> structure from the specified <see cref="T:Syncfusion.Presentation.IColor"/> structure combined with the new alpha value.
             </summary>
             <param name="alpha">The alpha value for the new <see cref="T:Syncfusion.Presentation.IColor"/>. Valid values are 0 through 255. </param>
             <param name="baseColor">The <see cref="T:Syncfusion.Presentation.IColor"/> instance from which to create the new color. </param>
             <returns>The <see cref="T:Syncfusion.Presentation.IColor"/> structure this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the color for solid fill
             slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(30, ColorObject.Red);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close(); 
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Set the color for solid fill
            slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(30, ColorObject.Red);
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.FromArgb(System.Int32,System.Int32,System.Int32)">
             <summary>
              Creates an <see cref="T:Syncfusion.Presentation.IColor"/> structure from the specified RGB values (red, green, and blue). The alpha value is implicitly 255 (fully opaque).
             </summary>
             <param name="red">The red component value for the new <see cref="T:Syncfusion.Presentation.IColor"/>. Valid values are 0 through 255.</param>
             <param name="green">The green component value for the new <see cref="T:Syncfusion.Presentation.IColor"/>. Valid values are 0 through 255.</param>
             <param name="blue">The blue component value for the new <see cref="T:Syncfusion.Presentation.IColor"/>. Valid values are 0 through 255.</param>
             <returns>The <see cref="T:Syncfusion.Presentation.IColor"/> structure this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the rgb value for solid fill
             slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 120, 120);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close(); 
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Set the rgb value for solid fill
            slide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(120, 120, 120);
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.FromKnownColor(System.Drawing.KnownColor)">
             <summary>
             Creates an <see cref="T:Syncfusion.Presentation.IColor"/> structure from the specified predefined color.
             </summary>
             <param name="color">An element of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</param>
             <returns>The <see cref="T:Syncfusion.Presentation.IColor"/> structure this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set the color of solid Fill
             slide.Background.Fill.SolidFill.Color = ColorObject.FromKnownColor(System.Drawing.KnownColor.ActiveBorder);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close(); 
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Open("Template.pptx")
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Set the color of solid Fill
            slide.Background.Fill.SolidFill.Color = ColorObject.FromKnownColor(System.Drawing.KnownColor.ActiveBorder)
            'Save the presentation
            presentation.Save("Output.pptx")
            'Close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.GetBrightness">
             <summary>
             Returns the hue-saturation-brightness (HSB) brightness value for the specified <see cref="T:Syncfusion.Presentation.IColor"/> structure.
             </summary>
             <returns>The brightness of this color. The brightness ranges from 0.0 through 1.0, where 0.0 represents black and 1.0 represents white.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100);
             //Set the fill type of shape
             shape.Fill.FillType = FillType.Pattern;
             //Set the back color of the pattern fill
             shape.Fill.PatternFill.BackColor = ColorObject.Red;
             //Create an instance for color object
             ColorObject colorObject = slide.Background.Fill.SolidFill.Color as ColorObject;
             //Get the brightness of color, it is read only
             float brightness = colorObject.GetBrightness();
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add shape to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100)
            'Set the fill type of shape
            shape.Fill.FillType = FillType.Pattern
            'Set the back color of the pattern fill
            shape.Fill.PatternFill.BackColor = ColorObject.Red
            'Create an instance for color object
            Dim colorObject As ColorObject = TryCast(slide.Background.Fill.SolidFill.Color, ColorObject)
            'Get the brightness of color, it is read only
            Dim brightness As Single = colorObject.GetBrightness()
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.GetHue">
             <summary>
             Returns the hue-saturation-brightness (HSB) hue value, in degrees.
             </summary>
             <returns>The hue, in degrees, of the specified color. The hue is measured in degrees, ranging from 0.0 through 360.0, in HSB color space.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100);
             //Set the fill type of shape
             shape.Fill.FillType = FillType.Pattern;
             //Set the back color of the pattern fill
             shape.Fill.PatternFill.BackColor = ColorObject.Red;
             //Create an instance for color object
             ColorObject colorObject = slide.Background.Fill.SolidFill.Color as ColorObject;
             //Get hue of color, read only
             float hue = colorObject.GetHue();
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add shape to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100)
            'Set the fill type of shape
            shape.Fill.FillType = FillType.Pattern
            'Set the back color of the pattern fill
            shape.Fill.PatternFill.BackColor = ColorObject.Red
            'Create an instance for color object
            Dim colorObject As ColorObject = TryCast(slide.Background.Fill.SolidFill.Color, ColorObject)
            'Get the hue of color, it is read only
            Dim hue As Single = colorObject.GetHue()
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.GetSaturation">
             <summary>
             Returns the hue-saturation-brightness (HSB) saturation value.
             </summary>
             <returns>The saturation of the specified color. The saturation ranges from 0.0 through 1.0, where 0.0 is gray-scale and 1.0 is the most saturated.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100);
             //Set the fill type of shape
             shape.Fill.FillType = FillType.Pattern;
             //Set the back color of the pattern fill
             shape.Fill.PatternFill.BackColor = ColorObject.Red;
             //Create an instance for color object
             ColorObject colorObject = slide.Background.Fill.SolidFill.Color as ColorObject;
             //Get the saturation of color, read only
             float saturation = colorObject.GetSaturation();
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add shape to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100)
            'Set the fill type of shape
            shape.Fill.FillType = FillType.Pattern
            'Set the back color of the pattern fill
            shape.Fill.PatternFill.BackColor = ColorObject.Red
            'Create an instance for color object
            Dim colorObject As ColorObject = TryCast(slide.Background.Fill.SolidFill.Color, ColorObject)
            'Get the saturation of color, it is read only
            Dim saturation As Single = colorObject.GetSaturation()
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.ToArgb">
             <summary>
             Gets the 32-bit ARGB value of this <see cref="T:Syncfusion.Presentation.IColor"/> structure.
             </summary>
             <returns>The 32-bit Argb value of this color.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100);
             //Set the fill type of shape
             shape.Fill.FillType = FillType.Pattern;
             //Set the back color of the pattern fill
             shape.Fill.PatternFill.BackColor = ColorObject.Red;
             //Create an instance for color object
             ColorObject colorObject = slide.Background.Fill.SolidFill.Color as ColorObject;
             //Convert to the argb value 
             int argb = colorObject.ToArgb();
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add shape to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100)
            'Set the fill type of shape
            shape.Fill.FillType = FillType.Pattern
            'Set the back color of the pattern fill
            shape.Fill.PatternFill.BackColor = ColorObject.Red
            'Create an instance for color object
            Dim colorObject As ColorObject = TryCast(slide.Background.Fill.SolidFill.Color, ColorObject)
            'Convert to the argb value 
            Dim argb As Integer = colorObject.ToArgb()
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ColorObject.ToKnownColor">
             <summary>
             Gets the <see cref="T:System.Drawing.KnownColor"/> value of the <see cref="T:Syncfusion.Presentation.IColor"/> structure.
             </summary>
             <returns>An element of the <see cref="T:System.Drawing.KnownColor"/> enumeration.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100);
             //Set the fill type of shape
             shape.Fill.FillType = FillType.Pattern;
             //Set the pattern type
             shape.Fill.PatternFill.Pattern = PatternFillType.DarkDownwardDiagonal;
             //Set the back color of the pattern fill
             shape.Fill.PatternFill.BackColor = ColorObject.Red;
             //Create an instance for color object
             ColorObject colorObject = slide.Background.Fill.SolidFill.Color as ColorObject;
             //Convert to known color
             System.Drawing.KnownColor knownColor = colorObject.ToKnownColor();
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Add shape to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Dodecagon, 234, 23, 120, 100)
            'Set the fill type of shape
            shape.Fill.FillType = FillType.Pattern
            'Set the pattern type
            shape.Fill.PatternFill.Pattern = PatternFillType.DarkDownwardDiagonal
            'Set the back color of the pattern fill
            shape.Fill.PatternFill.BackColor = ColorObject.Red
            'Create an instance for color object
            Dim colorObject As ColorObject = TryCast(slide.Background.Fill.SolidFill.Color, ColorObject)
            'Convert to known color
            Dim knownColor As System.Drawing.KnownColor = colorObject.ToKnownColor()
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.AliceBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF0F8FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.AntiqueWhite">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFAEBD7. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Aqua">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00FFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Aquamarine">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF7FFFD4. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Azure">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF0FFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Beige">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF5F5DC. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Bisque">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFE4C4. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Black">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF000000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.BlanchedAlmond">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFEBCD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Blue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF0000FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.BlueViolet">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF8A2BE2. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Brown">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFA52A2A. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.BurlyWood">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDEB887. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.CadetBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF5F9EA0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Chartreuse">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF7FFF00. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Chocolate">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFD2691E. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Coral">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF7F50. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.CornflowerBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF6495ED. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Cornsilk">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFF8DC. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Crimson">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDC143C. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Cyan">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00FFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00008B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkCyan">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF008B8B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkGoldenrod">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFB8860B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFA9A9A9. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF006400. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkKhaki">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFBDB76B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkMagenta">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF8B008B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkOliveGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF556B2F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkOrange">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF8C00. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkOrchid">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF9932CC. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkRed">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF8B0000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkSalmon">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFE9967A. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkSeaGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF8FBC8F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkSlateBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF483D8B. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkSlateGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF2F4F4F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkTurquoise">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00CED1. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DarkViolet">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF9400D3. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DeepPink">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF1493. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DeepSkyBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00BFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DimGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF696969. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.DodgerBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF1E90FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Firebrick">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFB22222. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.FloralWhite">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFAF0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.ForestGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF228B22. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Fuchsia">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF00FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Gainsboro">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDCDCDC. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.GhostWhite">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF8F8FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Gold">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFD700. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Goldenrod">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDAA520. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Gray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF808080. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Green">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF008000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.GreenYellow">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFADFF2F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Honeydew">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF0FFF0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.HotPink">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF69B4. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.IndianRed">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFCD5C5C. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Indigo">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF4B0082. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Ivory">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFFF0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Khaki">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF0E68C. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Lavender">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFE6E6FA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LavenderBlush">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFF0F5. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LawnGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF7CFC00. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LemonChiffon">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFACD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFADD8E6. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightCoral">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF08080. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightCyan">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFE0FFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightGoldenrodYellow">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFAFAD2. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFD3D3D3. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF90EE90. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightPink">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFB6C1. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightSalmon">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFA07A. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightSeaGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF20B2AA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightSkyBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF87CEFA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightSlateGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF778899. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightSteelBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFB0C4DE. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LightYellow">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFFE0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Lime">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00FF00. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.LimeGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF32CD32. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Linen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFAF0E6. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Magenta">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF00FF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Maroon">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF800000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumAquamarine">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF66CDAA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF0000CD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumOrchid">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFBA55D3. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumPurple">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF9370DB. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumSeaGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF3CB371. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumSlateBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF7B68EE. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumSpringGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00FA9A. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumTurquoise">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF48D1CC. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MediumVioletRed">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFC71585. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MidnightBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF191970. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MintCream">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF5FFFA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.MistyRose">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFE4E1. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Moccasin">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFE4B5. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.NavajoWhite">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFDEAD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Navy">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF000080. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.OldLace">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFDF5E6. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Olive">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF808000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.OliveDrab">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF6B8E23. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Orange">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFA500. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.OrangeRed">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF4500. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Orchid">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDA70D6. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PaleGoldenrod">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFEEE8AA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PaleGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF98FB98. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PaleTurquoise">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFAFEEEE. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PaleVioletRed">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDB7093. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PapayaWhip">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFEFD5. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PeachPuff">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFDAB9. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Peru">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFCD853F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Pink">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFC0CB. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Plum">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFDDA0DD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.PowderBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFB0E0E6. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Purple">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF800080. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Red">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF0000. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.RosyBrown">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFBC8F8F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.RoyalBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF4169E1. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SaddleBrown">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF8B4513. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Salmon">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFA8072. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SandyBrown">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF4A460. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SeaGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF2E8B57. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SeaShell">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFF5EE. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Sienna">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFA0522D. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Silver">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFC0C0C0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SkyBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF87CEEB. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SlateBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF6A5ACD. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SlateGray">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF708090. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Snow">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFAFA. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SpringGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF00FF7F. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SteelBlue">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF4682B4. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Tan">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFD2B48C. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Teal">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF008080. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Thistle">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFD8BFD8. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Tomato">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFF6347. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Transparent">
            <summary>
            Gets a predefined transparent color. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Turquoise">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF40E0D0. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Violet">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFEE82EE. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Wheat">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF5DEB3. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.White">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFFFF. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.WhiteSmoke">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFF5F5F5. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.Yellow">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FFFFFF00. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.YellowGreen">
            <summary>
            Gets a predefined <see cref="T:Syncfusion.Presentation.IColor"/> object that has an ARGB value of #FF9ACD32. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.ThemeColorValue">
            <summary>
            Returns ThemeColorValue of the current color object.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.A">
            <summary>
            Gets the alpha color value. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.B">
            <summary>
            Gets the blue color value. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.G">
            <summary>
            Gets the green color value. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.IsEmpty">
            <summary>
             Specifies whether this <see cref="T:Syncfusion.Presentation.IColor"/> structure is uninitialized. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.IsKnownColor">
            <summary>
            Gets a value indicating whether the color object is a predefined color. Predefined colors are represented by the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.IsNamedColor">
            <summary>
            Gets a value indicating whether the color object is a named color or a member of the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.IsSystemColor">
            <summary>
            Gets a value indicating whether the color object is a system color. System colors are represented by elements of the <see cref="T:System.Drawing.KnownColor"/> enumeration. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.R">
            <summary>
            Gets the red color value. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ColorObject.SystemColor">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Color"/> value.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.DrawingParser.ParseColorChoice(System.Xml.XmlReader,Syncfusion.Presentation.SlideImplementation.LayoutSlide)">
            <summary>
            Gets the color map values from layout slide
            </summary>
            <param name="xmlReader">The XML Reader</param>       
            <param name="layoutSlide">The layout slide</param>
            <return></return>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.DrawingParser.ParseColorChoice(System.Xml.XmlReader,Syncfusion.Presentation.ColorObject,Syncfusion.Presentation.SlideImplementation.LayoutSlide)">
            <summary>
            Gets the color map values from layout slide
            </summary>
            <param name="xmlReader">The XML Reader</param>
            <param name="color">ColorObject instance to hold color values</param>
            <param name="layoutSlide">The layout slide</param>
            <return></return>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.DrawingParser.ParseScheme(System.Xml.XmlReader,Syncfusion.Presentation.ColorObject,Syncfusion.Presentation.SlideImplementation.LayoutSlide)">
            <summary>
            Gets the scheme color of layout slide
            </summary>
            <param name="xmlReader">The XML Reader</param>
            <param name="color">ColorObject instance to hold color value</param>
            <param name="layoutSlide">The layout slide</param>
        </member>
        <member name="T:Syncfusion.Presentation.ArrowheadLength">
            <summary>
            Specifies the length of the arrowhead at the end of a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadLength.None">
            <summary>
            Specifies the ArrowheadLength is None
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadLength.Short">
            <summary>
            Specifies the ArrowheadLength is Short
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadLength.Medium">
            <summary>
            Specifies the ArrowheadLength is Medium
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadLength.Long">
            <summary>
            Specifies the ArrowheadLength is Long
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ArrowheadStyle">
            <summary>
            Specifies the style of the arrowhead at the end of a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.None">
            <summary>
            Specifies the ArrowheadStyle is None
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.Arrow">
            <summary>
            Specifies the ArrowheadStyle is Arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.ArrowStealth">
            <summary>
            Specifies the ArrowheadStyle is ArrowStealth
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.ArrowDiamond">
            <summary>
            Specifies the ArrowheadStyle is ArrowDiamond
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.ArrowOval">
            <summary>
            Specifies the ArrowheadStyle is ArrowOval
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadStyle.ArrowOpen">
            <summary>
            Specifies the ArrowheadStyle is ArrowOpen
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ArrowheadWidth">
            <summary>
            Specifies the width of the arrowhead at the end of a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadWidth.None">
            <summary>
            Specifies the ArrowheadWidth is None
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadWidth.Narrow">
            <summary>
            Specifies the ArrowheadWidth is Narrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadWidth.Medium">
            <summary>
            Specifies the ArrowheadWidth is Medium
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ArrowheadWidth.Wide">
            <summary>
            Specifies the ArrowheadWidth is Wide
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.AutoShapeType">
            <summary>
            Specifies the shape type for an <see cref="T:Syncfusion.Presentation.IShape"/> object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Unknown">
            <summary>
             Specifies the AutoShapeType is Unknown
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SwooshArrow">
            <summary>
            Specifies the AutoShapeType is SwooshArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Line">
            <summary>
            Specifies the AutoShapeType is Line
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.ElbowConnector">
            <summary>
            Specifies the AutoShapeType is ElbowConnector
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedConnector">
            <summary>
            Specifies the AutoShapeType is CurvedConnector
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BentConnector2">
            <summary>
            Specifies the AutoShapeType is BentConnector2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.StraightConnector">
            <summary>
            Specifies the AutoShapeType is StraightConnector
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BentConnector4">
            <summary>
            Specifies the AutoShapeType is BentConnector4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BentConnector5">
            <summary>
            Specifies the AutoShapeType is BentConnector5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedConnector2">
            <summary>
            Specifies the AutoShapeType is CurvedConnector2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedConnector4">
            <summary>
            Specifies the AutoShapeType is CurvedConnector4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedConnector5">
            <summary>
            Specifies the AutoShapeType is CurvedConnector5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Rectangle">
            <summary>
            Specifies the AutoShapeType is Rectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RoundedRectangle">
            <summary>
            Specifies the AutoShapeType is RoundedRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SnipSingleCornerRectangle">
            <summary>
            Specifies the AutoShapeType is SnipSingleCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SnipSameSideCornerRectangle">
            <summary>
            Specifies the AutoShapeType is SnipSameSideCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SnipDiagonalCornerRectangle">
            <summary>
            Specifies the AutoShapeType is SnipDiagonalCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SnipAndRoundSingleCornerRectangle">
            <summary>
            Specifies the AutoShapeType is SnipAndRoundSingleCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RoundSingleCornerRectangle">
            <summary>
            Specifies the AutoShapeType is RoundSingleCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RoundSameSideCornerRectangle">
            <summary>
            Specifies the AutoShapeType is RoundSameSideCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RoundDiagonalCornerRectangle">
            <summary>
            Specifies the AutoShapeType is RoundDiagonalCornerRectangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Oval">
            <summary>
            Specifies the AutoShapeType is Oval
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.IsoscelesTriangle">
            <summary>
            Specifies the AutoShapeType is IsoscelesTriangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RightTriangle">
            <summary>
            Specifies the AutoShapeType is RightTriangle
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Parallelogram">
            <summary>
            Specifies the AutoShapeType is Parallelogram
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Trapezoid">
            <summary>
            Specifies the AutoShapeType is Trapezoid
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Diamond">
            <summary>
            Specifies the AutoShapeType is Diamond
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RegularPentagon">
            <summary>
            Specifies the AutoShapeType is RegularPentagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Hexagon">
            <summary>
            Specifies the AutoShapeType is Hexagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Heptagon">
            <summary>
            Specifies the AutoShapeType is Heptagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Octagon">
            <summary>
            Specifies the AutoShapeType is Octagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Decagon">
            <summary>
            Specifies the AutoShapeType is Decagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Dodecagon">
            <summary>
            Specifies the AutoShapeType is Dodecagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Pie">
            <summary>
            Specifies the AutoShapeType is Pie
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Chord">
            <summary>
            Specifies the AutoShapeType is Chord
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Teardrop">
            <summary>
            Specifies the AutoShapeType is Teardrop
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Frame">
            <summary>
            Specifies the AutoShapeType is Frame
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.HalfFrame">
            <summary>
            Specifies the AutoShapeType is HalfFrame
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DiagonalStripe">
            <summary>
            Specifies the AutoShapeType is diagonalstripe
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Cross">
            <summary>
            Specifies the AutoShapeType is Cross
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Plaque">
            <summary>
            Specifies the AutoShapeType is Plaque
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Can">
            <summary>
            Specifies the AutoShapeType is Can
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Cube">
            <summary>
            Specifies the AutoShapeType is Cube
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Bevel">
            <summary>
            Specifies the AutoShapeType is Bevel
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Donut">
            <summary>
            Specifies the AutoShapeType is Donut
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.NoSymbol">
            <summary>
            Specifies the AutoShapeType is NoSymbol
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BlockArc">
            <summary>
            Specifies the AutoShapeType is BlockArc
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FoldedCorner">
            <summary>
            Specifies the AutoShapeType is FoldedCorner
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.SmileyFace">
            <summary>
            Specifies the AutoShapeType is SmileyFace
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Heart">
            <summary>
            Specifies the AutoShapeType is Heart
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LightningBolt">
            <summary>
            Specifies the AutoShapeType is LightningBolt
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Sun">
            <summary>
            Specifies the AutoShapeType is Sun
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Moon">
            <summary>
            Specifies the AutoShapeType is Moon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Cloud">
            <summary>
            Specifies the AutoShapeType is Cloud
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Arc">
            <summary>
            Specifies the AutoShapeType is Arc
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DoubleBracket">
            <summary>
            Specifies the AutoShapeType is DoubleBracket
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DoubleBrace">
            <summary>
            Specifies the AutoShapeType is DoubleBrace
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftBracket">
            <summary>
            Specifies the AutoShapeType is LeftBracket
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RightBracket">
            <summary>
            Specifies the AutoShapeType is RightBracket
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftBrace">
            <summary>
            Specifies the AutoShapeType is LeftBrace
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RightBrace">
            <summary>
            Specifies the AutoShapeType is RightBrace
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RightArrow">
            <summary>
            Specifies the AutoShapeType is RightArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftArrow">
            <summary>
            Specifies the AutoShapeType is LeftArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UpArrow">
            <summary>
            Specifies the AutoShapeType is UpArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DownArrow">
            <summary>
            Specifies the AutoShapeType is DownArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftRightArrow">
            <summary>
            Specifies the AutoShapeType is LeftRightArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UpDownArrow">
            <summary>
            Specifies the AutoShapeType is UpDownArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.QuadArrow">
            <summary>
            Specifies the AutoShapeType is QuadArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftRightUpArrow">
            <summary>
            Specifies the AutoShapeType is LeftRightUpArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BentArrow">
            <summary>
            Specifies the AutoShapeType is BentArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UTurnArrow">
            <summary>
            Specifies the AutoShapeType is UTurnArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftUpArrow">
            <summary>
            Specifies the AutoShapeType is LeftUpArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.BentUpArrow">
            <summary>
            Specifies the AutoShapeType is BentUpArrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedRightArrow">
            <summary>
            Specifies the  AutoShapeType is curved right arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedLeftArrow">
            <summary>
            Specifies the  AutoShapeType is curved left arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedUpArrow">
            <summary>
            Specifies the  AutoShapeType is curved up arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedDownArrow">
            <summary>
            Specifies the  AutoShapeType is curved down arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.StripedRightArrow">
            <summary>
            Specifies the  AutoShapeType is striped right arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.NotchedRightArrow">
            <summary>
            Specifies the  AutoShapeType is notched right arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Pentagon">
            <summary>
            Specifies the  AutoShapeType is pentagon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Chevron">
            <summary>
            Specifies the  AutoShapeType is chevron
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RightArrowCallout">
            <summary>
            Specifies the  AutoShapeType is right arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DownArrowCallout">
            <summary>
            Specifies the  AutoShapeType is Down arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftArrowCallout">
            <summary>
            Specifies the  AutoShapeType is left arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UpArrowCallout">
            <summary>
            Specifies the  AutoShapeType is up arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LeftRightArrowCallout">
            <summary>
            Specifies the  AutoShapeType is left right arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UpDownArrowCallout">
            <summary>
            Specifies the  AutoShapeType is up down arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.QuadArrowCallout">
            <summary>
            Specifies the  AutoShapeType is quad arrow callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CircularArrow">
            <summary>
            Specifies the  AutoShapeType is circular arrow
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathPlus">
            <summary>
            Specifies the  AutoShapeType is math plus
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathMinus">
            <summary>
            Specifies the  AutoShapeType is math minus
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathMultiply">
            <summary>
            Specifies the  AutoShapeType is math multiply
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathDivision">
            <summary>
            Specifies the  AutoShapeType is math division
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathEqual">
            <summary>
            Specifies the  AutoShapeType is math equal
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.MathNotEqual">
            <summary>
            Specifies the  AutoShapeType is math not equal
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartProcess">
            <summary>
            Specifies the  AutoShapeType is flow chart process
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartAlternateProcess">
            <summary>
            Specifies the  AutoShapeType is flow chart alternate process
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartDecision">
            <summary>
            Specifies the  AutoShapeType is flow chart decision
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartData">
            <summary>
            Specifies the  AutoShapeType is flow chart data
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartPredefinedProcess">
            <summary>
            Specifies the  AutoShapeType is flow chart predefined process
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartInternalStorage">
            <summary>
            Specifies the  AutoShapeType is flow chart internal storage
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartDocument">
            <summary>
            Specifies the  AutoShapeType is flow chart document
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartMultiDocument">
            <summary>
            Specifies the  AutoShapeType is flow chart multi document
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartTerminator">
            <summary>
            Specifies the  AutoShapeType is flow chart terminator
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartPreparation">
            <summary>
            Specifies the  AutoShapeType is flow chart preparation
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartManualInput">
            <summary>
            Specifies the  AutoShapeType is flow chart manual input
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartManualOperation">
            <summary>
            Specifies the  AutoShapeType is flow chart manual operation
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartConnector">
            <summary>
            Specifies the  AutoShapeType is flow chart connector
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartOffPageConnector">
            <summary>
            Specifies the  AutoShapeType is flow chart off page connector
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartCard">
            <summary>
            Specifies the  AutoShapeType is flow chart card
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartPunchedTape">
            <summary>
            Specifies the  AutoShapeType is flow chart punched tape
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartSummingJunction">
            <summary>
            Specifies the  AutoShapeType is flow chart summing junction
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartOr">
            <summary>
            Specifies the  AutoShapeType is flow chart or
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartCollate">
            <summary>
            Specifies the  AutoShapeType is flow chart collate
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartSort">
            <summary>
            Specifies the  AutoShapeType is flow chart sort
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartExtract">
            <summary>
            Specifies the  AutoShapeType is flow chart extract
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartMerge">
            <summary>
            Specifies the  AutoShapeType is flow chart merge
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartStoredData">
            <summary>
            Specifies the  AutoShapeType is flow chart stored data
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartDelay">
            <summary>
            Specifies the  AutoShapeType is flow chart delay
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartSequentialAccessStorage">
            <summary>
            Specifies the  AutoShapeType is flow chart sequential access storage
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartMagneticDisk">
            <summary>
            Specifies the  AutoShapeType is flow chart magnetic disk
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartDirectAccessStorage">
            <summary>
            Specifies the  AutoShapeType is flow chart direct access storage
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.FlowChartDisplay">
            <summary>
            Specifies the  AutoShapeType is flow chart display
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Explosion1">
            <summary>
            Specifies the  AutoShapeType is explosion1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Explosion2">
            <summary>
            Specifies the  AutoShapeType is explosion2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star4Point">
            <summary>
            Specifies the  AutoShapeType is star4 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star5Point">
            <summary>
            Specifies the  AutoShapeType is star5 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star6Point">
            <summary>
            Specifies the  AutoShapeType is star6 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star7Point">
            <summary>
            Specifies the  AutoShapeType is star7 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star8Point">
            <summary>
            Specifies the  AutoShapeType is star8 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star10Point">
            <summary>
            Specifies the  AutoShapeType is star10 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star12Point">
            <summary>
            Specifies the  AutoShapeType is star12 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star16Point">
            <summary>
            Specifies the AutoShapeType is Star16Point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star24Point">
            <summary>
            Specifies the  AutoShapeType is star24 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Star32Point">
            <summary>
            Specifies the  AutoShapeType is star32 point
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.UpRibbon">
             <summary>
            Specifies the  AutoShapeType is Up ribbon
             </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DownRibbon">
             <summary>
            Specifies the  AutoShapeType is Down ribbon
             </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedUpRibbon">
            <summary>
            Specifies the  AutoShapeType is curved up ribbon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CurvedDownRibbon">
            <summary>
            Specifies the  AutoShapeType is curved down ribbon
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.VerticalScroll">
            <summary>
            Specifies the  AutoShapeType is vertical scroll
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.HorizontalScroll">
            <summary>
            Specifies the  AutoShapeType is horizontal scroll
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Wave">
            <summary>
            Specifies the  AutoShapeType is wave
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.DoubleWave">
            <summary>
            Specifies the  AutoShapeType is double wave
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RectangularCallout">
            <summary>
            Specifies the  AutoShapeType is rectangular callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.RoundedRectangularCallout">
            <summary>
            Specifies the  AutoShapeType is rounded rectangular callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.OvalCallout">
            <summary>
            Specifies the  AutoShapeType is oval callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.CloudCallout">
            <summary>
            Specifies the  AutoShapeType is cloud callout
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout1">
            <summary>
            Specifies the  AutoShapeType is line callout1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout2">
            <summary>
            Specifies the  AutoShapeType is line callout2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout3">
            <summary>
            Specifies the  AutoShapeType is line callout3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout1AccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout1 accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout2AccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout2 accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout3AccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout3 accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout1NoBorder">
            <summary>
            Specifies the  AutoShapeType is line callout1 no border
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout2NoBorder">
            <summary>
            Specifies the  AutoShapeType is line callout2 no border
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout3NoBorder">
            <summary>
            Specifies the  AutoShapeType is line callout3 no border
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout1BorderAndAccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout1 border and accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout2BorderAndAccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout2 border and accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.LineCallout3BorderAndAccentBar">
            <summary>
            Specifies the  AutoShapeType is line callout3 border and accent bar
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoShapeType.Corner">
            <summary>
            Specifies the  AutoShapeType is l_shape
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BackgroundStyle">
            <summary>
            Specifies the BackgroundStyle for Slides.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style1">
            <summary>
            Specifies the BackgroundStyle for Slides is Style1.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style2">
            <summary>
            Specifies the BackgroundStyle for Slides is Style2.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style3">
            <summary>
            Specifies the BackgroundStyle for Slides is Style3.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style4">
            <summary>
            Specifies the BackgroundStyle for Slides is Style4.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style5">
            <summary>
            Specifies the BackgroundStyle for Slides is Style5.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style6">
            <summary>
            Specifies the BackgroundStyle for Slides is Style6.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style7">
            <summary>
            Specifies the BackgroundStyle for Slides is Style7.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style8">
            <summary>
            Specifies the BackgroundStyle for Slides is Style8.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style9">
            <summary>
            Specifies the BackgroundStyle for Slides is Style9.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style10">
            <summary>
            Specifies the BackgroundStyle for Slides is Style10.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style11">
            <summary>
            Specifies the BackgroundStyle for Slides is Style11.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BackgroundStyle.Style12">
            <summary>
            Specifies the BackgroundStyle for Slides is Style12.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ColorType">
            <summary>
            Specifies the ColorType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorType.Automatic">
            <summary>
            Specifies the ColorType is automatic.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorType.AutomaticIndex">
            <summary>
            Specifies the ColorType is automatic index.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorType.RGB">
            <summary>
            Specifies the ColorType is RGB.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorType.IndexedColor">
            <summary>
            Specifies the ColorType is indexed color.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorType.Theme">
            <summary>
            Specifies the PatternFillType is theme.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PatternFillType">
            <summary>
            Specifies the pattern fill type for an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Solid">
            <summary>
            Specifies the PatternFillType is solid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray5">
            <summary>
            Specifies the PatternFillType is gray5.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray10">
            <summary>
            Specifies the PatternFillType is gray10.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray20">
            <summary>
            Specifies the PatternFillType is gray20.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray30">
            <summary>
            Specifies the PatternFillType is gray30.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray40">
            <summary>
            Specifies the PatternFillType is gray40.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray50">
            <summary>
            Specifies the PatternFillType is gray50.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray60">
            <summary>
            Specifies the PatternFillType is gray60.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray70">
            <summary>
            Specifies the PatternFillType is gray70.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray75">
            <summary>
            Specifies the PatternFillType is gray75.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray80">
            <summary>
            Specifies the PatternFillType is gray80.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray90">
            <summary>
            Specifies the PatternFillType is gray90.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Gray25">
            <summary>
            Specifies the PatternFillType is gray25.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Cross">
            <summary>
            Specifies the PatternFillType is cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DiagonalCross">
            <summary>
            Specifies the PatternFillType is diagonal cross.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DownwardDiagonal">
            <summary>
            Specifies the PatternFillType is downward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Horizontal">
            <summary>
            Specifies the PatternFillType is horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.UpwardDiagonal">
            <summary>
            Specifies the PatternFillType is upward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Vertical">
            <summary>
            Specifies the PatternFillType is vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LightDownwardDiagonal">
            <summary>
            Specifies the PatternFillType is light downward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LightUpwardDiagonal">
            <summary>
            Specifies the PatternFillType is light upward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DarkDownwardDiagonal">
            <summary>
            Specifies the PatternFillType is dark downward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DarkUpwardDiagonal">
            <summary>
            Specifies the PatternFillType is dark upward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.WideDownwardDiagonal">
            <summary>
            Specifies the PatternFillType is wide downward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.WideUpwardDiagonal">
            <summary>
            Specifies the PatternFillType is wide upward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LightVertical">
            <summary>
            Specifies the PatternFillType is light vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LightHorizontal">
            <summary>
            Specifies the PatternFillType is light horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.NarrowVertical">
            <summary>
            Specifies the PatternFillType is narrow vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.NarrowHorizontal">
            <summary>
            Specifies the PatternFillType is narrow horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DarkVertical">
            <summary>
            Specifies the PatternFillType is dark vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DarkHorizontal">
            <summary>
            Specifies the PatternFillType is dark horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DashedDownwardDiagonal">
            <summary>
            Specifies the PatternFillType is dashed downward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DashedUpwardDiagonal">
            <summary>
            Specifies the PatternFillType is dashed upward diagonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DashedVertical">
            <summary>
            Specifies the PatternFillType is dashed vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DashedHorizontal">
            <summary>
            Specifies the PatternFillType is dashed horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.SmallConfetti">
            <summary>
            Specifies the PatternFillType is small confetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LargeConfetti">
            <summary>
            Specifies the PatternFillType is large confetti.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.ZigZag">
            <summary>
            Specifies the PatternFillType is zig zag.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Wave">
            <summary>
            Specifies the PatternFillType is wave.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DiagonalBrick">
            <summary>
            Specifies the PatternFillType is diagonal brick.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.HorizontalBrick">
            <summary>
            Specifies the PatternFillType is horizontal brick.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Weave">
            <summary>
            Specifies the PatternFillType is weave.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Plaid">
            <summary>
            Specifies the PatternFillType is plaid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Divot">
            <summary>
            Specifies the PatternFillType is divot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DottedGrid">
            <summary>
            Specifies the PatternFillType is dotted grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.DottedDiamond">
            <summary>
            Specifies the PatternFillType is dotted diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Shingle">
            <summary>
            Specifies the PatternFillType is shingle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Trellis">
            <summary>
            Specifies the PatternFillType is trellis.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.Sphere">
            <summary>
            Specifies the PatternFillType is sphere.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.SmallGrid">
            <summary>
            Specifies the PatternFillType is small grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LargeGrid">
            <summary>
            Specifies the PatternFillType is large grid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.SmallCheckerBoard">
            <summary>
            Specifies the PatternFillType is small checker board.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.LargeCheckerBoard">
            <summary>
            Specifies the PatternFillType is large checker board.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.OutlinedDiamond">
            <summary>
            Specifies the PatternFillType is outlined diamond.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PatternFillType.SolidDiamond">
            <summary>
            Specifies the PatternFillType is solid diamond.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.FillType">
            <summary>
            Specifies the fill type of an object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Automatic">
            <summary>
            Specifies the FillType is automatic.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Solid">
            <summary>
            Specifies the FillType is solid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Gradient">
            <summary>
            Specifies the FillType is gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Picture">
            <summary>
            Specifies the FillType is Picture.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Texture">
            <summary>
            Specifies the FillType is Texture.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.Pattern">
            <summary>
            Specifies the FillType is pattern.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FillType.None">
            <summary>
            Specifies the FillType is none.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.FontAlignmentType">
            <summary>
            Specifies the FontAlignmentType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FontAlignmentType.None">
            <summary>
            Specifies the FontAlignmentType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FontAlignmentType.Baseline">
            <summary>
            Specifies the FontAlignmentType is baseline.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FontAlignmentType.Bottom">
            <summary>
            Specifies the FontAlignmentType is bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FontAlignmentType.Top">
            <summary>
            Specifies the FontAlignmentType is top.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FontAlignmentType.Center">
            <summary>
            Specifies the FontAlignmentType is center.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.LineCapStyle">
            <summary>
            Specifies the style of line cap at the line end.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineCapStyle.None">
            <summary>
            Specifies the LineCapStyle is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineCapStyle.Round">
            <summary>
            Specifies the LineCapStyle is round.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineCapStyle.Square">
            <summary>
            Specifies the LineCapStyle is square.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineCapStyle.Flat">
            <summary>
            Specifies the LineCapStyle is flat.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.LineDashStyle">
            <summary>
            Specifies the dash style for a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.None">
            <summary>
            Specifies the LineDashStyle is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.Solid">
            <summary>
            Specifies the LineDashStyle is solid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.Dash">
            <summary>
            Specifies the LineDashStyle is dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.DashDot">
            <summary>
            Specifies the LineDashStyle is dash dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.DashDotDot">
            <summary>
            Specifies the LineDashStyle is dash dot dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.DashLongDash">
            <summary>
            Specifies the LineDashStyle is dash long dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.DashLongDashDot">
            <summary>
            Specifies the LineDashStyle is dash long dash dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.RoundDot">
            <summary>
            Specifies the LineDashStyle is round dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.SquareDot">
            <summary>
            Specifies the LineDashStyle is square dot.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineDashStyle.SystemDashDot">
            <summary>
            Specifies the LineDashStyle is system dash dot.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.LineJoinType">
            <summary>
            Specifies the type of join where two lines connects.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineJoinType.None">
            <summary>
            Specifies the LineJoinType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineJoinType.Miter">
            <summary>
            Specifies the LineJoinType is miter.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineJoinType.Round">
            <summary>
            Specifies the LineJoinType is round.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineJoinType.Bevel">
            <summary>
            Specifies the LineJoinType is bevel.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.LineStyle">
            <summary>
            Specifies the style for a line.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineStyle.Single">
            <summary>
            Specifies the LineStyle is single.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineStyle.ThickBetweenThin">
            <summary>
            Specifies the LineStyle is thick between thin.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineStyle.ThinThick">
            <summary>
            Specifies the LineStyle is thin thick.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineStyle.ThickThin">
            <summary>
            Specifies the LineStyle is thick thin.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.LineStyle.ThinThin">
            <summary>
            Specifies the LineStyle is thin thin.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.MirrorType">
            <summary>
            Specifies the MirrorType.
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.MirrorType.None">
            <summary>
            Specifies the MirrorType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.MirrorType.Horizonal">
            <summary>
            Specifies the MirrorType is horizonal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.MirrorType.Vertical">
            <summary>
            Specifies the MirrorType is vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.MirrorType.Both">
            <summary>
            Specifies the MirrorType is both.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PenAlignmentType">
            <summary>
            Specifies the PenAlignmentType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PenAlignmentType.Center">
            <summary>
            Specifies the PenAlignmentType is center.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PenAlignmentType.In">
            <summary>
            Specifies the PenAlignmentType is In.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PlaceholderSize">
            <summary>
            Specifies the predefined size types for the PlaceHolder object
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderSize.None">
            <summary>
            Specifies the PlaceholderSize is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderSize.Full">
            <summary>
            Specifies the PlaceholderSize is full.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderSize.Half">
            <summary>
            Specifies the PlaceholderSize is half.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderSize.Quarter">
            <summary>
            Specifies the PlaceholderSize is quarter.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.OleLinkType">
            <summary>
            Specifies the type of the ole object field.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleLinkType.Embed">
            <summary>
            Ole object field type is EMBED.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleLinkType.Link">
            <summary>
            Ole object field type is LINK.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.OleObjectType">
            <summary>
            Specifies the type of OLE object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.Undefined">
            <summary>
            Type is not defined.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.AdobeAcrobatDocument">
            <summary>
            Adobe Acrobat Document. File has ".pdf" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.BitmapImage">
            <summary>
            Bitmap Image. File has ".png" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.MediaClip">
            <summary>
            Media Clip.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.Equation">
            <summary>
            Equation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.GraphChart">
            <summary>
            Graph Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.Excel_97_2003_Worksheet">
            <summary>
            Excel 97-2003 Worksheet. File has ".xls" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.ExcelBinaryWorksheet">
            <summary>
            Excel Binary Worksheet. File has ".xlsb" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.ExcelChart">
            <summary>
            Excel chart. File has ".xls" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.ExcelMacroWorksheet">
            <summary>   
            Excel Macro-Enabled Worksheet. File has ".xlsm" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.ExcelWorksheet">
            <summary>
            Excel Worksheet. File has ".xlsx" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPoint_97_2003_Presentation">
            <summary>
            PowerPoint 97-2003 Presentation. File has ".ppt" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPoint_97_2003_Slide">
            <summary>
            PowerPoint 97-2003 Slide. File has ".sld" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPointMacroPresentation">
            <summary>
            PowerPoint Macro-Enabled Presentation. File has ".pptm" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPointMacroSlide">
            <summary>
            PowerPoint Macro-Enabled Slide. File has ".sldm" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPointPresentation">
            <summary>
            PowerPoint Presentation. File has ".pptx" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.PowerPointSlide">
            <summary>
            PowerPoint Slide. File has ".sldx" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.Word_97_2003_Document">
            <summary>
            Word 97-2003 Document. File has ".doc" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.WordDocument">
            <summary>
            Word Document. File has ".docx" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.WordMacroDocument">
            <summary>
            Word Macro-Enabled Document. File has ".docm" extension.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.VisioDrawing">
            <summary>
            Visio Deawing.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.MIDISequence">
            <summary>
            MIDI Sequence.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenDocumentPresentation">
            <summary>
            OpenDocument Presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenDocumentSpreadsheet">
            <summary>
            OpenDocument Spreadsheet.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenDocumentText">
            <summary>
            OpenDocument Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenOfficeSpreadsheet1_1">
            <summary>
            OpenOffice.org 1.1 Spreadsheet.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenOfficeText_1_1">
            <summary>
            OpenOffice.org 1.1 Text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.Package">
            <summary>
            Package.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.VideoClip">
            <summary>
            Video Clip.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.WaveSound">
            <summary>
            Wave Sound.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.WordPadDocument">
            <summary>
            WordPad Document.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenOfficeSpreadsheet">
            <summary>
            OpenOffice spreadsheet.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.OleObjectType.OpenOfficeText">
            <summary>
            OpenOffice Text.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.RectangleAlignmentType">
            <summary>
            Specifies the horizontal alignment for the rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.Bottom">
            <summary>
            Specifies the RectangleAlignmentType is bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.BottomLeft">
            <summary>
            Specifies the RectangleAlignmentType is bottom left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.BottomRight">
            <summary>
            Specifies the RectangleAlignmentType is bottom right.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.Center">
            <summary>
            Specifies the RectangleAlignmentType is center.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.Left">
            <summary>
            Specifies the RectangleAlignmentType is left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.Right">
            <summary>
            Specifies the RectangleAlignmentType is right.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.Top">
            <summary>
            Specifies the RectangleAlignmentType is top.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.TopLeft">
            <summary>
            Specifies the RectangleAlignmentType is top left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RectangleAlignmentType.TopRight">
            <summary>
            Specifies the RectangleAlignmentType is top right.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.HorizontalAlignmentType">
            <summary>
            Specifies the horizontal alignment of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.None">
            <summary>
            Specifies the HorizontalAlignmentType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.Left">
            <summary>
            Specifies the HorizontalAlignmentType is left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.Center">
            <summary>
            Specifies the HorizontalAlignmentType is center.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.Right">
            <summary>
            Specifies the HorizontalAlignmentType is right.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.Justify">
            <summary>
            Specifies the HorizontalAlignmentType is justify.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignmentType.Distributed">
            <summary>
            Specifies the HorizontalAlignmentType is distributed.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.HorizontalAlignment">
            <summary>
            Specifies the HorizontalAlignment.
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.None">
            <summary>
            Specifies the HorizontalAlignment is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.Left">
            <summary>
            Specifies the HorizontalAlignment is left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.Center">
            <summary>
            Specifies the HorizontalAlignment is center.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.Right">
            <summary>
            Specifies the HorizontalAlignment is right.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.Justify">
            <summary>
            Specifies the HorizontalAlignment is justify.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.Distributed">
            <summary>
            Specifies the HorizontalAlignment is distributed.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.JustifyLow">
            <summary>
            Specifies the HorizontalAlignment is justify low.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HorizontalAlignment.ThaiDistributed">
            <summary>
            Specifies the HorizontalAlignment is Thai Distributed.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.VerticalAlignmentType">
            <summary>
            Specifies the vertical alignment of the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignmentType.None">
            <summary>
            Specifies the VerticalAlignmentType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignmentType.Top">
            <summary>
            Specifies the VerticalAlignmentType is top.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignmentType.Middle">
            <summary>
            Specifies the VerticalAlignmentType is middle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignmentType.Bottom">
            <summary>
            Specifies the VerticalAlignmentType is bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.None">
            <summary>
            Specifies the VerticalAlignmentType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.Top">
            <summary>
            Specifies the VerticalAlignmentType is top.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.Middle">
            <summary>
            Specifies the VerticalAlignmentType is middle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.Bottom">
            <summary>
            Specifies the VerticalAlignmentType is bottom.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.Justify">
            <summary>
            Specifies the VerticalAlignmentType is justify.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.VerticalAlignment.Distributed">
            <summary>
            Specifies the VerticalAlignmentType is distributed.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TabAlignmentType">
            <summary>
            Specifies the TabAlignmentType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TabAlignmentType.None">
            <summary>
            Specifies the TabAlignmentType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TabAlignmentType.Left">
            <summary>
            Specifies the TabAlignmentType is left.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TabAlignmentType.Center">
            <summary>
            Specifies the TabAlignmentType is center.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TabAlignmentType.Right">
            <summary>
            Specifies the TabAlignmentType is right.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TabAlignmentType.Decimal">
            <summary>
            Specifies the TabAlignmentType is decimal.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextCapsType">
            <summary>
            Specifies the TextCap types.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextCapsType.None">
            <summary>
            Specifies the TextCapsType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextCapsType.Small">
            <summary>
            Specifies the TextCapsType is small.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextCapsType.All">
            <summary>
            Specifies the TextCapsType is All.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextOrientationType">
            <summary>
            Specifies the TextOrientationType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOrientationType.NoRotation">
            <summary>
            Specifies the TextOrientationType is no rotation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOrientationType.ClockWise">
            <summary>
            Specifies the TextOrientationType is clock wise.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOrientationType.CounterClockWise">
            <summary>
            Specifies the TextOrientationType is counter clock wise.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOrientationType.TopToBottom">
            <summary>
            Specifies the TextOrientationType is top to bottom.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextOverflowType">
            <summary>
            Specifies the TextOverflowType.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOverflowType.None">
            <summary>
            Specifies the TextOverflowType is None.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOverflowType.Clip">
            <summary>
            Specifies the TextOverflowType is clip.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOverflowType.Ellipsis">
            <summary>
            Specifies the TextOverflowType is ellipsis.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextOverflowType.Overflow">
            <summary>
            Specifies the TextOverflowType is overflow.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextStrikethroughType">
            <summary>
            Specifies the types of strike through options applied for text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextStrikethroughType.None">
            <summary>
            Specifies the TextStrikethroughType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextStrikethroughType.Single">
            <summary>
            Specifies the TextStrikethroughType is single.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextStrikethroughType.Double">
            <summary>
            Specifies the TextStrikethroughType is double.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextUnderlineType">
            <summary>
            Specifies the types of underline options applied to the text.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.None">
            <summary>
            Specifies the TextUnderlineType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Single">
            <summary>
            Specifies the TextUnderlineType is single.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Double">
            <summary>
            Specifies the TextUnderlineType is double.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Dash">
            <summary>
            Specifies the TextUnderlineType is dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DashDotDotHeavy">
            <summary>
            Specifies the TextUnderlineType is dash dot dot heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DashDotHeavy">
            <summary>
            Specifies the TextUnderlineType is dash dot heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DashedHeavy">
            <summary>
            Specifies the TextUnderlineType is dashed heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DashLong">
            <summary>
            Specifies the TextUnderlineType is dash long.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DashLongHeavy">
            <summary>
            Specifies the TextUnderlineType is dash long heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DotDash">
            <summary>
            Specifies the TextUnderlineType is dot dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DotDotDash">
            <summary>
            Specifies the TextUnderlineType is dot dot dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Dotted">
            <summary>
            Specifies the TextUnderlineType is dotted.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.DottedHeavy">
            <summary>
            Specifies the TextUnderlineType is dotted heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Heavy">
            <summary>
            Specifies the TextUnderlineType is heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.Wave">
            <summary>
            Specifies the TextUnderlineType is wave.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.WavyDouble">
            <summary>
            Specifies the TextUnderlineType is wavy double.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderlineType.WavyHeavy">
            <summary>
            Specifies the TextUnderlineType is wavy heavy.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextUnderline">
            <summary>
            Specifies the type of underline for text
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.None">
            <summary>
            Specifies the TextUnderlineType is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Single">
            <summary>
            Specifies the TextUnderlineType is single.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Double">
            <summary>
            Specifies the TextUnderlineType is double.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Dash">
            <summary>
            Specifies the TextUnderlineType is dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DashDotDotHeavy">
            <summary>
            Specifies the TextUnderlineType is dash dot dot heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DashDotHeavy">
            <summary>
            Specifies the TextUnderlineType is dash dot heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DashedHeavy">
            <summary>
            Specifies the TextUnderlineType is dashed heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DashLong">
            <summary>
            Specifies the TextUnderlineType is dash long.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DashLongHeavy">
            <summary>
            Specifies the TextUnderlineType is dash long heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DotDash">
            <summary>
            Specifies the TextUnderlineType is dot dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DotDotDash">
            <summary>
            Specifies the TextUnderlineType is dot dot dash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Dotted">
            <summary>
            Specifies the TextUnderlineType is dotted.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.DottedHeavy">
            <summary>
            Specifies the TextUnderlineType is dotted heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Heavy">
            <summary>
            Specifies the TextUnderlineType is heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Wave">
            <summary>
            Specifies the TextUnderlineType is wave.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.WavyDouble">
            <summary>
            Specifies the TextUnderlineType is wavy double.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.WavyHeavy">
            <summary>
            Specifies the TextUnderlineType is wavy heavy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextUnderline.Words">
            <summary>
            Specifies the TextUnderlineType is words.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextureFillType">
            <summary>
            Specifies the predefined types of TextureFill.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.BlueTissuePaper">
            <summary>
            Specifies the TextureFillType is blue tissue paper.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Bouquet">
            <summary>
            Specifies the TextureFillType is bouquet.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.BrownMarble">
            <summary>
            Specifies the TextureFillType is brown marble.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Canvas">
            <summary>
            Specifies the TextureFillType is canvas.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Cork">
            <summary>
            Specifies the TextureFillType is cork.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Denim">
            <summary>
            Specifies the TextureFillType is denim.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.FishFossil">
            <summary>
            Specifies the TextureFillType is fish fossil.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Granite">
            <summary>
            Specifies the TextureFillType is granite.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.GreenMarble">
            <summary>
            Specifies the TextureFillType is green marble.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.MediumWood">
            <summary>
            Specifies the TextureFillType is medium wood.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Newsprint">
            <summary>
            Specifies the TextureFillType is newsprint.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Oak">
            <summary>
            Specifies the TextureFillType is oak.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.PaperBag">
            <summary>
            Specifies the TextureFillType is paper bag.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Papyrus">
            <summary>
            Specifies the TextureFillType is papyrus.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Parchment">
            <summary>
            Specifies the TextureFillType is parchment.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.PinkTissuePaper">
            <summary>
            Specifies the TextureFillType is pink tissue paper.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.PurpleMesh">
            <summary>
            Specifies the TextureFillType is purple mesh.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.RecycledPaper">
            <summary>
            Specifies the TextureFillType is recycled paper.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Sand">
            <summary>
            Specifies the TextureFillType is sand.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Stationery">
            <summary>
            Specifies the TextureFillType is stationery.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Walnut">
            <summary>
            Specifies the TextureFillType is walnut.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.WaterDroplets">
            <summary>
            Specifies the TextureFillType is water droplets.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.WhiteMarble">
            <summary>
            Specifies the TextureFillType is white marble.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.WovenMat">
            <summary>
            Specifies the TextureFillType is woven mat.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextureFillType.Unknown">
            <summary>
            Specifies the TextureFillType is unknown.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextDirectionType">
            <summary>
            Specifies the type of text direction.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirectionType.Horizontal">
            <summary>
            Specifies the TextDirectionType is horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirectionType.Vertical">
            <summary>
            Specifies the TextDirectionType is vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirectionType.Vertical270">
            <summary>
            Specifies the TextDirectionType is vertical270.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirectionType.WordArtVertical">
            <summary>
            Specifies the TextDirectionType is word art vertical.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TextDirection">
            <summary>
            Specifies the TextDirection.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.Horizontal">
            <summary>
            Specifies the TextDirection is horizontal.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.Vertical">
            <summary>
            Specifies the TextDirection is vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.Vertical270">
            <summary>
            Specifies the TextDirection is vertical270.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.WordArtVertical">
            <summary>
            Specifies the TextDirection is word art vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.EastAsianVertical">
            <summary>
            Specifies the TextDirection is east asian vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.MongolianVertical">
            <summary>
            Specifies the TextDirection is mongolian vertical.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TextDirection.WordArtRightToLeft">
            <summary>
            Specifies the TextDirection is word art right to left.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BlackWhiteMode">
            <summary>
            Specifies the Black White Mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.None">
            <summary>
            Specifies the Black White Mode is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.Clear">
            <summary>
            Specifies the Black White Mode is clear.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.Auto">
            <summary>
            Specifies the Black White Mode is automatic.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.Gray">
            <summary>
            Specifies the Black White Mode is gray.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.LightGray">
            <summary>
            Specifies the Black White Mode is light gray.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.InverseGray">
            <summary>
            Specifies the Black White Mode is inverse gray.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.GrayWhite">
            <summary>
            Specifies the Black White Mode is gray white.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.BlackGray">
            <summary>
            Specifies the Black White Mode is black gray.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.BlackWhite">
            <summary>
            Specifies the Black White Mode is black white.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.Black">
            <summary>
            Specifies the Black White Mode is black.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.White">
            <summary>
            Specifies the Black White Mode is white.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BlackWhiteMode.Hidden">
            <summary>
            Specifies the Black White Mode is hidden.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ColorMode">
            <summary>
            Specifies the ColorMode.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Tint">
            <summary>
            Specifies the ColorMode is tint.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Shade">
            <summary>
            Specifies the ColorMode is shade.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Alpha">
            <summary>
            Specifies the ColorMode is alpha.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.AlphaMod">
            <summary>
            Specifies the ColorMode is alpha mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.AlphaOff">
            <summary>
            Specifies the ColorMode is alpha off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Red">
            <summary>
            Specifies the ColorMode is red.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.RedMod">
            <summary>
            Specifies the ColorMode is red mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.RedOff">
            <summary>
            Specifies the ColorMode is red off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Green">
            <summary>
            Specifies the ColorMode is green.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.GreenMod">
            <summary>
            Specifies the ColorMode is green mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.GreenOff">
            <summary>
            Specifies the ColorMode is green off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Blue">
            <summary>
            Specifies the ColorMode is blue.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.BlueMod">
            <summary>
            Specifies the ColorMode is blue mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.BlueOff">
            <summary>
            Specifies the ColorMode is blue off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Hue">
            <summary>
            Specifies the ColorMode is hue.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.HueMod">
            <summary>
            Specifies the ColorMode is hue mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.HueOff">
            <summary>
            Specifies the ColorMode is hue off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Sat">
            <summary>
            Specifies the ColorMode is sat.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.SatMod">
            <summary>
            Specifies the ColorMode is sat mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.SatOff">
            <summary>
            Specifies the ColorMode is sat off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Lum">
            <summary>
            Specifies the ColorMode is lum.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.LumMod">
            <summary>
            Specifies the ColorMode is lum mod.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.LumOff">
            <summary>
            Specifies the ColorMode is lum off.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Gamma">
            <summary>
            Specifies the ColorMode is gamma.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.InvGamma">
            <summary>
            Specifies the ColorMode is inv gamma.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Comp">
            <summary>
            Specifies the ColorMode is comp.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Gray">
            <summary>
            Specifies the ColorMode is gray.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ColorMode.Inv">
            <summary>
            Specifies the ColorMode is inv.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.DrawingType">
            <summary>
            Specifies the Drawing types.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.None">
            <summary>
            Specifies the Drawing types is none.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.TextBox">
            <summary>
            Specifies the Drawing types is TextBox.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.PlaceHolder">
            <summary>
            Specifies the Drawing types is PlaceHolder.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.Table">
            <summary>
            Specifies the Drawing types is Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.Chart">
            <summary>
            Specifies the Drawing types is Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.SmartArt">
            <summary>
            Specifies the Drawing type is SmartArt.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.DrawingType.OleObject">
            <summary>
            Specifies the Drawing type is OleObject.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PathShapeType">
            <summary>
            Specifies the path shape types.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PathShapeType.Circle">
            <summary>
            Specifies the path shape types is circle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PathShapeType.Rectangle">
            <summary>
            Specifies the path shape types is rectangle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PathShapeType.Shape">
            <summary>
            Specifies the path shape types is shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ShapeType">
            <summary>
            Specifies the shape types.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.Sp">
            <summary>
            Specifies the shape types is Sp.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.GrpSp">
            <summary>
            Specifies the shape types is GRP sp.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.GraphicFrame">
            <summary>
            Specifies the shape types is graphic frame.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.CxnSp">
            <summary>
            Specifies the shape types is CXN sp.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.Pic">
            <summary>
            Specifies the shape types is pic.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.ContentPart">
            <summary>
            Specifies the shape types is content part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.AlternateContent">
            <summary>
            Specifies the shape types is alternate content.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.Chart">
            <summary>
            Specifies the shape types is Chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ShapeType.Point">
            <summary>
            Specifies the smart art point shape. Used only for smart art.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IFill">
            <summary>
            Represents the fill format options of the object.
            </summary>
            <remarks>
            A fill format can have a solid, gradient, pattern, texture type.
            </remarks>
        </member>
        <member name="P:Syncfusion.Presentation.IFill.FillType">
             <summary>
             Gets or sets the <see cref="P:Syncfusion.Presentation.IFill.FillType"/> of the object.
             </summary>
             <example>
             <code lang="CS">
             //Open a presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add();
             //Get the fill of slide background
             IFill fill = slide.Background.Fill;
             //Set the fill type
             fill.FillType = FillType.Solid;
             //Set the fill color
             fill.SolidFill.Color = ColorObject.Red;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open a presentation
            Dim presentation__1 As IPresentation = Presentation.Open("Template.pptx")
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add()
            'Get the fill of slide background
            Dim fill As IFill = slide.Background.Fill
            'Set the fill type
            fill.FillType = FillType.Solid
            'Set the fill color
            fill.SolidFill.Color = ColorObject.Red
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFill.GradientFill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IGradientFill"/> instance. Read-only.
             </summary>
             <value>
             The gradient fill.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220);
             //Retrieve fill from shape
             IFill fill = shape.Fill;
             //Set gradient fill to the shape
             fill.FillType = FillType.Gradient;
             //Retrieve the gradient fill from the shape
             IGradientFill gradientFill = fill.GradientFill;           
             //Add the first gradient stop.
             gradientFill.GradientStops.Add();
             //Add the second gradient stop.
             gradientFill.GradientStops.Add();
             //Save the presentation
             presentation.Save("GradientFill.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add shape to slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220)
            'Retrieve fill from shape
            Dim fill As IFill = shape.Fill
            'Set gradient fill to the shape
            fill.FillType = FillType.Gradient
            'Retrieve the gradient fill from the shape
            Dim gradientFill As IGradientFill = fill.GradientFill
            'Add the first gradient stop.
            gradientFill.GradientStops.Add()
            'Add the second gradient stop.
            gradientFill.GradientStops.Add()
            'Save the presentation
            presentation__1.Save("GradientFill.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFill.PatternFill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IPatternFill"/> instance. Read-only.
             </summary>
             <value>
             The pattern fill.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220);
             //Retrieve fill from shape
             IFill fill = shape.Fill;
             //Set pattern fill type to shape
             fill.FillType = FillType.Pattern;
             //Create instance to hold pattern fill properties
             IPatternFill patternFill = fill.PatternFill;
             //Set the pattern type
             patternFill.Pattern = PatternFillType.DashedDownwardDiagonal;
             //Set back color for the pattern
             patternFill.BackColor = ColorObject.PaleGreen;
             //Set fore color for the pattern
             patternFill.ForeColor = ColorObject.Blue;
             //Save the presentation
             presentation.Save("PatternFill.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add shape to slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220)
            'Retrieve fill from shape
            Dim fill As IFill = shape.Fill
            'Set pattern fill type to shape
            fill.FillType = FillType.Pattern
            'Create instance to hold pattern fill properties
            Dim patternFill As IPatternFill = fill.PatternFill
            'Set the pattern type
            patternFill.Pattern = PatternFillType.DashedDownwardDiagonal
            'Set back color for the pattern
            patternFill.BackColor = ColorObject.PaleGreen
            'Set fore color for the pattern
            patternFill.ForeColor = ColorObject.Blue
            'Save the presentation
            presentation__1.Save("PatternFill.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFill.SolidFill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ISolidFill"/> instance. Read-only.
             </summary>
             <value>
             The solid fill.
             </value>
             <example>
             <code lang="CS">
             //Open a presentation.
             IPresentation presentation = Presentation.Open("Template.pptx");
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add();
             //Get the fill of slide background
             IFill fill = slide.Background.Fill;
             //Set the fill type
             fill.FillType = FillType.Solid;
             //Set the fill color
             fill.SolidFill.Color = ColorObject.Red;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open a presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Template.pptx")
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add()
            'Get the fill of slide background
            Dim fill As IFill = slide.Background.Fill
            'Set the fill type
            fill.FillType = FillType.Solid
            'Set the fill color
            fill.SolidFill.Color = ColorObject.Red
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFill.PictureFill">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.IPictureFill"/> instance. Read-only.
            </summary>
            <value>
            The picture fill.
            </value>
        </member>
        <member name="T:Syncfusion.Presentation.IGradientFill">
            <summary>
            Represents the gradient type fill format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientFill.GradientStops">
             <summary>
             Gets the gradient stop collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             slide.Background.Fill.FillType = FillType.Gradient;
             //Retrieve the gradient fill from the shape
             IGradientFill gradientFill = slide.Background.Fill.GradientFill;
             //Add a gradient stop.
             gradientFill.GradientStops.Add();
             //Retrieve gradient stops, it is read only
             IGradientStops stops = gradientFill.GradientStops;
             //Add gradient stop with color 
             stops.Add().Color = ColorObject.FromArgb(13, 34, 89, 32);
             //Add gradient stop with position
             stops.Add().Position = 3.5F;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            slide.Background.Fill.FillType = FillType.Gradient
            'Retrieve the gradient fill from the shape
            Dim gradientFill As IGradientFill = slide.Background.Fill.GradientFill
            'Add a gradient stop.
            gradientFill.GradientStops.Add()
            'Retrieve gradient stops, it is read only
            Dim stops As IGradientStops = gradientFill.GradientStops
            'Add gradient stop with color 
            stops.Add().Color = ColorObject.FromArgb(13, 34, 89, 32)
            'Add gradient stop with position
            stops.Add().Position = 3.5F
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IGradientStop">
            <summary>
            Represents a gradient stop in the <see cref="T:Syncfusion.Presentation.IGradientFill"/> object.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStop.Color">
             <summary>
             Gets or sets the <see cref="T:Syncfusion.Presentation.IColor"/> structure for the gradient stop.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance for gradient stop - 1
             IGradientStop gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 2.4F;           
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Create instance for gradient stop - 2 
             IGradientStop _gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             _gradStop.Position = 5F;
             //Set color for gradient stop 
             _gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance for gradient stop - 1
            Dim gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Create instance for gradient stop - 2 
            Dim _gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            _gradStop.Position = 5F
            'Set color for gradient stop 
            _gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStop.Position">
             <summary>
             Gets or sets the gradient stop position. The position ranges from 0 to 100.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance for gradient stop - 1
             IGradientStop gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 2.4F;           
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Create instance for gradient stop - 2 
             IGradientStop _gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             _gradStop.Position = 5F;
             //Set color for gradient stop 
             _gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance for gradient stop - 1
            Dim gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Create instance for gradient stop - 2 
            Dim _gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            _gradStop.Position = 5F
            'Set color for gradient stop 
            _gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStop.Transparency">
             <summary>
             Gets or sets the transparency of the gradient stop.
             The value of the transparency ranges from 0 to 100.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance for gradient stop - 1
             IGradientStop gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 2.4F;           
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
              //Set transparency of gradient stop
             gradStop.Transparency = 57;
             //Create instance for gradient stop - 2 
             IGradientStop _gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             _gradStop.Position = 5F;
             //Set color for gradient stop 
             _gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance for gradient stop - 1
            Dim gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Set transparency of gradient stop
            gradStop.Transparency = 57
            'Create instance for gradient stop - 2 
            Dim _gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            _gradStop.Position = 5F
            'Set color for gradient stop 
            _gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStop.Brightness">
             <summary>
             Gets the brightness of the gradient stop. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance for gradient stop - 1
             IGradientStop gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 2.4F;           
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Create instance for gradient stop - 2 
             IGradientStop _gradStop = slide.Background.Fill.GradientFill.GradientStops.Add();
             //Set position for gradient stop 
             _gradStop.Position = 5F;
             //Set color for gradient stop 
             _gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Get the brightness of gradient stop - read only.
             float brightness = _gradStop.Brightness;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance for gradient stop - 1
            Dim gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Create instance for gradient stop - 2 
            Dim _gradStop As IGradientStop = slide.Background.Fill.GradientFill.GradientStops.Add()
            'Set position for gradient stop 
            _gradStop.Position = 5F
            'Set color for gradient stop 
            _gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Get the brightness of gradient stop - read only.
            Dim brightness As Single = _gradStop.Brightness
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IGradientStops">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Add">
             <summary>
             Adds a gradient stop at the end of the collection.
             </summary>
             <remarks>Minimum of 2 gradient stops must be added while using gradient type fill.</remarks>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Gets a single gradient stop from the collection
             IGradientStop gradStop = gradientStops[0];
             //Set position for gradient stop 
             gradStop.Position = 2.4F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Gets a single gradient stop from the collection
            Dim gradStop As IGradientStop = gradientStops(0)
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Add(Syncfusion.Presentation.IGradientStop)">
             <summary>
             Adds the specified gradient stop object at the end of the collection.
             Minimum of 2 gradient stops must be added while using gradient type fill.
             </summary>
             <param name="gradientStop">Represents an gradient stop instance to be added.</param>
             <returns>Returns the zero-based index of the gradient stop object within collection.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Gets a single gradient stop from the collection
             IGradientStop gradStop = gradientStops[0];
             //Set position for gradient stop 
             gradStop.Position = 2.4F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Add the gradient stop to collection
             gradientStops.Add(gradStop);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Gets a single gradient stop from the collection
            Dim gradStop As IGradientStop = gradientStops(0)
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Add the gradient stop to collection
            gradientStops.Add(gradStop)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Insert(System.Int32,Syncfusion.Presentation.IGradientStop)">
             <summary>
             Inserts an <see cref="T:Syncfusion.Presentation.IGradientStop"/> item into the gradient stop collection at the specified index.
             </summary>
             <param name="index">The zero-based index value to insert the specified gradient stop item.</param>
             <param name="item">The gradient stop item to insert.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops; 
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Add a gradient stop to the gradient stops collection
             IGradientStop gradStop = gradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 2.4F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Add the gradient stop to collection
             gradientStops.Add(gradStop);
             //Insert a gradient stop into the collection
             gradientStops.Insert(1, gradStop);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Add a gradient stop to the gradient stops collection
            Dim gradStop As IGradientStop = gradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Add the gradient stop to collection
            gradientStops.Add(gradStop)
            'Insert a gradient stop into the collection
            gradientStops.Insert(1, gradStop)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the gradient stop collection.
             </summary>
             <param name="index">The zero-based index value to remove the specified gradient stop item.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Remove the gradient stop from specific index
             gradientStops.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Remove the gradient stop from specific index
            gradientStops.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Remove(Syncfusion.Presentation.IGradientStop)">
             <summary>
             Removes the first occurrence of a specified <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance from the gradient stop collection.
             </summary>
             <param name="item">The gradient stop instance to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Create instance for gradient stop 
             IGradientStop gradStop = gradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 5F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Remove a gradient stop 
             gradientStops.Remove(gradStop);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Create instance for gradient stop 
            Dim gradStop As IGradientStop = gradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 5F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Remove a gradient stop 
            gradientStops.Remove(gradStop)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.IndexOf(Syncfusion.Presentation.IGradientStop)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance within the collection.
             </summary>
             <param name="item">The <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance to locate.</param>
             <returns>Returns the zero-based index of the first occurrence of <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Gets a single gradient stop from the collection
             IGradientStop gradStop = gradientStops[0];
             //Set position for gradient stop 
             gradStop.Position = 2.4F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Add the gradient stop to collection
             gradientStops.Add(gradStop);
             //Get the index of gradient stop from the collection
             int index = gradientStops.IndexOf(gradStop);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Gets a single gradient stop from the collection
            Dim gradStop As IGradientStop = gradientStops(0)
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Add the gradient stop to collection
            gradientStops.Add(gradStop)
            'Get the index of gradient stop from the collection
            Dim index As Integer = gradientStops.IndexOf(gradStop)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Clear">
             <summary>
             Removes all the elements from gradient stop collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Clears the collection
             gradientStops.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.///Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Clears the collection
            gradientStops.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGradientStops.Add(Syncfusion.Presentation.IColor,System.Single)">
             <summary>
             Adds a gradient stop at the specified position.
             Minimum of 2 gradient stops must be added while using gradient type fill.
             </summary>
             <param name="rgb">The color of gradient stop.</param>
             <param name="position">The position of the gradient stop.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStops.Count">
             <summary>
             Gets the number of elements in the gradient stop collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Create instance for gradient stop 
             IGradientStop gradStop = gradientStops.Add();
             //Set position for gradient stop 
             gradStop.Position = 5F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(20, 106, 120);
             //Get the count of gradient stops added, read only
             int totalGradientStops = gradientStops.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Create instance for gradient stop 
            Dim gradStop As IGradientStop = gradientStops.Add()
            'Set position for gradient stop 
            gradStop.Position = 5F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(20, 106, 120)
            'Get the count of gradient stops added, read only
            Dim totalGradientStops As Integer = gradientStops.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGradientStops.Item(System.Int32)">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance at specified index from the gradient stop collection. Read-only.
             </summary>
             <value>
             The <see cref="T:Syncfusion.Presentation.IGradientStop"/>.
             </value>
             <param name="index">Determines the index of the gradient stop.</param>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.IGradientStop"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Set gradient fill to the slide background
             slide.Background.Fill.FillType = FillType.Gradient;
             //Create instance to hold all the gradient stop
             IGradientStops gradientStops = slide.Background.Fill.GradientFill.GradientStops;
             //Add a gradient stop to the gradient stops collection
             gradientStops.Add();
             //Add a gradient stop by specifying color and position
             gradientStops.Add(ColorObject.Crimson, 1.1F);
             //Gets a single gradient stop from the collection
             IGradientStop gradStop = gradientStops[0];
             //Set position for gradient stop 
             gradStop.Position = 2.4F;
             //Set color for gradient stop 
             gradStop.Color = ColorObject.FromArgb(23, 156, 90);
             //Add the gradient stop to collection
             gradientStops.Add(gradStop);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Set gradient fill to the slide background
            slide.Background.Fill.FillType = FillType.Gradient
            'Create instance to hold all the gradient stop
            Dim gradientStops As IGradientStops = slide.Background.Fill.GradientFill.GradientStops
            'Add a gradient stop to the gradient stops collection
            gradientStops.Add()
            'Add a gradient stop by specifying color and position
            gradientStops.Add(ColorObject.Crimson, 1.1F)
            'Gets a single gradient stop from the collection
            Dim gradStop As IGradientStop = gradientStops(0)
            'Set position for gradient stop 
            gradStop.Position = 2.4F
            'Set color for gradient stop 
            gradStop.Color = ColorObject.FromArgb(23, 156, 90)
            'Add the gradient stop to collection
            gradientStops.Add(gradStop)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IGroupShape">
            <summary>
            Represents the group shape in a slide.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IGroupShape.Shapes">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IShapes"/> instance that represents all the elements within the group shape.
             </summary>
             <value>
             The shapes.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a group shape to the slide
             IGroupShape groupShape = slide.GroupShapes.AddGroupShape(12, 12, 400, 400);
             //Create instance to hold all the shapes in a group shape
             IShapes shapes = groupShape.Shapes;
             //Add auto shapes to group shape
             shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120);
             shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30);
             //Set description for the group shape
             groupShape.Description = "This is a groupShape";
             //Set title for the group shape
             groupShape.Title = "Group Shape";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a group shape to the slide
            Dim groupShape As IGroupShape = slide.GroupShapes.AddGroupShape(12, 12, 400, 400)
            'Create instance to hold all the shapes in a group shape
            Dim shapes As IShapes = groupShape.Shapes
            'Add auto shapes to group shape
            shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120)
            shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30)
            'Set description for the group shape
            groupShape.Description = "This is a groupShape"
            'Set title for the group shape
            groupShape.Title = "Group Shape"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGroupShape.Fill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFill"/> instance that contains fill formatting properties. Read-only.
             </summary>
             <value>
             The fill.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a group shape to the slide
             IGroupShape groupShape = slide.GroupShapes.AddGroupShape(12, 12, 400, 400);
             //Create instance to hold all the shapes in a group shape
             IShapes shapes = groupShape.Shapes;
             //Add auto shapes to group shape
             shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120);
             shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30);
             //Get the fill of a group shape
             IFill fill = groupShape.Fill;
             //Set the fill type for group shape
             fill.FillType = FillType.Solid;
             //Set the color for solid fill
             fill.SolidFill.Color = ColorObject.Red;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a group shape to the slide
            Dim groupShape As IGroupShape = slide.GroupShapes.AddGroupShape(12, 12, 400, 400)
            'Create instance to hold all the shapes in a group shape
            Dim shapes As IShapes = groupShape.Shapes
            'Add auto shapes to group shape
            shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120)
            shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30)
            'Get the fill of a group shape
            Dim fill As IFill = groupShape.Fill
            'Set the fill type for group shape
            fill.FillType = FillType.Solid
            'Set the color for solid fill
            fill.SolidFill.Color = ColorObject.Red
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IGroupShapes">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance in a slide.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IGroupShapes.AddGroupShape(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Creates a group shape and adds the group shape to the shape collection.
             </summary>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape = groupShapes.AddGroupShape(12, 12, 300, 350);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGroupShapes.IndexOf(Syncfusion.Presentation.IGroupShape)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance within the collection.
             </summary>
             <param name="groupShape">The IGroupShape instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of the specified group shape within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //Get the index of added group shape
             int index = groupShapes.IndexOf(groupShape1);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'Get the index of added group shape
            Dim index As Integer = groupShapes.IndexOf(groupShape1)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGroupShapes.Remove(Syncfusion.Presentation.IGroupShape)">
             <summary>
             Removes the first occurrence of a specified <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance from the group shape collection.
             </summary>
             <param name="groupShape">The group shape object to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //Remove a group shape instance from collection
             groupShapes.Remove(groupShape2);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'Remove a group shape instance from collection
            groupShapes.Remove(groupShape2)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IGroupShapes.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the group shape collection.
             </summary>
             <param name="index">The zero-based index of the group shape object to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //Remove an item from specific index.
             groupShapes.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'Remove an item from specific index.
            groupShapes.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGroupShapes.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance from the collection. Read-only.
             </summary>
             <value>
             The <see cref="T:Syncfusion.Presentation.IGroupShape"/>.
             </value>
             <param name="index">Index from the collection.</param>
             <returns>Returns the particular group shape based on the index.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //To access a specific group shape in the collection
             IGroupShape groupShape = groupShapes[0];
             //Set the description
             groupShape.Description = "First group shape";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'To access a specific group shape in the collection
            Dim groupShape As IGroupShape = groupShapes(0)
            'Set the description
            groupShape.Description = "First group shape"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IGroupShapes.Count">
             <summary>
             Gets the number of elements in the group shape collection. Read-only.
             </summary>
             <value>
             The count.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for group shapes
             IGroupShapes groupShapes = slide.GroupShapes;
             //Add group shape to the collection
             IGroupShape groupShape1 = groupShapes.AddGroupShape(12, 12, 300, 350);
             IGroupShape groupShape2 = groupShapes.AddGroupShape(34, 50, 200, 100);
             IGroupShape groupShape3 = groupShapes.AddGroupShape(70, 30, 120, 100);
             //Get the count of group shapes collection
             int count = groupShapes.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for group shapes
            Dim groupShapes As IGroupShapes = slide.GroupShapes
            'Add group shape to the collection
            Dim groupShape1 As IGroupShape = groupShapes.AddGroupShape(12, 12, 300, 350)
            Dim groupShape2 As IGroupShape = groupShapes.AddGroupShape(34, 50, 200, 100)
            Dim groupShape3 As IGroupShape = groupShapes.AddGroupShape(70, 30, 120, 100)
            'Get the count of group shapes collection
            Dim count As Integer = groupShapes.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetFileNameWithoutExtension(System.String)">
            <summary>
            Gets file name without extension from the path.
            </summary>
            <param name="strUrl">Url to get name from.</param>
            <returns>File name without extension from the path.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetExtension(System.String)">
            <summary>
            Gets the file extension from the path.
            </summary>
            <param name="fileName">Represents the file path.</param>
            <returns>Returns the file extension.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.CheckPlaceholder(Syncfusion.Presentation.IPlaceholderFormat,Syncfusion.Presentation.IPlaceholderFormat)">
            <summary>
            Checks whether the layout placeholder and the current placeholder are same.
            </summary>
            <param name="iLayoutPlaceholder">Instance of the layout placeholder</param>
            <param name="iCurrentPlaceholder">Instance of the current placeholder</param>
            <returns>Returns whether both the placeholder are same.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.CheckPlaceholder(Syncfusion.Presentation.IPlaceholderFormat,Syncfusion.Presentation.IPlaceholderFormat,System.Boolean)">
            <summary>
            Checks whether the layout placeholder and the current placeholder are same.
            </summary>
            <param name="iLayoutPlaceholder">Instance of the layout placeholder</param>
            <param name="iCurrentPlaceholder">Instance of the current placeholder</param>
            <param name="isMasterSlide">Determines whether it is master slide or not</param>
            <returns>Returns whether the layout placeholder and the current placeholder are same.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.ToOleType(System.String)">
            <summary>
            Converts the string to "OleObjectType"
            </summary>
            <param name="oleTypeStr">The OLE type STR.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.ToString(Syncfusion.Presentation.OleObjectType,System.Boolean)">
            <summary>
            Converts the string to "OleObjectType"
            </summary>
            <param name="oleTypeStr">The OLE type STR.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetDefaultString(System.String,Syncfusion.Presentation.SlideImplementation.LayoutSlide)">
            <summary>
            Returns the color value from ColorMap dictionary.
            </summary>
            <param name="value">value</param>        
            <param name="layoutSlide">The layout slide</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetName(Syncfusion.Presentation.PlaceholderType)">
            <summary>
            Gets the name of the placeholder.
            </summary>
            <param name="placeHolderType">Represents the placeholder type.</param>
            <returns>Return the string format of the placeholder.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetPlaceHolderType(System.String)">
            <summary>
            Gets the placeholder type from string.
            </summary>
            <param name="value">Placeholder type in string format.</param>
            <returns>Returns the type of placeholder.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.GetThemeIndex(System.String,Syncfusion.Presentation.SlideImplementation.LayoutSlide)">
            <summary>
            Returns the color value from ColorMap dictionary.
            </summary>
            <param name="value">value</param>        
            <param name="layoutSlide">The layout slide</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Helper.ToString(Syncfusion.Presentation.PlaceholderType)">
            <summary>
            Converts the placeholder type to string.
            </summary>
            <param name="value">Type of the internal placeholder.</param>
            <returns>Returns the string format of the placeholder type.</returns>
        </member>
        <member name="T:Syncfusion.Drawing.NamespaceDoc">
            <summary>
            Provides access to the types used to create and manipulate images in PowerPoint Presentations.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.ImageFormat">
            <summary>
            Specifies the file format of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Unknown">
            <summary>
            Specifies the image format is unknown
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Bmp">
            <summary>
            Specifies the image format is BMP
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Emf">
            <summary>
            Specifies the image format is EMF
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Gif">
            <summary>
            Specifies the image format is GIF
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Jpeg">
            <summary>
            Specifies the image format is JPEG
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Png">
            <summary>
            Specifies the image format is PNG
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Wmf">
            <summary>
            Specifies the image format is WMF
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Icon">
            <summary>
            Specifies the image format is icon
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Exif">
            <summary>
            Specifies the image format is exif
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.MemoryBmp">
            <summary>
            Specifies the image format is memory BMP
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageFormat.Tiff">
            <summary>
            Specifies the image format is tiff
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.ImageType">
            <summary>
            Specifies the type of the image.
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageType.Metafile">
            <summary>
            Specifies the ImageType is metafile
            </summary>
        </member>
        <member name="F:Syncfusion.Drawing.ImageType.Bitmap">
            <summary>
            Specifies the ImageType is bitmap
            </summary>
        </member>
        <member name="T:Syncfusion.Drawing.Image">
            <summary>
            Represents the functionalities for using images in presentation
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.#ctor(System.IO.Stream)">
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = new Image(imageStream);
             // Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 120,100,290,200);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As New Image(imageStream)
            ' Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 120, 100, 290, 200)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfBmp">
            <summary>
            Checks if Bmp.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfEmfOrWmf">
            <summary>
            Checks if EMF or WMF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfGif">
            <summary>
            Checks if GIF.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfIcon">
            <summary>
            Checks if icon.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfJpeg">
            <summary>
            Checks if JPEG.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.CheckIfPng">
            <summary>
            Checks if PNG.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParseBmpImage">
            <summary>
            Parses the GIF image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParseEmfOrWmfImage">
            <summary>
            Parses the EMF or WMF image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParseGifImage">
            <summary>
            Parses the GIF image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParseIconImage">
            <summary>
            Parses the icon image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParseJpegImage">
            <summary>
            Parses the JPEG image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ParsePngImage">
            <summary>
            Parses the PNG image.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadInt16">
            <summary>
            Reads the int16.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadInt32">
            <summary>
            Reads the int32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadShortLe">
            <summary>
            Reads the short LE.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadString(System.Int32)">
            <summary>
            Reads the string.
            </summary>
            <param name="len">The len.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadUInt32">
            <summary>
            Reads the Uint32.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.ReadWord">
            <summary>
            Reads the word.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Drawing.Image.Reset">
            <summary>
            Resets this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.Close">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Drawing.Image.FromStream(System.IO.Stream)">
             <returns>Returns the <see cref="T:Syncfusion.Drawing.Image"/> this method creates.</returns>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             // Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Image.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            ' Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Image.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Drawing.Image.Clone">
             <summary>
             Creates an independent copy of the specified image.
             </summary>
             <returns>The <see cref="T:Syncfusion.Drawing.Image"/> this method creates.</returns>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Clone the image
             Image clonedImage = image.Clone();
             // Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(clonedImage.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Image.pptx");
             //close the presentation
             presentation.Close();        
             </code>
             <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Clone the image
            Dim clonedImage As Image = image.Clone()
            ' Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(clonedImage.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Image.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Drawing.Image.FromFile(System.String)">
             <summary>
             Creates an image from the specified file.
             </summary>
             <param name="fileName">A string that contains the name of the file from which to create the <see cref="T:Syncfusion.Drawing.Image"/>.</param>
             <returns>Returns the <see cref="T:Syncfusion.Drawing.Image"/> this method creates.</returns>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Get the image from file path
             Image image = Image.FromFile(@"image.jpg");
             // Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Image.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Get the image from file path
            Dim image As Image = Image.FromFile("image.jpg")
            ' Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Image.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.Format">
             <summary>
             Gets the image format. Read-only.
             </summary>
             <value>The image format.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the image format, read only
             ImageFormat imageFormat = image.Format;
             //Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the image format, read only
            Dim imageFormat As ImageFormat = image.Format
            'Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.Height">
             <summary>
             Gets the height of the Image. Read-only.
             </summary>
             <value>The height.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the size of image, it is read only
             int Height = image.Height;
             int width = image.Width;
             //Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the size of image, it is read only
            Dim Height As Integer = image.Height
            Dim width As Integer = image.Width
            'Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.ImageData">
             <summary>
             Gets the image data as byte array. Read-only.
             </summary>
             <value>The image data.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the image data of image
             byte[] imageData = image.ImageData;
             //Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(imageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the image data of image
            Dim imageData As Byte() = image.ImageData
            'Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(imageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.RawFormat">
             <summary>
             Gets the file format of the Image. Read-only.
             </summary>
             <value>The image format.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the image format, read only
             ImageFormat imageFormat = image.RawFormat;     
             //Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the image format, read only
            Dim imageFormat As ImageFormat = image.RawFormat
            'Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.Size">
             <summary>
             Gets the width and height of the image. Read-only.
             </summary>
             <value>The size.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the size of image, it is read only
             System.Drawing.Size size = image.Size;
             //Set the width and height of the image
             size.Width = 300;
             size.Width = 200;
             //Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 120,100,size.Width,size.Height);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the size of image, it is read only
            Dim size As System.Drawing.Size = image.Size
            'Set the width and height of the image
            size.Width = 300
            size.Width = 200
            'Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 120, 100, size.Width, size.Height)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Drawing.Image.Width">
             <summary>
             Gets the width of the Image. Read-only.
             </summary>
             <value>The width.</value>
             <example>
             <code lang="CS">
             //Create an instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Get the image from file path
             Image image = Image.FromStream(imageStream);
             //Get the size of image, it is read only
             int Height = image.Height;
             int width = image.Width;
             // Add the image to the slide by specifying position and size
             slide.Pictures.AddPicture(new MemoryStream(image.ImageData), 300, 270, 410, 250);
             //Save the presentation
             presentation.Save("Output.pptx");
             //close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance of PowerPoint presentation
            Dim presentation As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Get the image from file path
            Dim image As Image = Image.FromStream(imageStream)
            'Get the size of image, it is read only
            Dim Height As Integer = image.Height
            Dim width As Integer = image.Width
            ' Add the image to the slide by specifying position and size
            slide.Pictures.AddPicture(New MemoryStream(image.ImageData), 300, 270, 410, 250)
            'Save the presentation
            presentation.Save("Output.pptx")
            'close the presentation
            presentation.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ILineFormat">
            <summary>
            Represents the line and arrowhead formatting options.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.BeginArrowheadLength">
             <summary>
             Gets or sets the length of the arrowhead at the beginning of the specified line.
             </summary>
             <value>
             The length of the begin arrowhead.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the length of the beginning arrowhead of the line
             lineFormat.BeginArrowheadLength = ArrowheadLength.Long;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the length of the beginning arrowhead of the line
            lineFormat.BeginArrowheadLength = ArrowheadLength.[Long]
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.BeginArrowheadStyle">
             <summary>
             Gets or sets the style of the arrowhead at the beginning of the specified line.
             </summary>
             <value>
             The begin arrowhead style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the style of the beginning arrowhead of the line
             lineFormat.BeginArrowheadStyle = ArrowheadStyle.ArrowOval;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the style of the beginning arrowhead of the line
            lineFormat.BeginArrowheadStyle = ArrowheadStyle.ArrowOval
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.BeginArrowheadWidth">
             <summary>
             Gets or sets the width of the arrowhead at the beginning of the specified line.
             </summary>
             <value>
             The width of the begin arrowhead.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the width of the beginning arrowhead of the line
             lineFormat.BeginArrowheadWidth = ArrowheadWidth.Narrow;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the width of the beginning arrowhead of the line
            lineFormat.BeginArrowheadWidth = ArrowheadWidth.Narrow
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.CapStyle">
             <summary>
             Gets or sets the line cap style.
             </summary>
             <value>
             The cap style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the line cap style
             lineFormat.CapStyle = LineCapStyle.Flat;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the line cap style
            lineFormat.CapStyle = LineCapStyle.Flat
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.DashStyle">
             <summary>
             Gets or sets the line dash style.
             </summary>
             <value>
             The dash style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the line dash style
             lineFormat.DashStyle = LineDashStyle.DashLongDashDot;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the line dash style
            lineFormat.DashStyle = LineDashStyle.DashLongDashDot
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.EndArrowheadLength">
             <summary>
             Gets or sets the length of the arrowhead at the end of the specified line.
             </summary>
             <value>
             The end length of the arrowhead.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the length of the end arrowhead of the line
             lineFormat.EndArrowheadLength = ArrowheadLength.Medium;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the length of the end arrowhead of the line
            lineFormat.EndArrowheadLength = ArrowheadLength.Medium
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.EndArrowheadStyle">
             <summary>
             Gets or sets the style of the arrowhead at the end of the specified line.
             </summary>
             <value>
             The end arrowhead style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the style of the end arrowhead of the line
             lineFormat.EndArrowheadStyle = ArrowheadStyle.ArrowDiamond;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the style of the end arrowhead of the line
            lineFormat.EndArrowheadStyle = ArrowheadStyle.ArrowDiamond
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.EndArrowheadWidth">
             <summary>
             Gets or sets the width of the arrowhead at the end of the specified line.
             </summary>
             <value>
             The end width of the arrowhead.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the width of the end arrowhead of the line
             lineFormat.EndArrowheadWidth = ArrowheadWidth.Wide;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the width of the end arrowhead of the line
            lineFormat.EndArrowheadWidth = ArrowheadWidth.Wide
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.Fill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFill"/> instance that represents fill formatting options. Read-only.
             </summary>
             <value>
             The fill.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Retrieve the fill of line format
             IFill fill = lineFormat.Fill;
             //Set the fill type of line 
             fill.FillType = FillType.Solid;
             //Set the color for solid fill
             fill.SolidFill.Color = ColorObject.DeepPink;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Retrieve the fill of line format
            Dim fill As IFill = lineFormat.Fill
            'Set the fill type of line 
            fill.FillType = FillType.Solid
            'Set the color for solid fill
            fill.SolidFill.Color = ColorObject.DeepPink
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.LineJoinType">
             <summary>
             Gets or sets line join type.
             </summary>
             <value>
             The type of the line join.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the line join type
             lineFormat.LineJoinType = LineJoinType.Miter;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the line join type
            lineFormat.LineJoinType = LineJoinType.Miter
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.Style">
             <summary>
             Gets or set the line style.
             </summary>
             <value>
             The style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the line style
             lineFormat.Style = LineStyle.ThickThin;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the line style
            lineFormat.Style = LineStyle.ThickThin
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILineFormat.Weight">
             <summary>
             Gets or set the line weight, in points.
             The range of Weight is from 0 to 1584.
             </summary>
             <value>
             The weight.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance of line format from shape
             ILineFormat lineFormat = shape.LineFormat;
             //Set the weight 
             lineFormat.Weight = 17;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance of line format from shape
            Dim lineFormat As ILineFormat = shape.LineFormat
            'Set the weight 
            lineFormat.Weight = 17
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IOleObject">
            <summary>
            Represents the OLE object in the PowerPoint presentation.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.OleObject.SetLinkType(Syncfusion.Presentation.OleLinkType)">
            <summary>
            Sets the type of the OLE.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.OleObject.SetOlePicture(Syncfusion.Presentation.Drawing.Picture)">
            <summary>
            Sets the OLE picture.
            </summary>
            <param name="picture">The picture.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.OleObject.Clone">
            <summary>
            Clones the OleObject instance.
            </summary>
            <returns>Returns the cloned OleObject instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.OleObject.SetParent(Syncfusion.Presentation.SlideImplementation.BaseSlide)">
            <summary>
            Sets the baseslide parent to the current OleObject instance.
            </summary>
            <param name="newParent">Parent instance to be assigned to the current oleobject's parent.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.OleObject.ObjectType">
            <summary>
            Gets or sets the type of the OLE object.
            </summary>
            <value>The <b>string</b> that specifies the type of the OLE object.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.OleObject.OleObjectType">
            <summary>
            Gets the type of the OLE object.
            </summary>
            <value>The type of the OLE object.</value>
        </member>
        <member name="M:Syncfusion.Presentation.VmlShape.Clone">
            <summary>
            Clones the VmlShape instance.
            </summary>
            <returns>Returns the cloned VmlShape instance.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.IPatternFill">
            <summary>
            Represents the pattern type in fill format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPatternFill.BackColor">
             <summary>
             Gets or sets the back color for the pattern.
             </summary>
             <value>
             The color of the background.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220);
             //Retrieve fill from shape
             IFill fill = shape.Fill;
             //Set pattern fill type to shape
             fill.FillType = FillType.Pattern;
             //Retrieve the pattern fill 
             IPatternFill patternFill = fill.PatternFill;
             //Set back color for the pattern
             patternFill.BackColor = ColorObject.Blue;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add shape to slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220)
            'Retrieve fill from shape
            Dim fill As IFill = shape.Fill
            'Set pattern fill type to shape
            fill.FillType = FillType.Pattern
            'Retrieve the pattern fill 
            Dim patternFill As IPatternFill = fill.PatternFill
            'Set back color for the pattern
            patternFill.BackColor = ColorObject.Blue
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPatternFill.ForeColor">
             <summary>
             Gets or sets the foreground  color for the pattern.
             </summary>
             <value>
             The color of the foreground.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220);
             //Retrieve fill from shape
             IFill fill = shape.Fill;
             //Set pattern fill type to shape
             fill.FillType = FillType.Pattern;
             //Retrieve the pattern fill 
             IPatternFill patternFill = fill.PatternFill;
             //Set fore color for the pattern
             patternFill.ForeColor = ColorObject.Blue;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add shape to slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220)
            'Retrieve fill from shape
            Dim fill As IFill = shape.Fill
            'Set pattern fill type to shape
            fill.FillType = FillType.Pattern
            'Retrieve the pattern fill 
            Dim patternFill As IPatternFill = fill.PatternFill
            'Set fore color for the pattern
            patternFill.ForeColor = ColorObject.Blue
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPatternFill.Pattern">
             <summary>
             Gets of sets a pattern type of the fill format.
             </summary>
             <value>
             The pattern.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add shape to slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220);
             //Retrieve fill from shape
             IFill fill = shape.Fill;
             //Set pattern fill type to shape
             fill.FillType = FillType.Pattern;
             //Retrieve the pattern fill 
             IPatternFill patternFill = fill.PatternFill;
             //Set the pattern type
             patternFill.Pattern = PatternFillType.DashedDownwardDiagonal;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add shape to slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.BlockArc, 12, 23, 100, 220)
            'Retrieve fill from shape
            Dim fill As IFill = shape.Fill
            'Set pattern fill type to shape
            fill.FillType = FillType.Pattern
            'Retrieve the pattern fill 
            Dim patternFill As IPatternFill = fill.PatternFill
            'Set the pattern type
            patternFill.Pattern = PatternFillType.DashedDownwardDiagonal
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Presentation.Drawing.PatternFill._forecolor">
            <summary>
            Represents ForeColor color index.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPicture">
            <summary>
            Represents the image in presentation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPicture.ImageData">
             <summary>
             Gets or sets the image data as byte array.
             </summary>
             <value>
             The byte data of the image.
             </value>
             <example>
             <code lang="CS">
             //Open an existing presentation.
             IPresentation presentation = Presentation.Open("Picture.pptx");
             //Retrieve the first slide from the presentation.
             ISlide slide = presentation.Slides[0];
             //Retrieve the first picture from the slide.
             IPicture picture = slide.Pictures[0];
             //Get the new picture as stream.
             Stream pictureStream = File.Open("Image.gif", FileMode.Open);
             //Create instance for memory stream
             MemoryStream memoryStream = new MemoryStream();
             //Copy stream to memoryStream.
             pictureStream.CopyTo(memoryStream);
             //Replace the existing image with new image.
             picture.ImageData = memoryStream.ToArray();
             //Save the presentation to the file system.
             presentation.Save("ImageData.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open an existing presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Picture.pptx")
            'Retrieve the first slide from the presentation.
            Dim slide As ISlide = presentation__1.Slides(0)
            'Retrieve the first picture from the slide.
            Dim picture As IPicture = slide.Pictures(0)
            'Get the new picture as stream.
            Dim pictureStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Create instance for memory stream
            Dim memoryStream As New MemoryStream()
            'Copy stream to memoryStream.
            pictureStream.CopyTo(memoryStream)
            'Replace the existing image with new image.
            picture.ImageData = memoryStream.ToArray()
            'Save the presentation to the file system.
            presentation__1.Save("ImageData.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPicture.SvgData">
             <summary>
            Gets or sets the SVG image data as byte array. The default value is null.
             </summary>
             <returns>Returns the byte array of the SVG image.</returns>
             <example>
             <code lang="CS">
             //Open an existing presentation.
             IPresentation presDoc = Presentation.Open("Picture.pptx");
             //Retrieve the first slide from the presentation.
             ISlide slide = presDoc.Slides[0];
             //Retrieve the first picture from the slide.
             IPicture picture = slide.Pictures[0];
             //Get the new SVG image as stream.
             Stream svgStream = File.Open("Image.svg", FileMode.Open);
             //Create instance for memory stream
             MemoryStream memoryStream = new MemoryStream();
             //Copy stream to memoryStream.
             svgStream.CopyTo(memoryStream);
             //Replace the existing svg image with new image.
             picture.SvgData = memoryStream.ToArray();
             //Save the presentation to the file system.
             presDoc.Save("ImageData.pptx");
             //Close the presentation
             presDoc.Close();
             </code>
            <code lang="VB.NET">
            'Open an existing presentation.
            Dim presDoc  As IPresentation = Presentation.Open("Picture.pptx")
            'Retrieve the first slide from the presentation.
            Dim slide As ISlide = presDoc.Slides(0)
            'Retrieve the first picture from the slide.
            Dim picture As IPicture = slide.Pictures(0)
            'Get the new SVG image as stream.
            Dim svgStream As Stream = File.Open("Image.svg", FileMode.Open)
            'Create instance for memory stream
            Dim memoryStream As New MemoryStream()
            'Copy stream to memoryStream.
            svgStream.CopyTo(memoryStream)
            'Replace the existing svg image with new image.
            picture.SvgData = memoryStream.ToArray()
            'Save the presentation to the file system.
             presDoc.Save("ImageData.pptx")
            'Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPicture.ImageFormat">
             <summary>
             Gets the <see cref="P:Syncfusion.Presentation.IPicture.ImageFormat"/>.
             </summary>
             <value>
             The image format of the current image.
             </value>
             <example>
             <code lang="CS">
             //Open an existing presentation.
             IPresentation presentation = Presentation.Open("Picture.pptx");
             //Retrieve the first slide from the presentation.
             ISlide slide = presentation.Slides[0];
             //Retrieve the first picture from the slide.
             IPicture picture = slide.Pictures[0];
             //Get the new picture as stream.
             Stream pictureStream = File.Open("Image.gif", FileMode.Open);
             //Create instance for memory stream
             MemoryStream memoryStream = new MemoryStream();
             //Copy stream to memoryStream.
             pictureStream.CopyTo(memoryStream);
             //Replace the existing image with new image.
             picture.ImageData = memoryStream.ToArray();
             //Get the image format of the pictures
             Syncfusion.Drawing.ImageFormat imageFormat = picture.ImageFormat;
             //Save the presentation to the file system.
             presentation.Save("ImageData.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Open an existing presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Picture.pptx")
            'Retrieve the first slide from the presentation.
            Dim slide As ISlide = presentation__1.Slides(0)
            'Retrieve the first picture from the slide.
            Dim picture As IPicture = slide.Pictures(0)
            'Get the new picture as stream.
            Dim pictureStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Create instance for memory stream
            Dim memoryStream As New MemoryStream()
            'Copy stream to memoryStream.
            pictureStream.CopyTo(memoryStream)
            'Replace the existing image with new image.
            picture.ImageData = memoryStream.ToArray()
            'Get the image format of the pictures
            Dim imageFormat As Syncfusion.Drawing.ImageFormat = picture.ImageFormat
            'Save the presentation to the file system.
            presentation__1.Save("ImageData.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Picture.AddImage(System.IO.Stream,System.IO.Stream)">
            <summary>
            Add the svg and raster image stream
            </summary>
            <param name="svgStream">Represent the svg stream</param>
            <param name="rasterImgStream">Represent the raster image stream</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Picture.AddImageStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Add the stream of the svg and raster images.
            </summary>
            <param name="svgStreamInput">Represent the svg stream</param>
            <param name="rasterImgStreamInput">Represent the raster image stream</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Picture.SetParent(Syncfusion.Presentation.SlideImplementation.BaseSlide)">
            <summary>
            Sets the BaseSlide parent to the current picture's base instance.
            </summary>
            <param name="newParent"></param>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Picture.SvgData">
            <summary>
            Get or Set the data of the SVG picture.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPictures">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IPicture"/> in a slide. 
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IPictures.AddPicture(System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPicture"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPictures.AddPicture(System.IO.Stream,System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Creates a picture from the specified svg, its fallback image stream and adds the picture to the picture collection.
             </summary>
             <param name="svgStream">The <see cref="T:System.IO.Stream"/> instance of SVG image.</param>
             <param name="imageStream">The <see cref="T:System.IO.Stream"/> instance of fallback image.</param>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPicture"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for fallback image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Create an instance for vector image as stream
             Stream svgStream = File.Open("Image.svg", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(svgStream, imageStream, 373, 83, 200, 100);        
             //Save the presentation
             presDoc.Save("Sample.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presDoc As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for fallback image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Create an instance for vector image as stream
            Dim svgStream As Stream = File.Open("Image.svg", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(svgStream, imageStream, 373, 83, 200, 100)        
            'Save the presentation
             presDoc.Save("Sample.pptx")
            'Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPictures.IndexOf(Syncfusion.Presentation.IPicture)">
             <summary>
             Returns the index of first occurrence of the specified picture instance from the collection.
             </summary>
             <param name="picture">Represents the picture from the collection.</param>
             <returns>The zero-based index of the first occurrence of picture within the picture collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Retrieve a specific picture from the collection, read only
             IPicture picture = pictures[0];
             //Get the index of specific picture instance
             int index = pictures.IndexOf(picture);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Retrieve a specific picture from the collection, read only
            Dim picture As IPicture = pictures(0)
            'Get the index of specific picture instance
            Dim index As Integer = pictures.IndexOf(picture)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPictures.Remove(Syncfusion.Presentation.IPicture)">
             <summary>
             Removes the first occurrence of the specified picture object from the picture collection
             </summary>
             <param name="picture">Represents the picture to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Retrieve a specific picture from the collection, read only
             IPicture picture = pictures[0];
             //Remove a specific picture from collection
             pictures.Remove(picture);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Retrieve a specific picture from the collection, read only
            Dim picture As IPicture = pictures(0)
            'Remove a specific picture from collection
            pictures.Remove(picture)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPictures.RemoveAt(System.Int32)">
             <summary>
             Removes the picture from the collection.
             </summary>
             <param name="index">The zero-based index of the first occurrence of the picture within the picture collection, if found; otherwise, –1.</param>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Remove a picture using index position
             pictures.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Remove a picture using index position
            pictures.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPictures.Item(System.Int32)">
             <summary>
             Gets the picture at the specified index.
             </summary>
             <value>
             Specified index value of picture from the picture collection.
             </value>
             <param name="index">The index value of the picture collection.</param>
             <returns>
             Returns picture at the particular index.
             </returns>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Retrieve a specific picture from the collection, read only
             IPicture picture = pictures[0];
             //Set the description
             picture.Description = "My picture";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Retrieve a specific picture from the collection, read only
            Dim picture As IPicture = pictures(0)
            'Set the description
            picture.Description = "My picture"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPictures.Count">
             <summary>
             Returns the number of pictures present in the picture collection.
             </summary>
             <value>
             The total count of the picture.
             </value>
             <example>
             <code lang="CS">
             //Create an instance for PowerPoint
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold picture collection
             IPictures pictures = slide.Pictures;
             //Create an instance for image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Add picture to the picture collection
             pictures.AddPicture(imageStream, 373, 83, 200, 100);
             //Create an instance for image as stream
             Stream stream = File.Open("pptxtoimage.png", FileMode.Open);
             //Add picture to the shape collection
             pictures.AddPicture(stream, 100, 20, 200, 300);
             //Get the count of picture collection
             int count = pictures.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for PowerPoint
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold picture collection
            Dim pictures As IPictures = slide.Pictures
            'Create an instance for image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Add picture to the picture collection
            pictures.AddPicture(imageStream, 373, 83, 200, 100)
            'Create an instance for image as stream
            Dim stream As Stream = File.Open("pptxtoimage.png", FileMode.Open)
            'Add picture to the shape collection
            pictures.AddPicture(stream, 100, 20, 200, 300)
            'Get the count of picture collection
            Dim count As Integer = pictures.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.PicturesCollection.AddPicture(System.IO.Stream,System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a SVG image within the current shape
            </summary>
            <param name="svgStream">Represent the Svg Picture stream</param>
            <param name="rasterImgStream">Represent the raster Picture stream</param>
            <param name="left">Represent the left side position</param>
            <param name="top">Represent the top position</param>
            <param name="width">Represent the width</param>
            <param name="height">Represent the height</param>
            <returns>retruns a IPicture instance</returns>
        </member>
        <member name="T:Syncfusion.Presentation.Drawing.Placeholder">
            <summary>
            Defines the Placeholder properties of the IPlaceholder.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPlaceholderFormat">
            <summary>
            Represents the placeholder formatting options.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPlaceholderFormat.Type">
             <summary>
             Gets the <see cref="T:Syncfusion.Presentation.PlaceholderType"/> type. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for place holder format
             IPlaceholderFormat placeholder = shape.PlaceholderFormat;
             //Get the type of place holder format, read only
             PlaceholderType type = placeholder.Type;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for place holder format
            Dim placeholder As IPlaceholderFormat = shape.PlaceholderFormat
            'Get the type of place holder format, read only
            Dim type As PlaceholderType = placeholder.Type
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPlaceholderFormat.Name">
             <summary>
             Gets or sets the name of the place holder.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a rectangle to the slide
             IShape shape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100);
             //Create instance for place holder format
             IPlaceholderFormat placeholder = shape.PlaceholderFormat;
             //Set the name of the place holder format
             placeholder.Name = "Place holder format";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a rectangle to the slide
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Rectangle, 100, 100, 100, 100)
            'Create instance for place holder format
            Dim placeholder As IPlaceholderFormat = shape.PlaceholderFormat
            'Set the name of the place holder format
            placeholder.Name = "Place holder format"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Placeholder.GetPlaceholderType">
            <summary>
            Gets the placeholder type.
            </summary>
            <returns>Returns placeholder type.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Placeholder.SetDirection(Syncfusion.Presentation.Orientation)">
            <summary>
            Sets the orientation for the placeholder. And modifies the specified placeholder according to the orientation.
            </summary>
            <param name="orientation">Represents the orientation of the placeholder.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Placeholder.SetTypeBasedOnDirection">
            <summary>
            Sets the placeholder type based on the orientation.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Placeholder.SetPlaceholderValues(Syncfusion.Presentation.PlaceholderType,Syncfusion.Presentation.PlaceholderSize,Syncfusion.Presentation.Orientation,System.String)">
            <summary>
            Set the placeholder values.
            </summary>
            <param name="placeHolderType">Represents the placeholder type.</param>
            <param name="placeHolderSize">Represents the placeholder size.</param>
            <param name="placeHolderDirection">Represents the placeholder direction.</param>
            <param name="index">Represents the index of the placeholder.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Placeholder.SetType(Syncfusion.Presentation.PlaceholderType)">
            <summary>
            Sets the placeholder type.
            </summary>
            <param name="placeholderType">Represents the placeholder type.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Placeholder.Type">
            <summary>
            Gets the type of the placeholder.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.Placeholder.Name">
            <summary>
            Gets or sets the name of the specified placeholder.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IShapes">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IShape"/> instance in a slide.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.Add(Syncfusion.Presentation.ISlideItem)">
             <summary>
             Adds the specified <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance at the end of the shape collection.
             </summary>
             <param name="shape">The <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance to be added.</param>
             <returns>Returns the zero-based index of the newly added shape within the shape collection.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.TitleAndContent);
             //Get the shape collection of slide
             IShapes shapes = slide.Shapes;
             //Create instance for SlideItem
             ISlideItem slideItem = shapes[0];
             //Set the description for slide item
             slideItem.Description = "This is a SlideItem";
             //Set the title
             slideItem.Title = "SlideItem";
             //Add the slide item 
             shapes.Add(slideItem);
             //Save the presentation
             presentation.Save("Cells.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.TitleAndContent)
            'Get the shape collection of slide
            Dim shapes As IShapes = slide.Shapes
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = shapes(0)
            'Set the description for slide item
            slideItem.Description = "This is a SlideItem"
            'Set the title
            slideItem.Title = "SlideItem"
            'Add the slide item 
            shapes.Add(slideItem)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.Insert(System.Int32,Syncfusion.Presentation.ISlideItem)">
             <summary>
             Inserts an element into the shape collection at the specified index.
             </summary>
             <param name="index">The zero-based index at which item should be inserted.</param>
             <param name="value">The slide item to insert in the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Insert shape at specific index
             shapes.Insert(1, textBox);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Insert shape at specific index
            shapes.Insert(1, textBox)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the shape collection.
             </summary>
             <param name="index">The zero-based index of the shape to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Remove shape at specific index
             shapes.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Remove shape at specific index
            shapes.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.Remove(Syncfusion.Presentation.ISlideItem)">
             <summary>
             Removes the first occurrence of a specified slide from the shape collection.
             </summary>
             <param name="item">The shape to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Remove specific shape from collection
             shapes.Remove(textBox);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Remove specific shape from collection
            shapes.Remove(textBox)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.IndexOf(Syncfusion.Presentation.ISlideItem)">
             <summary>
             Returns the zero-based index of the first occurrence of the specified <see cref="T:Syncfusion.Presentation.ISlideItem"/> within the shape collection.
             </summary>
             <param name="value">The <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance to locate.</param>
             <returns>Returns the zero-based index of the first occurrence of specified slide item within the shape collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Get the index of specific shape
             int index = shapes.IndexOf(textBox);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Get the index of specific shape
            Dim index As Integer = shapes.IndexOf(textBox)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.Clear">
             <summary>
             Removes all the elements from shape collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Clear the shapes
             shapes.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Clear the shapes
            shapes.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddChart(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a new chart to the shape collection.
             </summary>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add chart to slide           
             IPresentationChart chart =shapes.AddChart(400, 300, 100, 100);
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add chart to slide           
            Dim chart As IPresentationChart = shapes.AddChart(400, 300, 100, 100)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddChart(System.IO.Stream,System.Int32,System.String,System.Drawing.RectangleF)">
            <summary>
            Creates a chart for the data in specified excel document and adds the chart to the shape collection.
            </summary>
            <param name="excelStream">Excel document stream having the data for chart[Only the "*.xlsx" format is supported].</param>
            <param name="sheetNumber">Worksheet number of the excel document.</param>
            <param name="dataRange">Data range in the worksheet for the chart to be created.</param>
            <param name="bounds">Position and size of the chart, in points.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance this method creates.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddChart(System.Object[][],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a chart for the specified data and adds the chart to the shape collection.
            </summary>
            <param name="data">Specifies the two dimensional chart data.</param>
            <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance this method creates.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddChart(System.Collections.IEnumerable,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a chart from the specified enumerable and adds the chart to the shape collection.
            </summary>
            <param name="enumerable">Specifies the <see cref="T:System.Collections.IEnumerable"/> object with desired data</param>
            <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IPresentationChart"/> instance this method creates.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddPicture(System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPicture"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Get the image from file path
             Image image = Image.FromFile("Image.gif");
             // Add the image to the slide by specifying position and size
             shapes.AddPicture(new MemoryStream(image.ImageData), 300, 120, 70, 40);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Get the image from file path
            Dim image__2 As Image = Image.FromFile("Image.gif")
            ' Add the image to the slide by specifying position and size
            shapes.AddPicture(New MemoryStream(image__2.ImageData), 300, 120, 70, 40)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddPicture(System.IO.Stream,System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Creates a picture from the specified svg, its fallback image stream and adds the picture to the shape collection.
             </summary>
             <param name="svgStream">The <see cref="T:System.IO.Stream"/> instance of SVG image.</param>
             <param name="imageStream">The <see cref="T:System.IO.Stream"/> instance of fallback image.</param>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IPicture"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Create an instance for fallback image as stream
             Stream imageStream = File.Open("Image.gif", FileMode.Open);
             //Create an instance for vector image as stream
             Stream svgStream = File.Open("Image.svg", FileMode.Open);
             // Add the image to the slide by specifying position and size
             shapes.AddPicture(svgStream, imageStream, 300, 120, 70, 40);
             //Save the presentation
             presDoc.Save("Sample.pptx");
             //Close the presentation
             presDoc.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presDoc As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Create an instance for fallback image as stream
            Dim imageStream As Stream = File.Open("Image.gif", FileMode.Open)
            'Create an instance for vector image as stream
            Dim svgStream As Stream = File.Open("Image.svg", FileMode.Open)
            'Add the image to the slide by specifying position and size
            shapes.AddPicture(svgStream, imageStream, 300, 120, 70, 40)
            'Save the presentation
             presDoc.Save("Sample.pptx")
            'Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddShape(Syncfusion.Presentation.AutoShapeType,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Creates a shape for the specified <see cref="T:Syncfusion.Presentation.AutoShapeType"/> and adds the shape to the shape collection.
             </summary>
             <param name="type">Determines the auto shape type.</param>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IShape"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add auto shape - rectangle to slide
             IShape shape = shapes.AddShape(AutoShapeType.Rectangle,300,400,150,200);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add auto shape - rectangle to slide
            Dim shape As IShape = shapes.AddShape(AutoShapeType.Rectangle, 300, 400, 150, 200)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddSmartArt(Syncfusion.Presentation.SmartArtType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a <see cref="T:Syncfusion.Presentation.ISmartArt"/> to the shape collection of a Slide. 
            </summary>
            <param name="left">Represents the left position, in points. The left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The height value ranges from 0 to 169056.</param>
            <param name="smartArtType">The SmartArt type to add.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArt"/> instance that represents the new SmartArt diagram.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddOleObject(System.IO.Stream,System.String,System.IO.Stream)">
            <summary>
            Creates an <see cref="T:Syncfusion.Presentation.IOleObject"/> instance with the specified image, program id, and data, then adds it to the <see cref="T:Syncfusion.Presentation.IShapes"/> collection.
            </summary>
            <param name="image">Image used to be displayed</param>
            <param name="progId">The ProgID of the object to be embedded</param>
            <param name="oleData">File stream from which the object is to be created</param>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddGroupShape(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Creates a group shape and adds the group shape to the shape collection.
             </summary>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IGroupShape"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add a group shape to the slide
             IGroupShape groupShape = shapes.AddGroupShape(12, 12, 200, 200);
             //Add auto shapes to group shape
             groupShape.Shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120);
             groupShape.Shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add a group shape to the slide
            Dim groupShape As IGroupShape = shapes.AddGroupShape(12, 12, 200, 200)
            'Add auto shapes to group shape
            groupShape.Shapes.AddShape(AutoShapeType.Oval, 47, 50, 60, 120)
            groupShape.Shapes.AddShape(AutoShapeType.Rectangle, 12, 12, 40, 30)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddTable(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a new table to the shape collection with the specified number of rows and columns. The valid range is 1 to 75.
             </summary>
             <param name="rowCount">Represents the number of rows. The valid range is 1 to 75.</param>
             <param name="columnCount">Represents the number of columns. The valid range is 1 to 75</param>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ITable"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add table to the shape collection
             ITable table = shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell.
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add table to the shape collection
            Dim table As ITable = shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell.
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IShapes.AddTextBox(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a new text box to the shape collection.
             </summary>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IShape"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add text box to slide
             IShape textBox = shapes.AddTextBox(100, 30, 100, 200);
             //Add a paragraph with text content.
             IParagraph paragraph = textBox.TextBody.AddParagraph("This is a Text Box");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add text box to slide
            Dim textBox As IShape = shapes.AddTextBox(100, 30, 100, 200)
            'Add a paragraph with text content.
            Dim paragraph As IParagraph = textBox.TextBody.AddParagraph("This is a Text Box")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShapes.Count">
             <summary>
             Gets the number of elements in the shape collection. Read-only.
             </summary>
             <value>
             The count.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);            
             //Create instance for shapes collection
             IShapes shapes = slide.Shapes;
             //Add auto shape - rectangle to slide
             IShape shape = shapes.AddShape(AutoShapeType.Rectangle,300,400,150,200);
             //Add chart to slide           
             IPresentationChart chart =shapes.AddChart(400, 300, 100, 100);
             //Set the chart title
             chart.ChartTitle = "Chart";
             //Get the count for shape collection
             int count = shapes.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for shapes collection
            Dim shapes As IShapes = slide.Shapes
            'Add auto shape - rectangle to slide
            Dim shape As IShape = shapes.AddShape(AutoShapeType.Rectangle, 300, 400, 150, 200)
            'Add chart to slide           
            Dim chart As IPresentationChart = shapes.AddChart(400, 300, 100, 100)
            'Set the chart title
            chart.ChartTitle = "Chart"
            'Get the count for shape collection
            Dim count As Integer = shapes.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IShapes.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance at the specified index from the shape collection. Read-only.
             </summary>
             <param name="index">Specifies the slide item index to locate.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ISlideItem"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.TitleAndContent);
             //Get the shape collection of slide
             IShapes shapes = slide.Shapes;
             //Create instance for SlideItem
             ISlideItem slideItem = shapes[0];
             //Set the description for slide item
             slideItem.Description = "This is a SlideItem";
             //Set the title
             slideItem.Title = "SlideItem";
             //Add the slide item 
             shapes.Add(slideItem);
             //Save the presentation
             presentation.Save("Cells.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.TitleAndContent)
            'Get the shape collection of slide
            Dim shapes As IShapes = slide.Shapes
            'Create instance for SlideItem
            Dim slideItem As ISlideItem = shapes(0)
            'Set the description for slide item
            slideItem.Description = "This is a SlideItem"
            'Set the title
            slideItem.Title = "SlideItem"
            'Add the slide item 
            shapes.Add(slideItem)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddChart(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="left">The left position of the chart from left edge of the slide, in points.</param>
            <param name="top">The top position of the chart from top edge of the slide, in points</param>
            <param name="width">Width of the chart, in points</param>
            <param name="height">Height of the chart, in points</param>
            <returns>Returns chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddChart(System.IO.Stream,System.Int32,System.String,System.Drawing.RectangleF)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="excelStream">Excel stream that has data for chart[Excel stream should be "*.xlsx" format]</param>
            <param name="sheetNumber">Worksheet number in the excel document that contains data for a chart.</param>
            <param name="dataRange">Data range in the worksheet from which the chart to be created.</param>
            <param name="bounds">Position of the chart in the slide.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.DetectExcelFileFromStream(System.IO.Stream)">
            <summary>
            Method to identify the Excel file format
            </summary>
            <param name="stream">Excel file stream</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddChart(System.Object[][],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="data">Chart data in 2-dimensional array format.</param>
            <param name="left">The left position of the chart from left edge of the shape, in points</param>
            <param name="top">The top position of the chart from top edge of the shape, in points</param>
            <param name="width">The width of the chart, in points</param>
            <param name="height">The height of the chart, in points.</param>
            <returns>Returns chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddChart(System.Collections.IEnumerable,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a chart to the slide.
            </summary>
            <param name="enumerable">IEnumerable object with desired data</param>
            <param name="left">The left position of the chart from left edge of the shape, in points</param>
            <param name="top">The top position of the chart from top edge of the shape, in points</param>
            <param name="width">The width of the chart, in points</param>
            <param name="height">The height of the chart, in points.</param>
            <returns>Returns chart object.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddSmartArt(Syncfusion.Presentation.SmartArtType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a <see cref="T:Syncfusion.Presentation.ISmartArt"/> to the shape collection of a Slide. 
            </summary>
            <param name="left">Represents the left position, in points. The left value ranges from -169056 to 169056.</param>
            <param name="top">Represents the top position, in points. The top value ranges from -169056 to 169056.</param>
            <param name="width">Represents the width, in points. The width value ranges from 0 to 169056.</param>
            <param name="height">Represents the height, in points. The height value ranges from 0 to 169056.</param>
            <param name="smartArtType">The SmartArt type to add.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.ISmartArt"/> instance that represents the new SmartArt diagram.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddPicture(System.IO.Stream,System.IO.Stream,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Add a SVG image within the current shape
            </summary>
            <param name="svgStream">Represent the Svg Picture stream</param>
            <param name="imageStream">Represent the raster Picture stream</param>
            <param name="left">Represent the left side position</param>
            <param name="top">Represent the top position</param>
            <param name="width">Represent the width</param>
            <param name="height">Represent the height</param>
            <returns>retruns a IPicture instance</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Drawing.Shapes.AddPlaceholder(Syncfusion.Presentation.PlaceholderType,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds the placeholder to the current shape collection
            </summary>
            <param name="placeHolderType">Determines the type of placeholder</param>
            <param name="left">Left position of the placeholder.</param>
            <param name="top">Top position of the placeholder.</param>
            <param name="width">Width of the placeholder.</param>
            <param name="height">Height of the placeholder.</param>
            <returns>Returns the IPlaceholderFormat object.</returns>
        </member>
        <member name="T:Syncfusion.Presentation.ISolidFill">
            <summary>
            Represents the solid type fill formatting.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISolidFill.Color">
             <summary>
             Gets or sets the color for the solid fill.
             </summary>
             <value>
             The color of the solid fill.
             </value>
             <remarks>
             Uses 'ColorObject' type to apply the color.
             </remarks>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide background
             IBackground background = slide.Background;
             //Set the fill type for background as Solid fill
             background.Fill.FillType = FillType.Solid;
             //Create instance for solid Fill
             ISolidFill solidFill = background.Fill.SolidFill;
             //Set the color for solid fill object
             solidFill.Color = ColorObject.FromArgb(120, 234, 67, 89);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Create instance for solid Fill
            Dim solidFill As ISolidFill = background.Fill.SolidFill
            'Set the color for solid fill object
            solidFill.Color = ColorObject.FromArgb(120, 234, 67, 89)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISolidFill.Transparency">
             <summary>
             Gets or sets the transparency in percentage. Ranges from 1 to 100.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide background
             IBackground background = slide.Background;
             //Set the fill type for background as Solid fill
             background.Fill.FillType = FillType.Solid;
             //Create instance for solid Fill
             ISolidFill solidFill = background.Fill.SolidFill;
             //Set the color for solid fill object
             solidFill.Color = ColorObject.FromArgb(120, 234, 67, 89);
             //Set the color transparency
             solidFill.Transparency = 30;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Solid fill
            background.Fill.FillType = FillType.Solid
            'Create instance for solid Fill
            Dim solidFill As ISolidFill = background.Fill.SolidFill
            'Set the color for solid fill object
            solidFill.Color = ColorObject.FromArgb(120, 234, 67, 89)
            'Set the color transparency
            solidFill.Transparency = 30
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.Drawing.TextureFill">
            <summary>
            Represents the picture or texture type in fill format.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IPictureFill">
            <summary>
            Represents the picture or texture type in fill format.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPictureFill.Transparency">
            <summary>
            Gets or sets the transparency of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPictureFill.ImageBytes">
            <summary>
            Gets or sets the image as byte.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPictureFill.TileMode">
            <summary>
            Gets or sets the value of <see cref="P:Syncfusion.Presentation.IPictureFill.TileMode"/> type enumeration.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.TextureFill.Transparency">
            <summary>
            Gets or sets the transparency of the image.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.TextureFill.ImageBytes">
            <summary>
            Gets or sets the image as byte.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Drawing.TextureFill.TileMode">
            <summary>
            Gets or sets the value of <see cref="P:Syncfusion.Presentation.Drawing.TextureFill.TileMode"/> type enumeration.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BackgroundType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PasteOptions">
            <summary>
            Specifies the paste options while copy and paste the slide in presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PasteOptions.UseDestinationTheme">
            <summary>
            Specifies to use the destination theme for the slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PasteOptions.SourceFormatting">
            <summary>
            Specifies to use the source theme of the slide
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SlideItemType">
            <summary>
            Specifies the type of slide item
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.Unknown">
            <summary>
            Specifies the SlideItemType is unknown
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.Picture">
            <summary>
            Specifies the SlideItemType is picture
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.Table">
            <summary>
            Specifies the SlideItemType is table
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.AutoShape">
            <summary>
            Specifies the SlideItemType is autoshape
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.GroupShape">
            <summary>
            Specifies the SlideItemType is GroupShape
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.ConnectionShape">
            <summary>
            Specifies the SlideItemType is connection shape
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.Chart">
            <summary>
            Specifies the SlideItemType is chart
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.Placeholder">
            <summary>
            Specifies the SlideItemType is placeholder
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.SmartArt">
            <summary>
            Specifies the SlideItemType is smart art.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideItemType.OleObject">
            <summary>
            Specifies the slide item is OLE Object.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.GradientFillType">
            <summary>
            Represents the gradient fill types in presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.GradientFillType.Linear">
            <summary>
            This element specifies a linear gradient.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.GradientFillType.Radial">
            <summary>
            Gradient follows a radial path.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.GradientFillType.Rectangle">
            <summary>
            Gradient follows a rectangular path.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.GradientFillType.Shape">
            <summary>
            Gradient follows the shape.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.AutoMarginType">
            <summary>
            Specifies the type of AutoMargin.
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoMarginType.NotDefined">
            <summary>
            Specifies the AutoMarginType is not defined
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoMarginType.TextShapeAutoFit">
            <summary>
            Specifies the AutoMarginType is text shape automatic fit
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoMarginType.NormalAutoFit">
            <summary>
            Specifies the AutoMarginType is normal automatic fit
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.AutoMarginType.NoAutoFit">
            <summary>
            Specifies the AutoMarginType is no automatic fit
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.FormatType">
            <summary>
            Specifies the PowerPoint presentation format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FormatType.Pptx">
            <summary>
            Specifies the PowerPoint presentation file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FormatType.Pptm">
            <summary>
            Specifies the macro-enabled PowerPoint presentation file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FormatType.Potx">
            <summary>
            Specifies the PowerPoint template file format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.FormatType.Potm">
            <summary>
            Specifies the macro-enabled PowerPoint template file format.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ListType">
            <summary>
            Specifies the types of lists that can be applied to the paragraph.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ListType.NotDefined">
            <summary>
            Specifies the ListType is not defined
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ListType.None">
            <summary>
            Specifies the ListType is none
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ListType.Numbered">
            <summary>
            Specifies the ListType is numbered
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ListType.Picture">
            <summary>
            Specifies the ListType is picture
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.ListType.Bulleted">
            <summary>
            Specifies the ListType is bulleted
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.LoadFormat">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.HyperLinkType">
            <summary>
            Specifies the hyper link types in presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.Unknown">
            <summary>
            Specifies the HyperLinkType is unknown
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.NoAction">
            <summary>
            Specifies the HyperLinkType isThe no action
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.Hyperlink">
            <summary>
            Specifies the HyperLinkType is hyperlink
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpFirstSlide">
            <summary>
            Specifies the HyperLinkType is jump first slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpPreviousSlide">
            <summary>
            Specifies the HyperLinkType is jump previous slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpNextSlide">
            <summary>
            Specifies the HyperLinkType is jump next slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpLastSlide">
            <summary>
            Specifies the HyperLinkType is jump last slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpEndShow">
            <summary>
            Specifies the HyperLinkType is jump end show
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpLastViewedSlide">
            <summary>
            Specifies the HyperLinkType is jump last viewed slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.JumpSpecificSlide">
            <summary>
            Specifies the HyperLinkType is jump specific slide
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.OpenFile">
            <summary>
            Specifies the HyperLinkType is open file
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.HyperLinkType.StartProgram">
            <summary>
            Specifies the HyperLinkType is start program
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.NumListStyle">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicAbjadDash">
            <summary>
            Specifies the NumberedListStyle is arabic abjad dash
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicAlphaDash">
            <summary>
            Specifies the NumberedListStyle is arabic alpha dash
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.KanjiKoreanPeriod">
            <summary>
            Specifies the NumberedListStyle is kanji korean period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.KanjiKoreanPlain">
            <summary>
            Specifies the NumberedListStyle is kanji korean plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.KanjiSimpChinDbPeriod">
            <summary>
            Specifies the NumberedListStyle is kanji simp chin database period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.None">
            <summary>
            Specifies the NumberedListStyle is none
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.SimpChinPeriod">
            <summary>
            Specifies the NumberedListStyle is simp chin period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.SimpChinPlain">
            <summary>
            Specifies the NumberedListStyle is simp chin plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.TradChinPeriod">
            <summary>
            Specifies the NumberedListStyle is trad chin period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.TradChinPlain">
            <summary>
            Specifies the NumberedListStyle is trad chin plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaLcParenBoth">
            <summary>
            Specifies the NumberedListStyle is alpha lc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaLcParenRight">
            <summary>
            Specifies the NumberedListStyle is alpha lc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaLcPeriod">
            <summary>
            Specifies the NumberedListStyle is alpha lc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaUcParenBoth">
            <summary>
            Specifies the NumberedListStyle is alpha uc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaUcParenRight">
            <summary>
            Specifies the NumberedListStyle is alpha uc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.AlphaUcPeriod">
            <summary>
            Specifies the NumberedListStyle is alpha uc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicDbPeriod">
            <summary>
            Specifies the NumberedListStyle is arabic database period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicDbPlain">
            <summary>
            Specifies the NumberedListStyle is arabic database plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicParenBoth">
            <summary>
            Specifies the NumberedListStyle is arabic paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicParenRight">
            <summary>
            Specifies the NumberedListStyle is arabic paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicPeriod">
            <summary>
            Specifies the NumberedListStyle is arabic period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ArabicPlain">
            <summary>
            Specifies the NumberedListStyle is arabic plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.CircleNumDbPlain">
            <summary>
            Specifies the NumberedListStyle is circle number database plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.CircleNumWdBlackPlain">
            <summary>
            Specifies the NumberedListStyle is circle number wd black plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.CircleNumWdWhitePlain">
            <summary>
            Specifies the NumberedListStyle is circle number wd white plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.HebrewAlphaDash">
            <summary>
            Specifies the NumberedListStyle is hebrew alpha dash
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.HindiAlpha1Period">
            <summary>
            Specifies the NumberedListStyle is hindi alpha1 period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.HindiAlphaPeriod">
            <summary>
            Specifies the NumberedListStyle is hindi alpha period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.HindiNumParenRight">
            <summary>
            Specifies the NumberedListStyle is hindi number paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.HindiNumPeriod">
            <summary>
            Specifies the NumberedListStyle is hindi number period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanLcParenBoth">
            <summary>
            Specifies the NumberedListStyle is roman lc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanLcParenRight">
            <summary>
            Specifies the NumberedListStyle is roman lc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanLcPeriod">
            <summary>
            Specifies the NumberedListStyle is roman lc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanUcParenBoth">
            <summary>
            Specifies the NumberedListStyle is roman uc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanUcParenRight">
            <summary>
            Specifies the NumberedListStyle is roman uc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.RomanUcPeriod">
            <summary>
            Specifies the NumberedListStyle is roman uc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiAlphaParenBoth">
            <summary>
            Specifies the NumberedListStyle is thai alpha paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiAlphaParenRight">
            <summary>
            Specifies the NumberedListStyle is thai alpha paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiAlphaPeriod">
            <summary>
            Specifies the NumberedListStyle is thai alpha period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiNumParenBoth">
            <summary>
            Specifies the NumberedListStyle is thai number paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiNumParenRight">
            <summary>
            Specifies the NumberedListStyle is thai number paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumListStyle.ThaiNumPeriod">
            <summary>
            Specifies the NumberedListStyle is thai number period
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.NumberedListStyle">
            <summary>
            Specifies the style of NumberedList for paragraphs.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaLcParenBoth">
            <summary>
            Specifies the NumberedListStyle is alpha lc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaLcParenRight">
            <summary>
            Specifies the NumberedListStyle is alpha lc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaLcPeriod">
            <summary>
            Specifies the NumberedListStyle is alpha lc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaUcParenBoth">
            <summary>
            Specifies the NumberedListStyle is alpha uc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaUcParenRight">
            <summary>
            Specifies the NumberedListStyle is alpha uc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.AlphaUcPeriod">
            <summary>
            Specifies the NumberedListStyle is alpha uc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicDbPeriod">
            <summary>
            Specifies the NumberedListStyle is arabic database period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicDbPlain">
            <summary>
            Specifies the NumberedListStyle is arabic database plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicParenBoth">
            <summary>
            Specifies the NumberedListStyle is arabic paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicParenRight">
            <summary>
            Specifies the NumberedListStyle is arabic paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicPeriod">
            <summary>
            Specifies the NumberedListStyle is arabic period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ArabicPlain">
            <summary>
            Specifies the NumberedListStyle is arabic plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.CircleNumDbPlain">
            <summary>
            Specifies the NumberedListStyle is circle number database plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.CircleNumWdBlackPlain">
            <summary>
            Specifies the NumberedListStyle is circle number wd black plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.CircleNumWdWhitePlain">
            <summary>
            Specifies the NumberedListStyle is circle number wd white plain
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.HebrewAlphaDash">
            <summary>
            Specifies the NumberedListStyle is hebrew alpha dash
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.HindiAlpha1Period">
            <summary>
            Specifies the NumberedListStyle is hindi alpha1 period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.HindiAlphaPeriod">
            <summary>
            Specifies the NumberedListStyle is hindi alpha period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.HindiNumParenRight">
            <summary>
            Specifies the NumberedListStyle is hindi number paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.HindiNumPeriod">
            <summary>
            Specifies the NumberedListStyle is hindi number period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanLcParenBoth">
            <summary>
            Specifies the NumberedListStyle is roman lc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanLcParenRight">
            <summary>
            Specifies the NumberedListStyle is roman lc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanLcPeriod">
            <summary>
            Specifies the NumberedListStyle is roman lc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanUcParenBoth">
            <summary>
            Specifies the NumberedListStyle is roman uc paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanUcParenRight">
            <summary>
            Specifies the NumberedListStyle is roman uc paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.RomanUcPeriod">
            <summary>
            Specifies the NumberedListStyle is roman uc period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiAlphaParenBoth">
            <summary>
            Specifies the NumberedListStyle is thai alpha paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiAlphaParenRight">
            <summary>
            Specifies the NumberedListStyle is thai alpha paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiAlphaPeriod">
            <summary>
            Specifies the NumberedListStyle is thai alpha period
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiNumParenBoth">
            <summary>
            Specifies the NumberedListStyle is thai number paren both
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiNumParenRight">
            <summary>
            Specifies the NumberedListStyle is thai number paren right
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.NumberedListStyle.ThaiNumPeriod">
            <summary>
            Specifies the NumberedListStyle is thai number period
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Orientation">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.PlaceholderType">
            <summary>
            Specifies the type of placeholder.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Title">
            <summary>
            Specifies the placeholdertype is title.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Body">
            <summary>
            Specifies the placeholdertype is body.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.CenterTitle">
            <summary>
            Specifies the placeholdertype is centertitle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Subtitle">
            <summary>
            Specifies the placeholdertype is subtitle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.VerticalTitle">
            <summary>
            Specifies the placeholder type is vertical title.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.VerticalBody">
            <summary>
            Specifies the placeholder type is vertical body.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Object">
            <summary>
            Specifies the placeholdertype is object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Chart">
            <summary>
            Specifies the placeholdertype is chart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Bitmap">
            <summary>
            Specifies the placeholdertype is bitmap.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.MediaClip">
            <summary>
            Specifies the placeholdertype is media clip.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.OrganizationChart">
            <summary>
            Specifies the placeholdertype is OrganizationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Table">
            <summary>
            Specifies the placeholdertype is table.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.SlideNumber">
            <summary>
            Specifies the placeholdertype is slidenumber.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Header">
            <summary>
            Specifies the placeholdertype is header.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Footer">
            <summary>
            Specifies the placeholdertype is footer.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Date">
            <summary>
            Specifies the placeholdertype is dateandtime.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.VerticalObject">
            <summary>
            Specifies the placeholder type is vertical object.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.PlaceholderType.Picture">
            <summary>
            Specifies the placeholdertype is picture.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SlideLayoutType">
            <summary>
            Specifies the layout type of the slide.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.Custom">
            <summary>
            Specifies the user-defined slide layout type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.Title">
            <summary>
            Specifies the SlideLayoutType is title
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.SectionHeader">
            <summary>
            Specifies the SlideLayoutType is section header
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.TwoContent">
            <summary>
            Specifies the SlideLayoutType is two content
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.Comparison">
            <summary>
            Specifies the SlideLayoutType is comparison
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.TitleOnly">
            <summary>
            Specifies the SlideLayoutType is title only
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.Blank">
            <summary>
            Specifies the SlideLayoutType is blank
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.ContentWithCaption">
            <summary>
            Specifies the SlideLayoutType is content with caption
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.PictureWithCaption">
            <summary>
            Specifies the SlideLayoutType is picture with caption
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.TitleAndVerticalText">
            <summary>
            Specifies the SlideLayoutType is title and vertical text
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.VerticalTitleAndText">
            <summary>
            Specifies the SlideLayoutType is vertical title and text
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideLayoutType.TitleAndContent">
            <summary>
            Specifies the SlideLayoutType is title and content
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SchemeColorIndex">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SlideOrientation">
            <summary>
            Specifies the orientation of the slide in presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideOrientation.Landscape">
            <summary>
            Specifies the SlideOrientation is landscape
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideOrientation.Portrait">
            <summary>
            Specifies the SlideOrientation is portrait
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SlideSizeType">
            <summary>
            Specifies the size type for the slide in presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.OnScreen">
            <summary>
            Specifies the SlideSizeType is on screen
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.LetterPaper">
            <summary>
            Specifies the SlideSizeType is letter paper
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.A4Paper">
            <summary>
            Specifies the SlideSizeType is a4 paper
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.Slide35Mm">
            <summary>
            Specifies the SlideSizeType is slide35 mm
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.Overhead">
            <summary>
            Specifies the SlideSizeType is overhead
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.Banner">
            <summary>
            Specifies the SlideSizeType is banner
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.Custom">
            <summary>
            Specifies the SlideSizeType is custom
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.Ledger">
            <summary>
            Specifies the SlideSizeType is ledger
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.A3Paper">
            <summary>
            Specifies the SlideSizeType is a3 paper
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.B4IsoPaper">
            <summary>
            Specifies the SlideSizeType is b4 iso paper
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.B5IsoPaper">
            <summary>
            Specifies the SlideSizeType is b5 iso paper
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.OnScreen16X9">
            <summary>
            Specifies the SlideSizeType is on screen16 x9
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SlideSizeType.OnScreen16X10">
            <summary>
            Specifies the SlideSizeType is on screen16 X10
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.BuiltInTableStyle">
            <summary>
            Specifies the predefined styles of a table.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.Custom">
            <summary>
            Specifies the BuiltInTableStyle is custom
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.None">
            <summary>
            Specifies the BuiltInTableStyle is none
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent1">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2">
            <summary>
            Specifies the BuiltInTableStyle is medium style2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.NoStyleNoGrid">
            <summary>
            Specifies the BuiltInTableStyle is no style no grid
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent1">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent2">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent3">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent4">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent5">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle1Accent6">
            <summary>
            Specifies the BuiltInTableStyle is themed style1 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.NoStyleTableGrid">
            <summary>
            Specifies the BuiltInTableStyle is no style table grid
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent1">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent2">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent3">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent4">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent5">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.ThemedStyle2Accent6">
            <summary>
            Specifies the BuiltInTableStyle is themed style2 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1">
            <summary>
            Specifies the BuiltInTableStyle is light style1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent1">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent2">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent3">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent4">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent5">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent6">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2">
            <summary>
            Specifies the BuiltInTableStyle is light style2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent1">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent2">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent3">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent3">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent4">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent5">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent6">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle2Accent4">
            <summary>
            Specifies the BuiltInTableStyle is light style2 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3">
            <summary>
            Specifies the BuiltInTableStyle is light style3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent1">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent2">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent2">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent3">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent4">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent5">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle3Accent6">
            <summary>
            Specifies the BuiltInTableStyle is light style3 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1">
            <summary>
            Specifies the BuiltInTableStyle is medium style1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent1">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent2">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent3">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent4">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent5">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle1Accent6">
            <summary>
            Specifies the BuiltInTableStyle is medium style1 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle2Accent6">
            <summary>
            Specifies the BuiltInTableStyle is medium style2 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3">
            <summary>
            Specifies the BuiltInTableStyle is medium style3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent1">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent2">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent3">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent4">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent5">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle3Accent6">
            <summary>
            Specifies the BuiltInTableStyle is medium style3 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4">
            <summary>
            Specifies the BuiltInTableStyle is medium style4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent1">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent2">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent3">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent4">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent5">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.MediumStyle4Accent6">
            <summary>
            Specifies the BuiltInTableStyle is medium style4 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1">
            <summary>
            Specifies the BuiltInTableStyle is dark style1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent1">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent1
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent2">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent3">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent3
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent4">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent5">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent5
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle1Accent6">
            <summary>
            Specifies the BuiltInTableStyle is dark style1 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle2">
            <summary>
            Specifies the BuiltInTableStyle is dark style2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle2Accent1Accent2">
            <summary>
            Specifies the BuiltInTableStyle is dark style2 accent1 accent2
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle2Accent3Accent4">
            <summary>
            Specifies the BuiltInTableStyle is dark style2 accent3 accent4
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.DarkStyle2Accent5Accent6">
            <summary>
            Specifies the BuiltInTableStyle is dark style2 accent5 accent6
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.BuiltInTableStyle.LightStyle1Accent5">
            <summary>
            Specifies the BuiltInTableStyle is light style1 accent5
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.TileMode">
            <summary>
            Provides options to fit a picture as background for slides and shapes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TileMode.Stretch">
            <summary>
            Specifies the TileMode is Stretch.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.TileMode.Tile">
            <summary>
            Specifies the TileMode is Tile.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SplitterBarState">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.FileFormatType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.CustomPropertyType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtConnectionType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtPointType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtCategory">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtType">
            <summary>
            Specifies the SmartArt type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicBlockList">
            <summary>
            Specifies the SmartArt type is BasicBlockList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AlternatingHexagons">
            <summary>
            Specifies the SmartArt type is AlternatingHexagons.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureCaptionList">
            <summary>
            Specifies the SmartArt type is PictureCaptionList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.LinedList">
            <summary>
            Specifies the SmartArt type is LinedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalBulletList">
            <summary>
            Specifies the SmartArt type is VerticalBulletList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalBoxList">
            <summary>
            Specifies the SmartArt type is VerticalBoxList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalBulletList">
            <summary>
            Specifies the SmartArt type is HorizontalBulletList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SquareAccentList">
            <summary>
            Specifies the SmartArt type is SquareAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureAccentList">
            <summary>
            Specifies the SmartArt type is PictureAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BendingPictureAccentList">
            <summary>
            Specifies the SmartArt type is BendingPictureAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.StackedList">
            <summary>
            Specifies the SmartArt type is StackedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.IncreasingCircleProcess">
            <summary>
            Specifies the SmartArt type is IncreasingCircleProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PieProcess">
            <summary>
            Specifies the SmartArt type is PieProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.DetailedProcess">
            <summary>
            Specifies the SmartArt type is DetailedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.GroupedList">
            <summary>
            Specifies the SmartArt type is GroupedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalPictureList">
            <summary>
            Specifies the SmartArt type is HorizontalPictureList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ContinuousPictureList">
            <summary>
            Specifies the SmartArt type is ContinuousPictureList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureStrips">
            <summary>
            Specifies the SmartArt type is PictureStrips.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalPictureList">
            <summary>
            Specifies the SmartArt type is VerticalPictureList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AlternatingPictureBlocks">
            <summary>
            Specifies the SmartArt type is AlternatingPictureBlocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalPictureAccentList">
            <summary>
            Specifies the SmartArt type is VerticalPictureAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TitledPictureAccentList">
            <summary>
            Specifies the SmartArt type is TitledPictureAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalBlockList">
            <summary>
            Specifies the SmartArt type is VerticalBlockList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalChevronList">
            <summary>
            Specifies the SmartArt type is VerticalChevronList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalAccentList">
            <summary>
            Specifies the SmartArt type is VerticalAccentList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalArrowList">
            <summary>
            Specifies the SmartArt type is VerticalArrowList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TrapezoidList">
            <summary>
            Specifies the SmartArt type is TrapezoidList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.DescendingBlockList">
            <summary>
            Specifies the SmartArt type is DescendingBlockList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TableList">
            <summary>
            Specifies the SmartArt type is TableList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SegmentedProcess">
            <summary>
            Specifies the SmartArt type is SegmentedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalCurvedList">
            <summary>
            Specifies the SmartArt type is VerticalCurvedList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PyramidList">
            <summary>
            Specifies the SmartArt type is PyramidList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TargetList">
            <summary>
            Specifies the SmartArt type is TargetList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalCircleList">
            <summary>
            Specifies the SmartArt type is VerticalCircleList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TableHierarchy">
            <summary>
            Specifies the SmartArt type is TableHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicProcess">
            <summary>
            Specifies the SmartArt type is BasicProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.StepUpProcess">
            <summary>
            Specifies the SmartArt type is StepUpProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.StepDownProcess">
            <summary>
            Specifies the SmartArt type is StepDownProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AccentProcess">
            <summary>
            Specifies the SmartArt type is AccentProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AlternatingFlow">
            <summary>
            Specifies the SmartArt type is AlternatingFlow.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ContinuousBlockProcess">
            <summary>
            Specifies the SmartArt type is ContinuousBlockProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.IncreasingArrowsProcess">
            <summary>
            Specifies the SmartArt type is IncreasingArrowsProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ContinuousArrowProcess">
            <summary>
            Specifies the SmartArt type is ContinuousArrowProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ProcessArrows">
            <summary>
            Specifies the SmartArt type is ProcessArrows.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CircleAccentTimeLine">
            <summary>
            Specifies the SmartArt type is CircleAccentTimeLine.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicTimeLine">
            <summary>
            Specifies the SmartArt type is BasicTimeLine.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicChevronProcess">
            <summary>
            Specifies the SmartArt type is BasicChevronProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ClosedChevronProcess">
            <summary>
            Specifies the SmartArt type is ClosedChevronProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ChevronList">
            <summary>
            Specifies the SmartArt type is ChevronList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SubStepProcess">
            <summary>
            Specifies the SmartArt type is SubStepProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PhasedProcess">
            <summary>
            Specifies the SmartArt type is PhasedProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RandomToResultProcess">
            <summary>
            Specifies the SmartArt type is RandomToResultProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.StaggeredProcess">
            <summary>
            Specifies the SmartArt type is StaggeredProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ProcessList">
            <summary>
            Specifies the SmartArt type is ProcessList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CircleArrowProcess">
            <summary>
            Specifies the SmartArt type is CircleArrowProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicBendingProcess">
            <summary>
            Specifies the SmartArt type is BasicBendingProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalBendingProcess">
            <summary>
            Specifies the SmartArt type is VerticalBendingProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AscendingPictureAccentprocess">
            <summary>
            Specifies the SmartArt type is AscendingPictureAccentprocess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.UpwardArrow">
            <summary>
            Specifies the SmartArt type is UpwardArrow.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.DescendingProcess">
            <summary>
            Specifies the SmartArt type is DescendingProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CircularBendingProcess">
            <summary>
            Specifies the SmartArt type is CircularBendingProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.Equation">
            <summary>
            Specifies the SmartArt type is Equation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalEquation">
            <summary>
            Specifies the SmartArt type is VerticalEquation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.Funnel">
            <summary>
            Specifies the SmartArt type is Funnel.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.Gear">
            <summary>
            Specifies the SmartArt type is Gear.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ArrowRibbon">
            <summary>
            Specifies the SmartArt type is ArrowRibbon.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.OpposingArrows">
            <summary>
            Specifies the SmartArt type is OpposingArrows.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ConvergingArrows">
            <summary>
            Specifies the SmartArt type is ConvergingArrows.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.DivergingArrows">
            <summary>
            Specifies the SmartArt type is DivergingArrows.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicCycle">
            <summary>
            Specifies the SmartArt type BasicCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TextCycle">
            <summary>
            Specifies the SmartArt type is TextCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BlockCycle">
            <summary>
            Specifies the SmartArt type is BlockCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.NondirectionalCycle">
            <summary>
            Specifies the SmartArt type is NondirectionalCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ContinuousCycle">
            <summary>
            Specifies the SmartArt type is ContinuousCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.MultiDirectionalCycle">
            <summary>
            Specifies the SmartArt type is MultiDirectionalCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SegmentedCycle">
            <summary>
            Specifies the SmartArt type is SegmentedCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicPie">
            <summary>
            Specifies the SmartArt type is BasicPie.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RadialCycle">
            <summary>
            Specifies the SmartArt type is RadialCycle.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicRadial">
            <summary>
            Specifies the SmartArt type is BasicRadial.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.DivergingRadial">
            <summary>
            Specifies the SmartArt type is DivergingRadial.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RadialVenn">
            <summary>
            Specifies the SmartArt type is RadialVenn.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RadialCluster">
            <summary>
            Specifies the SmartArt type is RadialCluster.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.OrganizationChart">
            <summary>
            Specifies the SmartArt type is OrganizationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.NameAndTitleOrganizationChart">
            <summary>
            Specifies the SmartArt type is NameAndTitleOrganizationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HalfCircleOrganizationChart">
            <summary>
            Specifies the SmartArt type is HalfCircleOrganizationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CirclePictureHierarchy">
            <summary>
            Specifies the SmartArt type is CirclePictureHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.Hierarchy">
            <summary>
            Specifies the SmartArt type is Hierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.LabeledHierarchy">
            <summary>
            Specifies the SmartArt type is LabeledHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalOrganizationChart">
            <summary>
            Specifies the SmartArt type is HorizontalOrganizationChart.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalMulti_levelHierarchy">
            <summary>
            Specifies the SmartArt type is HorizontalMulti_levelHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalHierarchy">
            <summary>
            Specifies the SmartArt type is HorizontalHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HorizontalLabeledHierarchy">
            <summary>
            Specifies the SmartArt type is HorizontalLabeledHierarchy.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.Balance">
            <summary>
            Specifies the SmartArt type is Balance.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CircleRelationship">
            <summary>
            Specifies the SmartArt type is CircleRelationship.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HexagonCluster">
            <summary>
            Specifies the SmartArt type is HexagonCluster.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.OpposingIdeas">
            <summary>
            Specifies the SmartArt type is OpposingIdeas.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PlusAndMinus">
            <summary>
            Specifies the SmartArt type is PlusAndMinus.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ReverseList">
            <summary>
            Specifies the SmartArt type is ReverseList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CounterBalanceArrows">
            <summary>
            Specifies the SmartArt type is CounterBalanceArrows.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SegmentedPyramid">
            <summary>
            Specifies the SmartArt type is SegmentedPyramid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.NestedTarget">
            <summary>
            Specifies the SmartArt type is NestedTarget.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.ConvergingRadial">
            <summary>
            Specifies the SmartArt type is ConvergingRadial.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RadialList">
            <summary>
            Specifies the SmartArt type is RadialList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicTarget">
            <summary>
            Specifies the SmartArt type is BasicTarget.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicMatrix">
            <summary>
            Specifies the SmartArt type is BasicMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TitledMatrix">
            <summary>
            Specifies the SmartArt type is TitledMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.GridMatrix">
            <summary>
            Specifies the SmartArt type is GridMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CycleMatrix">
            <summary>
            Specifies the SmartArt type is CycleMatrix.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AccentedPicture">
            <summary>
            Specifies the SmartArt type is AccentedPicture.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CircularPictureCallOut">
            <summary>
            Specifies the SmartArt type is CircularPictureCallOut.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SnapshotPictureList">
            <summary>
            Specifies the SmartArt type is SnapshotPictureList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.SpiralPicture">
            <summary>
            Specifies the SmartArt type is SpiralPicture.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.CaptionedPictures">
            <summary>
            Specifies the SmartArt type is CaptionedPictures.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BendingPictureCaption">
            <summary>
            Specifies the SmartArt type is BendingPictureCaption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BendingPictureSemiTransparentText">
            <summary>
            Specifies the SmartArt type is BendingPictureSemiTransparentText.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BendingPictureBlocks">
            <summary>
            Specifies the SmartArt type is BendingPictureBlocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BendingPictureCaptionList">
            <summary>
            Specifies the SmartArt type is BendingPictureCaptionList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TitledPictureBlocks">
            <summary>
            Specifies the SmartArt type is TitledPictureBlocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureGrid">
            <summary>
            Specifies the SmartArt type is PictureGrid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureAccentBlocks">
            <summary>
            Specifies the SmartArt type is PictureAccentBlocks.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.AlternatingPictureCircles">
            <summary>
            Specifies the SmartArt type is AlternatingPictureCircles.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.TitlePictureLineup">
            <summary>
            Specifies the SmartArt type is TitlePictureLineup.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureLineUp">
            <summary>
            Specifies the SmartArt type is PictureLineUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.FramedTextPicture">
            <summary>
            Specifies the SmartArt type is FramedTextPicture.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BubblePictureList">
            <summary>
            Specifies the SmartArt type is BubblePictureList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicPyramid">
            <summary>
            Specifies the SmartArt type is BasicPyramid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.InvertedPyramid">
            <summary>
            Specifies the SmartArt type is InvertedPyramid.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.BasicVenn">
            <summary>
            Specifies the SmartArt type is BasicVenn.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.LinearVenn">
            <summary>
            Specifies the SmartArt type is LinearVenn.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.StackedVenn">
            <summary>
            Specifies the SmartArt type is StackedVenn.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.HierarchyList">
            <summary>
            Specifies the SmartArt type is HierarchyList.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.PictureAccentProcess">
            <summary>
            Specifies the SmartArt type is PictureAccentProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.RepeatingBendingProcess">
            <summary>
            Specifies the SmartArt type is RepeatingBendingProcess.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.SmartArtType.VerticalProcess">
            <summary>
            Specifies the SmartArt type is VerticalProcess.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtChildOrderType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtAlgorithmType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtParameterId">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamArrowHeadStyle">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamAutoTextRotation">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamBendPoint">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamBreakPoint">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamCenterShapeMapping">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamChildAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamChildDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamConnectorDimension">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamConnectorPoint">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamConnectorRouting">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamContinueDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamDiagramHorizontalAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamDiagramTextAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamFallbackDimension">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamFlowDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamGrowDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamHierarchyAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamLinearDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamNodeHorizontalAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamNodeVerticalAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamOffset">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamPyramidAccentPosition">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamPyramidAccentTextMargin">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamRotationPath">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamSecondaryChildAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamSecondaryLinearDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamStartingElement">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamTextAnchorHorizontal">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamTextAnchorVertical">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamTextBlockDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamTextDirection">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ParamVerticalAlignment">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtAxisType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtConstraintType">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.SmartArtConstraintRelationShip">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.FileDataHolder.ParseExcelStream(System.IO.Stream,Syncfusion.OfficeChart.Implementation.WorkbookImpl)">
            <summary>
            Parse the excel stream.
            </summary>
            <param name="excelStream">Stream containing excel file.</param>
            <param name="workbookImpl">Current workbook.</param>
        </member>
        <member name="M:Syncfusion.Presentation.FileDataHolder.WriteDocument(System.IO.Stream)">
            <summary>
            Saves the presentation into the stream.
            </summary>
            <param name="stream">Stream in which the presentation is to be saved.</param>
        </member>
        <member name="T:Syncfusion.Presentation.IHyperLink">
            <summary>
            Represents a hyperlink associated with a non-placeholder shape or text.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IHyperLink.Action">
            <summary>
            Gets the type of action, the hyperlink will be perform when the specified shape or text is clicked. Read-only.
            </summary>
            <value>
            The action.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.IHyperLink.Url">
            <summary>
            Gets the url address of the hyperlink. Read-only.
            </summary>
            <value>
            The URL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.IHyperLink.TargetSlide">
             <summary>
             Gets the target slide of the hyperlink.
             </summary>
             <value>
             The target slide.
             </value>
             <returns>Returns the target slide <see cref="T:Syncfusion.Presentation.ISlide"/> instance.</returns>
             <example>
             <code lang="CS">
             IPresentation presDoc = Presentation.Create();
             ISlide slide1 = presDoc.Slides.Add(SlideLayoutType.Blank);
             ISlide slide2 = presDoc.Slides.Add();
             ISlide slide3 = presDoc.Slides.Add();
             ISlide slide4 = presDoc.Slides.Add();
             IShape shape = slide1.Shapes.AddShape(AutoShapeType.Rectangle, 100, 20, 200, 100);
             shape.SetHyperlink("2");      
             ISlide slide = shape.Hyperlink.TargetSlide;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
             </code>
             <code lang="VB.NET">
             </code>
             Dim presDoc As IPresentation = Presentation.Create()
             Dim slide1 As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             Dim slide2 As ISlide = presDoc.Slides.Add()
             Dim slide3 As ISlide = presDoc.Slides.Add()
             Dim slide4 As ISlide = presDoc.Slides.Add()
             Dim shape As IShape = slide1.Shapes.AddShape(AutoShapeType.Rectangle, 100, 20, 200, 100)
             shape.SetHyperlink("2")     
             Dim slide As ISlide = shape.Hyperlink.TargetSlide
            ’ Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             ‘ Close the presentation
             presDoc.Close();
             </example>
        </member>
        <member name="P:Syncfusion.Presentation.RichText.Hyperlink.TargetSlide">
            <summary>
            Gets the target slide of the hyperlink.
            </summary>
            <value>
            The target slide.
            </value>
            <remarks>Returns the target slide <see cref="T:Syncfusion.Presentation.ISlide"/> instance if the action is JumpSpecificSlide, otherwise null.</remarks>
            <example>
            <code lang="CS">
            IPresentation presentation = Presentation.Create();
            ISlide slide1 = presentation.Slides.Add(SlideLayoutType.Blank);
            ISlide slide2 = presentation.Slides.Add();
            ISlide slide3 = presentation.Slides.Add();
            ISlide slide4 = presentation.Slides.Add();
            IShape shape = slide1.Shapes.AddShape(AutoShapeType.Rectangle, 100, 20, 200, 100);
            shape.SetHyperlink("2");      
            ISlide slide = shape.Hyperlink.TargetSlide;            
            </code>
            <code lang="VB.NET">
            </code>
            Dim presentation As IPresentation = Presentation.Create()
            Dim slide1 As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            Dim slide2 As ISlide = presentation.Slides.Add()
            Dim slide3 As ISlide = presentation.Slides.Add()
            Dim slide4 As ISlide = presentation.Slides.Add()
            Dim shape As IShape = slide1.Shapes.AddShape(AutoShapeType.Rectangle, 100, 20, 200, 100)
            shape.SetHyperlink("2")     
            Dim slide As ISlide = shape.Hyperlink.TargetSlide      
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ILayoutSlide">
            <summary>
            Represents the layout slide in presentation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ILayoutSlide.LayoutType">
             <summary>
             Gets the layout type of the slide. Read-only.
             </summary>
             <value>
             The type of the layout.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Get the layout type of layout slide, read only
             SlideLayoutType slidelayoutType = layoutSlide.LayoutType;
             //Set the fill type of background as solid
             layoutSlide.Background.Fill.FillType = FillType.Solid;
             //Set the color for solid fill
             layoutSlide.Background.Fill.SolidFill.Color = ColorObject.Firebrick;
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Get the layout type of layout slide, read only
            Dim slidelayoutType As SlideLayoutType = layoutSlide.LayoutType
            'Set the fill type of background as solid
            layoutSlide.Background.Fill.FillType = FillType.Solid
            'Set the color for solid fill
            layoutSlide.Background.Fill.SolidFill.Color = ColorObject.Firebrick
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILayoutSlide.MasterSlide">
             <summary>
             Gets the corresponding master slide. Read-only.
             </summary>
             <value>
             The master slide.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];           
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Get the master slide of the layout slide, read only
             IMasterSlide masterSlide = layoutSlide.MasterSlide;
             //Set the slide orientation of the master slide
             masterSlide.SlideSize.SlideOrientation = SlideOrientation.Portrait;
             //Set the name of the master slide
             masterSlide.Name = "Master Slide";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Get the master slide of the layout slide, read only
            Dim masterSlide As IMasterSlide = layoutSlide.MasterSlide
            'Set the slide orientation of the master slide
            masterSlide.SlideSize.SlideOrientation = SlideOrientation.Portrait
            'Set the name of the master slide
            masterSlide.Name = "Master Slide"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ILayoutSlides">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance in a presentation
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.Add(Syncfusion.Presentation.ILayoutSlide)">
             <summary>
             Adds a layout slide at the end of the collection.
             </summary>
             <param name="layoutSlide">Represents an <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance to be added.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Set name to the layout slide
             layoutSlide.Name = "Layout Slide";
             //Add an auto shape - bentconnector5 to the layout slide
             layoutSlide.Shapes.AddShape(AutoShapeType.BentConnector5, 123, 234, 200, 180);
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Set name to the layout slide
            layoutSlide.Name = "Layout Slide"
            'Add an auto shape - bentconnector5 to the layout slide
            layoutSlide.Shapes.AddShape(AutoShapeType.BentConnector5, 123, 234, 200, 180)
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.Add(Syncfusion.Presentation.SlideLayoutType,System.String)">
            <summary>
            Creates an <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance with the specified <see cref="T:Syncfusion.Presentation.SlideLayoutType"/> and layout name, then adds it to the <see cref="T:Syncfusion.Presentation.ILayoutSlides"/> collection.
            </summary>
            <param name="layoutType">The layout type to customize</param>
            <param name="layoutName">The custom name of the layout slide</param>
            <returns>Returns the created layout slide with specified name and type</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.Insert(System.Int32,Syncfusion.Presentation.ILayoutSlide)">
             <summary>
             Inserts an element into the layout slide collection at the specified index.
             </summary>
             <param name="index">The zero-based index at which value should be inserted.</param>
             <param name="value">The layout slide item to insert.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Set name to the layout slide
             layoutSlide.Name = "Layout Slide";
             //Add a text box to the layout slide
             IShape shape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200);
             //Add paragraph to the text body
             shape.TextBody.Paragraphs.Add("This is a layout slide");
             //Insert the layout slide at index 2
             layoutSlides.Insert(2,layoutSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Set name to the layout slide
            layoutSlide.Name = "Layout Slide"
            'Add a text box to the layout slide
            Dim shape As IShape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200)
            'Add paragraph to the text body
            shape.TextBody.Paragraphs.Add("This is a layout slide")
            'Insert the layout slide at index 2
            layoutSlides.Insert(2, layoutSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the layout slide collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Remove a specific layout slide using index position
             layoutSlides.RemoveAt(1);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Remove a specific layout slide using index position
            layoutSlides.RemoveAt(1)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.Remove(Syncfusion.Presentation.ILayoutSlide)">
             <summary>
             Removes the first occurrence of a specified object from the layout slide collection.
             </summary>
             <param name="value">The layout slide object to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Set name to the layout slide
             layoutSlide.Name = "Layout Slide";
             //Add a text box to the layout slide
             IShape shape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200);
             //Add paragraph to the text body
             shape.TextBody.Paragraphs.Add("This is a layout slide");
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Remove a specific layout slide from the collection
             layoutSlides.Remove(layoutSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Set name to the layout slide
            layoutSlide.Name = "Layout Slide"
            'Add a text box to the layout slide
            Dim shape As IShape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200)
            'Add paragraph to the text body
            shape.TextBody.Paragraphs.Add("This is a layout slide")
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Remove a specific layout slide from the collection
            layoutSlides.Remove(layoutSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.IndexOf(Syncfusion.Presentation.ILayoutSlide)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> within the collection.
             </summary>
             <param name="value">The ILayoutSlide instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of object within the entire collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Set name to the layout slide
             layoutSlide.Name = "Layout Slide";
             //Add a text box to the layout slide
             IShape shape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200);
             //Add paragraph to the text body
             shape.TextBody.Paragraphs.Add("This is a layout slide");
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Get the index of layout slide
             int index = layoutSlides.IndexOf(layoutSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Set name to the layout slide
            layoutSlide.Name = "Layout Slide"
            'Add a text box to the layout slide
            Dim shape As IShape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200)
            'Add paragraph to the text body
            shape.TextBody.Paragraphs.Add("This is a layout slide")
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Get the index of layout slide
            Dim index As Integer = layoutSlides.IndexOf(layoutSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.Clear">
             <summary>
             Removes all the elements from layout slide collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;   
             //Clear the layout slides
             layoutSlides.Clear();
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Clear the layout slides
            layoutSlides.Clear()
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ILayoutSlides.GetByType(Syncfusion.Presentation.SlideLayoutType)">
             <summary>
             Returns an <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance with the specified <see cref="T:Syncfusion.Presentation.SlideLayoutType"/> item.
             </summary>
             <param name="type">The type of the layout slide to find the <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance.</param>
             <returns>Returns the layout slide with the specified slide layout type.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;
             //Get the layout slide by specifying the slide layout type
             ILayoutSlide layoutSlide = layoutSlides.GetByType(SlideLayoutType.Title);           
             //Set name to the layout slide
             layoutSlide.Name = "Layout Slide";
             //Add a text box to the layout slide
             IShape shape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200);
             //Add paragraph to the text body
             shape.TextBody.Paragraphs.Add("This is a layout slide");
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             </example>
             <example>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Get the layout slide by specifying the slide layout type
            Dim layoutSlide As ILayoutSlide = layoutSlides.GetByType(SlideLayoutType.Title)
            'Set name to the layout slide
            layoutSlide.Name = "Layout Slide"
            'Add a text box to the layout slide
            Dim shape As IShape = layoutSlide.Shapes.AddTextBox(200, 120, 345, 200)
            'Add paragraph to the text body
            shape.TextBody.Paragraphs.Add("This is a layout slide")
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILayoutSlides.Count">
             <summary>
             Gets the number of elements in the layout slide collection. Read-only.
             </summary>
             <value>
             The total count of the slides in the layout slide collection.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;            
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];           
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Get the count of the layout slides in a presentation
             int count = layoutSlides.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Get the count of the layout slides in a presentation
            Dim count As Integer = layoutSlides.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ILayoutSlides.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance from the collection. Read-only.
             </summary>
             <param name="index">Index from the collection.</param>
             <returns>Returns the particular layout slide based on the index.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             ILayoutSlides layoutSlides = presentation.LayoutSlides;
             //Create a new instance of layout slide
             ILayoutSlide layoutSlide = layoutSlides[0];
             //Set the fill type of background as solid
             layoutSlide.Background.Fill.FillType = FillType.Solid;
             //Set the color for solid fill
             layoutSlide.Background.Fill.SolidFill.Color = ColorObject.Firebrick;
             //Add the layout slide to the collection
             layoutSlides.Add(layoutSlide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim layoutSlides As ILayoutSlides = presentation__1.LayoutSlides
            'Create a new instance of layout slide
            Dim layoutSlide As ILayoutSlide = layoutSlides(0)
            'Set the fill type of background as solid
            layoutSlide.Background.Fill.FillType = FillType.Solid
            'Set the color for solid fill
            layoutSlide.Background.Fill.SolidFill.Color = ColorObject.Firebrick
            'Add the layout slide to the collection
            layoutSlides.Add(layoutSlide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IMasterSlide">
            <summary>
            Represents the master slide in a presentation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IMasterSlide.LayoutSlides">
            <summary>
            Gets the <see cref="T:Syncfusion.Presentation.ILayoutSlides"/> collection of a <see cref="T:Syncfusion.Presentation.IMasterSlide"/> instance. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.IMasterSlides">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IMasterSlide"/>  instance in a presentation.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.Add(Syncfusion.Presentation.IMasterSlide)">
             <summary>
             Adds a master slide at the end of the collection.
             </summary>
             <param name="slide">Represents an <see cref="T:Syncfusion.Presentation.IMasterSlide"/> instance to be added.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];
             //Add a group shape to master slide
             masterSlide.GroupShapes.AddGroupShape(200,234,198,173);
             //Add an auto shape - bevel to master slide
             masterSlide.Shapes.AddShape(AutoShapeType.Bevel,237,45,187,120);
             //Add master slide to the collection
             masterslides.Add(masterSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200, 234, 198, 173)
            'Add an auto shape - bevel to master slide
            masterSlide.Shapes.AddShape(AutoShapeType.Bevel, 237, 45, 187, 120)
            'Add master slide to the collection
            masterslides.Add(masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.Insert(System.Int32,Syncfusion.Presentation.IMasterSlide)">
             <summary>
             Inserts an element into the master slide collection at the specified index.
             </summary>
             <param name="index">The zero-based index at which master slide should be inserted.</param>
             <param name="slide">The master slide item to insert.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];
             //Set the fill type for background of the master slide
             masterSlide.Background.Fill.FillType = FillType.Solid;
             //Set color of the solid fill
             masterSlide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(123, 54, 234, 112);
             //Add a group shape to master slide
             masterSlide.GroupShapes.AddGroupShape(200,234,198,173);
             //Add an auto shape - bevel to master slide
             masterSlide.Shapes.AddShape(AutoShapeType.Bevel,237,45,187,120);
             //Insert master slide in the collection
             masterslides.Insert(1, masterSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Set the fill type for background of the master slide
            masterSlide.Background.Fill.FillType = FillType.Solid
            'Set color of the solid fill
            masterSlide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(123, 54, 234, 112)
            'Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200, 234, 198, 173)
            'Add an auto shape - bevel to master slide
            masterSlide.Shapes.AddShape(AutoShapeType.Bevel, 237, 45, 187, 120)
            'Insert master slide in the collection
            masterslides.Insert(1, masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.Remove(Syncfusion.Presentation.IMasterSlide)">
             <summary>
             Removes the first occurrence of a specified <see cref="T:Syncfusion.Presentation.IMasterSlide"/> instance from the master slide collection.
             </summary>
             <param name="value">The master slide object to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];     
             //Add a group shape to master slide
             masterSlide.GroupShapes.AddGroupShape(200,234,198,173);       
             //Insert master slide in the collection
             masterslides.Insert(1, masterSlide);
             //Remove a specific master slide 
             masterslides.Remove(masterSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200, 234, 198, 173)
            'Insert master slide in the collection
            masterslides.Insert(1, masterSlide)
            'Remove a specific master slide 
            masterslides.Remove(masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.RemoveAt(System.Int32)">
             <summary>
             Removes the element at the specified index of the master slide collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];     
             //Add a group shape to master slide
             masterSlide.GroupShapes.AddGroupShape(200,234,198,173);       
             //Insert master slide in the collection
             masterslides.Insert(1, masterSlide);
             //Remove a specific master slide 
             masterslides.RemoveAt(0);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200, 234, 198, 173)
            'Insert master slide in the collection
            masterslides.Insert(1, masterSlide)
            'Remove a specific master slide 
            masterslides.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.IndexOf(Syncfusion.Presentation.IMasterSlide)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IMasterSlide"/> instance within the collection.
             </summary>
             <param name="slide">The IMasterSlide instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of object within the entire collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];
             //Set the fill type for background of the master slide
             masterSlide.Background.Fill.FillType = FillType.Solid;
             //Set color of the solid fill
             masterSlide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(123, 54, 234, 112);
             //Add master slide to the collection
             masterslides.Add(masterSlide);
             //Get the index of master slide in collection
             int index = masterslides.IndexOf(masterSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Set the fill type for background of the master slide
            masterSlide.Background.Fill.FillType = FillType.Solid
            'Set color of the solid fill
            masterSlide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(123, 54, 234, 112)
            'Add master slide to the collection
            masterslides.Add(masterSlide)
            'Get the index of master slide in collection
            Dim index As Integer = masterslides.IndexOf(masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IMasterSlides.Clear">
             <summary>
             Removes all the elements from master slide collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];
             //Clear the master slide collection
             masterslides.Clear();
             //Add master slide to the collection
             masterslides.Add(masterSlide);           
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Clear the master slide collection
            masterslides.Clear()
            'Add master slide to the collection
            masterslides.Add(masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IMasterSlides.Count">
            <summary>
            Gets the number of elements in the collection. Read-only.
            </summary>
            <value>
            The total count of the master slides in the master slide collection.
            </value>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Retrieve the collection of layout Slide
            IMasterSlides masterslides = presentation.Masters;
            //Get a master by specifying the index in collection
            IMasterSlide masterSlide = presentation.Masters[0];           
            //Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200,234,198,173);
            //Add an auto shape - bevel to master slide
            masterSlide.Shapes.AddShape(AutoShapeType.Bevel,237,45,187,120);
            //Add master slide to the collection
            masterslides.Add(masterSlide);
            //Get the count of the master slide
            int count = masterslides.Count;
            //Save the presentation
            presentation.Save("Output.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IMasterSlides.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.IMasterSlide"/> instance from the collection. Read-only.
            </summary>
            <param name="index">Index from the collection.</param>
            <returns>Returns the particular master slide based on the index.</returns>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Retrieve the collection of layout Slide
            IMasterSlides masterslides = presentation.Masters;
            //Get a master by specifying the index in collection
            IMasterSlide masterSlide = presentation.Masters[0];
            //Set the fill type for background of the master slide
            masterSlide.Background.Fill.FillType = FillType.Solid;
            //Set color of the solid fill
            masterSlide.Background.Fill.SolidFill.Color = ColorObject.FromArgb(123, 54, 234, 112);
            //Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200,234,198,173);
            //Save the presentation
            presentation.Save("Output.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IPresentation">
            <summary>
            Represents the PowerPoint presentation.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Save(System.String)">
             <summary>
             Saves the presentation to the specified file name.
             </summary>
             <param name="fileName">Specifies the file name to save the presentation.</param>
             <remarks>At present, the Essential Presentation library only supports the PPTX file format.</remarks>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Save(System.IO.Stream)">
            <remarks>At present, the Essential Presentation library only supports the PPTX file format.</remarks>
            <example>
            <code lang="CS">
            //Create instance for memory stream
            MemoryStream fileStream = new MemoryStream();
            //Open a presentation
            IPresentation presentation = Presentation.Create();
            //Save the presentation using stream
            presentation.Save(fileStream);
            //Close the presentation.
            presentation.Close();
            //Dispose the file stream
            fileStream.Dispose();
            </code>
            <code lang="VB.NET">
            'Create instance for memory stream
            Dim fileStream As New MemoryStream()
            'Open a presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Save the presentation using stream
            presentation__1.Save(fileStream)
            'Close the presentation.
            presentation__1.Close()
            'Dispose the file stream
            fileStream.Dispose()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Save(System.String,Syncfusion.Presentation.FormatType,System.Web.HttpResponse)">
             <summary>
             Saves the presentation to the specified HttpResponse instance.
             </summary>
             <remarks>
             At present, the Essential Presentation library only supports the PPTX file
             format.
             </remarks>
             <param name="fileName">The name of the file in HttpResponse.</param>
             <param name="formatType">The format type of the presentation.</param>
             <param name="response">The HttpResponse to save the presentation.</param>
            <example>
            <code lang="CS">
             //Create a presentation
             IPresentation presentation = Presentation.Create();
             //Save the presentation to the specified HttpResponse
             presentation.Save("Sample.pptx", FormatType.Pptx, Response);
             </code>
             <code lang="VB.NET">
             'Create a presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Save the presentation to the specified HttpResponse
             presentation__1.Save("Sample.pptx", FormatType.Pptx, Response)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Encrypt(System.String)">
            <summary>
            Encrypts the presentation using the specified password.
            </summary>
            <param name="password">The password to encrypt the presentation.</param>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a new slide of content with caption slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
            //Add a auto shape of moon type auto shape.
            IShape shape = slide.Shapes.AddShape(AutoShapeType.Moon, 50, 0, 200, 200);
            //Add a paragraph with text content to the shape.
            shape.TextBody.AddParagraph("Text for moon shape");
            //Encrypt the presentation with the combination of alpha and symbol string password.
            presentation.Encrypt("MYPASSWORD!@#$%");
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a new slide of content with caption slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
            'Add a auto shape of moon type auto shape.
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Moon, 50, 0, 200, 200)
            'Add a paragraph with text content to the shape.
            shape.TextBody.AddParagraph("Text for moon shape")
            'Encrypt the presentation with the combination of alpha and symbol string password.
            presentation__1.Encrypt("MYPASSWORD!@#$%")
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.RemoveEncryption">
            <summary>
            Removes the encryption from presentation.
            </summary>
            <example>
            <code lang="CS">
            //Open the encrypted presentation.
            IPresentation presentation = Presentation.Open("Input.pptx", "MYPASSWORD!@#$%");          
            //Remove the encryption.
            presentation.RemoveEncryption();
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open the encrypted presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Input.pptx", "MYPASSWORD!@#$%")
            'Remove the encryption.
            presentation__1.RemoveEncryption()
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.RenderAsImages(Syncfusion.Drawing.ImageType)">
            <summary>
            Converts the presentation slides to images and returns the image array.
            </summary>
            <param name="imageType">Specifies the image type to convert slides.</param>
            <returns>Returns the <see cref="T:System.Drawing.Image"/> array of the converted images.</returns>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a content with caption slide to the presentation.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
            //Add a table to the slide.
            ITable table = slide.Tables.AddTable(5, 5, 0, 0, 500, 500);
            //Set the built in table style.
            table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4;
            //Iterate through the row collection.
            foreach (IRow row in table.Rows)
            {
            //Iterate through the cell collection.
            foreach (ICell cell in row.Cells)
            {
            //Add a paragraph to the cell.
            cell.TextBody.AddParagraph("New Paragraph");
            }
            }
            //Converts the each and every slide in the presentation to image of System.Drawing.Image type array.
            Image[] imageArray = presentation.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile);
            //Iterate the image array.
            foreach (Image image in imageArray)
            {
            //Save the image of .bmp format.
            image.Save("RenderAsImage" + Guid.NewGuid() + ".bmp");
            }
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a content with caption slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
            'Add a table to the slide.
            Dim table As ITable = slide.Tables.AddTable(5, 5, 0, 0, 500, 500)
            'Set the built in table style.
            table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4
            'Iterate through the row collection.
            For Each row As IRow In table.Rows
            'Iterate through the cell collection.
            For Each cell As ICell In row.Cells
            'Add a paragraph to the cell.
            cell.TextBody.AddParagraph("New Paragraph")
            Next
            Next
            'Converts the each and every slide in the presentation to image of System.Drawing.Image type array.
            Dim imageArray As Image() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile)
            'Iterate the image array.
            For Each image As Image In imageArray
            'Save the image of .bmp format.
            image.Save("RenderAsImage" + Guid.NewGuid() + ".bmp")
            Next
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.RenderAsImages(Syncfusion.Drawing.ImageFormat)">
             <summary>
             Converts the presentation slides to images and returns the stream array.
             </summary>
             <param name="imageFormat">Specifies the image format to convert slides.</param>
             <returns>Returns the <see cref="T:System.IO.Stream"/> array of the converted images.</returns>
            <example>
            <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a content with caption slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
             //Add a table to the slide.
             ITable table = slide.Tables.AddTable(5, 5, 0, 0, 500, 500);
             //Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4;
             //Iterate through the row collection.
             foreach (IRow row in table.Rows)
             {
             //Iterate through the cell collection.
             foreach (ICell cell in row.Cells)
             {
             //Add a paragraph to the cell.
             cell.TextBody.AddParagraph("New Paragraph");
             }
             }
             //Converts the each and every slide in the presentation to image of stream array type.
             Stream[] imageStreamArray = presentation.RenderAsImages(Syncfusion.Drawing.ImageFormat.Jpeg);
             //Iterate the stream array.
             foreach (Stream stream in imageStreamArray)
             {
             //Save the stream in image of .jpg format.
             Image.FromStream(stream).Save("RenderAsImage" + Guid.NewGuid() + ".jpg");
             } 
             //Close the presentation.
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create a new presentation.
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add a content with caption slide to the presentation.
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
             'Add a table to the slide.
             Dim table As ITable = slide.Tables.AddTable(5, 5, 0, 0, 500, 500)
             'Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4
             'Iterate through the row collection.
             For Each row As IRow In table.Rows
            	'Iterate through the cell collection.
            	For Each cell As ICell In row.Cells
            	'Add a paragraph to the cell.
            	cell.TextBody.AddParagraph("New Paragraph")
            	Next
             Next
             'Converts the each and every slide in the presentation to image of stream array type.
             Dim imageStreamArray As Stream() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageFormat.Jpeg)
             'Iterate the stream array.
             For Each stream As Stream In imageStreamArray
            	'Save the stream in image of .jpg format.
            	Image.FromStream(stream).Save("RenderAsImage" + Guid.NewGuid() + ".jpg")
             Next
             'Close the presentation.
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Close">
            <summary>
            Releases any resources associated with the presentation instance.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Add a new slide of comparison slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);    
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a new slide of comparison slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.Clone">
             <summary>
             Creates an independent copy of <see cref="T:Syncfusion.Presentation.IPresentation"/> instance.
             </summary>
             <returns> Returns the cloned presentation instance. </returns>
            <example>
            <code lang="CS">
             //Create an instance for presentation
             IPresentation presentation = Presentation.Create();
             //Add a new slide of comparison slide layout type.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);            
             //Clone the entire presentation.
             IPresentation presentationClone = presentation.Clone();
             //Add a new slide of title layout type.
             slide = presentationClone.Slides.Add(SlideLayoutType.Title);
             //Add an auto shape of regular pentagon auto shape type.
             slide.Shapes.AddShape(AutoShapeType.RegularPentagon, 10, 20, 300, 400);
             //Save the cloned presentation
             presentationClone.Save("Sample.pptx");
             //Close the presentation.
             presentation.Close();
             //Close the cloned presentation.
             presentationClone.Close();
             </code>
             <code lang="VB.NET">
             'Create an instance for presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add a new slide of comparison slide layout type.
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
             'Clone the entire presentation.
             Dim presentationClone As IPresentation = presentation__1.Clone()
             'Add a new slide of title layout type.
             slide = presentationClone.Slides.Add(SlideLayoutType.Title)
             'Add an auto shape of regular pentagon auto shape type.
             slide.Shapes.AddShape(AutoShapeType.RegularPentagon, 10, 20, 300, 400)
             'Save the cloned presentation
             presentationClone.Save("Sample.pptx")
             'Close the presentation.
             presentation__1.Close()
             'Close the cloned presentation.
             presentationClone.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.IPresentation.RemoveMacros">
            <summary>
            Removes the macros from the presentation instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.Sections">
            <summary>
            Returns a collection of <see cref="T:Syncfusion.Presentation.ISection"/> instances. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.Slides">
             <summary>
             Gets the slide collection in the presentation. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Open a presentation.
             IPresentation presentation = Presentation.Open("Input.pptx");
             //Retrieve the slide collection, it is read only
             ISlides slides = presentation.Slides;
             //Add a slide to the presentation
             ISlide slide = slides[0];
             //Create instance for slide background
             IBackground background = slide.Background;
             //Set the fill type for background as Pattern fill
             background.Fill.FillType = FillType.Pattern;
             //Set the pattern
             background.Fill.PatternFill.Pattern = PatternFillType.DashedHorizontal;
             //set the fore color of pattern
             background.Fill.PatternFill.ForeColor = ColorObject.Lavender;
             //Set the back color of pattern
             background.Fill.PatternFill.BackColor = ColorObject.Brown;
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open a presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Input.pptx")
            'Retrieve the slide collection, it is read only
            Dim slides As ISlides = presentation__1.Slides
            'Add a slide to the presentation
            Dim slide As ISlide = slides(0)
            'Create instance for slide background
            Dim background As IBackground = slide.Background
            'Set the fill type for background as Pattern fill
            background.Fill.FillType = FillType.Pattern
            'Set the pattern
            background.Fill.PatternFill.Pattern = PatternFillType.DashedHorizontal
            'set the fore color of pattern
            background.Fill.PatternFill.ForeColor = ColorObject.Lavender
            'Set the back color of pattern
            background.Fill.PatternFill.BackColor = ColorObject.Brown
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.Final">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Presentation.IPresentation"/> instance is marked as final.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.Masters">
            <summary>
            Gets the <see cref="T:Syncfusion.Presentation.IMasterSlides"/> collection of the <see cref="T:Syncfusion.Presentation.IPresentation"/> instance. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.ChartToImageConverter">
            <summary>
            Gets the <see cref="T:Syncfusion.OfficeChart.IOfficeChartToImageConverter"/> instance.
            </summary>
            <remarks>
            Initialize the ChartToImageConverter in-order to convert the chart in presentation to image.
            </remarks>
            <example>
            <code lang="CS">
            //Create a new presentation.
            IPresentation presentation = Presentation.Create();
            //Initialize the chart to image converter.
            presentation.ChartToImageConverter = new ChartToImageConverter();
            //Set the scaling mode for the chart.
            presentation.ChartToImageConverter.ScalingMode = ScalingMode.Best;
            //Add a blank slide for the chart.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add a chart to the slide.
            IPresentationChart officeChart = slide.Charts.AddChart(100, 100, 600, 400);
            //Set chart data
            officeChart.ChartData.SetValue(1, 4, "Month");
            officeChart.ChartData.SetValue(2, 4, "July");
            officeChart.ChartData.SetValue(3, 4, "August");
            officeChart.ChartData.SetValue(4, 4, "September");
            officeChart.ChartData.SetValue(5, 4, "October");
            officeChart.ChartData.SetValue(6, 4, "November");
            officeChart.ChartData.SetValue(7, 4, "December");
            officeChart.ChartData.SetValue(1, 1, "2013");
            officeChart.ChartData.SetValue(2, 1, 35);
            officeChart.ChartData.SetValue(3, 1, 37);
            officeChart.ChartData.SetValue(4, 1, 30);
            officeChart.ChartData.SetValue(5, 1, 29);
            officeChart.ChartData.SetValue(6, 1, 25);
            officeChart.ChartData.SetValue(7, 1, 30);
            officeChart.ChartData.SetValue(1, 2, "2014");
            officeChart.ChartData.SetValue(2, 2, 30);
            officeChart.ChartData.SetValue(3, 2, 25);
            officeChart.ChartData.SetValue(4, 2, 29);
            officeChart.ChartData.SetValue(5, 2, 35);
            officeChart.ChartData.SetValue(6, 2, 38);
            officeChart.ChartData.SetValue(7, 2, 32);
            officeChart.ChartData.SetValue(1, 3, "2015");
            officeChart.ChartData.SetValue(2, 3, 35);
            officeChart.ChartData.SetValue(3, 3, 37);
            officeChart.ChartData.SetValue(4, 3, 30);
            officeChart.ChartData.SetValue(5, 3, 50);
            officeChart.ChartData.SetValue(6, 3, 25);
            officeChart.ChartData.SetValue(7, 3, 30);
            //Add chart serie.
            IOfficeChartSerie serie1 = officeChart.Series.Add("2013");
            //Set serie value.
            serie1.Values = officeChart.ChartData[2, 1, 7, 1];
            //Add chart serie.
            IOfficeChartSerie serie2 = officeChart.Series.Add("2014");
            //Set serie value.
            serie2.Values = officeChart.ChartData[2, 2, 7, 2];
            //Add chart serie.
            IOfficeChartSerie serie3 = officeChart.Series.Add("2015");
            //Set serie value.
            serie3.Values = officeChart.ChartData[2, 3, 7, 3];
            //Set category labels value for the primary category axis.
            officeChart.PrimaryCategoryAxis.CategoryLabels = officeChart.ChartData[2, 4, 7, 4];
            //Set the chart type.
            officeChart.ChartType = OfficeChartType.Column_Clustered;
            //Set the chart title.
            officeChart.ChartTitle = "Mine Chart";
            //Convert the chart to image.
            Image[] chartImages = presentation.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile);
            foreach (Image image in chartImages)
            {
            //Save the image.
            image.Save("ChartToImageConverter" + Guid.NewGuid() + ".png");
            }
            //Save the presentation.
            presentation.Save("ChartToImageConverter.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Initialize the chart to image converter.
            presentation__1.ChartToImageConverter = New ChartToImageConverter()
            'Set the scaling mode for the chart.
            presentation__1.ChartToImageConverter.ScalingMode = ScalingMode.Best
            'Add a blank slide for the chart.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a chart to the slide.
            Dim officeChart As IPresentationChart = slide.Charts.AddChart(100, 100, 600, 400)
            'Set chart data
            officeChart.ChartData.SetValue(1, 4, "Month")
            officeChart.ChartData.SetValue(2, 4, "July")
            officeChart.ChartData.SetValue(3, 4, "August")
            officeChart.ChartData.SetValue(4, 4, "September")
            officeChart.ChartData.SetValue(5, 4, "October")
            officeChart.ChartData.SetValue(6, 4, "November")
            officeChart.ChartData.SetValue(7, 4, "December")
            officeChart.ChartData.SetValue(1, 1, "2013")
            officeChart.ChartData.SetValue(2, 1, 35)
            officeChart.ChartData.SetValue(3, 1, 37)
            officeChart.ChartData.SetValue(4, 1, 30)
            officeChart.ChartData.SetValue(5, 1, 29)
            officeChart.ChartData.SetValue(6, 1, 25)
            officeChart.ChartData.SetValue(7, 1, 30)
            officeChart.ChartData.SetValue(1, 2, "2014")
            officeChart.ChartData.SetValue(2, 2, 30)
            officeChart.ChartData.SetValue(3, 2, 25)
            officeChart.ChartData.SetValue(4, 2, 29)
            officeChart.ChartData.SetValue(5, 2, 35)
            officeChart.ChartData.SetValue(6, 2, 38)
            officeChart.ChartData.SetValue(7, 2, 32)
            officeChart.ChartData.SetValue(1, 3, "2015")
            officeChart.ChartData.SetValue(2, 3, 35)
            officeChart.ChartData.SetValue(3, 3, 37)
            officeChart.ChartData.SetValue(4, 3, 30)
            officeChart.ChartData.SetValue(5, 3, 50)
            officeChart.ChartData.SetValue(6, 3, 25)
            officeChart.ChartData.SetValue(7, 3, 30)
            'Add chart serie.
            Dim serie1 As IOfficeChartSerie = officeChart.Series.Add("2013")
            'Set serie value.
            serie1.Values = officeChart.ChartData(2, 1, 7, 1)
            'Add chart serie.
            Dim serie2 As IOfficeChartSerie = officeChart.Series.Add("2014")
            'Set serie value.
            serie2.Values = officeChart.ChartData(2, 2, 7, 2)
            'Add chart serie.
            Dim serie3 As IOfficeChartSerie = officeChart.Series.Add("2015")
            'Set serie value.
            serie3.Values = officeChart.ChartData(2, 3, 7, 3)
            'Set category labels value for the primary category axis.
            officeChart.PrimaryCategoryAxis.CategoryLabels = officeChart.ChartData(2, 4, 7, 4)
            'Set the chart type.
            officeChart.ChartType = OfficeChartType.Column_Clustered
            'Set the chart title.
            officeChart.ChartTitle = "Mine Chart"
            'Convert the chart to image.
            Dim chartImages As Image() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile)
            For Each image As Image In chartImages
            'Save the image.
            image.Save("ChartToImageConverter" + Guid.NewGuid() + ".png")
            Next
            'Save the presentation.
            presentation__1.Save("ChartToImageConverter.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.BuiltInDocumentProperties">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.IBuiltInDocumentProperties"/> instance that represents the built in document properties of presentation. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create an instance for presentation.
            IPresentation presentation = Presentation.Create();           
            //Retrieve the built-in document property, it is read only
            IBuiltInDocumentProperties builtin = presentation.BuiltInDocumentProperties;
            //Set the application name
            builtin.ApplicationName = "Essential Presentation";
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create an instance for presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the built-in document property, it is read only
            Dim builtin As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the application name
            builtin.ApplicationName = "Essential Presentation"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.CustomDocumentProperties">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ICustomDocumentProperties"/> instance that represents the custom document properties of presentation. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document properties.
            ICustomDocumentProperties customDocumentProperties = presentation.CustomDocumentProperties;            
            //Add a new custom document property
            customDocumentProperties.Add("Property1");
            //Set a Boolean value.
            customDocumentProperties["Property1"].Boolean = true;
            //Add a new custom document property
            customDocumentProperties.Add("Property2");
            //Set a date time.
            customDocumentProperties["Property2"].DateTime = DateTime.Now;
            //Save the presentation
            presentation.Save("CustomProperty.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document properties.
            Dim customDocumentProperties As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add a new custom document property
            customDocumentProperties.Add("Property1")
            'Set a Boolean value.
            customDocumentProperties("Property1").[Boolean] = True
            'Add a new custom document property
            customDocumentProperties.Add("Property2")
            'Set a date time.
            customDocumentProperties("Property2").DateTime = DateTime.Now
            'Save the presentation
            presentation__1.Save("CustomProperty.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IPresentation.HasMacros">
            <summary>
            Gets whether the presentation has macros. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ISlide">
            <summary>
            Represents the slide in the presentation.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.ConvertToImage(Syncfusion.Drawing.ImageType)">
            <summary>
            Converts the slide to image.
            </summary>
            <param name="imageType">Specifies the image type to convert the slide.</param>
            <returns>Returns an image instance that represents the converted slide.</returns>
            <example>
            <code lang="CS">
            //Open a PowerPoint presentation
            IPresentation presentation = Presentation.Open("Sample.pptx");
            //Convert the slides to images
            Image[] images = presentation.RenderAsImages(Syncfusion.Drawing.ImageType.Bitmap);
            //Close the PowerPoint presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open a PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Open("Sample.pptx")
            'Convert the slides to images
            Dim images As Image() = presentation__1.RenderAsImages(Syncfusion.Drawing. ImageType.Bitmap)
            'Close the PowerPoint presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.ConvertToImage(Syncfusion.Drawing.ImageFormat)">
             <summary>
             Converts the slide to image.
             </summary>
             <param name="imageFormat">Specifies the image format to convert the slide.</param>
             <returns>Returns a stream instance that represents the converted slide.</returns>
             <example>
             <code lang="CS">
             //Create a presentation.
             IPresentation presentation = Presentation.Open("Input.pptx");
             //Create instance for chart to image converter
             presentation.ChartToImageConverter = new ChartToImageConverter();
             //Set the scaling mode
             presentation.ChartToImageConverter.ScalingMode = Syncfusion.OfficeChart.ScalingMode.Best;
             //Retrieve the first slide from presentation
             ISlide slide = presentation.Slides[0];
             //Convert slide to image
             Image image = Image.FromStream(slide.ConvertToImage(Syncfusion.Drawing.ImageFormat.Emf));            
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Input.pptx")
            'Create instance for chart to image converter
            presentation__1.ChartToImageConverter = New ChartToImageConverter()
            'Set the scaling mode
            presentation__1.ChartToImageConverter.ScalingMode = Syncfusion.OfficeChart.ScalingMode.Best
            'Retrieve the first slide from presentation
            Dim slide As ISlide = presentation__1.Slides(0)
            'Convert slide to image
            Dim image__2 As Image = Image.FromStream(slide.ConvertToImage(Syncfusion.Drawing.ImageFormat.Emf))
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.MoveToSection(System.Int32)">
            <summary>
            Moves the slide to the start of the specified section index.
            </summary>
            <param name="sectionIndex">Specifies the section index to be moved.</param>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.AddNotesSlide">
            <summary>
            Adds a new notes to the slide.
            </summary>
            <returns>Returns the notes slide of <see cref="T:Syncfusion.Presentation.INotesSlide"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.AddTextBox(System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a text box to the slide.
             </summary>
             <param name="left">Represents the left position,in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position,in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width,in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height,in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IShape"/> instance that represents the text box.</returns>
            <example>
            <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a new slide to the presentation.
             ISlide slide = presentation.Slides.Add();
             //Add a text box to the slide.
             IShape shape = slide.AddTextBox(10, 10, 300, 350);
             //Add a paragraph with text content to the shape.
             shape.TextBody.AddParagraph("This is a new text box");
             //Save the presentation.
             presentation.Save("Slide_TextBox.pptx");
             //Close the presentation.
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a new slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add()
            'Add a text box to the slide.
            Dim shape As IShape = slide.AddTextBox(10, 10, 300, 350)
            'Add a paragraph with text content to the shape.
            shape.TextBody.AddParagraph("This is a new text box")
            'Save the presentation.
            presentation__1.Save("Slide_TextBox.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.Clone">
            <summary>
            Creates an independent copy of <see cref="T:Syncfusion.Presentation.ISlide"/> instance.
            </summary>
            <returns> Returns the cloned slide instance. </returns>
            <example>
            <code lang="CS">
            //Open an existing presentation.
            IPresentation presentation = Presentation.Open("Presentation.pptx");
            //Retrieve the slide instance.
            ISlide slide = presentation.Slides[0];
            //Create a cloned copy of slide.
            ISlide slideClone = slide.Clone();
            //Add a new text box to the cloned slide.
            IShape textboxShape = slideClone.AddTextBox(0, 0, 250, 250);
            //Add a paragraph with text content to the shape.
            textboxShape.TextBody.AddParagraph("Hello Presentation");
            //Add the slide to the presentation.
            presentation.Slides.Add(slideClone);
            //Save the presentation to the file system.
            presentation.Save("Output.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open an existing presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Presentation.pptx")
            'Retrieve the slide instance.
            Dim slide As ISlide = presentation__1.Slides(0)
            'Create a cloned copy of slide.
            Dim slideClone As ISlide = slide.Clone()
            'Add a new text box to the cloned slide.
            Dim textboxShape As IShape = slideClone.AddTextBox(0, 0, 250, 250)
            'Add a paragraph with text content to the shape.
            textboxShape.TextBody.AddParagraph("Hello Presentation")
            'Add the slide to the presentation.
            presentation__1.Slides.Add(slideClone)
            'Save the presentation to the file system.
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlide.RemoveNotesSlide">
            <summary>
            Removes the notes slide.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.Visible">
             <summary>
             Gets or sets the boolean value which indicates whether the slide is visible or not.
             </summary>
             <value>
             <c>true</c> if this slide instance is visible; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Hide the slide in presentation
             slide.Visible = false;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Hide the slide in presentation
            slide.Visible = False
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.SlideNumber">
            <summary>
            Gets the number of the current slide. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.Section">
            <summary>
            Returns the section instance of the slide. Read-only. 
            </summary>
            <Remark> If there is no sections associated with the slide then the Section property will be “null” </Remark>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.SlideID">
            <summary>
            Gets the Unique ID for the current slide. Read-only. The Unique ID ranges from 256 to 2147483647.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.NotesSlide">
            <summary>
            Gets the current notes slide instance. Returns null if no notes are present.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISlide.Comments">
             <summary>
             Returns the collection of slide comments. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add a paragraph to the textbody of the shape
             shape.TextBody.AddParagraph("Hi Syncfusion Customers");
             //Add a comment to the slide
             IComment comment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             //Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             //Get the collection of the comments
             IComments comments = slide.Comments;
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
            </code>
            <code lang="VB.NET">     
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'Add a paragraph to the text body of the shape
             shape.TextBody.AddParagraph()
             'Add a comment to the slide
             Dim comment As IComment = slide.Comments.Add(0.35, 0.04, "Author1", "A1", "Essential Presentation is available from 13.1 versions of Essential Studio", DateTime.Now);
             'Author2 add reply to a parent comment
             slide.Comments.Add("Author2", "A2", "Does it support rendering of slides as images or PDF?", DateTime.Now, comment);             
             'Get the collection of the comments
             Dim comments As IComments = slide.Comments;
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ISlides">
            <summary>
            Represents the slide collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Add">
             <summary>
             Adds a slide at the end of the slide collection.
             </summary>
             <returns>Returns the newly created <see cref="T:Syncfusion.Presentation.ISlide"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to presentation
             slides.Add();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to presentation
            slides.Add()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Add(Syncfusion.Presentation.ILayoutSlide)">
            <summary>
            Creates an <see cref="T:Syncfusion.Presentation.ISlide"/> instance with relation to the specified <see cref="T:Syncfusion.Presentation.ILayoutSlide"/> instance and adds it to the <see cref="T:Syncfusion.Presentation.ISlides"/> collection.
            </summary>
            <param name="layoutSlide">Layout slide instance </param>
            <returns>Returns the slide with the specified slide layout.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Add(Syncfusion.Presentation.ISlide)">
             <summary>
             Adds the specified slide at the end of the slide collection.
             </summary>
             <param name="value">Represents an <see cref="T:Syncfusion.Presentation.ISlide"/> instance to be added.</param>
             <returns>Returns the zero based index of the specified slide in the slide collection if found otherwise -1</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Retrieve the specific slide item, read only
             ISlide _slide = slides[0];
             slides.Add(_slide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Retrieve the specific slide item, read only
            Dim _slide As ISlide = slides(0)
            slides.Add(_slide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Add(Syncfusion.Presentation.ISlide,Syncfusion.Presentation.PasteOptions,Syncfusion.Presentation.IPresentation)">
             <summary>
             Adds the specified cloned slide at the end of slide collection with specified paste options.
             </summary>
             <param name="clonedSlide">An <see cref="T:Syncfusion.Presentation.ISlide"/> instance to be added to the destination presentation.</param>
             <param name="pasteOptions">Specifies the <see cref="T:Syncfusion.Presentation.PasteOptions"/> for merging the slide.</param>
             <param name="sourcePresentation">An <see cref="T:Syncfusion.Presentation.IPresentation"/> instance of the source presentation from which the slide is cloned from.</param>
             <remarks>The cloned slide can be added within the same presentation or this can be done between one presentation to another </remarks>
             <example>
             <code lang="CS">
             //Open the source presentation
             IPresentation sourcePresentation = Presentation.Open("Source.pptx");
             //Open the destination presentation
             IPresentation destinationPresentation = Presentation.Open("Destination.pptx");
             //Clone the first slide of the source presentation.
             ISlide clonedSlide = sourcePresentation.Slides[0].Clone();
             //Merge the cloned slide to the destination presentation with paste option - Destination Them.
             destinationPresentation.Slides.Add(clonedSlide, PasteOptions.UseDestinationTheme, sourcePresentation);
             //Save the destination presentation.
             destinationPresentation.Save("Output.pptx");
             </code>
            <code lang="VB.NET">
            'Open the source presentation
            Dim sourcePresentation As IPresentation = Presentation.Open("Source.pptx")
            'Open the destination presentation
            Dim destinationPresentation As IPresentation = Presentation.Open("Destination.pptx")
            'Clone the first slide of the source presentation.
            Dim clonedSlide As ISlide = sourcePresentation.Slides(0).Clone()
            'Merge the cloned slide to the destination presentation with paste option - Destination Them.
            destinationPresentation.Slides.Add(clonedSlide, PasteOptions.UseDestinationTheme, sourcePresentation)
            'Save the destination presentation.
            destinationPresentation.Save("Output.pptx")
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Add(Syncfusion.Presentation.SlideLayoutType)">
             <summary>
             Creates a slide with the specified layout type and adds the new slide to the end of slide collection.
             </summary>
             <param name="slideLayout">Specifies the slide layout type.</param>
             <returns>Returns the newly created <see cref="T:Syncfusion.Presentation.ISlide"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Insert(System.Int32,Syncfusion.Presentation.ISlide)">
             <summary>
             Inserts the specified slide into the slide collection at specified index.
             </summary>
             <param name="index">The zero-based index at which the slide should be inserted.</param>
             <param name="value">The slide value to insert.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Insert a slide at specific index in collection
             slides.Insert(2, slides.Add());
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Insert a slide at specific index in collection
            slides.Insert(2, slides.Add())
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.RemoveAt(System.Int32)">
             <summary>
             Removes the slide at the specified index, from the slide collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Open("Sample.pptx");
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides; 
             //Remove slide from specific index
             slides.RemoveAt(0);      
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Open("Sample.pptx")
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Remove slide from specific index
            slides.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Remove(Syncfusion.Presentation.ISlide)">
             <summary>
             Removes the first occurrence of a specified slide from the slide collection.
             </summary>
             <param name="value">The slide to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Remove a specific slide object
             slides.Remove(slide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Remove a specific slide object
            slides.Remove(slide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.IndexOf(Syncfusion.Presentation.ISlide)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.ISlide"/> instance within the slide collection.
             </summary>
             <param name="value">The <see cref="T:Syncfusion.Presentation.ISlide"/> instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of slide within the collection, if found; otherwise, –1.</returns>
             <example>
            <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Get the index of the slide instance
             int index = slides.IndexOf(slide);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Get the index of the slide instance
            Dim index As Integer = slides.IndexOf(slide)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ISlides.Clear">
             <summary>
             Removes all the slides in the presentation.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to collection 
             ISlide slide = slides.Add(SlideLayoutType.TwoContent);
             //Retrieve the specific slide item, read only
             ISlide _slide = slides[0];
             slides.Add(_slide);
             //Clear the slide collection
             slides.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to collection 
            Dim slide As ISlide = slides.Add(SlideLayoutType.TwoContent)
            'Retrieve the specific slide item, read only
            Dim _slide As ISlide = slides(0)
            slides.Add(_slide)
            'Clear the slide collection
            slides.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlides.Count">
             <summary>
             Gets the number of elements in the slide collection. Read-only.
             </summary>
             <value>
             The total count of the slides.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to presentation
             slides.Add();
             //Add a blank slide to the presentation.
             slides.Add(SlideLayoutType.Blank);
             //Add slide to the collection by passing the slide instance
             slides.Add(slides.Add(SlideLayoutType.Title));
             //Get the slide count, read only
             int count = slides.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to presentation
            slides.Add()
            'Add a blank slide to the presentation.
            slides.Add(SlideLayoutType.Blank)
            'Add slide to the collection by passing the slide instance
            slides.Add(slides.Add(SlideLayoutType.Title))
            'Get the slide count, read only
            Dim count As Integer = slides.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlides.Item(System.Int32)">
             <summary>
             Gets the <see cref="T:Syncfusion.Presentation.ISlide"/> instance at the specified index in slide collection. Read-only.
             </summary>
             <param name="index">The index to locate the slide.</param>
             <returns>Returns the slide at the specified index in slide collection.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to presentation
             slides.Add();
             //Add a blank slide to the presentation.
             slides.Add(SlideLayoutType.Blank);
             //Add slide to the collection by passing the slide instance
             slides.Add(slides.Add(SlideLayoutType.Title));
             //Retrieve the specific slide item, read only
             ISlide _slide = slides[0];
             //Set the slide name
             slide.Name = "My Slide";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Create instance to hold the slide collection
            Dim slides As ISlides = presentation__1.Slides
            'Add slide to presentation
            slides.Add()
            'Add a blank slide to the presentation.
            slides.Add(SlideLayoutType.Blank)
            'Add slide to the collection by passing the slide instance
            slides.Add(slides.Add(SlideLayoutType.Title))
            'Retrieve the specific slide item, read only
            Dim _slide As ISlide = slides(0)
            'Set the slide name
            slide.Name = "My Slide"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ISlideSize">
            <summary>
            Represents the size and bounds of a slide.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideSize.Type">
             <summary>
             Gets or sets the predefined size type.
             </summary>
             <value>
             The slide size type of the slide.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide size
             ISlideSize slideSize = slide.SlideSize;
             //Set the type of slide size
             slideSize.Type = SlideSizeType.Banner;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide size
            Dim slideSize As ISlideSize = slide.SlideSize
            'Set the type of slide size
            slideSize.Type = SlideSizeType.Banner
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideSize.Width">
             <summary>
             Gets the width, in points. Read-only.
             </summary>
             <value>
             The width of the slide.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide size
             ISlideSize slideSize = slide.SlideSize;
             //Get the width of the slide size, read only
             double width = slideSize.Width;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide size
            Dim slideSize As ISlideSize = slide.SlideSize
            'Get the width of the slide size, read only
            Dim width As Double = slideSize.Width
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideSize.Height">
             <summary>
             Gets the height, in points. Read-only.
             </summary>
             <value>
             The height of the slide.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide size
             ISlideSize slideSize = slide.SlideSize;
             //Get the height of the slide size, read only
             double height = slideSize.Height;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide size
            Dim slideSize As ISlideSize = slide.SlideSize
            'Get the height of the slide size, read only
            Dim height As Double = slideSize.Height
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ISlideSize.SlideOrientation">
             <summary>
             Gets or sets the slide orientation.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance for slide size
             ISlideSize slideSize = slide.SlideSize;
             //Retrieve the slide orientation
             SlideOrientation slideOrientation = slideSize.SlideOrientation;
             //Set the slide orientation
             slideOrientation = SlideOrientation.Landscape;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance for slide size
            Dim slideSize As ISlideSize = slide.SlideSize
            'Retrieve the slide orientation
            Dim slideOrientation__2 As SlideOrientation = slideSize.SlideOrientation
            'Set the slide orientation
            slideOrientation__2 = SlideOrientation.Landscape
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IFont">
            <summary>
            Represents the font attributes of the text.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.CapsType">
             <summary>
             Gets or sets the caps type.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set the caps type for text part
             font.CapsType = TextCapsType.Small;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set the caps type for text part
            font.CapsType = TextCapsType.Small
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Color">
             <summary>
             Gets or sets the foreground color of the text.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Create instance to hold color properties of font
             IColor color = font.Color;
             //Set font color for text part
             color = ColorObject.Green;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Create instance to hold color properties of font
            Dim color As IColor = font.Color
            'Set font color for text part
            color = ColorObject.Green
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Bold">
             <summary>
             Gets or sets a value that indicates whether the text is bold or not.
             </summary>
             <value>
               <c>true</c> if bold; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set text part with bold style 
             font.Bold = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set text part with bold style 
            font.Bold = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Italic">
             <summary>
             Gets or sets a boolean value that indicates whether the text is italic or not.
             </summary>
             <value>
               <c>true</c> if italic; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set text part with italic style 
             font.Italic = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set text part with italic style 
            font.Italic = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Subscript">
             <summary>
             Gets or sets a boolean value that indicates whether the text is subscript or not.
             </summary>
             <value>
               <c>true</c> if subscript; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set the subscript
             font.Subscript = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set the subscript
            font.Subscript = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Superscript">
             <summary>
             Gets or sets a boolean value that indicates whether the text is superscript or not.
             </summary>
             <value>
               <c>true</c> if superscript; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set the superscript
             font.Superscript = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set the superscript
            font.Superscript = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.FontName">
             <summary>
             Gets or sets the name of the font.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set the font name 
             font.FontName = "Calibri";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set the font name 
            font.FontName = "Calibri"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.FontSize">
             <summary>
             Gets or sets the size of the font.
             </summary>
             <example>
             <code lang="CS">
             ///Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set font size of the text
             font.FontSize = 32;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set font size of the text
            font.FontSize = 32
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.StrikeType">
             <summary>
             Gets or sets the strike through type.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set strike type for text part
             font.StrikeType = TextStrikethroughType.None;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set strike type for text part
            font.StrikeType = TextStrikethroughType.None
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IFont.Underline">
             <summary>
             Gets or sets the underline type.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Create instance by adding text part to the shape
             ITextPart textPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart");
             //Create font instance for text part
             IFont font = textPart.Font;
             //Set underline type of font
             font.Underline = TextUnderlineType.Dash;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Create instance by adding text part to the shape
            Dim textPart As ITextPart = shape.TextBody.AddParagraph().AddTextPart("First Paragraph, second TextPart")
            'Create font instance for text part
            Dim font As IFont = textPart.Font
            'Set underline type of font
            font.Underline = TextUnderlineType.Dash
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IListFormat">
            <summary>
            Represents a list or bullet formatting options.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IListFormat.Picture(System.IO.Stream)">
             <param name="picStream">The picture stream.</param>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the list type as Numbered
             paragraph.ListFormat.Type = ListType.Picture;
             //Set the image for the list.
             paragraph.ListFormat.Picture(new MemoryStream(Syncfusion.Drawing.Image.FromFile("Image.gif").ImageData));
             // Set the picture size. If 100, here means 100% of its text. Possible values can range from 25 to 400
             paragraph.ListFormat.Size = 150;
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the list type as Numbered
            paragraph.ListFormat.Type = ListType.Picture
            'Set the image for the list.
            paragraph.ListFormat.Picture(New MemoryStream(Syncfusion.Drawing.Image.FromFile("Image.gif").ImageData))
            ' Set the picture size. If 100, here means 100% of its text. Possible values can range from 25 to 400
            paragraph.ListFormat.Size = 150
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.BulletCharacter">
             <summary>
             Gets or sets the Unicode character value that is used for bullets in the specified text.
             </summary>
             <value>
             The character.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create list format instance for the paragraph
             IListFormat listFormat = paragraph.ListFormat;
             //Set the type of list
             listFormat.Type = ListType.Bulleted;
             //Set the character for bullet
             listFormat.BulletCharacter = '♠';
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create list format instance for the paragraph
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the type of list
            listFormat.Type = ListType.Bulleted
            'Set the character for bullet
            listFormat.BulletCharacter = "♠"C
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.NumberStyle">
             <value>
             The number style.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create instance for list format
             IListFormat listFormat = paragraph.ListFormat;
             //Set the list type as Numbered
             listFormat.Type = ListType.Numbered;
             //Set the numbered style (list numbering) as Arabic number following by period.
             listFormat.NumberStyle = NumberedListStyle.ArabicPeriod;
             //Set the starting value as 1
             listFormat.StartValue = 1;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create instance for list format
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the list type as Numbered
            listFormat.Type = ListType.Numbered
            'Set the numbered style (list numbering) as Arabic number following by period.
            listFormat.NumberStyle = NumberedListStyle.ArabicPeriod
            'Set the starting value as 1
            listFormat.StartValue = 1
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.StartValue">
             <value>
             The start value.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create instance for list format
             IListFormat listFormat = paragraph.ListFormat;
             //Set the list type as Numbered
             listFormat.Type = ListType.Numbered;
             //Set the numbered style (list numbering) as Arabic number following by period.
             listFormat.NumberStyle = NumberedListStyle.ArabicPeriod;
             //Set the starting value as 10
             listFormat.StartValue = 10;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create instance for list format
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the list type as Numbered
            listFormat.Type = ListType.Numbered
            'Set the numbered style (list numbering) as Arabic number following by period.
            listFormat.NumberStyle = NumberedListStyle.ArabicPeriod
            'Set the starting value as 10
            listFormat.StartValue = 10
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.Type">
             <summary>
             Gets or sets the <see cref="T:Syncfusion.Presentation.ListType"/>.
             </summary>
             <value>
             The type.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             //Add another paragraph to the text body
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -25;
             //Retrieve the list format of paragraph
             IListFormat listFormat = paragraph.ListFormat;
             //Set the list type as Numbered
             listFormat.Type = ListType.Numbered;
             //Set the numbered style (list numbering) as Arabic number following by period.
             listFormat.NumberStyle = NumberedListStyle.ArabicPeriod;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            'Add another paragraph to the text body
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -25
            'Retrieve the list format of paragraph
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the list type as Numbered
            listFormat.Type = ListType.Numbered
            'Set the numbered style (list numbering) as Arabic number following by period.
            listFormat.NumberStyle = NumberedListStyle.ArabicPeriod
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.Size">
             <summary>
             Gets or sets the list size relative to the size of the first text character in the paragraph.
             </summary>
             <value>
             The size.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create instance for list format
             IListFormat listFormat = paragraph.ListFormat;
             //Set the list type as Numbered
             listFormat.Type = ListType.Numbered;
             //Set the numbered style (list numbering) as Arabic number following by period.
             listFormat.NumberStyle = NumberedListStyle.ArabicPeriod;
             //Set the starting value as 1
             listFormat.StartValue = 1;
             // Set the bullet character size. If 100, here means 100% of its text. Possible values can range from 25 to 400
             listFormat.Size = 100;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create instance for list format
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the list type as Numbered
            listFormat.Type = ListType.Numbered
            'Set the numbered style (list numbering) as Arabic number following by period.
            listFormat.NumberStyle = NumberedListStyle.ArabicPeriod
            'Set the starting value as 1
            listFormat.StartValue = 1
            ' Set the bullet character size. If 100, here means 100% of its text. Possible values can range from 25 to 400
            listFormat.Size = 100
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.FontName">
             <summary>
             Gets or sets the font name for the list.
             </summary>
             <value>
             The name of the font.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             //Add another paragraph to the text body
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create list format instance for the paragraph
             IListFormat listFormat = paragraph.ListFormat;
             //Set the type of list
             listFormat.Type = ListType.Bulleted;           
             //Set font name for the bullet
             listFormat.FontName = "Helvetica";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            'Add another paragraph to the text body
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create list format instance for the paragraph
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the type of list
            listFormat.Type = ListType.Bulleted
            'Set font name for the bullet
            listFormat.FontName = "Helvetica"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IListFormat.Color">
             <summary>
             Gets or sets the color of <see cref="T:Syncfusion.Presentation.IColor"/> instance.
             </summary>
             <value>
             The color.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             //Add another paragraph to the text body
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Create list format instance for the paragraph
             IListFormat listFormat = paragraph.ListFormat;
             //Set the type of list
             listFormat.Type = ListType.Bulleted;
             //Set the character for bullet
             listFormat.BulletCharacter = '♠';
             //Set the color of the bullet
             listFormat.Color = ColorObject.FromArgb(23, 12, 234);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.///Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            'Add another paragraph to the text body
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Create list format instance for the paragraph
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the type of list
            listFormat.Type = ListType.Bulleted
            'Set the character for bullet
            listFormat.BulletCharacter = "♠"C
            'Set the color of the bullet
            listFormat.Color = ColorObject.FromArgb(23, 12, 234)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IParagraph">
            <summary>
            Represents a paragraph in the shape.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraph.AddTextPart">
             <summary>
             Adds a text part to the text part collection.
             </summary>
             <returns>
             Returns an <see cref="T:Syncfusion.Presentation.ITextPart"/> instance this method creates.
             </returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance for text part
             ITextPart text part = paragraph.AddTextPart();
             //Set text for the text part
             text part.Text = " First Paragraph, second Textpart";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance for text part
            Dim text part As ITextPart = paragraph.AddTextPart()
            'Set text for the text part
            text part.Text = " First Paragraph, second Textpart"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraph.AddTextPart(System.String)">
             <summary>
             Adds a text part to the text part collection with the specified text.
             </summary>
             <param name="text">The text content to initialize the new <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ITextPart"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraph.AddHyperlink(System.String,System.String)">
            <summary>
            Adds the hyperlink to the textpart with the specified link.
            </summary>
            <param name="textToDisplay">The text content to initialize the new <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</param>
            <param name="link">Represents the address of the target document path or web url.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.ListFormat">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IListFormat"/> instance that represents the list formatting for the specified paragraph. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Get the list format of paragraph, read only
             IListFormat listFormat = paragraph.ListFormat;
             //Set the list type
             listFormat.Type = ListType.Bulleted;
             //Set the character for bullet
             listFormat.BulletCharacter = '♠';
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Get the list format of paragraph, read only
            Dim listFormat As IListFormat = paragraph.ListFormat
            'Set the list type
            listFormat.Type = ListType.Bulleted
            'Set the character for bullet
            listFormat.BulletCharacter = "♠"C
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.Text">
             <summary>
             Gets the text content of the paragraph. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Add text part to the paragraph
             ITextPart text part = paragraph.AddTextPart();
             //Set text for the text part
             text part.Text = " First Paragraph, second Textpart";
             //Get the paragraph text, it is read only 
             string entireText = paragraph.Text;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Add text part to the paragraph
            Dim text part As ITextPart = paragraph.AddTextPart()
            'Set text for the text part
            text part.Text = " First Paragraph, second Textpart"
            'Get the paragraph text, it is read only 
            Dim entireText As String = paragraph.Text
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.HorizontalAlignment">
             <summary>
             Gets or sets the horizontal alignment of the paragraph.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set the horizontal alignment 
             paragraph.HorizontalAlignment = HorizontalAlignmentType.Justify;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set the horizontal alignment 
            paragraph.HorizontalAlignment = HorizontalAlignmentType.Justify
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.TextParts">
             <summary>
             Gets the text part collection of <see cref="T:Syncfusion.Presentation.ITextParts"/> instance. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);           
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Create instance for text part
             ITextPart text part = paragraph.AddTextPart();
             //Set text for the text part
             text part.Text = " First Paragraph, second Textpart";
             //Get the collection of text part in a paragraph, it is read only
             ITextParts text parts = paragraph.TextParts;
             //Set the first text part with bold style
             text parts[0].Font.Bold = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Create instance for text part
            Dim text part As ITextPart = paragraph.AddTextPart()
            'Set text for the text part
            text part.Text = " First Paragraph, second Textpart"
            'Get the collection of text part in a paragraph, it is read only
            Dim text parts As ITextParts = paragraph.TextParts
            'Set the first text part with bold style
            text parts(0).Font.Bold = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.Font">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFont"/> instance of the paragraph. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Retrieve the paragraph font
             IFont font = paragraph.Font;
             //Set the font size
             font.FontSize = 26;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Retrieve the paragraph font
            Dim font As IFont = paragraph.Font
            'Set the font size
            font.FontSize = 26
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.FirstLineIndent">
             <summary>
             Gets or sets the first line indent of the paragraph, in points.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.LeftIndent">
             <summary>
             Gets or sets the left indent of the paragraph, in points. 
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);           
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Set the left indent 
             paragraph.LeftIndent = 20;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Set the left indent 
            paragraph.LeftIndent = 20
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.IndentLevelNumber">
             <summary>
             Gets or sets the indent level as an integer from 0 to 8, where 0 indicates a first-level 
             paragraph with no indentation.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Create instance for text part
             ITextPart text part = paragraph.AddTextPart();
             //Set text for the text part
             text part.Text = " First Paragraph, second Textpart";
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Create instance for text part
            Dim text part As ITextPart = paragraph.AddTextPart()
            'Set text for the text part
            text part.Text = " First Paragraph, second Textpart"
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.LineSpacing">
             <summary>
             Gets or sets the line spacing, in points. 
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);           
             //Add first paragraph to the text body
             IParagraph paragraph = shape.TextBody.AddParagraph();
             //Add first text part to the paragraph
             paragraph.AddTextPart("First Paragraph, First Textpart");
             //Set line spacing for paragraph
             paragraph.LineSpacing = 20;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add first paragraph to the text body
            Dim paragraph As IParagraph = shape.TextBody.AddParagraph()
            'Add first text part to the paragraph
            paragraph.AddTextPart("First Paragraph, First Textpart")
            'Set line spacing for paragraph
            paragraph.LineSpacing = 20
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.SpaceAfter">
             <summary>
             Gets or sets the amount of space after the last line in each paragraph of the specified text, in points.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set space after 
             paragraph.SpaceAfter = 30;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set space after 
            paragraph.SpaceAfter = 30
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraph.SpaceBefore">
             <summary>
             Gets or sets the amount of space before the first line in each paragraph of the specified text, in points.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation instance.
             IPresentation presentation = Presentation.Create();
             //Add the slide into the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             // Add a text box to hold the list
             IShape textBoxShape = slide.AddTextBox(65, 140, 410, 270);
             // Add a new paragraph with the text in the left hand side text box.
             IParagraph paragraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
             //Set space before 
             paragraph.SpaceBefore = 10;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation instance.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add the slide into the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            ' Add a text box to hold the list
            Dim textBoxShape As IShape = slide.AddTextBox(65, 140, 410, 270)
            ' Add a new paragraph with the text in the left hand side text box.
            Dim paragraph As IParagraph = textBoxShape.TextBody.AddParagraph("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")
            'Set space before 
            paragraph.SpaceBefore = 10
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IParagraphs">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IParagraph"/> instance in a <see cref="T:Syncfusion.Presentation.ITextBody"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.Add">
             <summary>
             Adds a paragraph at the end of the paragraph collection.
             </summary>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IParagraph"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.Add(System.String)">
             <summary>
             Adds a paragraph with the specified text, at the end of the paragraph collection.
             </summary>
             <param name="text">Specifies the text content to add.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IParagraph"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation. 
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Add paragraph to collection
             IParagraph paragraph = paragraphs.Add("Lorem ipsum dolor sit amet, consectetur adipiscing elit");
             //Retrieve the paragraph font
             IFont font = paragraph.Font;
             //Set the font size
             font.FontSize = 26;
             //Set the horizontal alignment 
             paragraph.HorizontalAlignment = HorizontalAlignmentType.Justify;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation 
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Add paragraph to collection
            Dim paragraph As IParagraph = paragraphs.Add("Lorem ipsum dolor sit amet, consectetur adipiscing elit")
            'Retrieve the paragraph font
            Dim font As IFont = paragraph.Font
            'Set the font size
            font.FontSize = 26
            'Set the horizontal alignment 
            paragraph.HorizontalAlignment = HorizontalAlignmentType.Justify
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.Remove(Syncfusion.Presentation.IParagraph)">
             <summary>
             Removes the first occurrence of a specified <see cref="T:Syncfusion.Presentation.IParagraph"/> instance from the paragraph collection.
             </summary>
             <param name="item">The paragraph instance to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Add paragraph to collection
             IParagraph paragraph = paragraphs.Add(", consectetur adipiscing elit");
             //Remove a specific paragraph instance
             paragraphs.Remove(paragraph);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Add paragraph to collection
            Dim paragraph As IParagraph = paragraphs.Add(", consectetur adipiscing elit")
            'Remove a specific paragraph instance
            paragraphs.Remove(paragraph)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:Syncfusion.Presentation.IParagraph"/> instance at the specified index of the paragraph collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Add paragraph to collection
             IParagraph paragraph = paragraphs.Add(", consectetur adipiscing elit");
             //Remove paragraph at specific index
             paragraphs.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Add paragraph to collection
            Dim paragraph As IParagraph = paragraphs.Add(", consectetur adipiscing elit")
            'Remove paragraph at specific index
            paragraphs.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.IndexOf(Syncfusion.Presentation.IParagraph)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IParagraph"/> instance within the collection.
             </summary>
             <param name="item">The IParagraph instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of the paragraph within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Create instance for paragraph
             IParagraph paragraph = paragraphs.Add(", consectetur adipiscing elit");
             //Get the index of specific paragraph instance
             int index = paragraphs.IndexOf(paragraph);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Create instance for paragraph
            Dim paragraph As IParagraph = paragraphs.Add(", consectetur adipiscing elit")
            'Get the index of specific paragraph instance
            Dim index As Integer = paragraphs.IndexOf(paragraph)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IParagraphs.Clear">
             <summary>
             Removes all the elements from paragraph collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation. 
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Add paragraph to paragraphs
             paragraphs.Add("sed do eiusmod tempor incididunt");
             paragraphs.Add("ut labore et dolore magna aliqua.");
             //Clear the paragraph collection
             paragraphs.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation. 
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Add paragraph to paragraphs
            paragraphs.Add("sed do eiusmod tempor incididunt")
            paragraphs.Add("ut labore et dolore magna aliqua.")
            'Clear the paragraph collection
            paragraphs.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraphs.Count">
             <summary>
             Gets the number of elements in the paragraph collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Create instance for paragraph
             IParagraph paragraph = paragraphs.Add(", consectetur adipiscing elit");
             //Get the paragraphs count, read only
             int count = paragraphs.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Create instance for paragraph
            Dim paragraph As IParagraph = paragraphs.Add(", consectetur adipiscing elit")
            'Get the paragraphs count, read only
            Dim count As Integer = paragraphs.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IParagraphs.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.IParagraph"/> instance at the specified index from the collection. Read-only.
             </summary>
             <param name="index">Determines the index of the text part.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IParagraph"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //Create instance to hold paragraph collection
             IParagraphs paragraphs = shape.TextBody.Paragraphs;
             //Add paragraph to collection; in turn add text part
             paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet");
             //Create instance for paragraph
             IParagraph paragraph = paragraphs.Add(", consectetur adipiscing elit");
             //Get the specific paragraph instance, read only
             IParagraph paragraph = paragraphs[0];
             // Set the hanging value
             paragraph.FirstLineIndent = -20;
             //Set the list level as 1
             paragraph.IndentLevelNumber = 1;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'Create instance to hold paragraph collection
            Dim paragraphs As IParagraphs = shape.TextBody.Paragraphs
            'Add paragraph to collection; in turn add text part
            paragraphs.Add().TextParts.Add("Lorem ipsum dolor sit amet")
            'Create instance for paragraph
            Dim paragraph As IParagraph = paragraphs.Add(", consectetur adipiscing elit")
            'Get the specific paragraph instance, read only
            Dim paragraph As IParagraph = paragraphs(0)
            ' Set the hanging value
            paragraph.FirstLineIndent = -20
            'Set the list level as 1
            paragraph.IndentLevelNumber = 1
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ITextBody">
            <summary>
            Represents the alignment and anchoring of the text.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ITextBody.AddParagraph">
             <summary>
             Adds a paragraph at the end of the paragraph collection.
             </summary>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IParagraph"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");   
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextBody.AddParagraph(System.String)">
             <summary>
             Adds a paragraph at the end of the collection.
             </summary>
             <param name="text">Represents the text content.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IParagraph"/> instance this method creates.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph("Add First Paragraph");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph("Add First Paragraph")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.MarginBottom">
             <summary>
             Gets or sets the distance between the bottom of the text body and the bottom of the rectangle shape that contains the text, in points. Value ranges from 1 to 1583.
             </summary>
             <value>
             The margin bottom of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set the Margin bottom
             textBody.MarginBottom = 100;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set the Margin bottom
            textBody.MarginBottom = 100
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.MarginLeft">
             <summary>
             Gets or sets the distance between the left edge of the text body and the left edge of the rectangle shape that contains the text, in points. Value ranges from 1 to 1583.
             </summary>
             <value>
             The margin left of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set the Margin left
             textBody.MarginLeft = 150;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set the Margin left
            textBody.MarginLeft = 130
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.MarginRight">
             <summary>
             Gets or sets the distance between the right edge of the text body and the right edge of the rectangle shape that contains the text, in points. Value ranges from 1 to 1583.
             </summary>
             <value>
             The margin right of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set the Margin right
             textBody.MarginRight = 50;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set the Margin right
            textBody.MarginRight = 160
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.MarginTop">
             <summary>
             Gets or sets the distance between the top of the text body and the top of the rectangle shape that contains the text, in points. Value ranges from 1 to 1583.
             </summary>
             <value>
             The margin top of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set the Margin top
             textBody.MarginTop = 140;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set the Margin Top
            textBody.MarginTop = 200
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.Paragraphs">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IParagraphs"/> instance that represents the paragraph collection. Read-only.
             </summary>
             <value>
             The paragraphs object of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Retrieve the paragraph from text body
             IParagraph paragraph = textBody.Paragraphs[0];
             //Add second text part to the first paragraph
             paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Retrieve the paragraph from text body
            Dim paragraph As IParagraph = textBody.Paragraphs(0)
            'Add second text part to the first paragraph
            paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.Text">
             <summary>
             Gets the text content of the text body.
             </summary>
             <value>
             The text of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Get the text of text body, read only
             string text = textBody.Text;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Get the text of text body, read only
            Dim text As String = textBody.Text
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.WrapText">
             <summary>
             Gets or sets a boolean value indicates whether lines break automatically to fit inside the shape. 
             </summary>
             <value>
               <c>true</c> if [wrap text]; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Retrieve the paragraph from text body
             IParagraph paragraph = textBody.Paragraphs[0];
             //Add second text part to the first paragraph
             paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph";
             //Set wrap text to fit the text within shape
             textBody.WrapText = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Retrieve the paragraph from text body
            Dim paragraph As IParagraph = textBody.Paragraphs(0)
            'Add second text part to the first paragraph
            paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph"
            'Set wrap text to fit the text within shape
            textBody.WrapText = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.VerticalAlignment">
             <summary>
             Gets or sets the vertical alignment of text in a text body.
             </summary>
             <value>
             The vertical alignment type of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Retrieve the paragraph from text body
             IParagraph paragraph = textBody.Paragraphs[0];
             //Add second text part to the first paragraph
             paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph";
             //Set vertical alignment
             textBody.VerticalAlignment = VerticalAlignmentType.Middle;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Retrieve the paragraph from text body
            Dim paragraph As IParagraph = textBody.Paragraphs(0)
            'Add second text part to the first paragraph
            paragraph.AddTextPart().Text = ",2nd text part in 1st paragraph"
            'Set vertical alignment
            textBody.VerticalAlignment = VerticalAlignmentType.Middle
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.AnchorCenter">
             <summary>
             Gets or sets a boolean value indicates whether to anchor center with the vertical alignment.
             </summary>
             <value>
               <c>true</c> if [anchor center]; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set anchor center to the textBody 
             textBody.AnchorCenter = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set anchor center to the textBody 
            textBody.AnchorCenter = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextBody.TextDirection">
             <summary>
             Gets or sets the text direction.
             </summary>
             <value>
             The text direction type of the TextBody.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 350);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph
             IParagraph paragraph1 = textBody.AddParagraph();
             //Add first text part to the paragraph
             textBody.Paragraphs[0].AddTextPart("Add First Paragraph");
             //Set the text direction
             textBody.TextDirection = TextDirectionType.Horizontal;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 350)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph
            Dim paragraph1 As IParagraph = textBody.AddParagraph()
            'Add first text part to the paragraph
            textBody.Paragraphs(0).AddTextPart("Add First Paragraph")
            'Set the text direction
            textBody.TextDirection = TextDirectionType.Horizontal
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ITextPart">
            <summary>
            Represents an individual text part in a paragraph.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ITextPart.SetHyperlink(System.String)">
             <summary>
             Sets the hyperlink to the textpart.
             </summary>
             <param name="link">Represents the address of the target hyperlink</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
             <remarks>The target can be a document path, web url, target slide, email_id.</remarks>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presDoc = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph to text body
             textBody.AddParagraph();
             //Create instance for text part 
             ITextPart textPart = textBody.Paragraphs[0].AddTextPart();
             //Set HperLink for this textpart
             IHyperLink hyperLink = textPart.SetHyperlink("www.syncfusion.com");
             //Save the presentation to the file system.
             presDoc.Save("Output.pptx");
             //Close the presentation
             presDoc.Close();
             </code>
            <code lang="VB.NET">
             Dim presDoc As IPresentation = Presentation.Create()
             ‘Add slide to the presentation
             Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
             ‘Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
             'Add a text box to the slide
             Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
             'create instance for text body from shape
             Dim textBody As ITextBody = shape.TextBody
             'Add first paragraph to text body
             textBody.AddParagraph()
             'Create instance for text part 
             Dim textPart As ITextPart = textBody.Paragraphs(0).AddTextPart()
             'Set HperLink for this textpart
             Dim hyperLink As IHyperLink = textPart.SetHyperlink("www.syncfusion.com")
             ‘Save the presentation
             presDoc.Save("Sample.pptx")
             ‘Close the presentation
             presDoc.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextPart.RemoveHyperLink">
            <summary>
            Removes the hyperlink from the current textpart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ITextPart.Font">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFont"/> instance of the text part. Read-only.
             </summary>
             <value>
             The font of the TextPart.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph to text body
             textBody.AddParagraph();
             //Create instance for text part 
             ITextPart textPart = textBody.Paragraphs[0].AddTextPart("FirstParagraph, first TextPart");
             //Create instance to hold font properties of text part
             IFont font = textPart.Font;
             //Set the bold style
             font.Bold = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph to text body
            textBody.AddParagraph()
            'Create instance for text part 
            Dim textPart As ITextPart = textBody.Paragraphs(0).AddTextPart("FirstParagraph, first TextPart")
            'Create instance to hold font properties of text part
            Dim font As IFont = textPart.Font
            'Set the bold style
            font.Bold = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextPart.Text">
             <summary>
             Gets or sets the text content.
             </summary>
             <value>
             The text value of the TextPart.
             </value>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph to text body
             textBody.AddParagraph();
             //Create instance for text part 
             ITextPart textPart = textBody.Paragraphs[0].AddTextPart();
             //Set text for the text part
             textPart.Text = "FirstParagraph, first TextPart";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph to text body
            textBody.AddParagraph()
            'Create instance for text part 
            Dim textPart As ITextPart = textBody.Paragraphs(0).AddTextPart()
            'Set text for the text part
            textPart.Text = "FirstParagraph, first TextPart"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextPart.UnderlineColor">
             <summary>
             Gets or sets the underline color for the text.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //create instance for text body from shape
             ITextBody textBody = shape.TextBody;
             //Add first paragraph to text body
             textBody.AddParagraph();
             //Create instance for text part 
             ITextPart textPart = textBody.Paragraphs[0].AddTextPart();
             //Set text for the text part
             textPart.Text = "FirstParagraph, first TextPart";
             IColor underlineColor = textPart.UnderlineColor;
             //Set the text part underline color
             underlineColor = ColorObject.Navy;           
             //Set underline type for text part
             textPart.Font.Underline = TextUnderlineType.Double;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'create instance for text body from shape
            Dim textBody As ITextBody = shape.TextBody
            'Add first paragraph to text body
            textBody.AddParagraph()
            'Create instance for text part 
            Dim textPart As ITextPart = textBody.Paragraphs(0).AddTextPart()
            'Set text for the text part
            textPart.Text = "FirstParagraph, first TextPart"
            Dim underlineColor As IColor = textPart.UnderlineColor
            'Set the text part underline color
            underlineColor = ColorObject.Navy
            'Set underline type for text part
            textPart.Font.Underline = TextUnderlineType.[Double]
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextPart.Hyperlink">
            <summary>
            Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance that represents the hyperlink for the specified textpart. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.ITextParts">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.ITextPart"/> instance in a paragraph.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.Add">
             <summary>
             Adds a new <see cref="T:Syncfusion.Presentation.ITextPart"/> instance to the text part collection.
             </summary>
             <returns>Returns the newly created <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.Remove(Syncfusion.Presentation.ITextPart)">
             <summary>
             Removes the first occurrence of a specified <see cref="T:Syncfusion.Presentation.ITextPart"/> instance from the text part collection.
             </summary>
             <param name="item">Represents the <see cref="T:Syncfusion.Presentation.ITextPart"/> instance to remove.</param>
              /// /// <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add text part to collection
             text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "My Textpart";
             //Remove a particular text part from collection
             text parts.Remove(text part);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add text part to collection
            text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "My Textpart"
            'Remove a particular text part from collection
            text parts.Remove(text part)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.RemoveAt(System.Int32)">
             <summary>
             Removes the <see cref="T:Syncfusion.Presentation.ITextPart"/> instance at the specified index of the text part collection.
             </summary>
             <param name="index">The zero-based index of the text part to be removed.</param>
             /// <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add text part to collection
             text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "My Textpart";
             //Remove text part at specific index
             text parts.RemoveAt(1);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add text part to collection
            text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "My Textpart"
            'Remove text part at specific index
            text parts.RemoveAt(1)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.IndexOf(Syncfusion.Presentation.ITextPart)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.ITextPart"/> instance within the collection.
             </summary>
             <param name="item">The <see cref="T:Syncfusion.Presentation.ITextPart"/> instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of <see cref="T:Syncfusion.Presentation.ITextPart"/> instance within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add text part to collection
             text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "My Textpart";
             //Get the index position of a text part
             int index = text parts.IndexOf(text part);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add text part to collection
            text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "My Textpart"
            'Get the index position of a text part
            Dim index As Integer = text parts.IndexOf(text part)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.Clear">
             <summary>
             Removes all the <see cref="T:Syncfusion.Presentation.ITextPart"/> instance from text part collection.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add a text part to the collection
             ITextPart text part = text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab"); 
             //Clear the text parts
             text parts.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Clear the text parts
            text parts.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.Add(System.String)">
             <summary>
             Adds a new <see cref="T:Syncfusion.Presentation.ITextPart"/> instance at the end of the text part collection with the specified text.
             </summary>
             <param name="text">Represents the text content to initialize the text part.</param>
             <returns>Returns the newly added <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add a text part to the collection
             ITextPart text part = text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab");      
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITextParts.Contains(System.String)">
             <summary>
             Returns a boolean value indicates whether the specified text content is in the text part collection or not.
             </summary>
             <param name="text">The text to locate in the text part collection.</param>
             <returns>Returns true if text founds in the collection otherwise false</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add text part to collection
             text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab");
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "My Textpart";
             //Check if text exist in the text part collection
             if (text parts.Contains("My Textpart"))
             text parts.RemoveAt(1);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add text part to collection
            text parts.Add("Reynold Xin, PhD student at UC Berkeley AMPLab")
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "My Textpart"
            'Check if text exist in the text part collection
            If text parts.Contains("My Textpart") Then
            	text parts.RemoveAt(1)
            End If
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextParts.Count">
             <summary>
             Gets the number of elements in the text part collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab";
             //Add text part to paragraph
             shape.TextBody.Paragraphs[0].AddTextPart("First Paragraph, second TextPart");
             //Get the count of the text parts, read only
             int count = text parts.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab"
            'Add text part to paragraph
            shape.TextBody.Paragraphs(0).AddTextPart("First Paragraph, second TextPart")
            'Get the count of the text parts, read only
            Dim count As Integer = text parts.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITextParts.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.ITextPart"/> instance at the specified index of the collection. Read-only.
             </summary>
             <param name="index">Determines the index of the text part.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Add a blank slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add a text box to the slide
             IShape shape = slide.Shapes.AddTextBox(100, 150, 300, 200);
             //Add paragraph to the shape's text body
             IParagraph paragraph = shape.TextBody.Paragraphs.Add();
             //Retrieve the text parts of a paragraph
             ITextParts text parts = paragraph.TextParts;
             //Add a text part to the collection
             ITextPart text part = text parts.Add();
             //Set text to text part
             text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab";
             //Add text part to paragraph
             shape.TextBody.Paragraphs[0].AddTextPart();
             //Retrieve the text part using index position
             ITextPart _text part = text parts[1];
             //Set the font name for text part
             _text part.Font.FontName = "Calibri";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add a blank slide to the presentation.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a text box to the slide
            Dim shape As IShape = slide.Shapes.AddTextBox(100, 150, 300, 200)
            'Add paragraph to the shape's text body
            Dim paragraph As IParagraph = shape.TextBody.Paragraphs.Add()
            'Retrieve the text parts of a paragraph
            Dim text parts As ITextParts = paragraph.TextParts
            'Add a text part to the collection
            Dim text part As ITextPart = text parts.Add()
            'Set text to text part
            text part.Text = "Reynold Xin, PhD student at UC Berkeley AMPLab"
            'Add text part to paragraph
            shape.TextBody.Paragraphs(0).AddTextPart()
            'Retrieve the text part using index position
            Dim _text part As ITextPart = text parts(1)
            'Set the font name for text part
            _text part.Font.FontName = "Calibri"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ICell">
            <summary>
            Represents the table cell.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ICell.Clone">
            <summary>
            Creates a copy of the current cell.
            </summary>
            <returns>Returns the cloned cell object</returns>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.CellBorders">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ICellBorders"/> instance that represents the borders and diagonal lines of a cell. Read-only.
            </summary>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties, read only
            ICellBorders cellBorders = cell.CellBorders;
            //Set the Cell border property
            cellBorders.BorderBottom.BeginArrowheadLength = ArrowheadLength.Medium;
            //Save the presentation
            presentation.Save("CellBorders.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties, read only
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Set the Cell border property
            cellBorders.BorderBottom.BeginArrowheadLength = ArrowheadLength.Medium
            'Save the presentation
            presentation__1.Save("CellBorders.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.ColumnSpan">
            <summary>
            Gets or sets the number of cells merged in a row.
            </summary>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Set the column span
            cell.ColumnSpan = 2;
            //Save the presentation
            presentation.Save("ColumnSpan.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Set the column span
            cell.ColumnSpan = 2
            'Save the presentation
            presentation__1.Save("ColumnSpan.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.ColumnWidth">
            <summary>
            Gets or sets the column width in points.
            </summary>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Set the column width
            cell.ColumnWidth = 40;
            //Save the presentation
            presentation.Save("ColumnWidth.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Set the column width
            cell.ColumnWidth = 40
            'Save the presentation
            presentation__1.Save("ColumnWidth.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.Fill">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IFill"/> instance that contains fill formatting options. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
             //Get the cell from a row in a table
             ICell cell = table.Rows[0].Cells[0];
             //Set the fill type of the cell as solid
             cell.Fill.FillType = FillType.Solid;
             //Set color for the solid fill
             cell.Fill.SolidFill.Color = ColorObject.FromArgb(10, 34, 89, 32);
             //Save the presentation
             presentation.Save("CellFill.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create instance of PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add slide to the presentation
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
             'Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
             'Get the cell from a row in a table
             Dim cell As ICell = table.Rows(0).Cells(0)
             'Set the fill type of the cell as solid
             cell.Fill.FillType = FillType.Solid
             'Set color for the solid fill
             cell.Fill.SolidFill.Color = ColorObject.FromArgb(10, 34, 89, 32)
             'Save the presentation
             presentation__1.Save("CellFill.pptx")
             'Close the presentation
             presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.IsHorizontalMerge">
            <summary>
            Gets whether this cell is part of a horizontally merged cells. Read-only.
            </summary>
            <value>
              <c>true</c> if horizontal merge; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Set the column span
            cell.ColumnSpan = 2;
            //Check if it is horizontal merge, it is read only
            bool horizontalMerge = cell.IsHorizontalMerge;
            //Save the presentation
            presentation.Save("HorizontalMerge.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Set the column span
            cell.ColumnSpan = 2
            'Check if it is horizontal merge, it is read only
            Dim horizontalMerge As Boolean = cell.IsHorizontalMerge
            'Save the presentation
            presentation__1.Save("HorizontalMerge.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.RowSpan">
            <summary>
            Gets or sets the number of cells merged in a column.
            </summary>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Set the row span
            cell.RowSpan = 2;
            //Save the presentation
            presentation.Save("RowSpan.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Set the row span
            cell.RowSpan = 2
            'Save the presentation
            presentation__1.Save("RowSpan.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.TextBody">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ITextBody"/> instance that represents the text in a paragraph. Read-only.
             </summary>
            <example>
            <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
             //Get the cell from a row in a table
             ICell cell = table.Rows[0].Cells[0];
             //Set the text content for the cell
             cell.TextBody.AddParagraph("First row First Cell");
             //Save the presentation
             presentation.Save("CellTextBody.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
             'Create instance of PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add slide to the presentation
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
             'Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
             'Get the cell from a row in a table
             Dim cell As ICell = table.Rows(0).Cells(0)
             'Set the text content for the cell
             cell.TextBody.AddParagraph("First row First Cell")
             'Save the presentation
             presentation__1.Save("CellTextBody.pptx")
             'Close the presentation
             presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICell.IsVerticalMerge">
            <summary>
            Gets whether this cell is part of a vertically merged cells. Read-only.
            </summary>
            <value>
              <c>true</c> if vertical merge; otherwise, <c>false</c>.
            </value>
            <example>
            <code lang="C#">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Set the column span
            cell.ColumnSpan = 2;
            //Check if it is vertical merge, it is read only
            bool verticalMerge = cell.IsVerticalMerge;
            //Save the presentation
            presentation.Save("VerticalMerge.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Set the column span
            cell.ColumnSpan = 2
            'Check if it is vertical merge, it is read only
            Dim verticalMerge As Boolean = cell.IsVerticalMerge
            'Save the presentation
            presentation__1.Save("VerticalMerge.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ICellBorders">
            <summary>
            Represent the borders and diagonal lines of a cell.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderBottom">
             <summary>
             Gets the bottom border of the cell. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
             //Get the cell from a row in a table
             ICell cell = table.Rows[0].Cells[0];
             //Get the cell border properties
             ICellBorders cellBorders = cell.CellBorders;
             //Get the border bottom of the cell, read only
             ILineFormat borderBottom = cellBorders.BorderBottom;
             //Set the begin arrow head length
             borderBottom.BeginArrowheadLength = ArrowheadLength.Long;
             //Set the dash style of border bottom
             borderBottom.DashStyle = LineDashStyle.DashDotDot;
             //Set the weight
             borderBottom.Weight = 5;
             //Save the presentation
             presentation.Save("BorderBottom.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create instance of PowerPoint presentation
             Dim presentation__1 As IPresentation = Presentation.Create()
             'Add slide to the presentation
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
             'Add table to the slide
             Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
             'Get the cell from a row in a table
             Dim cell As ICell = table.Rows(0).Cells(0)
             'Get the cell border properties
             Dim cellBorders As ICellBorders = cell.CellBorders
             'Get the border bottom of the cell, read only
             Dim borderBottom As ILineFormat = cellBorders.BorderBottom
             'Set the begin arrow head length
             borderBottom.BeginArrowheadLength = ArrowheadLength.[Long]
             'Set the dash style of border bottom
             borderBottom.DashStyle = LineDashStyle.DashDotDot
             'Set the weight
             borderBottom.Weight = 5
             'Save the presentation
             presentation__1.Save("BorderBottom.pptx")
             'Close the presentation
             presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderDiagonalDown">
            <summary>
            Gets the diagonal down border of the cell. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties
            ICellBorders cellBorders = cell.CellBorders;
            //Get the border diagonal down of the cell, read only
            ILineFormat borderDiagonalDown = cellBorders.BorderDiagonalDown;
            //Set the fill type of border diagonal down
            borderDiagonalDown.Fill.FillType = FillType.Solid;
            //Set the color for solid fill
            borderDiagonalDown.Fill.SolidFill.Color = ColorObject.Navy;
            //Save the presentation
            presentation.Save("BorderDiagonalDown.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Get the border diagonal down of the cell, read only
            Dim borderDiagonalDown As ILineFormat = cellBorders.BorderDiagonalDown
            'Set the fill type of border diagonal down
            borderDiagonalDown.Fill.FillType = FillType.Solid
            'Set the color for solid fill
            borderDiagonalDown.Fill.SolidFill.Color = ColorObject.Navy
            'Save the presentation
            presentation__1.Save("BorderDiagonalDown.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderDiagonalUp">
            <summary>
            Gets the diagonal up border of the cell. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties
            ICellBorders cellBorders = cell.CellBorders;
            //Get the border diagonal up of the cell, read only
            ILineFormat borderDiagonalUp = cellBorders.BorderDiagonalUp;
            //Set the end arrow head style of border diagonal up
            borderDiagonalUp.EndArrowheadStyle = ArrowheadStyle.ArrowOpen;
            //Save the presentation
            presentation.Save("BorderDiagonalUp.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Get the border diagonal up of the cell, read only
            Dim borderDiagonalUp As ILineFormat = cellBorders.BorderDiagonalUp
            'Set the end arrow head style of border diagonal up
            borderDiagonalUp.EndArrowheadStyle = ArrowheadStyle.ArrowOpen
            'Save the presentation
            presentation__1.Save("BorderDiagonalUp.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderLeft">
            <summary>
            Gets the left border of the cell. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties
            ICellBorders cellBorders = cell.CellBorders;
            //Get the border left of the cell, read only
            ILineFormat borderLeft = cellBorders.BorderLeft;
            //Set the end arrow head width
            borderLeft.EndArrowheadWidth = ArrowheadWidth.Narrow;
            //Set the cap style
            borderLeft.CapStyle = LineCapStyle.Round;
            //Save the presentation
            presentation.Save("BorderLeft.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Get the border left of the cell, read only
            Dim borderLeft As ILineFormat = cellBorders.BorderLeft
            'Set the end arrow head width
            borderLeft.EndArrowheadWidth = ArrowheadWidth.Narrow
            'Set the cap style
            borderLeft.CapStyle = LineCapStyle.Round
            'Save the presentation
            presentation__1.Save("BorderLeft.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderRight">
            <summary>
            Gets the right border of the cell. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties
            ICellBorders cellBorders = cell.CellBorders;
            //Get the border right of the cell, read only
            ILineFormat borderRight = cellBorders.BorderRight;
            //Set the end arrow head style of border right
            borderRight.EndArrowheadStyle = ArrowheadStyle.ArrowStealth;
            //Save the presentation
            presentation.Save("BorderRight.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Get the border right of the cell, read only
            Dim borderRight As ILineFormat = cellBorders.BorderRight
            'Set the end arrow head style of border right
            borderRight.EndArrowheadStyle = ArrowheadStyle.ArrowStealth
            'Save the presentation
            presentation__1.Save("BorderRight.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICellBorders.BorderTop">
            <summary>
            Gets the top border of the cell. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200);
            //Get the cell from a row in a table
            ICell cell = table.Rows[0].Cells[0];
            //Get the cell border properties
            ICellBorders cellBorders = cell.CellBorders;
            //Get the border top of the cell, read only
            ILineFormat borderTop = cellBorders.BorderTop;
            //Set the begin arrow head width of border top
            borderTop.BeginArrowheadWidth = ArrowheadWidth.Wide;
            //Set the line type of border top
            borderTop.LineJoinType = LineJoinType.Miter;
            //Save the presentation
            presentation.Save("BorderTop.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 3, 100, 120, 300, 200)
            'Get the cell from a row in a table
            Dim cell As ICell = table.Rows(0).Cells(0)
            'Get the cell border properties
            Dim cellBorders As ICellBorders = cell.CellBorders
            'Get the border top of the cell, read only
            Dim borderTop As ILineFormat = cellBorders.BorderTop
            'Set the begin arrow head width of border top
            borderTop.BeginArrowheadWidth = ArrowheadWidth.Wide
            'Set the line type of border top
            borderTop.LineJoinType = LineJoinType.Miter
            'Save the presentation
            presentation__1.Save("BorderTop.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ICells">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.ICell"/> objects in a table.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.ICells.Count">
            <summary>
            Gets the number of cells in the row or column. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200);
            //Create instance to hold the cell collection from the table
            ICells cells = table.Rows[0].Cells;
            //Get the count of cells, read only
            int count = cells.Count;
            //Save the presentation
            presentation.Save("Cells.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200)
            'Create instance to hold the cell collection from the table
            Dim cells As ICells = table.Rows(0).Cells
            'Get the count of cells, read only
            Dim count As Integer = cells.Count
            'Save the presentation
            presentation__1.Save("Cells.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ICells.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:Syncfusion.Presentation.ICell"/> instance at the specified index from the row or column. Read-only.
            </summary>
            <param name="index">The zero-based index of the element.</param>
            <returns>Returns the cell at the particular index if found otherwise -1.</returns>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presentation = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200);
            //Create instance to hold the cell collection from the table
            ICells cells = table.Rows[0].Cells;
            //Get the specific cell from the collection, read only
            ICell cell = cells[0];
            //Add text content to cell
            cell.TextBody.AddParagraph("First row, first cell");
            //Save the presentation
            presentation.Save("Cells.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200)
            'Create instance to hold the cell collection from the table
            Dim cells As ICells = table.Rows(0).Cells
            'Get the specific cell from the collection, read only
            Dim cell As ICell = cells(0)
            'Add text content to cell
             cell.TextBody.AddParagraph("First row, first cell")
            'Save the presentation
            presentation__1.Save("Cells.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IRow">
            <summary>
            Represents the row in a table.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IRow.Clone">
            <summary>
            Creates a copy of the current row.
            </summary>
            <returns>Returns the cloned row object</returns>
        </member>
        <member name="P:Syncfusion.Presentation.IRow.Cells">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.ICells"/> instance that represents the cell collection. Read-only
             </summary>
             <value>
             The cells.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row from row collection
             IRow row = table.Rows[0];
             //Get the cell collection from the row, read only
             ICells cells = row.Cells;
             //Set the text content for cells in row
             cells[0].TextBody.AddParagraph("First row, First Column");
             cells[1].TextBody.AddParagraph("First row, Second Column");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row from row collection
            Dim row As IRow = table.Rows(0)
            'Get the cell collection from the row, read only
            Dim cells As ICells = row.Cells
            'Set the text content for cells in row
            cells(0).TextBody.AddParagraph("First row, First Column")
            cells(1).TextBody.AddParagraph("First row, Second Column")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IRow.Height">
             <summary>
             Gets or sets height of the row, in points.
             </summary>
             <value>
             The height.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row from row collection
             IRow row = table.Rows[0];
             //Set the height of the row
             row.Height = 40;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row from row collection
            Dim row As IRow = table.Rows(0)
            'Set the height of the row
            row.Height = 40
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.IRows">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.IRow"/> objects in a table.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.Add">
             <summary>
             Adds a new row at the end of the row collection.
             </summary>
             <returns>Returns the newly added <see cref="T:Syncfusion.Presentation.IRow"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row collection from table
             IRows rows = table.Rows;
             //Add row to the collection
             rows.Add();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from table
            Dim rows As IRows = table.Rows
            'Add row to the collection
            rows.Add()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.Add(Syncfusion.Presentation.IRow)">
             <summary>
             Adds the specified row at the end of the row collection.
             </summary>
             <param name="row">Represents an <see cref="T:Syncfusion.Presentation.IRow"/> instance to be added.</param>
             <returns>Returns the zero-based index of the newly added row object in the row collection.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row collection from table
             IRows rows = table.Rows;
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Add a specific row to the collection
             rows.Add(row);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from table
            Dim rows As IRows = table.Rows
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Add a specific row to the collection
            rows.Add(row)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.Insert(System.Int32,Syncfusion.Presentation.IRow)">
             <summary>
             Inserts the specified row at specified index in the table.
             </summary>
             <param name="index">The zero-based index at which the row should be inserted.</param>
             <param name="value">The row instance to insert.</param>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Set fill type for the cell in a row
             row.Cells[0].Fill.FillType = FillType.Solid;
             //Set color of the solid fill
             row.Cells[0].Fill.SolidFill.Color = ColorObject.SaddleBrown;
             //Insert row at index 2
             rows.Insert(2, row);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Set fill type for the cell in a row
            row.Cells(0).Fill.FillType = FillType.Solid
            'Set color of the solid fill
            row.Cells(0).Fill.SolidFill.Color = ColorObject.SaddleBrown
            'Insert row at index 2
            rows.Insert(2, row)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.RemoveAt(System.Int32)">
             <summary>
             Removes the row at the specified index of the row collection.
             </summary>
             <param name="index">The zero-based index of the row to remove.</param>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(4, 2, 100, 120, 300, 200);
             //Remove a specific row instance
             rows.RemoveAt(0);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(4, 2, 100, 120, 300, 200)
            'Remove a specific row instance
            rows.RemoveAt(0)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.Remove(Syncfusion.Presentation.IRow)">
             <summary>
             Removes the first occurrence of a specified row from the row collection.
             </summary>
             <param name="value">The row object to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Remove a specific row instance
             rows.Remove(row);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Remove a specific row instance
            rows.Remove(row)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.IndexOf(Syncfusion.Presentation.IRow)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.IRow"/> instance within the collection.
             </summary>
             <param name="value">The <see cref="T:Syncfusion.Presentation.IRow"/> instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of row instance within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row collection from table
             IRows rows = table.Rows;
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Add a specific row to the collection
             rows.Add(row);
             //Get the index of a specific row from the collection
             int index = rows.IndexOf(row);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from table
            Dim rows As IRows = table.Rows
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Add a specific row to the collection
            rows.Add(row)
            'Get the index of a specific row from the collection
            Dim index As Integer = rows.IndexOf(row)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.IRows.Clear">
             <summary>
             Removes all the elements from row collection.
             </summary>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row collection from table
             IRows rows = table.Rows;
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Add a specific row to the collection
             rows.Add(row);
             //Clear the row collection
             rows.Clear();
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from table
            Dim rows As IRows = table.Rows
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Add a specific row to the collection
            rows.Add(row)
            'Clear the row collection
            rows.Clear()
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IRows.Count">
             <summary>
             Gets the number of elements in the rows collection. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row collection from table
             IRows rows = table.Rows;
             //Retrieve a single row from the row collection, read only
             IRow row = table.Rows[0];
             //Add a specific row to the collection
             rows.Add(row);
             //Get the count of row collection, read only
             int count = rows.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from table
            Dim rows As IRows = table.Rows
            'Retrieve a single row from the row collection, read only
            Dim row As IRow = table.Rows(0)
            'Add a specific row to the collection
            rows.Add(row)
            'Get the count of row collection, read only
            Dim count As Integer = rows.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.IRows.Item(System.Int32)">
             <summary>
             Gets a <see cref="T:Syncfusion.Presentation.IRow"/> instance at the specified index from the row collection. Read-only.
             </summary>
             <param name="rowIndex">Specifies the index of the row to locate.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.IRow"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Get the row from row collection
             IRow row = table.Rows[0];
             //Set the height of the row
             row.Height = 30;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row from row collection
            Dim row As IRow = table.Rows(0)
            'Set the height of the row
            row.Height = 30
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ITable">
            <summary>
            Represents the table in a slide.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ITable.InsertColumn(System.Int32)">
            <summary>
            Inserts the column at the specified index position of the table
            </summary>
            <param name="index">The index position to insert the column</param>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presDoc = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
            //Insert the column at the specified index position
            table.InsertColumn(1);
            //Save the presentation
            presDoc.Save("Sample.pptx");
            //Close the presentation
            presDoc.Close();
            </code>
            <code lang="VB.NET">
            Dim presDoc As IPresentation = Presentation.Create()
            ‘Add slide to the presentation
            Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
            ‘Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            ‘Insert the column at the specified index position
            table.InsertColumn(1);
            ‘Save the presentation
            presDoc.Save("Sample.pptx")
            ‘Close the presentation
            presDoc.Close()
            ///</code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasFirstColumn">
             <summary>
             Gets or sets a boolean value indicates whether to display special formatting for the first column.
             </summary>
             <value>
             <c>true</c> if this instance has first column; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set the table has first column
             table.HasFirstColumn = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set the table has first column
            table.HasFirstColumn = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasHeaderRow">
             <summary>
             Gets or sets a boolean value indicates whether to display special formatting for the first row.
             </summary>
             <value>
             <c>true</c> if this instance has header row; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set the header row
             table.HasHeaderRow = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set the table has header row
            table.HasHeaderRow = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasBandedRows">
             <summary>
             Gets or sets a boolean value indicates whether to display banded rows, in which even rows are formatted differently from odd rows.
             </summary>
             <value>
             <c>true</c> if this instance has banded rows; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set horizontal banding for the table
             table.HasBandedRows = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set horizontal banding for the table
            table.HasBandedRows = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasLastColumn">
             <summary>
             Gets or sets a boolean value indicates whether to display special formatting for the last column.
             </summary>
             <value>
             <c>true</c> if this instance has last column; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set the last column
             table.HasLastColumn = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set the table has last column
            table.HasLastColumn = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasTotalRow">
             <summary>
             Gets or sets a boolean value indicates whether to display special formatting for the last row of the specified table.
             </summary>
             <value>
             <c>true</c> if this instance has total row; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set the total row
             table.HasTotalRow = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set the table has total row
            table.HasTotalRow = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.Rows">
             <summary>
             Gets an <see cref="T:Syncfusion.Presentation.IRows"/> instance that represents the row collection. Read-only.
             </summary>
             <value>
             The rows.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);           
             //Get the row collection from the table, it is read only
             IRows rows = table.Rows;
             //Set the text content for specific cell in a row
             rows[0].Cells[0].TextBody.AddParagraph("Row - 1, Column - 1");
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from the table, it is read only
            Dim rows As IRows = table.Rows
            'Set the text content for specific cell in a row
            rows(0).Cells(0).TextBody.AddParagraph("Row - 1, Column - 1")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.BuiltInStyle">
             <summary>
             Gets or sets a <see cref="T:Syncfusion.Presentation.BuiltInTableStyle"/> instance that represents the table style.
             </summary>
             <value>
             The built in style.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);           
             //Get the row collection from the table, it is read only
             IRows rows = table.Rows;
             //Set the text content for specific cell in a row
             rows[0].Cells[0].TextBody.AddParagraph("Row - 1, Column - 1");
             //Set the builtin style for the table
             table.BuiltInStyle = BuiltInTableStyle.MediumStyle2Accent6;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Get the row collection from the table, it is read only
            Dim rows As IRows = table.Rows
            'Set the text content for specific cell in a row
            rows(0).Cells(0).TextBody.AddParagraph("Row - 1, Column - 1")
            'Set the builtin style for the table
            table.BuiltInStyle = BuiltInTableStyle.MediumStyle2Accent6
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.HasBandedColumns">
             <summary>
             Gets or sets a boolean value indicates whether to display banded columns, in which even columns are formatted differently from odd columns.
             </summary>
             <value>
             <c>true</c> if this instance has banded columns; otherwise, <c>false</c>.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");
             //Set vertical banding for the table
             table.HasBandedColumns = true;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Set vertical banding for the table
            table.HasBandedColumns = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.Item(System.Int32,System.Int32)">
             <summary>
             Gets a single <see cref="T:Syncfusion.Presentation.ICell"/> instance from the table. Read-only.
             </summary>
             <param name="rowIndex">Determines the row index.</param>
             <param name="columnIndex">Determines the column index.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ICell"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
             //Retrieve each cell and fill text content to the cell, it is read only
             ICell cell = table[0, 0];
             cell.TextBody.AddParagraph("First Row and First Column");
             cell = table[0, 1];
             cell.TextBody.AddParagraph("First Row and Second Column");
             cell = table[1, 0];
             cell.TextBody.AddParagraph("Second Row and First Column");
             cell = table[1, 1];
             cell.TextBody.AddParagraph("Second Row and Second Column");      
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            'Retrieve each cell and fill text content to the cell, it is read only
            Dim cell As ICell = table(0, 0)
            cell.TextBody.AddParagraph("First Row and First Column")
            cell = table(0, 1)
            cell.TextBody.AddParagraph("First Row and Second Column")
            cell = table(1, 0)
            cell.TextBody.AddParagraph("Second Row and First Column")
            cell = table(1, 1)
            cell.TextBody.AddParagraph("Second Row and Second Column")
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITable.ColumnsCount">
            <summary>
            Gets the total number of columns in the table.
            </summary>
            <example>
            <code lang="CS">
            //Create instance of PowerPoint presentation
            IPresentation presDoc = Presentation.Create();
            //Add slide to the presentation
            ISlide slide = presDoc.Slides.Add(SlideLayoutType.Blank);
            //Add table to the slide
            ITable table = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200);
            //Get the total number of columns in the table
            int columnsCount = table.ColumnsCount;
            //Save the presentation
            presDoc.Save("Sample.pptx");
            //Close the presentation
            presDoc.Close();
            </code>
            ///<code lang="VB.NET">
            Dim presDoc As IPresentation = Presentation.Create()
            ‘Add slide to the presentation
            Dim slide As ISlide = presDoc.Slides.Add(SlideLayoutType.Blank)
            ‘Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(2, 2, 100, 120, 300, 200)
            ‘Get the total number of columns in the table
            Dim columnsCount As Integer = table.ColumnsCount
            ‘Save the presentation
            presDoc.Save("Sample.pptx")
            ‘Close the presentation
            presDoc.Close()
            ///</code>
            </example>
        </member>
        <member name="T:Syncfusion.Presentation.ITables">
            <summary>
            Represents a collection of <see cref="T:Syncfusion.Presentation.ITable"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.ITables.AddTable(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Adds a table to the shape collection with the specified number of rows and columns. The valid range is 1 to 75.
             </summary>
             <param name="rowCount">Specifies the row count of the table. The valid range is 1 to 75.</param>
             <param name="columnCount">Specifies the column count of the table. The valid range is 1 to 75.</param>
             <param name="left">Represents the left position, in points. The Left value ranges from -169056 to 169056.</param>
             <param name="top">Represents the top position, in points. The Top value ranges from -169056 to 169056.</param>
             <param name="width">Represents the width, in points. The Width value ranges from 0 to 169056.</param>
             <param name="height">Represents the height, in points. The Height value ranges from 0 to 169056.</param>
             <returns>Returns the <see cref="T:Syncfusion.Presentation.ITable"/> instance that represents the newly created table.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITables.IndexOf(Syncfusion.Presentation.ITable)">
             <summary>
             Returns the zero-based index of the first occurrence of the <see cref="T:Syncfusion.Presentation.ITable"/> instance within the collection.
             </summary>
             <param name="table">The <see cref="T:Syncfusion.Presentation.ITable"/> instance to locate in the collection.</param>
             <returns>Returns the zero-based index of the first occurrence of table within the collection, if found; otherwise, –1.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             tables.AddTable(1, 1, 300, 200, 100, 100);
             tables.AddTable(1, 1, 400, 30, 100, 100);
             //Get the index of a specific table
             int index = tables.IndexOf(table);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            tables.AddTable(1, 1, 300, 200, 100, 100)
            tables.AddTable(1, 1, 400, 30, 100, 100)
            'Get the index of a specific table
            Dim index As Integer = tables.IndexOf(table)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITables.Remove(Syncfusion.Presentation.ITable)">
             <summary>
             Removes the first occurrence of a specified table from the table collection.
             </summary>
             <param name="table">The table object to be removed from the collection.</param>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             tables.AddTable(1, 1, 300, 200, 100, 100);
             tables.AddTable(1, 1, 400, 30, 100, 100);
             //Get the specific table from the collection using index, read only
             ITable _table = tables[1];
             //Remove a particular table instance
             tables.Remove(_table);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            tables.AddTable(1, 1, 300, 200, 100, 100)
            tables.AddTable(1, 1, 400, 30, 100, 100)
            'Get the specific table from the collection using index, read only
            Dim _table As ITable = tables(1)
            'Remove a particular table instance
            tables.Remove(_table)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.ITables.RemoveAt(System.Int32)">
             <summary>
             Removes the table at the specified index of the table collection.
             </summary>
             <param name="index">The zero-based index of the element to be removed.</param>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             tables.AddTable(1, 1, 300, 200, 100, 100);
             //Remove table using index position
             tables.RemoveAt(1);
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            tables.AddTable(1, 1, 300, 200, 100, 100)
            'Remove table using index position
            tables.RemoveAt(1)
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITables.Item(System.Int32)">
             <summary>
             Gets a  <see cref="T:Syncfusion.Presentation.ITable"/> instance at specified index from the collection. Read-only.
             </summary>
             <param name="index">Determines the table index.</param>
             <returns>Returns an <see cref="T:Syncfusion.Presentation.ITable"/> instance.</returns>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             tables.AddTable(1, 1, 300, 200, 100, 100);
             tables.AddTable(1, 1, 400, 30, 100, 100);
             //Get the specific table from the collection using index, read only
             ITable _table = tables[1];
             //Set the built-in style for the table
             _table.BuiltInStyle = BuiltInTableStyle.MediumStyle2Accent6;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            tables.AddTable(1, 1, 300, 200, 100, 100)
            tables.AddTable(1, 1, 400, 30, 100, 100)
            'Get the specific table from the collection using index, read only
            Dim _table As ITable = tables(1)
            'Set the built-in style for the table
            _table.BuiltInStyle = BuiltInTableStyle.MediumStyle2Accent6
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.ITables.Count">
             <summary>
             Gets the number of elements in the table collection. Read-only.
             </summary>
             <value>
             The total count of the table.
             </value>
             <example>
             <code lang="CS">
             //Create instance of PowerPoint presentation
             IPresentation presentation = Presentation.Create();
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Create instance to hold table collection in a slide
             ITables tables = slide.Tables;
             //Add tables to the table collection
             ITable table = tables.AddTable(2, 2, 100, 120, 300, 200);
             tables.AddTable(1, 1, 300, 200, 100, 100);
             tables.AddTable(1, 1, 400, 30, 100, 100);
             //Get the count of table collection, it is read only
             int count = tables.Count;
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create instance of PowerPoint presentation
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Create instance to hold table collection in a slide
            Dim tables As ITables = slide.Tables
            'Add tables to the table collection
            Dim table As ITable = tables.AddTable(2, 2, 100, 120, 300, 200)
            tables.AddTable(1, 1, 300, 200, 100, 100)
            tables.AddTable(1, 1, 400, 30, 100, 100)
            'Get the count of table collection, it is read only
            Dim count As Integer = tables.Count
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseOleObject(System.IO.Stream,Syncfusion.Presentation.Drawing.OleObject)">
            <summary>
            Parse the ole object
            </summary>
            <param name="objectStream"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseOleData(System.Xml.XmlReader,Syncfusion.Presentation.Drawing.OleObject)">
            <summary>
            Parse the ole data
            </summary>
            <param name="reader"></param>
            <param name="oleObject"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.HasNode(System.IO.Stream,System.String)">
            <summary>
            Check whether the mentioned node exists or not
            </summary>
            <param name="objectStream"></param>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseExtendedProperties(System.Xml.XmlReader,Syncfusion.Presentation.IBuiltInDocumentProperties,Syncfusion.Presentation.ICustomDocumentProperties)">
            <summary>
            Extracts extended properties from reader and inserts it workbook.
            </summary>
            <param name="reader">XmlReader to extract extended properties from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseDocumentCoreProperties(System.Xml.XmlReader,Syncfusion.Presentation.IBuiltInDocumentProperties)">
            <summary>
            Extracts core properties from reader and inserts it workbook.
            </summary>
            <param name="reader">XmlReader to extract core properties from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseCustomProperties(System.Xml.XmlReader,Syncfusion.Presentation.ICustomDocumentProperties)">
            <summary>
            Extracts custom properties from reader and inserts it workbook.
            </summary>
            <param name="reader">XmlReader to extract custom properties from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Parser.ParseCustomProperty(System.Xml.XmlReader,Syncfusion.Presentation.CustomDocumentProperties)">
            <summary>
            Extracts custom property from reader and inserts it into custom property implementation.
            </summary>
            <param name="reader">XmlReader to extract data from.</param>
            <param name="customProperties">Custom property.</param>
        </member>
        <member name="T:Syncfusion.Presentation.NamespaceDoc">
            <summary>
            Contains types that support <cref>Presentation</cref> which is used to create and manipulate PowerPoint Presentations.
            <exclude/>
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Presentation">
            <summary>
            Represents the PowerPoint presentation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Presentation.DEF_SUMMARY_INFO">
            <summary>
            Stream name that represent summary name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Presentation.DEF_DOCUMENT_SUMMARY_INFO">
            <summary>
            Stream name that represent document summary name.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Create">
            <summary>
            Creates a new <see cref="T:Syncfusion.Presentation.IPresentation"/> instance.
            </summary>
            <returns>Returns the newly created presentation instance.</returns>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Add a new slide of comparison slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);    
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Add a new slide of comparison slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Open(System.String)">
            <summary>
            Opens the presentation from the specified file name.
            </summary>
            <param name="fileName">Specifies the file name of the presentation to open.</param>
            <returns>Returns a <see cref="T:Syncfusion.Presentation.IPresentation"/> object that represents the opened presentation.</returns>
            <example>
            <code lang="CS">
            //Open a presentation.
            Presentation presentation = Presentation.Open("Input.pptx") as Presentation;
            //Add a new slide of comparison slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);    
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open a presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Open("Input.pptx"), Presentation)
            'Add a new slide of comparison slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Open(System.IO.Stream)">
            <summary>
            Opens the presentation from the specified stream.
            </summary>
            <param name="fileStream">The stream instance that represents the presentation.</param>
            <returns>Returns a <see cref="T:Syncfusion.Presentation.IPresentation"/> object that represents the opened presentation.</returns>
            <example>
            <code lang="CS">
            //Create instance for memory stream
            MemoryStream fileStream = new MemoryStream();
            //Open a presentation
            IPresentation presentation = Presentation.Open(fileStream);
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            //Dispose the filestream
            fileStream.Dispose();
            </code>
            <code lang="VB.NET">
            'Create instance for memory stream
            Dim fileStream As New MemoryStream()
            'Open a presentation
            Dim presentation__1 As IPresentation = Presentation.Open(fileStream)
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            'Dispose the filestream
            fileStream.Dispose()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Save(System.String)">
             <summary>
             Saves the presentation to the specified file name.
             </summary>
             <param name="fileName">Specifies the file name to save the presentation.</param>
             <remarks>At present, the Essential Presentation library only supports the PPTX file format.</remarks>
             <example>
             <code lang="CS">
             //Create an instance of presentation
             Presentation presentation = Presentation.Create() as Presentation;
             //Add slide to the presentation
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
             //Add table to the slide
             ITable table = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
             <code lang="VB.NET">
            'Create an instance of presentation
             Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Add slide to the presentation
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add table to the slide
            Dim table As ITable = slide.Shapes.AddTable(3, 3, 100, 120, 300, 200)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Save(System.IO.Stream)">
            <remarks>At present, the Essential Presentation library only supports the PPTX file format.</remarks>
            <example>
            <code lang="CS">
            //Create instance for memory stream
            MemoryStream fileStream = new MemoryStream();
            //Create an instance of presentation
            Presentation presentation = Presentation.Create() as Presentation;
            //Save the presentation using stream
            presentation.Save(fileStream);
            //Close the presentation.
            presentation.Close();
            //Dispose the filestream
            fileStream.Dispose();
            </code>
            <code lang="VB.NET">
            'Create instance for memory stream
            Dim fileStream As New MemoryStream()
            'Create an instance of presentation
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Save the presentation using stream
            presentation__1.Save(fileStream)
            'Close the presentation.
            presentation__1.Close()
            'Dispose the filestream
            fileStream.Dispose()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Clone">
             <summary>
             Creates an independent copy of <see cref="T:Syncfusion.Presentation.IPresentation"/> instance.
             </summary>        /// <returns> Returns the cloned presentation instance. </returns>
            <example>
            <code lang="CS">
             //Create an instance for presentation
             Presentation presentation = Presentation.Create() as Presentation;
             //Add a new slide of comparison slide layout type.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);            
             //Clone the entire presentation.
             IPresentation presentationClone = presentation.Clone();
             //Add a new slide of title layout type.
             slide = presentationClone.Slides.Add(SlideLayoutType.Title);
             //Add an auto shape of regular pentagon auto shape type.
             slide.Shapes.AddShape(AutoShapeType.RegularPentagon, 10, 20, 300, 400);
             //Save the cloned presentation
             presentationClone.Save("Sample.pptx");
             //Close the presentation.
             presentation.Close();
             //Close the cloned presentation.
             presentationClone.Close();
             </code>
             <code lang="VB.NET">
             Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
             'Add a new slide of comparison slide layout type.
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
             'Clone the entire presentation.
             Dim presentationClone As IPresentation = presentation__1.Clone()
             'Add a new slide of title layout type.
             slide = presentationClone.Slides.Add(SlideLayoutType.Title)
             'Add an auto shape of regular pentagon auto shape type.
             slide.Shapes.AddShape(AutoShapeType.RegularPentagon, 10, 20, 300, 400)
             'Save the cloned presentation
             presentationClone.Save("Sample.pptx")
             'Close the presentation.
             presentation__1.Close()
             'Close the cloned presentation.
             presentationClone.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Save(System.String,Syncfusion.Presentation.FormatType,System.Web.HttpResponse)">
             <summary>
             Saves the presentation to the specified HttpResponse instance.
             </summary>
             <remarks>
             At present, the Essential Presentation library only supports the PPTX file
             format.
             </remarks>
             <param name="fileName">The name of the file in HttpResponse.</param>
             <param name="formatType">The format type of the presentation.</param>
             <param name="response">The HttpResponse to save the presentation.</param>
            <example>
            <code lang="CS">
             //Create a presentation
             Presentation presentation = Presentation.Create() as Presentation;
             //Save the presentation to the specified HttpResponse
             presentation.Save("Sample.pptx", FormatType.Pptx, Response);
             </code>
             <code lang="VB.NET">
             'Create a presentation
             Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
             'Save the presentation to the specified HttpResponse
             presentation__1.Save("Sample.pptx", FormatType.Pptx, Response)
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Open(System.String,System.String)">
             <summary>
             Opens the encrypted presentation from the specified file name and password.
             </summary>
             <param name="fileName">Path of the presentation file.</param>
             <param name="password">Password required to open the presentation file.</param>
             <returns>Returns a <see cref="T:Syncfusion.Presentation.IPresentation"/> object that represents the opened presentation.</returns>
            <example>
            <code lang="CS">
             //Open the encrypted presentation.
             Presentation presentation = Presentation.Open("Input.pptx", "MYPASSWORD!@#$%") as Presentation; 
             //Save the presentation.
             presentation.Save("Sample.pptx");
             //Close the presentation.
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Open the encrypted presentation.
             Dim presentation__1 As Presentation = TryCast(Presentation.Open("Input.pptx", "MYPASSWORD!@#$%"), Presentation)       
             'Save the presentation.
             presentation__1.Save("Sample.pptx")
             'Close the presentation.
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Open(System.IO.Stream,System.String)">
            <summary>
            Opens the encrypted presentation from the specified stream and password.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance of the presentation.</param>
            <param name="password">The password required to open the presentation.</param>
            <returns>Returns the <see cref="T:Syncfusion.Presentation.IPresentation"/> object that represents the opened presentation.</returns>
            <example>
            <code lang="CS">
            //Create instance for memory stream
            MemoryStream fileStream = new MemoryStream();
            //Open a presentation
            IPresentation presentation = Presentation.Open(fileStream,Input.pptx);
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            //Dispose the filestream
            fileStream.Dispose();
            </code>
            <code lang="VB.NET">
            'Create instance for memory stream
            Dim fileStream As New MemoryStream()
            'Open a presentation
            Dim presentation__1 As IPresentation = Presentation.Open(fileStream, Input.pptx)
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            'Dispose the filestream
            fileStream.Dispose()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Encrypt(System.String)">
            <summary>
            Encrypts the presentation using the specified password.
            </summary>
            <param name="password">Password to encrypt the presentation.</param>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Add a new slide of content with caption slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
            //Add a auto shape of moon type auto shape.
            IShape shape = slide.Shapes.AddShape(AutoShapeType.Moon, 50, 0, 200, 200);
            //Add a paragraph with text content to the shape.
            shape.TextBody.AddParagraph("Text for moon shape");
            //Encrypt the presentation with the combination of alpha and symbol string password.
            presentation.Encrypt("MYPASSWORD!@#$%");
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Add a new slide of content with caption slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
            'Add a auto shape of moon type auto shape.
            Dim shape As IShape = slide.Shapes.AddShape(AutoShapeType.Moon, 50, 0, 200, 200)
            'Add a paragraph with text content to the shape.
            shape.TextBody.AddParagraph("Text for moon shape")
            'Encrypt the presentation with the combination of alpha and symbol string password.
            presentation__1.Encrypt("MYPASSWORD!@#$%")
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.RemoveEncryption">
            <summary>
            Removes the encryption from presentation.
            </summary>
            <remarks>To remove the encryption we must have opened the presentation with password.</remarks>
            <example>
            <code lang="CS">
            //Open the encrypted presentation.
            Presentation presentation = Presentation.Open("Input.pptx", "MYPASSWORD!@#$%") as Presentation;          
            //Remove the encryption.
            presentation.RemoveEncryption();
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Open the encrypted presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Open("Input.pptx", "MYPASSWORD!@#$%"), Presentation)
            'Remove the encryption.
            presentation__1.RemoveEncryption()
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.RenderAsImages(Syncfusion.Drawing.ImageFormat)">
             <summary>
             Converts the slides in presentation to images using the specified image format.
             </summary>
             <param name="imageFormat">Specifies the image format in which you want to convert slides.</param>
             <returns>Returns the <see cref="T:System.IO.Stream"/> array of the converted images.</returns>
            <example>
            <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Add a content with caption slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
             //Add a table to the slide.
             ITable table = slide.Tables.AddTable(5, 5, 0, 0, 500, 500);
             //Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4;
             //Iterate through the row collection.
             foreach (IRow row in table.Rows)
             {
             //Iterate through the cell collection.
             foreach (ICell cell in row.Cells)
             {
             //Add a paragraph to the cell.
             cell.TextBody.AddParagraph("New Paragraph");
             }
             }
             //Converts the each and every slide in the presentation to image of stream array type.
             Stream[] imageStreamArray = presentation.RenderAsImages(Syncfusion.Drawing.ImageFormat.Jpeg);
             //Iterate the stream array.
             foreach (Stream stream in imageStreamArray)
             {
             //Save the stream in image of .jpg format.
             Image.FromStream(stream).Save("RenderAsImage" + Guid.NewGuid() + ".jpg");
             } 
             //Close the presentation.
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create a new presentation.
             Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
             'Add a content with caption slide to the presentation.
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
             'Add a table to the slide.
             Dim table As ITable = slide.Tables.AddTable(5, 5, 0, 0, 500, 500)
             'Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4
             'Iterate through the row collection.
             For Each row As IRow In table.Rows
            	'Iterate through the cell collection.
            	For Each cell As ICell In row.Cells
            	'Add a paragraph to the cell.
            	cell.TextBody.AddParagraph("New Paragraph")
            	Next
             Next
             'Converts the each and every slide in the presentation to image of stream array type.
             Dim imageStreamArray As Stream() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageFormat.Jpeg)
             'Iterate the stream array.
             For Each stream As Stream In imageStreamArray
            	'Save the stream in image of .jpg format.
            	Image.FromStream(stream).Save("RenderAsImage" + Guid.NewGuid() + ".jpg")
             Next
             'Close the presentation.
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.RenderAsImages(Syncfusion.Drawing.ImageType)">
             <summary>
             Converts the slides in presentation to images using the specified image type.
             </summary>
             <param name="imageType">Specifies the image type in which you want to convert slides.</param>
             <returns>Returns the <see cref="T:System.Drawing.Image"/> array of the converted images.</returns>
            <example>
            <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Add a content with caption slide to the presentation.
             ISlide slide = presentation.Slides.Add(SlideLayoutType.ContentWithCaption);
             //Add a table to the slide.
             ITable table = slide.Tables.AddTable(5, 5, 0, 0, 500, 500);
             //Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4;
             //Iterate through the row collection.
             foreach (IRow row in table.Rows)
             {
             //Iterate through the cell collection.
             foreach (ICell cell in row.Cells)
             {
             //Add a paragraph to the cell.
             cell.TextBody.AddParagraph("New Paragraph");
             }
             }
             //Converts the each and every slide in the presentation to image of System.Drawing.Image type array.
             Image[] imageArray = presentation.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile);
             //Iterate the image array.
             foreach (Image image in imageArray)
             {
             //Save the image of .bmp format.
             image.Save("RenderAsImage" + Guid.NewGuid() + ".bmp");
             }
             //Close the presentation.
             presentation.Close();
             </code>
             <code lang="VB.NET">
             'Create a new presentation.
             Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
             'Add a content with caption slide to the presentation.
             Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.ContentWithCaption)
             'Add a table to the slide.
             Dim table As ITable = slide.Tables.AddTable(5, 5, 0, 0, 500, 500)
             'Set the built in table style.
             table.BuiltInStyle = BuiltInTableStyle.DarkStyle2Accent3Accent4
             'Iterate through the row collection.
             For Each row As IRow In table.Rows
            	'Iterate through the cell collection.
            	For Each cell As ICell In row.Cells
            	'Add a paragraph to the cell.
            	cell.TextBody.AddParagraph("New Paragraph")
            	Next
             Next
             'Converts the each and every slide in the presentation to image of System.Drawing.Image type array.
             Dim imageArray As Image() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile)
             'Iterate the image array.
             For Each image As Image In imageArray
            	'Save the image of .bmp format.
            	image.Save("RenderAsImage" + Guid.NewGuid() + ".bmp")
             Next
             'Close the presentation.
             presentation__1.Close()
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.PrepareResponse(System.String,System.Web.HttpResponse)">
            <summary>
            Prepares response before saving.
            </summary>
            <param name="fileName"></param>
            <param name="response"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Close">
            <summary>
            Releases any resources associated with the presentation instance.
            </summary>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Add a new slide of comparison slide layout type.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Comparison);    
            //Save the presentation.
            presentation.Save("Sample.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Add a new slide of comparison slide layout type.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Comparison)
            'Save the presentation.
            presentation__1.Save("Sample.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Syncfusion.Presentation.Presentation"/> instance. 
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.CheckForEncryption(System.IO.Stream)">
            <summary>
            Determines whether the data in the stream are encrypted or not.
            </summary>
            <param name="stream">Stream in which the presentation content are stored.</param>
            <returns>Returns whether the stream is encrypted or not.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Presentation.RemoveMacros">
            <summary>
            Removes the macros from the presentation instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.Sections">
            <summary>
            Returns a collection of <see cref="T:Syncfusion.Presentation.ISection"/> instances. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.Masters">
             <summary>
             Gets the <see cref="T:Syncfusion.Presentation.IMasterSlides"/> collection of the <see cref="T:Syncfusion.Presentation.IPresentation"/> instance. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             Presentation presentation = Presentation.Create() as Presentation;
             //Retrieve the collection of layout Slide
             IMasterSlides masterslides = presentation.Masters;
             //Get a master by specifying the index in collection
             IMasterSlide masterSlide = presentation.Masters[0];
             //Add a group shape to master slide
             masterSlide.GroupShapes.AddGroupShape(200,234,198,173);
             //Add an autoshape - bevel to master slide
             masterSlide.Shapes.AddShape(AutoShapeType.Bevel,237,45,187,120);
             //Add master slide to the collection
             masterslides.Add(masterSlide);
             //Save the presentation
             presentation.Save("Output.pptx");
             //Close the presentation
             presentation.Close();
             </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the collection of layout Slide
            Dim masterslides As IMasterSlides = presentation__1.Masters
            'Get a master by specifying the index in collection
            Dim masterSlide As IMasterSlide = presentation__1.Masters(0)
            'Add a group shape to master slide
            masterSlide.GroupShapes.AddGroupShape(200, 234, 198, 173)
            'Add an autoshape - bevel to master slide
            masterSlide.Shapes.AddShape(AutoShapeType.Bevel, 237, 45, 187, 120)
            'Add master slide to the collection
            masterslides.Add(masterSlide)
            'Save the presentation
            presentation__1.Save("Output.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.Slides">
             <summary>
             Gets the slide collection of <see cref="T:Syncfusion.Presentation.ISlides"/> instance. Read-only.
             </summary>
             <example>
             <code lang="CS">
             //Create a new presentation.
             IPresentation presentation = Presentation.Create();
             //Create instance to hold the slide collection
             ISlides slides = presentation.Slides;
             //Add slide to presentation
             slides.Add();
             //Add a blank slide to the presentation.
             slides.Add(SlideLayoutType.Blank);
             //Add slide to the collection by passing the slide instance
             slides.Add(slides.Add(SlideLayoutType.Title));
             //Retrieve the specific slide item, read only
             ISlide _slide = slides[0];
             //Set the slide name
             slide.Name = "My Slide";
             //Save the presentation
             presentation.Save("Sample.pptx");
             //Close the presentation
             presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            IPresentation presentation = Presentation.Create();
            'Create instance to hold the slide collection
            ISlides slides = presentation.Slides;
            'Add slide to presentation
            slides.Add();
            'Add a blank slide to the presentation.
            slides.Add(SlideLayoutType.Blank);
            'Add slide to the collection by passing the slide instance
            slides.Add(slides.Add(SlideLayoutType.Title));
            'Retrieve the specific slide item, read only
            ISlide _slide = slides[0];
            'Set the slide name
            slide.Name = "My Slide";
            'Save the presentation
            presentation.Save("Sample.pptx");
            'Close the presentation
            presentation.Close();
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.Final">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Syncfusion.Presentation.IPresentation"/> instance is marked as final.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.ChartToImageConverter">
            <summary>
            Gets an <see cref="T:Syncfusion.OfficeChart.IOfficeChartToImageConverter"/> instance.
            </summary>
            <remarks>
            Initialize the ChartToImageConverter in-order to convert a chart in presentation to image.
            </remarks>
            <example>
            <code lang="CS">
            //Create a new presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Initialize the chart to image converter.
            presentation.ChartToImageConverter = new ChartToImageConverter();
            //Set the scaling mode for the chart.
            presentation.ChartToImageConverter.ScalingMode = ScalingMode.Best;
            //Add a blank slide for the chart.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Add a chart to the slide.
            IPresentationChart officeChart = slide.Charts.AddChart(100, 100, 600, 400);
            //Set chart data
            officeChart.ChartData.SetValue(1, 4, "Month");
            officeChart.ChartData.SetValue(2, 4, "July");
            officeChart.ChartData.SetValue(3, 4, "August");
            officeChart.ChartData.SetValue(4, 4, "September");
            officeChart.ChartData.SetValue(5, 4, "October");
            officeChart.ChartData.SetValue(6, 4, "November");
            officeChart.ChartData.SetValue(7, 4, "December");
            officeChart.ChartData.SetValue(1, 1, "2013");
            officeChart.ChartData.SetValue(2, 1, 35);
            officeChart.ChartData.SetValue(3, 1, 37);
            officeChart.ChartData.SetValue(4, 1, 30);
            officeChart.ChartData.SetValue(5, 1, 29);
            officeChart.ChartData.SetValue(6, 1, 25);
            officeChart.ChartData.SetValue(7, 1, 30);
            officeChart.ChartData.SetValue(1, 2, "2014");
            officeChart.ChartData.SetValue(2, 2, 30);
            officeChart.ChartData.SetValue(3, 2, 25);
            officeChart.ChartData.SetValue(4, 2, 29);
            officeChart.ChartData.SetValue(5, 2, 35);
            officeChart.ChartData.SetValue(6, 2, 38);
            officeChart.ChartData.SetValue(7, 2, 32);
            officeChart.ChartData.SetValue(1, 3, "2015");
            officeChart.ChartData.SetValue(2, 3, 35);
            officeChart.ChartData.SetValue(3, 3, 37);
            officeChart.ChartData.SetValue(4, 3, 30);
            officeChart.ChartData.SetValue(5, 3, 50);
            officeChart.ChartData.SetValue(6, 3, 25);
            officeChart.ChartData.SetValue(7, 3, 30);
            //Add chart serie.
            IOfficeChartSerie serie1 = officeChart.Series.Add("2013");
            //Set serie value.
            serie1.Values = officeChart.ChartData[2, 1, 7, 1];
            //Add chart serie.
            IOfficeChartSerie serie2 = officeChart.Series.Add("2014");
            //Set serie value.
            serie2.Values = officeChart.ChartData[2, 2, 7, 2];
            //Add chart serie.
            IOfficeChartSerie serie3 = officeChart.Series.Add("2015");
            //Set serie value.
            serie3.Values = officeChart.ChartData[2, 3, 7, 3];
            //Set category labels value for the primary category axis.
            officeChart.PrimaryCategoryAxis.CategoryLabels = officeChart.ChartData[2, 4, 7, 4];
            //Set the chart type.
            officeChart.ChartType = OfficeChartType.Column_Clustered;
            //Set the chart title.
            officeChart.ChartTitle = "Mine Chart";
            //Convert the chart to image.
            Image[] chartImages = presentation.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile);
            foreach (Image image in chartImages)
            {
            //Save the image.
            image.Save("ChartToImageConverter" + Guid.NewGuid() + ".png");
            }
            //Save the presentation.
            presentation.Save("ChartToImageConverter.pptx");
            //Close the presentation.
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a new presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Initialize the chart to image converter.
            presentation__1.ChartToImageConverter = New ChartToImageConverter()
            'Set the scaling mode for the chart.
            presentation__1.ChartToImageConverter.ScalingMode = ScalingMode.Best
            'Add a blank slide for the chart.
            Dim slide As ISlide = presentation__1.Slides.Add(SlideLayoutType.Blank)
            'Add a chart to the slide.
            Dim officeChart As IPresentationChart = slide.Charts.AddChart(100, 100, 600, 400)
            'Set chart data
            officeChart.ChartData.SetValue(1, 4, "Month")
            officeChart.ChartData.SetValue(2, 4, "July")
            officeChart.ChartData.SetValue(3, 4, "August")
            officeChart.ChartData.SetValue(4, 4, "September")
            officeChart.ChartData.SetValue(5, 4, "October")
            officeChart.ChartData.SetValue(6, 4, "November")
            officeChart.ChartData.SetValue(7, 4, "December")
            officeChart.ChartData.SetValue(1, 1, "2013")
            officeChart.ChartData.SetValue(2, 1, 35)
            officeChart.ChartData.SetValue(3, 1, 37)
            officeChart.ChartData.SetValue(4, 1, 30)
            officeChart.ChartData.SetValue(5, 1, 29)
            officeChart.ChartData.SetValue(6, 1, 25)
            officeChart.ChartData.SetValue(7, 1, 30)
            officeChart.ChartData.SetValue(1, 2, "2014")
            officeChart.ChartData.SetValue(2, 2, 30)
            officeChart.ChartData.SetValue(3, 2, 25)
            officeChart.ChartData.SetValue(4, 2, 29)
            officeChart.ChartData.SetValue(5, 2, 35)
            officeChart.ChartData.SetValue(6, 2, 38)
            officeChart.ChartData.SetValue(7, 2, 32)
            officeChart.ChartData.SetValue(1, 3, "2015")
            officeChart.ChartData.SetValue(2, 3, 35)
            officeChart.ChartData.SetValue(3, 3, 37)
            officeChart.ChartData.SetValue(4, 3, 30)
            officeChart.ChartData.SetValue(5, 3, 50)
            officeChart.ChartData.SetValue(6, 3, 25)
            officeChart.ChartData.SetValue(7, 3, 30)
            'Add chart serie.
            Dim serie1 As IOfficeChartSerie = officeChart.Series.Add("2013")
            'Set serie value.
            serie1.Values = officeChart.ChartData(2, 1, 7, 1)
            'Add chart serie.
            Dim serie2 As IOfficeChartSerie = officeChart.Series.Add("2014")
            'Set serie value.
            serie2.Values = officeChart.ChartData(2, 2, 7, 2)
            'Add chart serie.
            Dim serie3 As IOfficeChartSerie = officeChart.Series.Add("2015")
            'Set serie value.
            serie3.Values = officeChart.ChartData(2, 3, 7, 3)
            'Set category labels value for the primary category axis.
            officeChart.PrimaryCategoryAxis.CategoryLabels = officeChart.ChartData(2, 4, 7, 4)
            'Set the chart type.
            officeChart.ChartType = OfficeChartType.Column_Clustered
            'Set the chart title.
            officeChart.ChartTitle = "Mine Chart"
            'Convert the chart to image.
            Dim chartImages As Image() = presentation__1.RenderAsImages(Syncfusion.Drawing.ImageType.Metafile)
            For Each image As Image In chartImages
            'Save the image.
            image.Save("ChartToImageConverter" + Guid.NewGuid() + ".png")
            Next
            'Save the presentation.
            presentation__1.Save("ChartToImageConverter.pptx")
            'Close the presentation.
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.BuiltInDocumentProperties">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.IBuiltInDocumentProperties"/> instance. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a presentation.
            Presentation presentation = Presentation.Create() as Presentation;        
            //Retrieve the built-in document property, it is read only
            IBuiltInDocumentProperties builtin = presentation.BuiltInDocumentProperties;
            //Set the application name
            builtin.ApplicationName = "Essential Presentation";
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Retrieve the built-in document property, it is read only
            Dim builtin As IBuiltInDocumentProperties = presentation__1.BuiltInDocumentProperties
            'Set the application name
            builtin.ApplicationName = "Essential Presentation"
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.CustomDocumentProperties">
            <summary>
            Gets an <see cref="T:Syncfusion.Presentation.ICustomDocumentProperties"/> instance. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a presentation.
            IPresentation presentation = Presentation.Create();
            //Retrieve the custom document property, it is read only
            ICustomDocumentProperties custom = presentation.CustomDocumentProperties;
            //Add custom document property
            custom.Add("PropertyA");
            //Set the boolean property
            custom["PropertyA"].Boolean = true;
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a presentation.
            Dim presentation__1 As IPresentation = Presentation.Create()
            'Retrieve the custom document property, it is read only
            Dim [custom] As ICustomDocumentProperties = presentation__1.CustomDocumentProperties
            'Add custom document property
            [custom].Add("PropertyA")
            'Set the boolean property
            [custom]("PropertyA").[Boolean] = True
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.NotesSize">
            <summary>
            Gets the notes size of <see cref="T:Syncfusion.Presentation.INotesSize"/> instance. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.SlidesFromInputFile">
            <summary>
            Gets or sets the slide names and its ISlide instance from input file.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.SlideSize">
            <summary>
            Gets the slide size of <see cref="T:Syncfusion.Presentation.ISlideSize"/> instance. Read-only.
            </summary>
            <example>
            <code lang="CS">
            //Create a presentation.
            Presentation presentation = Presentation.Create() as Presentation;
            //Add a blank slide for the chart.
            ISlide slide = presentation.Slides.Add(SlideLayoutType.Blank);
            //Retrieve the slides size, read only
            ISlideSize slidesize = presentation.SlideSize;
            //Set the slide orientation of presentation
            slidesize.SlideOrientation = SlideOrientation.Landscape;
            //Save the presentation
            presentation.Save("Sample.pptx");
            //Close the presentation
            presentation.Close();
            </code>
            <code lang="VB.NET">
            'Create a presentation.
            Dim presentation__1 As Presentation = TryCast(Presentation.Create(), Presentation)
            'Add a blank slide for the chart.
            Dim slide As ISlide = presentation.Slides.Add(SlideLayoutType.Blank)
            'Retrieve the slides size, read only
            Dim slidesize As ISlideSize = presentation__1.SlideSize
            'Set the slide orientation of presentation
            slidesize.SlideOrientation = SlideOrientation.Landscape
            'Save the presentation
            presentation__1.Save("Sample.pptx")
            'Close the presentation
            presentation__1.Close()
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.Password">
            <summary>
            Gets or sets the password for the current presentation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Presentation.HasMacros">
            <summary>
            Gets or sets whether the presentation has macros.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.GDIRenderer.ApplyDuoTone(System.Drawing.Image,System.Collections.Generic.List{Syncfusion.Presentation.ColorObject})">
            <summary>
            Apply duotone to the give image.
            </summary>
            <param name="image">In where the duotone need to apply. </param>
            <param name="duotone">duotone color informations.</param>
            <returns>Duotone applied image.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.GDIRenderer.ApplyColorTransform(System.Collections.Generic.List{Syncfusion.Presentation.ColorTransForm},Syncfusion.Presentation.ColorObject)">
            <summary>
            Apply color Transformation to the given color.
            </summary>
            <param name="colorTransforms">Color Transformation information.</param>
            <param name="inputColor">color in where the transformation occur.</param>
            <returns>Transformation applied color.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.GDIRenderer.ExecuteLinearInterpolation(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            Executes Linear interpolation for Duotone.
            </summary>
            <param name="firstColor">In where the factor is applied.</param>
            <param name="secondColor">In where the factor is applied.</param>
            <param name="factor">Factor value.</param>
            <returns>Final factorized color.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.GDIRenderer.DrawStringBasedOnCharacterSpacing(Syncfusion.Presentation.RichText.Paragraph,System.Drawing.Font,System.Drawing.Brush,System.Drawing.RectangleF,System.String,Syncfusion.Presentation.RichText.Font)">
            <summary>
            Draws the string using character spacing by splitting the string into character.
            </summary>
            <param name="paragraphImpl">Represents the paragraph object.</param>
            <param name="systemFont">Represents the System.Drawing.Font.</param>
            <param name="textBrush">Represents the solid brush to draw the text.</param>
            <param name="bounds">Represents the bounds of the text.</param>
            <param name="text">Represents the text content.</param>
            <param name="font">Represents the font instance.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.GDIRenderer.GetRadialGradientBrush(System.Drawing.Drawing2D.GraphicsPath,Syncfusion.Presentation.Drawing.GradientFill,System.Drawing.Drawing2D.ColorBlend)">
            <summary>
            Radial Gradient Fill implementation.
            </summary>
            <param name="path">Path </param>
            <param name="gradientFill"></param>
            <param name="gradientColorBlend"></param>
        </member>
        <member name="F:Syncfusion.Presentation.Rendering.ShapePath._rectBounds">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Rendering.ShapePath._shapeGuide">
             <summary>
            
             </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.#ctor(System.Drawing.RectangleF,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCurvedConnectorPath">
            <summary>
            Get Curved Connector path
            </summary>
            <formula>
            formulaColl.Add("x2","*/ w adj1 100000");
            formulaColl.Add("x1","+/ l x2 2");
            formulaColl.Add("x3","+/ r x2 2");
            formulaColl.Add("y3","*/ h 3 4");
            </formula>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetBentConnectorPath">
            <summary>
            Get Bent Connector path
            </summary>
            <formula>
            formulaColl.Add("x1","*/ w adj1 100000");
            </formula>>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRoundedRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSnipSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSnipSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSnipDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSnipAndRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRoundSingleCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRoundSameSideCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRoundDiagonalCornerRectanglePath">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="m_shapeGuide"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetTrianglePath">
            <summary>
            Get Triangle path
            </summary>
            <param name="shapeType"></param>
            <param name="m_rectBounds"></param>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetParallelogramPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetTrapezoidPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRegularPentagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetHexagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetHeptagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetOctagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDodecagonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetPiePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetChordPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetTearDropPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetHalfFramePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetL_ShapePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDiagonalStripePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCrossPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetPlaquePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCanPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCubePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetBevelPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDonutPath(System.Double)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetNoSymbolPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetBlockArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFoldedCornerPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSmileyFacePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetHeartPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLightningBoltPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetSunPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMoonPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCloudPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetArcPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDoubleBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDoubleBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRightBracketPath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRightBracePath">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRightArrowPath">
            <summary>
            Gets the right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftArrowPath">
            <summary>
            Gets the left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDownArrowPath">
            <summary>
            Gets down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftRightArrowPath">
            <summary>
            Gets the left right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCurvedRightArrowPath">
            <summary>
            Gets the curved right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCurvedLeftArrowPath">
            <summary>
            Gets the curved left arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCurvedUpArrowPath">
            <summary>
            Gets the curved up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCurvedDownArrowPath">
            <summary>
            Gets the curved down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetUpDownArrowPath">
            <summary>
            Gets up down arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetQuadArrowPath">
            <summary>
            Gets the quad arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftRightUpArrowPath">
            <summary>
            Gets the left right up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetBentArrowPath">
            <summary>
            Gets the bent arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetUTrunArrowPath">
            <summary>
            Gets the U trun arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftUpArrowPath">
            <summary>
            Gets the left up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetBentUpArrowPath">
            <summary>
            Gets the bent up arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetStripedRightArrowPath">
            <summary>
            Gets the striped right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetNotchedRightArrowPath">
            <summary>
            Gets the notched right arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetPentagonPath">
            <summary>
            Gets the pentagon path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetChevronPath">
            <summary>
            Gets the chevron path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRightArrowCalloutPath">
            <summary>
            Gets the right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDownArrowCalloutPath">
            <summary>
            Gets down arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftArrowCalloutPath">
            <summary>
            Gets the left arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetUpArrowCalloutPath">
            <summary>
            Gets up arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLeftRightArrowCalloutPath">
            <summary>
            Gets the left right arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetQuadArrowCalloutPath">
            <summary>
            Gets the quad arrow callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCircularArrowPath">
            <summary>
            Gets the circular arrow path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathPlusPath">
            <summary>
            Gets the math plus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathMinusPath">
            <summary>
            Gets the math minus path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathMultiplyPath">
            <summary>
            Gets the math multiply path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathDivisionPath">
            <summary>
            Gets the math division path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathEqualPath">
            <summary>
            Gets the math equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetMathNotEqualPath">
            <summary>
            Gets the math not equal path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartAlternateProcessPath">
            <summary>
            Gets the flow chart alternate process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartPredefinedProcessPath">
            <summary>
            Gets the flow chart predefined process path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartInternalStoragePath">
            <summary>
            Gets the flow chart internal storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartDocumentPath">
            <summary>
            Gets the flow chart document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartMultiDocumentPath">
            <summary>
            Gets the flow chart multi document path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartTerminatorPath">
            <summary>
            Gets the flow chart terminator path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartPreparationPath">
            <summary>
            Gets the flow chart preparation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartManualInputPath">
            <summary>
            Gets the flow chart manual input path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartManualOperationPath">
            <summary>
            Gets the flow chart manual operation path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartConnectorPath">
            <summary>
            Gets the flow chart connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartOffPageConnectorPath">
            <summary>
            Gets the flow chart off page connector path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartCardPath">
            <summary>
            Gets the flow chart card path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartPunchedTapePath">
            <summary>
            Gets the flow chart punched tape path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartSummingJunctionPath">
            <summary>
            Gets the flow chart summing junction path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartOrPath">
            <summary>
            Gets the flow chart or path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartCollatePath">
            <summary>
            Gets the flow chart collate path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartSortPath">
            <summary>
            Gets the flow chart sort path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartExtractPath">
            <summary>
            Gets the flow chart extract path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartMergePath">
            <summary>
            Gets the flow chart merge path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartOnlineStoragePath">
            <summary>
            Gets the flow chart online storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartDelayPath">
            <summary>
            Gets the flow chart delay path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartSequentialAccessStoragePath">
            <summary>
            Gets the flow chart sequential access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartMagneticDiskPath">
            <summary>
            Gets the flow chart magnetic disk path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartDirectAccessStoragePath">
            <summary>
            Gets the flow chart direct access storage path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFlowChartDisplayPath">
            <summary>
            Gets the flow chart display path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRectangularCalloutPath">
            <summary>
            Gets the rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetRoundedRectangularCalloutPath">
            <summary>
            Gets the rounded rectangular callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetOvalCalloutPath">
            <summary>
            Gets the oval callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetCloudCalloutPath">
            <summary>
            Gets the cloud callout path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout1Path">
            <summary>
            Gets the line callout1 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout2Path">
            <summary>
            Gets the line callout2 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout3Path">
            <summary>
            Gets the line callout3 path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout1AccentBarPath">
            <summary>
            Gets the line callout1 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout2AccentBarPath">
            <summary>
            Gets the line callout2 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout3AccentBarPath">
            <summary>
            Gets the line callout3 accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout1NoBorderPath">
            <summary>
            Gets the line callout1 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout2NoBorderPath">
            <summary>
            Gets the line callout2 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout3NoBorderPath">
            <summary>
            Gets the line callout3 no border path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout1BorderAndAccentBarPath">
            <summary>
            Gets the line callout1 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout2BorderAndAccentBarPath">
            <summary>
            Gets the line callout2 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetLineCallout3BorderAndAccentBarPath">
            <summary>
            Gets the line callout3 border and accent bar path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDegreeValue(System.Single)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetXYPosition(System.Single,System.Single,System.Single)">
             <summary>
            
             </summary>
             <param name="xDifference"></param>
             <param name="yDifference"></param>
             <param name="positionRatio"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetPathAdjustValue(Syncfusion.Presentation.AutoShapeType)">
            <summary>
            Get Path adjust value
            </summary>
            <param name="m_shapeGuide"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.ParseShapeFormula(Syncfusion.Presentation.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValue"></param>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetFormulaValues(Syncfusion.Presentation.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
             <summary>
            
             </summary>
             <param name="formulaColl"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetOperandValues(Syncfusion.Presentation.AutoShapeType,System.Collections.Generic.Dictionary{System.String,System.Single}@,System.String[],System.Boolean)">
             <summary>
            
             </summary>
             <param name="m_rectBounds"></param>
             <param name="adjValues"></param>
             <param name="formulaValues"></param>
             <param name="splitFormula"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetPresetOperandValue(System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetResultValue(System.String,System.Single[])">
             <summary>
            
             </summary>
             <param name="formula"></param>
             <param name="operandValues"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetShapeFormula(Syncfusion.Presentation.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Rendering.ShapePath.GetDefaultPathAdjValues(Syncfusion.Presentation.AutoShapeType)">
             <summary>
            
             </summary>
             <param name="shapeType"></param>
             <returns></returns>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.Arabic">
            <summary>
            Specifies default numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.UpRoman">
            <summary>
            Specifies UppRoman numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.LowRoman">
            <summary>
            Specifies LowRoman numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.UpLetter">
            <summary>
            Specifies UpLetter numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.LowLetter">
            <summary>
            Specifies LowLetter numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.Ordinal">
            <summary>
            Specifies Ordinal numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.Number">
            <summary>
            Specifies Number numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.OrdinalText">
            <summary>
            Specifies OrdinalText numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.LeadingZero">
            <summary>
            Specifies LeadingZero numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.Bullet">
            <summary>
            Specifies Bullet numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.FarEast">
             <summary>
            
             </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.Special">
            <summary>
            Special numbering format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.RichText.ListPatternType.None">
            <summary>
            Specifies None numbering format.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.Font.AssignCharacterSpacing(System.Int32)">
            <summary>
            Sets the character spacing to the current font instance.
            </summary>
            <param name="characterSpacing">Character spacing value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.Font.ObtainCharacterSpacing">
            <summary>
            Gets the character spacing of the current font.
            </summary>
            <returns>Returns the character spacing value.</returns>
        </member>
        <member name="P:Syncfusion.Presentation.RichText.Font.CharacterSpacing">
            <summary>
            Gets or sets the character spacing value for the text in a paragraph.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.Paragraph.AddHyperlink(System.String,System.String)">
            <summary>
            Adds the specified text part to the textpart collection with the specified link.
            </summary>
            <param name="textToDisplay">The text content to initialize the new <see cref="T:Syncfusion.Presentation.ITextPart"/> instance.</param>
            <param name="link">Applies hyperlink with to the textpart.</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.Paragraph.ClearAll">
            <summary>
            Close and Dispose the memory.
            Note: Do not invoke this method, use Close method clear the memmory.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.TextPart.SetHyperlink(System.String)">
            <summary>
            Sets the hyperlink to the textpart.
            </summary>
            <param name="link">Represents the address of the target hyperlink</param>
            <returns>Returns an <see cref="T:Syncfusion.Presentation.IHyperLink"/> instance.</returns>
            <remarks>The target can be a document path, web url, target slide, email_id.</remarks>
        </member>
        <member name="M:Syncfusion.Presentation.RichText.TextPart.RemoveHyperLink">
            <summary>
            Removes the hyperlink from the current textpart.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.RichText.TextPart.Hyperlink">
            <summary>
            Returns an <see cref="!:IHyperlink"/> instance that represents the hyperlink for the specified textpart.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.Aes">
            <summary>
            This class used for implementing Advanced Encryption Standard algorithm.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.#ctor(Syncfusion.Presentation.Security.Aes.KeySize,System.Byte[])">
            <summary>
            Initializes a new instance of the Aes class.
            </summary>
            <param name="keySize">Key size.</param>
            <param name="keyBytes">Key bytes</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.Cipher(System.Byte[],System.Byte[])">
            <summary>
            Encipher 16 bit input
            </summary>
            <param name="input">16 bit Input</param>
            <param name="output">Output value</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.InvCipher(System.Byte[],System.Byte[])">
            <summary>
             Decipher 16-bit input
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.SetNbNkNr(Syncfusion.Presentation.Security.Aes.KeySize)">
            <summary>
            Sets the nb nk nr.
            </summary>
            <param name="keySize">Size of the key.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.BuildSbox">
            <summary>
            Builds the sbox.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.BuildInvSbox">
            <summary>
            Builds the inv sbox.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.BuildRcon">
            <summary>
            Builds the rcon.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.AddRoundKey(System.Int32)">
            <summary>
            Adds the round key.
            </summary>
            <param name="round">The round.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.SubBytes">
            <summary>
            Subs the bytes.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.InvSubBytes">
            <summary>
            Invs the sub bytes.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.ShiftRows">
            <summary>
            Shifts the rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.InvShiftRows">
            <summary>
            Invs the shift rows.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.MixColumns">
            <summary>
            Mixes the columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.InvMixColumns">
            <summary>
            Invs the mix columns.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.KeyExpansion">
            <summary>
            Keys the expansion.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.SubWord(System.Byte[])">
            <summary>
            Subs the word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.Aes.RotWord(System.Byte[])">
            <summary>
            Rots the word.
            </summary>
            <param name="word">The word.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Presentation.Security.Aes.KeySize">
            <summary>
            Possible key sizes.
            key size, in bits, for constructor.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.Aes.KeySize.Bits128">
            <summary>
            128-bit.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.Aes.KeySize.Bits192">
            <summary>
            192-bit.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.Aes.KeySize.Bits256">
            <summary>
            256-bit.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.AgileDecryptor">
            <summary>
            This class is responsible for decryption of Agile encryption (Word 2010/2013) files.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.SegmentSize">
            <summary>
            Segment size.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_dataSpaceMap">
            <summary>
            Dataspace map.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_info">
            <summary>
            Encryption info.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_storage">
            <summary>
            Compound storage that should be decrypted.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_intermediateKey">
            <summary>
            Intermediate key.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_hashAlgorithm">
            <summary>
            Hashing Algorithm used to compute hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileDecryptor.m_hmacSha">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using the System.Security.Cryptography.SHA1 hash function.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.Decrypt">
            <summary>
            Decrypts internal storage.
            </summary>
            <returns>Decrypted stream.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.Initialize(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Prepares decryptor for actual decryption.
            </summary>
            <param name="storage">Compound storage to get required data.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.CheckPassword(System.String)">
            <summary>
            Checks whether password is correct.
            </summary>
            <param name="password">Password to check.</param>
            <returns>True if password verification succeeded.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.CheckEncryptedPackage(System.Byte[])">
            <summary>
            Checks the encrypted package.
            </summary>
            <param name="encryptedPackage">The encrypted package.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.Decrypt(System.Byte[],System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Decrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="arrKey">The arr key.</param>
            <param name="IV">The IV.</param>
            <param name="actualLength">The actual length.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.ParseTransform(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Parses the transform.
            </summary>
            <param name="dataSpaces">The data spaces.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.ParseDataSpaceMap(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Parses the data space map.
            </summary>
            <param name="dataSpaces">The data spaces.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileDecryptor.ParseTransformInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Parses the transform info.
            </summary>
            <param name="transformStorage">The transform storage.</param>
        </member>
        <member name="T:Syncfusion.Presentation.Security.AgileEncryptionInfo">
            <summary>
            Represents the agile encryption info for Encryption/Decryption of Word 2010/2013 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptionInfo.m_iVersionInfo">
            <summary>
            A Version structure where Version.vMajor MUST be 0x0004, and Version.vMinor MUST be 0x0004.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptionInfo.m_iReserved">
            <summary>
            A Reserved 4 bytes, MUST be 0x00000040.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptionInfo.m_xmlEncryptionDescriptor">
            <summary>
            An XmlEncryptionDescriptor structure that specifies encryption and hashing algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptionInfo.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptionInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptionInfo.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptionInfo.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.AgileEncryptionInfo.VersionInfo">
            <summary>
            Gets or sets the version info.
            </summary>
            <value>The version info.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.AgileEncryptionInfo.Reserved">
            <summary>
            Gets or sets the reserved.
            </summary>
            <value>The reserved.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.AgileEncryptionInfo.XmlEncryptionDescriptor">
            <summary>
            An XmlEncryptionDescriptor structure that specifies encryption and hashing algorithm.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.AgileEncryptor">
            <summary>
            This class used to encrypt data using Agile encryption (Word 2010/2013).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.DefaultVersion">
            <summary>
            Default version.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.Reserved">
            <summary>
            Reserved bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.SegmentSize">
            <summary>
            Segment size.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_hashAlgorithm">
            <summary>
            Hashing Algorithm used to compute hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_hmacSha">
            <summary>
            Computes a Hash-based Message Authentication Code (HMAC) using the System.Security.Cryptography.SHA1 hash function.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_hashAlgorithmName">
            <summary>
            Hashing Algorithm name used to compute hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_keyBits">
            <summary>
            Encryption key bits.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.AgileEncryptor.m_hashSize">
            <summary>
            Hash size.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.#ctor">
            <summary>
            Initializes encryptor for agile encryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes encryptor for agile encryption.
            </summary>
            <param name="hashAlgorithm">The hash algorithm.</param>
            <param name="keyBits">The key bits.</param>
            <param name="hashSize">Size of the hash.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.Encrypt(System.IO.Stream,System.String,Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Encrypts specified stream.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="password">Password to use.</param>
            <param name="root">Root storage to put encrypted data into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.PrepareEncryptionInfo(System.IO.Stream,Syncfusion.CompoundFile.Presentation.ICompoundStorage,System.String)">
            <summary>
            Prepares the encryption info.
            </summary>
            <param name="data">The data.</param>
            <param name="root">The root.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.PrepareEncryptedPackage(System.IO.Stream,Syncfusion.CompoundFile.Presentation.ICompoundStorage,Syncfusion.Presentation.Security.KeyData,System.Byte[])">
            <summary>
            Prepares the encrypted package.
            </summary>
            <param name="data">The data.</param>
            <param name="root">The root.</param>
            <param name="keyData">The key data.</param>
            <param name="intermediateKey">The intermediate key.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.InitializeKeyData(Syncfusion.Presentation.Security.KeyData)">
            <summary>
            Initializes the key data.
            </summary>
            <param name="keyData">The key data.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.InitializeEncryptedKey(Syncfusion.Presentation.Security.EncryptedKey)">
            <summary>
            Initializes the encrypted key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.PrepareDataSpaces(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Preparse data spaces structures inside specified storage.
            </summary>
            <param name="root">Storage to put DataSpaces inside.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.SerializeVersion(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes VersionInfo stream inside specified storage.
            </summary>
            <param name="dataSpaces">Storage to serialize VersionInfo into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.SerializeTransformInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes transformation info.
            </summary>
            <param name="dataSpaces">Storage to serialize into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.SerializeDataSpaceInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes dataspace info.
            </summary>
            <param name="dataSpaces">Storage to serialize into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.SerializeDataSpaceMap(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes DataSpaceMap stream.
            </summary>
            <param name="dataSpaces">Storage to place stream into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.CreateSalt(System.Int32)">
            <summary>
            Creates the salt.
            </summary>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.AgileEncryptor.Encrypt(System.Byte[],System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Encrypts the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="key">The key.</param>
            <param name="IV">The IV.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Presentation.Security.DataSpaceDefinition">
            <summary>
            Represents the data space definition for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceDefinition.DefaultHeaderLength">
            <summary>
            Default header size.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceDefinition.m_iHeaderLength">
            <summary>
            Header length.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceDefinition.m_lstTransformRefs">
            <summary>
            List with transform references.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceDefinition.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceDefinition.#ctor">
            <summary>
            Initializes new instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceDefinition.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of DataSpaceDefinition.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceDefinition.Serialize(System.IO.Stream)">
            <summary>
            Serializes dataspace definition into the stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceDefinition.TransformRefs">
            <summary>
            List with transform references.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.DataSpaceMap">
            <summary>
            Represents the data space map for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMap.m_iHeaderSize">
            <summary>
            Size of the header.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMap.m_lstMapEntries">
            <summary>
            Map entries.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMap.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMap.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMap.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the DataSpaceMap.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMap.Serialize(System.IO.Stream)">
            <summary>
            Serializes dataspace map into the stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceMap.MapEntries">
            <summary>
            Map entries.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.DataSpaceMapEntry">
            <summary>
            Represents the data space map entry for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMapEntry.m_lstComponents">
            <summary>
            List of the reference components.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMapEntry.m_strDataSpaceName">
            <summary>
            DataSpace name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceMapEntry.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMapEntry.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMapEntry.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the map entry.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceMapEntry.Serialize(System.IO.Stream)">
            <summary>
            Serializes single dataspace map entry into the stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceMapEntry.Components">
            <summary>
            List of the reference components.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceMapEntry.DataSpaceName">
            <summary>
            DataSpace name.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.DataSpaceReferenceComponent">
            <summary>
            Represents the data space reference component for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.m_iComponentType">
            <summary>
            Component type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.m_strName">
            <summary>
            Component name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.#ctor(System.Int32,System.String)">
            <summary>
            Initializes new instance of the reference component.
            </summary>
            <param name="type">Component type.</param>
            <param name="name">Component name.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the component reference.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.ComponentType">
            <summary>
            Component type.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataSpaceReferenceComponent.Name">
            <summary>
            Component name.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.EncryptionHeader">
            <summary>
            Represents the encryption header for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iFlags">
            <summary>
            An EncryptionHeaderFlags structure that specifies properties of the encryption algorithm used.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iSizeExtra">
            <summary>
            Reserved, MUST be 0x00000000.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iAlgorithmId">
            <summary>
            A signed integer that specifies the encryption algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iAlgorithmIdHash">
            <summary>
            A signed integer that specifies the hashing algorithm in concert with the Flags.fExternal bit.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iKeySize">
            <summary>
            An unsigned integer that specifies the number of bits in the encryption key.
            MUST be a multiple of 8.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iProviderType">
            <summary>
            An implementation specified value which corresponds to constants accepted by
            the specified CSP. MUST be compatible with the chosen CSP.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iReserved1">
            <summary>
            Undefined and MUST be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_iReserved2">
            <summary>
            MUST be 0x00000000 and MUST be ignored.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_strCSPName">
            <summary>
            A null-terminated Unicode string that specifies the CSP name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionHeader.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the header and extracts its data from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionHeader.Parse(System.IO.Stream)">
            <summary>
            Extracts item's data from the specified stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionHeader.Serialize(System.IO.Stream)">
            <summary>
            Serialize item in the specified stream.
            </summary>
            <param name="stream">Stream to serialize data into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.Flags">
            <summary>
            An EncryptionHeaderFlags structure that specifies properties of the encryption algorithm used.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.SizeExtra">
            <summary>
            Reserved, MUST be 0x00000000.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.AlgorithmId">
            <summary>
            A signed integer that specifies the encryption algorithm.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.AlgorithmIdHash">
            <summary>
            A signed integer that specifies the hashing algorithm in concert with the Flags.fExternal bit.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.KeySize">
            <summary>
            An unsigned integer that specifies the number of bits in the encryption key.
            MUST be a multiple of 8.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.ProviderType">
            <summary>
            An implementation specified value which corresponds to constants accepted by
            the specified CSP. MUST be compatible with the chosen CSP.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.Reserved1">
            <summary>
            Undefined and MUST be ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.Reserved2">
            <summary>
            MUST be 0x00000000 and MUST be ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionHeader.CSPName">
            <summary>
            A null-terminated Unicode string that specifies the CSP name.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.EncryptionTransformInfo">
            <summary>
            Represents the encryption transform info for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionTransformInfo.m_strName">
            <summary>
            Transform name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionTransformInfo.m_iBlockSize">
            <summary>
            Block size.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionTransformInfo.m_iCipherMode">
            <summary>
            Cipher mode.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionTransformInfo.m_iReserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionTransformInfo.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionTransformInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionTransformInfo.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionTransformInfo.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionTransformInfo.Name">
            <summary>
            Transform name.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionTransformInfo.BlockSize">
            <summary>
            Block size.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionTransformInfo.CipherMode">
            <summary>
            Cipher mode.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionTransformInfo.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.EncryptionVerifier">
            <summary>
            Represents the encryption verifier for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionVerifier.m_arrSalt">
            <summary>
            An array of bytes that specifies the salt value used during password hash
            generation. MUST NOT be the same data used for the verifier stored encrypted
            in the EncryptedVerifier field.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionVerifier.m_arrEncryptedVerifier">
            <summary>
            MUST be the randomly generated Verifier value encrypted using the algorithm
            chosen by the implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionVerifier.m_arrEncryptedVerifierHash">
            <summary>
            An array of bytes that contains the encrypted form of the hash of the randomly
            generated Verifier value. The length of the array MUST be the size of the
            encryption block size multiplied by the number of blocks needed to encrypt
            the hash of the Verifier. If the encryption algorithm is RC4, the length
            MUST be 20 bytes. If the encryption algorithm is AES, the length MUST be 32 bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionVerifier.m_iVerifierHashSize">
            <summary>
            Size of the verifier hash.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptionVerifier.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionVerifier.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionVerifier.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the verifier.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionVerifier.Parse(System.IO.Stream)">
            <summary>
            Extracts object from stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptionVerifier.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionVerifier.Salt">
            <summary>
            An array of bytes that specifies the salt value used during password hash
            generation. MUST NOT be the same data used for the verifier stored encrypted
            in the EncryptedVerifier field.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionVerifier.EncryptedVerifier">
            <summary>
            MUST be the randomly generated Verifier value encrypted using the algorithm
            chosen by the implementation.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionVerifier.EncryptedVerifierHash">
            <summary>
            An array of bytes that contains the encrypted form of the hash of the randomly
            generated Verifier value. The length of the array MUST be the size of the
            encryption block size multiplied by the number of blocks needed to encrypt
            the hash of the Verifier. If the encryption algorithm is RC4, the length
            MUST be 20 bytes. If the encryption algorithm is AES, the length MUST be 32 bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptionVerifier.VerifierHashSize">
            <summary>
            Gets/sets size of the verifier hash.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Fib">
            <summary>
            <exclude/>
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Presentation.Fib"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.InitializeBeforeRead">
            <summary>
            Initializes the before reading the document.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.Read(System.IO.Stream)">
            <summary>
            Reads the Fib records from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.ReadAfterDecryption(System.IO.Stream)">
            <summary>
            Reads the Fib records from the decrypted stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.ReadInternal(System.IO.Stream)">
            <summary>
            Reads the Fib records after 64 bytes - cslw from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.ValidateCbRgFcLcb">
            <summary>
            Validates the cbRgFcLcb.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.ValidateCswNew">
            <summary>
            Validates the CSW new.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.CorrectFib">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.Write(System.IO.Stream)">
            <summary>
            Writes the Fib records to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.WriteInternal(System.IO.Stream)">
            <summary>
            Writes the internal.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.WriteAfterEncryption(System.IO.Stream)">
            <summary>
            Writes the after encryption.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.UpdateFcMac">
            <summary>
            Updates the fcMac.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Fib.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibVersion">
            <summary>
            Gets the fib version determined in the Word document as per file format specifications.
            </summary>
            <value>
            The fib version.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.WIdent">
            <summary>
            Gets or sets an unsigned integer that specifies that this is a Word Binary File. This value MUST be 0xA5EC.
            </summary>
            <value>
            The w ident.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.NFib" -->
        <member name="P:Syncfusion.Presentation.Fib.BaseUnused">
            <summary>
            Gets or sets the unused value. 
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The BaseUnused.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.Lid">
            <summary>
            Gets or sets a LID that specifies the install language of the application that is producing the document. 
            If nFib is 0x00D9 or greater, then any East Asian install lid or any install lid with a base language of Spanish, German or French MUST be recorded as lidAmerican. 
            If the nFib is 0x0101 or greater, then any install lid with a base language of Vietnamese, Thai, or Hindi MUST be recorded as lidAmerican.
            </summary>
            <value>
            The lid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.PnNext">
            <summary>
            Gets or sets an unsigned integer that specifies the offset in the WordDocument stream of the FIB for the document which contains all the AutoText items. 
            If this value is 0, there are no AutoText items attached. Otherwise the FIB is found at file location pnNext�512. 
            If fGlsy is 1 or fDot is 0, this value MUST be 0. 
            If pnNext is not 0, each FIB MUST share the same values for FibRgFcLcb97.fcPlcBteChpx, FibRgFcLcb97.lcbPlcBteChpx, FibRgFcLcb97.fcPlcBtePapx, FibRgFcLcb97.lcbPlcBtePapx, and FibRgLw97.cbMac.
            </summary>
            <value>
            The pn next.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FDot">
            <summary>
            Gets or sets a value specifies whether this is a document template (1).
            </summary>
            <value>
              <c>true</c> if this is a document template; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FGlsy">
            <summary>
            Gets or sets a value specifies whether this is a document that contains only AutoText items (see FibRgFcLcb97.fcSttbfGlsy, FibRgFcLcb97.fcPlcfGlsy and FibRgFcLcb97.fcSttbGlsyStyle).
            </summary>
            <value>
              <c>true</c> if this is a document that contains only AutoText items; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FComplex">
            <summary>
            Gets or sets a value specifies that the last save operation that was performed on this document was an incremental save operation.
            </summary>
            <value>
              <c>true</c> if fComplex; otherwise, <c>false</c>.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FHasPic" -->
        <member name="P:Syncfusion.Presentation.Fib.CQuickSaves">
            <summary>
            Gets or sets an unsigned integer.
            If nFib is less than 0x00D9, then cQuickSaves specifies the number of consecutive times this document was incrementally saved.
            If nFib is 0x00D9 or greater, then cQuickSaves MUST be 0xF.
            </summary>
            <value>
            The c quick saves.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FEncrypted">
            <summary>
            Gets or sets a value specifies whether the document is encrypted or obfuscated as specified in Encryption and Obfuscation.
            </summary>
            <value>
              <c>true</c> if the document is encrypted or obfuscated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FWhichTblStm">
            <summary>
            Gets or sets a value specifies the Table stream to which the FIB refers. When this value is set to 1, use 1Table; when this value is set to 0, use 0Table.
            </summary>
            <value>
              <c>true</c> if the Table stream is 1Table; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FReadOnlyRecommended">
            <summary>
            Gets or sets a value specifies whether the document author recommended that the document be opened in read-only mode.
            </summary>
            <value>
            <c>true</c> if the document to be opened in read-only mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FWriteReservation">
            <summary>
            Gets or sets a value specifies whether the document has a write-reservation password.
            </summary>
            <value>
              <c>true</c> if the document has a write-reservation password; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FExtChar">
            <summary>
            Gets or sets a value indicating ext character.
            This value MUST be 1.
            </summary>
            <value>
              <c>true</c> if ext character; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FLoadOverride">
            <summary>
            Gets or sets a value specifies whether to override the language information and font that are specified in the paragraph style at istd 0 (the normal style) with the defaults that are appropriate for the installation language of the application.
            </summary>
            <value>
              <c>true</c> if load override; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FFarEast">
            <summary>
            Gets or sets a value specifies whether the installation language of the application that created the document was an East Asian language.
            </summary>
            <value>
              <c>true</c> if far east; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FObfuscated">
            <summary>
            Gets or sets a value specifies whether the document is obfuscated by using XOR obfuscation.
            If fEncrypted is 1, this bit specifies whether the document is obfuscated by using XOR obfuscation (section 2.2.6.1); otherwise, this bit MUST be ignored.
            </summary>
            <value>
              <c>true</c> if the document is obfuscated by using XOR obfuscation; otherwise, <c>false</c>.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.NFibBack" -->
        <member name="P:Syncfusion.Presentation.Fib.LKey">
            <summary>
            Gets or sets the key.
            If fEncrypted is 1 and fObfuscation is 1, this value specifies the XOR obfuscation (section 2.2.6.1) password verifier. 
            If fEncrypted is 1 and fObfuscation is 0, this value specifies the size of the EncryptionHeader that is stored at the beginning of the Table stream as described in Encryption and Obfuscation. 
            Otherwise, this value MUST be 0.
            </summary>
            <value>
            The l key.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.Envr">
            <summary>
            Gets or sets the envr.
            This value MUST be 0, and MUST be ignored.
            </summary>
            <value>
            The envr.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FMac">
            <summary>
            Gets or sets a value indicating whether mac.
            This value MUST be 0, and MUST be ignored.
            </summary>
            <value>
              <c>true</c> if mac; otherwise, <c>false</c>.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FEmptySpecial" -->
        <member name="P:Syncfusion.Presentation.Fib.FLoadOverridePage">
            <summary>
            Gets or sets a value specifies whether to override the section properties for page size, orientation, and margins with the defaults that are appropriate for the installation language of the application.
            </summary>
            <value>
              <c>true</c> if load override page; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved1">
            <summary>
            Gets or sets a value indicating the reserved1.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
              <c>true</c> if reserved1; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved2">
            <summary>
            Gets or sets a value indicating the reserved2.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
              <c>true</c> if reserved2; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FSpare0">
            <summary>
            Gets or sets the spare0.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The f spare0.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved3">
            <summary>
            Gets or sets a value indicating the reserved3.
            This value MUST be 0 and MUST be ignored.
            </summary>
            <value>
            The reserved3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved4">
            <summary>
            Gets or sets a value indicating the reserved4.
            This value MUST be 0 and MUST be ignored.
            </summary>
            <value>
            The reserved4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved5">
            <summary>
            Gets or sets a value indicating the reserved5.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The reserved5.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.BaseReserved6">
            <summary>
            Gets or sets a value indicating the reserved6.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The reserved6.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.Csw">
            <summary>
            Gets or sets an unsigned integer that specifies the count of 16-bit values corresponding to fibRgW that follow. MUST be 0x000E.
            </summary>
            <value>
            The CSW.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgWReserved1">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg w reserved1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgWReserved2">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg w reserved2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgWReserved3">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg w reserved3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgWReserved4">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg w reserved4.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved5" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved6" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved7" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved8" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved9" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved10" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved11" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved12" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgWReserved13" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgWLidFE">
            <summary>
            A LID whose meaning depends on the nFib value. Gets or sets the lid fe.
            </summary>
            <value>
            The lid fe.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.Cslw">
            <summary>
            Gets or sets an unsigned integer that specifies the count of 32-bit values corresponding to fibRgLw that follow. MUST be 0x0016.
            </summary>
            <value>
            The CSLW.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CbMac">
            <summary>
            Specifies the count of bytes of those written to the WordDocument stream of the file that have any meaning. Gets or sets the cb mac.
            </summary>
            <value>
            The cb mac.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved1">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved2">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpText">
            <summary>
            Specifies the count of CPs in the main document. Gets or sets the CCP text.
            </summary>
            <value>
            The CCP text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpFtn">
            <summary>
            Specifies the count of CPs in the footnote subdocument. Gets or sets the CCP FTN.
            </summary>
            <value>
            The CCP FTN.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpHdd">
            <summary>
            Specifies the count of CPs in the header subdocument. Gets or sets the CCP HDD.
            </summary>
            <value>
            The CCP HDD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved3">
            <summary>
            Gets or sets this value MUST be zero and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpAtn">
            <summary>
            Specifies the count of CPs in the comment subdocument. Gets or sets the CCP atn.
            </summary>
            <value>
            The CCP atn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpEdn">
            <summary>
            Specifies the count of CPs in the endnote subdocument. Gets or sets the CCP edn.
            </summary>
            <value>
            The CCP edn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpTxbx">
            <summary>
            Specifies the count of CPs in the textbox subdocument of the main document. Gets or sets the CCP TXBX.
            </summary>
            <value>
            The CCP TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CcpHdrTxbx">
            <summary>
            Specifies the count of CPs in the textbox subdocument of the header. Gets or sets the CCP HDR TXBX.
            </summary>
            <value>
            The CCP HDR TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved4">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved5">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved5.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved6">
            <summary>
            Gets or sets the rg lw reserved6.
            </summary>
            <value>
            The rg lw reserved6.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved7">
            <summary>
            Gets or sets this value is undefined and MUST be ignored
            </summary>
            <value>
            The rg lw reserved7.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved8">
            <summary>
            Gets or sets this value is undefined and MUST be ignored
            </summary>
            <value>
            The rg lw reserved8.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved9">
            <summary>
            Gets or sets the rg lw reserved9.
            </summary>
            <value>
            The rg lw reserved9.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved10">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved10.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved11">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved11.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.RgLwReserved12" -->
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved13">
            <summary>
            Gets or sets this value MUST be zero and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved13.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.RgLwReserved14">
            <summary>
            Gets or sets this value MUST be zero and MUST be ignored.
            </summary>
            <value>
            The rg lw reserved14.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CbRgFcLcb">
            <summary>
            Gets or sets an unsigned integer that specifies the count of 64-bit values corresponding to fibRgFcLcbBlob that follow.
            This MUST be one of the following values, depending on the value of nFib.
            Value of nFib   cbRgFcLcb
            0x00C1          0x005D
            0x00D9          0x006C
            0x0101          0x0088
            0x010C          0x00A4
            0x0112          0x00B7
            </summary>
            <value>
            The cb rg fc LCB.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcStshfOrig">
            <summary>the fib rg fc LCB97 fc STSHF original.
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc STSHF original.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbStshfOrig">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 LCB STSHF original.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcStshf">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. An STSH that specifies the
            style sheet for this document begins at this offset.
             </summary>
             <value>
             The fc STSHF.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbStshf">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the STSH that begins at offset 
            fcStshf in the Table Stream. This MUST be a nonzero value.
             </summary>
             <value>
             The LCB STSHF.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcffndRef">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcffndRef begins at this 
            offset and specifies the locations of footnote references in the Main Document, and whether those references
            use auto-numbering or custom symbols. If lcbPlcffndRef is zero, fcPlcffndRef is undefined and MUST be 
            ignored.
            </summary>
            <value>
            The fc PLCFFND reference.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcffndRef">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcffndRef that begins at offset
            fcPlcffndRef in the Table Stream.
             </summary>
             <value>
             The LCB PLCFFND reference.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcffndTxt">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcffndTxt begins at this
            offset and specifies the locations of each block of footnote text in the Footnote Document. If lcbPlcffndTxt
            is zero, fcPlcffndTxt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCFFND text.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcffndTxt">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcffndTxt that begins at offset
            fcPlcffndTxt in the Table Stream.
             </summary>
             <value>
             The LCB PLCFFND text.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfandRef">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfandRef begins at this
            offset and specifies the dates, user initials, and locations of comments in the Main Document. If
            lcbPlcfandRef is zero, fcPlcfandRef is undefined and MUST be ignored.
             </summary>
             <value>
             The fc plcfand reference.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97lcbPlcfandRef">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfandRef at offset fcPlcfandRef
            in the Table Stream.
             </summary>
             <value>
             The LCB plcfand reference.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfandTxt">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfandTxt begins at this
            offset and specifies the locations of comment text ranges in the Comment Document. If lcbPlcfandTxt is zero,
            fcPlcfandTxt is undefined, and MUST be ignored.
             </summary>
             <value>
             The fc plcfand text.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfandTxt">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfandTxt at offset fcPlcfandTxt
            in the Table Stream.
             </summary>
             <value>
             The LCB plcfand text.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfSed">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfSed begins at this
            offset and specifies the locations of property lists for each section in the Main Document. If lcbPlcfSed is
            zero, fcPlcfSed is undefined and MUST be ignored.
             </summary>
             <value>
             The LCB plcfand text.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfSed">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfSed that begins at offset 
            fcPlcfSed in the Table Stream.
             </summary>
             <value>
             The LCB PLCF sed.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcPad">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc PLC pad.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcPad">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The fc PLC pad.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfPhe" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfPhe">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the Plc at offset fcPlcfPhe in the
            Table Stream.
             </summary>
             <value>
             The LCB PLCF phe.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfGlsy">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A SttbfGlsy that contains
            information about the AutoText items that are defined in this document begins at this offset.
             </summary>
             <value>
             The fc STTBF glsy.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfGlsy">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfGlsy at offset fcSttbfGlsy
            in the Table Stream. If base.fGlsy of the Fib that contains this FibRgFcLcb97 is zero, this value MUST be
            zero.
             </summary>
             <value>
             The LCB STTBF glsy.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfGlsy">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfGlsy that contains
            information about the AutoText items that are defined in this document begins at this offset.
             </summary>
             <value>
             The fc PLCF glsy.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfGlsy">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfGlsy at offset fcPlcfGlsy in
            the Table Stream. If base.fGlsy of the Fib that contains this FibRgFcLcb97 is zero, this value MUST be zero.
             </summary>
             <value>
             The LCB PLCF glsy.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfHdd">
             <summary>
             Gets or sets An unsigned integer that specifies the offset in the Table Stream where a Plcfhdd begins. The
            Plcfhdd specifies the locations of each block of header/footer text in the WordDocument Stream. 
             </summary>
             <value>
             The fc PLCF HDD.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfHdd">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the Plcfhdd at offset fcPlcfHdd in
            the Table Stream. If there is no Plcfhdd, this value MUST be zero. A Plcfhdd MUST exist if FibRgLw97.ccpHdd
            indicates that there are characters in the Header Document
             </summary>
             <value>
             The LCB PLCF HDD.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfBteChpx">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcBteChpx begins at the
            offset. fcPlcfBteChpx MUST be greater than zero, and MUST be a valid offset in the Table Stream.
             </summary>
             <value>
             The fc PLCF bte CHPX.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfBteChpx">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcBteChpx at offset
            fcPlcfBteChpx in the Table Stream. lcbPlcfBteChpx MUST be greater than zero.
             </summary>
             <value>
             The LCB PLCF bte CHPX.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfBtePapx">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcBtePapx begins at the
            offset. fcPlcfBtePapx MUST be greater than zero, and MUST be a valid offset in the Table Stream.
             </summary>
             <value>
             The fc PLCF bte papx.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfBtePapx">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcBtePapx at offset
            fcPlcfBtePapx in the Table Stream. lcbPlcfBteChpx MUST be greater than zero.
             </summary>
             <value>
             The LCB PLCF bte papx.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfSea">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc PLCF sea.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfSea">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF sea.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfFfn">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfFfn begins at this
            offset. This table specifies the fonts that are used in the document. If lcbSttbfFfn is 0, fcSttbfFfn is
            undefined and MUST be ignored.
             </summary>
             <value>
             The fc STTBF FFN.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfFfn">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfFfn at offset fcSttbfFfn in
            the Table Stream.
             </summary>
             <value>
             The LCB STTBF FFN.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldMom">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this
            offset and specifies the locations of field characters in the Main Document. All CPs in this PlcFld MUST be
            greater than or equal to 0 and less than or equal to FibRgLw97.ccpText. If lcbPlcfFldMom is zero,
            fcPlcfFldMom is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCF field mom.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldMom">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldMom in
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field mom.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldHdr">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this 
            offset and specifies the locations of field characters in the Header Document. All CPs in this PlcFld are 
            relative to the starting position of the Header Document.
             </summary>
             <value>
             The fc PLCF field HDR.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldHdr">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldHdr in 
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field HDR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldFtn">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this 
            offset and specifies the locations of field characters in the Footnote Document. All CPs in this PlcFld are 
            relative to the starting position of the Footnote Document.
            </summary>
            <value>
            The fc PLCF field FTN.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldFtn">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldFtn in 
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field FTN.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldAtn">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this 
            offset and specifies the locations of field characters in the Comment Document. All CPs in this PlcFld are 
            relative to the starting position of the Comment Document.
            </summary>
            <value>
            The fc PLCF field atn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldAtn">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldAtn in 
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field atn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldMcr">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc PLCF field MCR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldMcr">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF field MCR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfBkmk">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfBkmk that contains 
            the names of the bookmarks (1) in the document begins at this offset. 
            </summary>
            <value>
            The fc STTBF BKMK.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfBkmk">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfBkmk at offset fcSttbfBkmk.
            </summary>
            <value>
            The LCB STTBF BKMK.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfBkf">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfBkf that contains 
            information about the standard bookmarks (1) in the document begins at this offset. If lcbPlcfBkf is zero, 
            fcPlcfBkf is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKF.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfBkf">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfBkf at offset fcPlcfBkf.
            </summary>
            <value>
            The LCB PLCF BKF.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfBkl">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfBkl that contains 
            information about the standard bookmarks (1) in the document begins at this offset.
            </summary>
            <value>
            The fc PLCF BKL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfBkl">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfBkl at offset fcPlcfBkl.
            </summary>
            <value>
            The LCB PLCF BKL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcCmds">
            <summary>
            Gets or sets An unsigned integer that specifies the offset in the Table Stream of a Tcg that specifies 
            command-related customizations. If lcbCmds is zero, fcCmds is undefined and MUST be ignored.
            </summary>
            <value>
            The fc CMDS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbCmds">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Tcg at offset fcCmds.
            </summary>
            <value>
            The LCB CMDS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUnused1">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUnused1">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfMcr">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc STTBF MCR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfMcr">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB STTBF MCR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPrDrvr">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. The PrDrvr, which contains 
            printer driver information (the names of drivers, port, and so on), begins at this offset.
            </summary>
            <value>
            The fc pr DRVR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPrDrvr">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PrDrvr at offset fcPrDrvr.
            </summary>
            <value>
            The LCB pr DRVR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPrEnvPort">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. The PrEnvPort that is the 
            print environment in portrait mode begins at this offset. If lcbPrEnvPort is zero, fcPrEnvPort is undefined 
            and MUST be ignored.
            </summary>
            <value>
            The fc pr env port.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPrEnvPort">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PrEnvPort at offset fcPrEnvPort.
            </summary>
            <value>
            The LCB pr env port.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPrEnvLand">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. The PrEnvLand that is the 
            print environment in landscape mode begins at this offset. If lcbPrEnvLand is zero, fcPrEnvLand is undefined
            and MUST be ignored.
            </summary>
            <value>
            The fc pr env land.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPrEnvLand">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PrEnvLand at offset fcPrEnvLand.
            </summary>
            <value>
            The LCB pr env land.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcWss">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Selsf begins at this offset
            and specifies the last selection that was made in the Main Document. If lcbWss is zero, fcWss is undefined 
            and MUST be ignored.
            </summary>
            <value>
            The fc WSS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbWss">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Selsf at offset fcWss.
            </summary>
            <value>
            The LCB WSS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcDop">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Dop begins at this offset.
            </summary>
            <value>
            The fc dop.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbDop">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Dopat fcDop. This value MUST NOT 
            be zero.
            </summary>
            <value>
            The LCB dop.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfAssoc">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfAssoc that contains 
            strings that are associated with the document begins at this offset.
            </summary>
            <value>
            The fc STTBF assoc.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfAssoc">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfAssoc at offset fc
            SttbfAssoc. This value MUST NOT be zero.
            </summary>
            <value>
            The LCB STTBF assoc.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcClx">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Clx begins at this offset.
            </summary>
            <value>
            The fc CLX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbClx">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Clx at offset fcClx in the Table 
            Stream. This value MUST be greater than zero.
            </summary>
            <value>
            The LCB CLX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfPgdFtn">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc PLCF PGD FTN.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfPgdFtn">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF PGD FTN.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcAutosaveSource">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc autosave source.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbAutosaveSource">
            <summary>
            Gets or sets This value MUST be zero and MUST be ignored.
            </summary>
            <value>
            The LCB autosave source.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcGrpXstAtnOwners">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An array of XSTs begins at 
            this offset. The value of cch for all XSTs in this array MUST be less than 56. The number of entries in this
            array is limited to 0x7FFF. 
            </summary>
            <value>
            The fc GRP XST atn owners.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbGrpXstAtnOwners">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the XST array at offset 
            fcGrpXstAtnOwners in the Table Stream.
            </summary>
            <value>
            The LCB GRP XST atn owners.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfAtnBkmk">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfAtnBkmk that contains
            information about the annotation bookmarks in the document begins at this offset. 
            </summary>
            <value>
            The fc STTBF atn BKMK.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfAtnBkmk">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfAtnBkmk at offset 
            fcSttbfAtnBkmk.
            </summary>
            <value>
            The LCB STTBF atn BKMK.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUnused2">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUnused2">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUnused3">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc unused3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUnused3">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcSpaMom">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfSpa begins at this 
            offset. The PlcfSpa contains shape information for the Main Document. 
            </summary>
            <value>
            The fc PLC spa mom.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcSpaMom">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfSpa at offset fcPlcSpaMom.
            </summary>
            <value>
            The LCB PLC spa mom.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcSpaHdr">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfSpa begins at this 
            offset. The PlcfSpa contains shape information for the Header Document. 
            </summary>
            <value>
            The fc PLC spa HDR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcSpaHdr">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfSpa at the offset 
            fcPlcSpaHdr.
            </summary>
            <value>
            The LCB PLC spa HDR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfAtnBkf">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfBkf that contains 
            information about annotation bookmarks in the document begins at this offset. If lcbPlcfAtnBkf is zero, 
            fcPlcfAtnBkf is undefined and MUST be ignored.
            </summary>
            <value>
            The LCB PLC spa HDR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfAtnBkf">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfBkf at offset fcPlcfAtnBkf.
            </summary>
            <value>
            The LCB PLCF atn BKF.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfAtnBkl">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfBkl that contains 
            information about annotation bookmarks in the document begins at this offset. If lcbPlcfAtnBkl is zero, then
            fcPlcfAtnBkl is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF atn BKL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfAtnBkl">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfBkl at offset fcPlcfAtnBkl.
            </summary>
            <value>
            The LCB PLCF atn BKL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPms">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Pms, which contains the 
            current state of a print merge operation, begins at this offset. If lcbPms is zero, fcPms is undefined and 
            MUST be ignored.
            </summary>
            <value>
            The fc PMS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPms">
            <summary>
            Gets or sets An unsigned integer which specifies the size, in bytes, of the Pms at offset fcPms.
            </summary>
            <value>
            The LCB PMS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcFormFldSttbs">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc form field STTBS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbFormFldSttbs">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB form field STTBS.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfendRef">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfendRef that begins at 
            this offset specifies the locations of endnote references in the Main Document and whether those references 
            use auto-numbering or custom symbols. 
            </summary>
            <value>
            The fc plcfend reference.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfendRef">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfendRef that begins at offset 
            fcPlcfendRef in the Table Stream.
            </summary>
            <value>
            The LCB plcfend reference.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfendTxt">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfendTxt begins at this 
            offset and specifies the locations of each block of endnote text in the Endnote Document. If lcbPlcfendTxt 
            is zero, fcPlcfendTxt is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plcfend text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfendTxt">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfendTxt that begins at offset 
            fcPlcfendTxt in the Table Stream.
            </summary>
            <value>
            The LCB plcfend text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldEdn">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this 
            offset and specifies the locations of field characters in the Endnote Document. 
            </summary>
            <value>
            The fc PLCF field edn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldEdn">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldEdn in 
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field edn.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUnused4">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc unused4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUnused4">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcDggInfo">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An OfficeArtContent that 
            contains information about the drawings in the document begins at this offset.
            </summary>
            <value>
            The fc DGG information.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbDggInfo">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the OfficeArtContent at the offset 
            fcDggInfo. If lcbDggInfo is zero, there MUST NOT be any drawings in the document.
            </summary>
            <value>
            The LCB DGG information.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfRMark">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfRMark that contains 
            the names of authors who have added revision marks or comments to the document begins at this offset. 
            </summary>
            <value>
            The fc STTBF r mark.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfRMark">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfRMark at the offset 
            fcSttbfRMark.
            </summary>
            <value>
            The LCB STTBF r mark.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfCaption">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfCaption that contains
            information about the captions that are defined in this document begins at this offset. 
            </summary>
            <value>
            The fc STTBF caption.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfCaption">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfCaption at offset 
            fcSttbfCaption in the Table Stream. If base.fDot of the Fib that contains this FibRgFcLcb97 is zero, this 
            value MUST be zero.
            </summary>
            <value>
            The LCB STTBF caption.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfAutoCaption">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A SttbfAutoCaption that 
            contains information about the AutoCaption strings defined in this document begins at this offset.
            </summary>
            <value>
            The fc STTBF automatic caption.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfAutoCaption">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfAutoCaption at offset 
            fcSttbfAutoCaption in the Table Stream. If base.fDot of the Fib that contains this FibRgFcLcb97 is zero, 
            this MUST be zero.
            </summary>
            <value>
            The LCB STTBF automatic caption.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfWkb">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfWKB that contains 
            information about all master documents and subdocuments begins at this offset.
            </summary>
            <value>
            The fc PLCF WKB.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfWkb">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfWKB at offset fcPlcfWkb in 
            the Table Stream. If lcbPlcfWkb is zero, fcPlcfWkb is undefined and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF WKB.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfSpl">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Plcfspl, which specifies 
            the state of the spell checker for each text range, begins at this offset. If lcbPlcfSpl is zero, then 
            fcPlcfSpl is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF SPL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfSpl">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Plcfspl that begins at offset 
            fcPlcfSpl in the Table Stream.
            </summary>
            <value>
            The LCB PLCF SPL.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcftxbxTxt">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcftxbxTxt begins at this 
            offset and specifies which ranges of text are contained in which textboxes. If lcbPlcftxbxTxt is zero, 
            fcPlcftxbxTxt is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCFTXBX text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcftxbxTxt">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcftxbxTxt that begins at offset
            fcPlcftxbxTxt in the Table Stream.
            </summary>
            <value>
            The LCB PLCFTXBX text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfFldTxbx">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcFld begins at this 
            offset and specifies the locations of field characters in the Textbox Document. All CPs in this PlcFld are 
            relative to the starting position of the Textbox Document.
            </summary>
            <value>
            The fc PLCF field TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfFldTxbx">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcfFldTxbx in
            the Table Stream.
            </summary>
            <value>
            The LCB PLCF field TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfHdrtxbxTxt">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfHdrtxbxTxt begins at 
            this offset and specifies which ranges of text are contained in which header textboxes.
            </summary>
            <value>
            The fc PLCF HDRTXBX text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfHdrtxbxTxt">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfHdrtxbxTxt that begins at 
            offset fcPlcfHdrtxbxTxt in the Table Stream.
            </summary>
            <value>
            The LCB PLCF HDRTXBX text.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcffldHdrTxbx">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcffldHdrTxbx
            in the Table Stream.
            </summary>
            <value>
            The fc PLCFFLD HDR TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcffldHdrTxbx">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcFld at offset fcPlcffldHdrTxbx
            in the Table Stream.
            </summary>
            <value>
            The LCB PLCFFLD HDR TXBX.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcStwUser">
            <summary>
            Gets or sets An unsigned integer that specifies an offset into the Table Stream. An StwUser that specifies 
            the user-defined variables and VBAdigital signature (2), as specified by [MS-OSHARED] section 2.3.2, begins 
            at this offset. 
            </summary>
            <value>
            The fc STW user.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbStwUser">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the StwUser at offset fcStwUser.
            </summary>
            <value>
            The LCB STW user.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbTtmbd">
            <summary>
            Gets or sets An unsigned integer that specifies an offset into the Table Stream. A SttbTtmbd begins at this 
            offset and specifies information about the TrueType fonts that are embedded in the document. If lcbSttbTtmbd
            is zero, fcSttbTtmbd is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTB TTMBD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbTtmbd">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbTtmbd at offset fcSttbTtmbd.
            </summary>
            <value>
            The LCB STTB TTMBD.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcCookieData" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbCookieData">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the RgCdb at offset fcCookieData in 
            the Table Stream.
            </summary>
            <value>
            The LCB cookie data.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPgdMotherOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPgdMotherOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated document page layout 
            cache at offset fcPgdMotherOldOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD mother old old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcBkdMotherOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbBkdMotherOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated document text flow 
            break cache at offset fcBkdMotherOldOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD mother old old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPgdFtnOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPgdFtnOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated footnote layout cache 
            at offset fcPgdFtnOldOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD FTN old old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcBkdFtnOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbBkdFtnOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated footnote text flow 
            break cache at offset fcBkdFtnOldOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD FTN old old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPgdEdnOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPgdEdnOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated endnote layout cache 
            at offset fcPgdEdnOldOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD edn old old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcBkdEdnOldOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbBkdEdnOldOld">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated endnote text flow 
            break cache at offset fcBkdEdnOldOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD edn old old.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbfIntlFld">
            <summary>
            Gets or sets this value is undefined and MUST be ignored.
            </summary>
            <value>
            The fib rg fc LCB97 fc STTBF intl field.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfIntlFld">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB STTBF intl field.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcRouteSlip" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbRouteSlip">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the RouteSlip at offset fcRouteSlip 
            in the Table Stream.
            </summary>
            <value>
            The LCB route slip.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbSavedBy" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbSavedBy" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbFnm">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbFnm that contains 
            information about the external files that are referenced by this document begins at this offset. If 
            lcbSttbFnm is zero, fcSttbFnm is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTB FNM.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbFnm">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbFnm at the offset fcSttbFnm.
            </summary>
            <value>
            The LCB STTB FNM.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlfLst">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlfLst that contains list 
            formatting information begins at this offset. An array of LVLs is appended to the PlfLst.
            </summary>
            <value>
            The fc PLF LST.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlfLst">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlfLst at the offset fcPlfLst. 
            This does not include the size of the array of LVLs that are appended to the PlfLst.
            </summary>
            <value>
            The LCB PLF LST.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlfLfo">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlfLfo that contains list 
            formatting override information begins at this offset. If lcbPlfLfo is zero, fcPlfLfo is undefined and MUST 
            be ignored.
            </summary>
            <value>
            The fc PLF lfo.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlfLfo">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlfLfo at the offset fcPlfLfo.
            </summary>
            <value>
            The LCB PLF lfo.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfTxbxBkd">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcftxbxBkd begins at this 
            offset and specifies which ranges of text go inside which textboxes.
            </summary>
            <value>
            The fc PLCF TXBX BKD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfTxbxBkd">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcftxbxBkd that begins at offset
            fcPlcfTxbxBkd in the Table Stream.
            </summary>
            <value>
            The LCB PLCF TXBX BKD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfTxbxHdrBkd">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfTxbxHdrBkd begins at 
            this offset and specifies which ranges of text are contained inside which header textboxes.
            </summary>
            <value>
            The fc PLCF TXBX HDR BKD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfTxbxHdrBkd">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfTxbxHdrBkd that begins at 
            offset fcPlcfTxbxHdrBkd in the Table Stream.
            </summary>
            <value>
            The LCB PLCF TXBX HDR BKD.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcDocUndoWord9" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbDocUndoWord9">
            <summary>
            Gets or sets An unsigned integer. If this is nonzero, version-specific undo information exists at offset 
            fcDocUndoWord9 in the WordDocument Stream.
            </summary>
            <value>
            The LCB document undo word9.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcRgbUse" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbRgbUse">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the version-specific undo information
            at offset fcRgbUse in the WordDocument Stream.
            </summary>
            <value>
            The LCB RGB use.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUsp" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUsp">
            <summary>
            Gets or sets  An unsigned integer that specifies the size, in bytes, of the version-specific undo 
            information at offset fcUsp in the WordDocument Stream.
            </summary>
            <value>
            The LCB usp.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcUskf" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbUskf">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the version-specific undo informatio 
            at offset fcUskf in the Table Stream.
            </summary>
            <value>
            The LCB uskf.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcupcRgbUse" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcupcRgbUse">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Plc at offset fcPlcupcRgbUse in 
            the Table Stream.
            </summary>
            <value>
            The LCB plcupc RGB use.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcupcUsp" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcupcUsp">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Plc at offset fcPlcupcUsp in the 
            Table Stream.
            </summary>
            <value>
            The LCB plcupc usp.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbGlsyStyle">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A SttbGlsyStyle, which 
            contains information about the styles that are used by the AutoText items which are defined in this 
            document, begins at this offset. 
            </summary>
            <value>
            The fc STTB glsy style.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbGlsyStyle">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbGlsyStyle at offset 
            fcSttbGlsyStyle in the Table Stream. If base.fGlsy of the Fib that contains this FibRgFcLcb97 is zero, this 
            value MUST be zero.
            </summary>
            <value>
            The LCB STTB glsy style.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlgosl">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlfGosl begins at the 
            offset. If lcbPlgosl is zero, fcPlgosl is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plgosl.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlgosl">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlfGosl at offset fcPlgosl in the
            Table Stream.
            </summary>
            <value>
            The LCB plgosl.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcocx">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A RgxOcxInfo that specifies 
            information about the OLE controls in the document begins at this offset. 
            </summary>
            <value>
            The fc plcocx.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcocx">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the RgxOcxInfo at the offset 
            fcPlcocx.
            </summary>
            <value>
            The LCB plcocx.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfBteLvc" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfBteLvc" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97DwLowDateTime">
            <summary>
            Gets or sets The low-order part of a FILETIME structure, as specified by [MS-DTYP], that specifies when the 
            document was last saved.
            </summary>
            <value>
            The dw low date time.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97DwHighDateTime">
            <summary>
            Gets or sets The high-order part of a FILETIME structure, as specified by [MS-DTYP], that specifies when the
            document was last saved.
            </summary>
            <value>
            The dw high date time.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfLvcPre10" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfLvcPre10" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfAsumy">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfAsumy begins at the 
            offset. If lcbPlcfAsumy is zero, fcPlcfAsumy is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF asumy.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfAsumy">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcfAsumy at offset fcPlcfAsumy 
            in the Table Stream.
            </summary>
            <value>
            The LCB PLCF asumy.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcPlcfGram">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Plcfgram, which specifies 
            the state of the grammar checker for each text range, begins at this offset. If lcbPlcfGram is zero, then 
            fcPlcfGram is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF gram.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbPlcfGram">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the Plcfgram that begins at offset 
            fcPlcfGram in the Table Stream.
            </summary>
            <value>
            The LCB PLCF gram.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97FcSttbListNames">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A SttbListNames, which 
            specifies the LISTNUM field names of the lists in the document, begins at this offset. 
            </summary>
            <value>
            The fc STTB list names.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbListNames">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbListNames at the offset 
            fcSttbListNames.
            </summary>
            <value>
            The LCB STTB list names.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb97fcSttbfUssr" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb97LcbSttbfUssr">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated, version-specific undo
            information at offset fcSttbfUssr in the Table Stream.
            </summary>
            <value>
            The LCB STTBF ussr.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPlcfTch" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPlcfTch">
            <summary>
            Gets or sets  An unsigned integer that specifies the size, in bytes, of the PlcfTch at offset fcPlcfTch.
            </summary>
            <value>
            The LCB PLCF TCH.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcRmdThreading">
            <summary>
            Gets or sets  An unsigned integer that specifies an offset in the Table Stream. An RmdThreading that specifies the data concerning the e-mail
            messages and their authors in this document begins at this offset.
            </summary>
            <value>
            The fc RMD threading.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbRmdThreading">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the RmdThreading at the offset fcRmdThreading. This value MUST NOT be zero.
            </summary>
            <value>
            The LCB RMD threading.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcMid">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A double-byte character Unicode string that specifies the 
            message identifier of the document begins at this offset. This value MUST be ignored.
            </summary>
            <value>
            The fc mid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbMid">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the double-byte character Unicode string at offset fcMid. This value MUST be ignored.
            </summary>
            <value>
            The LCB mid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcSttbRgtplc">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A SttbRgtplc that specifies the styles of lists in the document 
            begins at this offset. If lcbSttbRgtplc is zero, fcSttbRgtplc is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTB RGTPLC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbSttbRgtplc">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbRgtplc at the offset fcSttbRgtplc.
            </summary>
            <value>
            The LCB STTB RGTPLC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcMsoEnvelope">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An MsoEnvelopeCLSID, which specifies the envelope data as 
            specified by [MS-OSHARED] section 2.3.8.1, begins at this offset. If lcbMsoEnvelope is zero, fcMsoEnvelope is undefined and MUST be ignored.
            </summary>
            <value>
            The fc mso envelope.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbMsoEnvelope">
            <summary>
            Gets or sets  An unsigned integer that specifies the size, in bytes, of the MsoEnvelopeCLSID at the offset fcMsoEnvelope.
            </summary>
            <value>
            The LCB mso envelope.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPlcfLad">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A Plcflad begins at this offset and specifies the language 
            auto-detect state of each text range. If lcbPlcfLad is zero, fcPlcfLad is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF lad.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPlcfLad">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the Plcflad that begins at offset fcPlcfLad in the Table Stream.
            </summary>
            <value>
            The LCB PLCF lad.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcRgDofr">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A variable-length array with elements of type Dofrh begins at that offset.
            The elements of this array are records that support the frame set and list style features. If lcbRgDofr is zero, fcRgDofr is undefined and MUST be ignored.
            </summary>
            <value>
            The fc rg dofr.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbRgDofr">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the array that begins at offset fcRgDofr in the Table Stream.
            </summary>
            <value>
            The LCB rg dofr.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPlcosl">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlfCosl begins at the offset. If lcbPlcosl is zero, 
            fcPlcosl is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plcosl.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPlcosl">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlfCosl at offset fcPlcosl in the Table Stream.
            </summary>
            <value>
            The LCB plcosl.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPlcfCookieOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPlcfCookieOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfcookieOld at offset fcPlcfcookieOld in the Table Stream.
            </summary>
            <value>
            The LCB PLCF cookie old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPgdMotherOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPgdMotherOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document page layout cache at offset fcPgdMotherOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD mother old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcBkdMotherOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbBkdMotherOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document text flow break cache at offset fcBkdMotherOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD mother old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPgdFtnOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPgdFtnOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated footnote layout cache at offset fcPgdFtnOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD FTN old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcBkdFtnOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbBkdFtnOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated footnote text flow break cache at offset fcBkdFtnOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD FTN old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcPgdEdnOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbPgdEdnOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated endnote layout cache at offset fcPgdEdnOld in the Table Stream.
            </summary>
            <value>
            The LCB PGD edn old.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2000FcBkdEdnOld" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2000LcbBkdEdnOld">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated endnote text flow break cache at offset fcBkdEdnOld in the Table Stream.
            </summary>
            <value>
            The LCB BKD edn old.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcUnused1">
            <summary>
            Gets or sets the fc unused1. This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbUnused1">
            <summary>
            Gets or sets the LCB unused1.This value MUST be zero, and MUST be ignored
            </summary>
            <value>
            The LCB unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfPgp">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PGPArray begins at this offset.
            If lcbPlcfPgp is 0, fcPlcfPgp is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF PGP.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfPgp">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PGPArray that is stored at offset fcPlcfPgp.
            </summary>
            <value>
            The LCB PLCF PGP.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfuim">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A Plcfuim begins at this offset. 
            If lcbPlcfuim is zero, fcPlcfuim is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plcfuim.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfuim">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the Plcfuim at offset fcPlcfuim.
            </summary>
            <value>
            The LCB plcfuim.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlfguidUim">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlfguidUim begins at this offset.
            If lcbPlfguidUim is zero, fcPlfguidUim is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plfguid uim.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlfguidUim">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlfguidUim at offset fcPlfguidUim.
            </summary>
            <value>
            The LCB plfguid uim.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcAtrdExtra">
            <summary>
            Gets or sets  an unsigned integer that specifies an offset in the Table Stream. An AtrdExtra begins at this offset.
            If lcbAtrdExtra is zero, fcAtrdExtra is undefined and MUST be ignored.
            </summary>
            <value>
            The fc atrd extra.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbAtrdExtra">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the AtrdExtra at offset fcAtrdExtra in the Table Stream.
            </summary>
            <value>
            The LCB atrd extra.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlrsid">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PLRSID begins at this offset.
            If lcbPlrsid is zero, fcPlrsid is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plrsid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlrsid">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PLRSID at offset fcPlrsid in the Table Stream.
            </summary>
            <value>
            The LCB plrsid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcSttbfBkmkFactoid">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfBkmkFactoid containing
            information about smart tag bookmarks in the document begins at this offset. If lcbSttbfBkmkFactoid is zero, 
            fcSttbfBkmkFactoid is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBF BKMK factoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbSttbfBkmkFactoid">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the SttbfBkmkFactoid at offset fcSttbfBkmkFactoid.
            </summary>
            <value>
            The LCB STTBF BKMK factoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfBkfFactoid">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcfBkfd that contains
            information about the smart tag bookmarks in the document begins at this offset. If lcbPlcfBkfFactoid is zero, 
            fcPlcfBkfFactoid is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKF factoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfBkfFactoid">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfBkfd at offset fcPlcfBkfFactoid.
            </summary>
            <value>
            The LCB PLCF BKF factoid.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfcookie" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfcookie">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the Plcfcookie at offset fcPlcfcookie in the Table Stream.
            </summary>
            <value>
            The LCB plcfcookie.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfBklFactoid">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A Plcfbkld that contains 
            information about the smart tag bookmarks in the document begins at this offset. If lcbPlcfBklFactoid is zero, 
            fcPlcfBklFactoid is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKL factoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfBklFactoid">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the Plcfbkld at offset fcPlcfBklFactoid.
            </summary>
            <value>
            The LCB PLCF BKL factoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcFactoidData">
            <summary>
            Gets or sets  An unsigned integer that specifies an offset in the Table Stream. A SmartTagData begins 
            at this offset and specifies information about the smart tag recognizers that are used in this document. 
            If lcbFactoidData is zero, fcFactoidData is undefined and MUST be ignored.
            </summary>
            <value>
            The fc factoid data.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbFactoidData">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the SmartTagData at offset fcFactoidData in the Table Stream.
            </summary>
            <value>
            The LCB factoid data.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcDocUndo" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbDocUndo">
            <summary>
            Gets or sets An unsigned integer. If this value is nonzero, version-specific undo information exists at offset fcDocUndo in the WordDocument Stream.
            </summary>
            <value>
            The LCB document undo.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcSttbfBkmkFcc">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. An SttbfBkmkFcc that contains
            information about the format consistency-checker bookmarks in the document begins at this offset.
            If lcbSttbfBkmkFcc is zero, fcSttbfBkmkFcc is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBF BKMK FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbSttbfBkmkFcc">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the SttbfBkmkFcc at offset fcSttbfBkmkFcc.
            </summary>
            <value>
            The LCB STTBF BKMK FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfBkfFcc">
            <summary>
            Gets or sets  An unsigned integer that specifies an offset in the Table Stream. A PlcfBkfd that contains
            information about format consistency-checker bookmarks in the document begins at this offset. If lcbPlcfBkfFcc is zero, 
            fcPlcfBkfFcc is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKF FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfBkfFcc">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfBkfd at offset fcPlcfBkfFcc.
            </summary>
            <value>
            The LCB PLCF BKF FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfBklFcc">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlcfBkld that contains information
            about the format consistency-checker bookmarks in the document begins at this offset. If lcbPlcfBklFcc is zero,
            fcPlcfBklFcc is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKL FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfBklFcc">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfBkld at offset fcPlcfBklFcc.
            </summary>
            <value>
            The LCB PLCF BKL FCC.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcSttbfbkmkBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. An SttbfBkmkBPRepairs
            that contains information about the repair bookmarks in the document begins at this offset. If lcbSttbfBkmkBPRepairs 
            is zero, fcSttbfBkmkBPRepairs is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBFBKMK bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbSttbfbkmkBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the SttbfBkmkBPRepairs at offset fcSttbfBkmkBPRepairs.
            </summary>
            <value>
            The LCB STTBFBKMK bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfbkfBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlcfBkf that contains 
            information about the repair bookmarks in the document begins at this offset. If lcbPlcfBkfBPRepairs is zero,
            fcPlcfBkfBPRepairs is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCFBKF bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfbkfBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfBkf at offset fcPlcfbkfBPRepairs.
            </summary>
            <value>
            The LCB PLCFBKF bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfbklBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlcfBkl that contains
            information about the repair bookmarks in the document begins at this offset. If lcbPlcfBklBPRepairs is zero, 
            fcPlcfBklBPRepairs is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCFBKL bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfbklBPRepairs">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcfBkl at offset fcPlcfBklBPRepairs.
            </summary>
            <value>
            The LCB PLCFBKL bp repairs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPmsNew">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A new Pms, which contains
            the current state of a print merge operation, begins at this offset. If lcbPmsNew is zero, fcPmsNew is 
            undefined and MUST be ignored.
            </summary>
            <value>
            The fc PMS new.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPmsNew">
            <summary>
            Gets or sets an unsigned integer which specifies the size, in bytes, of the Pms at offset fcPmsNew.
            </summary>
            <value>
            The LCB PMS new.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcODSO">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. Office Data Source Object 
            (ODSO) data that is used to perform mail merge begins at this offset. The data is stored in an array of
            ODSOPropertyBase items. The ODSOPropertyBase items are of variable size and are stored contiguously. 
            The complete set of properties that are contained in the array is determined by reading each ODSOPropertyBase,
            until a total of lcbODSO bytes of data are read. If lcbODSO is zero, fcODSO is undefined and MUST be ignored.
            </summary>
            <value>
            The fc odso.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbODSO">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the Office Data Source Object data 
            at offset fcODSO in the Table Stream.
            </summary>
            <value>
            The LCB odso.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfpmiOldXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfpmiOldXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfpmiNewXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfpmiNewXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcfpmiMixedXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcfpmiMixedXP" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcUnused2">
            <summary>
            Gets or sets the fc unused2.This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbUnused2">
            <summary>
            Gets or sets the LCB unused2.This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcffactoid">
            <summary>
            Gets or sets an unsigned integer that specifies an offset in the Table Stream. A Plcffactoid, which specifies
            the smart tag recognizer state of each text range, begins at this offset. If lcbPlcffactoid is zero, fcPlcffactoid
            is undefined and MUST be ignored.
            </summary>
            <value>
            The fc plcffactoid.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcffactoid">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes of the Plcffactoid that begins at offset 
            fcPlcffactoid in the Table Stream.
            </summary>
            <value>
            The LCB plcffactoid.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcflvcOldXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcflvcOldXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcflvcNewXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcflvcNewXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002FcPlcflvcMixedXP" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2002LcbPlcflvcMixedXP" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcHplxsdr">
            <summary>
            Gets or sets An unsigned integer that specifies an offset in the Table Stream. An Hplxsdr structure begins 
            at this offset. This structure specifies information about XML schema definition references.
            </summary>
            <value>
            The fc HPLXSDR.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbHplxsdr">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the Hplxsdr structure at the offset 
            fcHplxsdr in the Table Stream. If lcbHplxsdr is zero, then fcHplxsdr is undefined and MUST be ignored.
             </summary>
             <value>
             The LCB HPLXSDR.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcSttbfBkmkSdt">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. An SttbfBkmkSdt that contains 
            information about the structured document tag bookmarks in the document begins at this offset. If lcbSttbfBkmkSdt is zero, then fcSttbfBkmkSdt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc STTBF BKMK SDT.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbSttbfBkmkSdt">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the SttbfBkmkSdt at offset 
            fcSttbfBkmkSdt.
             </summary>
             <value>
             The LCB STTBF BKMK SDT.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfBkfSdt">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcBkfd that contains 
            information about the structured document tag bookmarks in the document begins at this offset. If 
            lcbPlcfBkfSdt is zero, fcPlcfBkfSdt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCF BKF SDT.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfBkfSdt">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcBkfd at offset fcPlcfBkfSdt.
            </summary>
            <value>
            The LCB PLCF BKF SDT.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfBklSdt">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. A PlcBkld that contains 
            information about the structured document tag bookmarks in the document begins at this offset. If 
            lcbPlcfBklSdt is zero, fcPlcfBklSdt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCF BKL SDT.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfBklSdt">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the PlcBkld at offset fcPlcfBklSdt.
            </summary>
            <value>
            The LCB PLCF BKL SDT.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcCustomXForm">
             <summary>
             Gets or sets An unsigned integer that specifies an offset in the Table Stream. An array of 16-bit Unicode 
            characters, which specifies the full path and file name of the XML Stylesheet to apply when saving this 
            document in XML format, begins at this offset. If lcbCustomXForm is zero, fcCustomXForm is undefined and MUST
             be ignored.
             </summary>
             <value>
             The fc custom x form.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbCustomXForm">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the array at offset fcCustomXForm in 
            the Table Stream. This value MUST be less than or equal to 4168 and MUST be evenly divisible by two.
             </summary>
             <value>
             The LCB custom x form.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcSttbfBkmkProt">
             <summary>
             Gets or sets an unsigned integer that specifies an offset in the Table Stream. An SttbfBkmkProt that 
            contains information about range-level protection bookmarks in the document begins at this offset. If 
            lcbSttbfBkmkProt is zero, fcSttbfBkmkProt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc STTBF BKMK prot.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbSttbfBkmkProt">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the SttbfBkmkProt at offset 
            fcSttbfBkmkProt.
             </summary>
             <value>
             The LCB STTBF BKMK prot.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfBkfProt">
             <summary>
             Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlcBkf that contains 
            information about range-level protection bookmarks in the document begins at this offset. If lcbPlcfBkfProt 
            is zero, then fcPlcfBkfProt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCF BKF prot.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfBkfProt">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcBkf at offset fcPlcfBkfProt.
            </summary>
            <value>
            The LCB PLCF BKF prot.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfBklProt">
             <summary>
             Gets or sets an unsigned integer that specifies an offset in the Table Stream. A PlcBkl containing 
            information about range-level protection bookmarks in the document begins at this offset. If lcbPlcfBklProt 
            is zero, then fcPlcfBklProt is undefined and MUST be ignored.
             </summary>
             <value>
             The fc PLCF BKL prot.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfBklProt">
            <summary>
            Gets or sets an unsigned integer that specifies the size, in bytes, of the PlcBkl at offset fcPlcfBklProt.
            </summary>
            <value>
            The LCB PLCF BKL prot.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcSttbProtUser">
             <summary>
             Gets or sets an unsigned integer that specifies an offset in the Table Stream. A SttbProtUser that specifies
            the usernames that are used for range-level protection begins at this offset.
             </summary>
             <value>
             The fc STTB prot user.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbSttbProtUser">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the SttbProtUser at the offset 
            fcSttbProtUser.
             </summary>
             <value>
             The LCB STTB prot user.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcUnused">
            <summary>
            Gets or sets this value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The fc unused.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbUnused">
            <summary>
            Gets or sets this value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfpmiOld" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfpmiOld" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfpmiOldInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfpmiOldInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfpmiNew" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfpmiNew" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcfpmiNewInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcfpmiNewInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcflvcOld" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcflvcOld" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcflvcOldInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcflvcOldInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcflvcNew" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcflvcNew" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPlcflvcNewInline" -->
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPlcflvcNewInline" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPgdMother">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document page layout 
            cache at offset fcPgdMother in the Table Stream.
             </summary>
             <value>
             The fc PGD mother.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPgdMother" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcBkdMother">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document text flow 
            break cache at offset fcBkdMother in the Table Stream.
             </summary>
             <value>
             The fc BKD mother.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbBkdMother">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document text flow 
            break cache at offset fcBkdMother in the Table Stream.
             </summary>
             <value>
             The LCB BKD mother.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcAfdMother" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbAfdMother">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated document author filter
            cache at offset fcAfdMother in the Table Stream.
             </summary>
             <value>
             The LCB afd mother.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPgdFtn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPgdFtn">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated footnote layout cache 
            at offset fcPgdFtn in the Table Stream.
             </summary>
             <value>
             The LCB PGD FTN.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcBkdFtn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbBkdFtn">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated footnote text flow 
            break cache at offset fcBkdFtn in the Table Stream.
             </summary>
             <value>
             The LCB BKD FTN.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcAfdFtn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbAfdFtn">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated footnote author filter
            cache at offset fcAfdFtn in the Table Stream.
             </summary>
             <value>
             The LCB afd FTN.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcPgdEdn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbPgdEdn">
             <summary>
             Gets or sets an unsigned integer that specifies the size, in bytes, of the deprecated endnote layout cache 
            at offset fcPgdEdn in the Table Stream.
             </summary>
             <value>
             The LCB PGD edn.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcBkdEdn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbBkdEdn">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated endnote text flow 
            break cache at offset fcBkdEdn in the Table Stream.
             </summary>
             <value>
             The LCB BKD edn.
             </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcAfdEdn" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbAfdEdn">
            <summary>
            Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated endnote author filter
            cache at offset fcAfdEdn in the Table Stream.
            </summary>
            <value>
            The LCB afd edn.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2003FcAfd" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2003LcbAfd">
             <summary>
             Gets or sets An unsigned integer that specifies the size, in bytes, of the deprecated AFD structure at 
            offset fcAfd in the Table Stream.
             </summary>
             <value>
             The LCB afd.
             </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfmthd">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCFMTHD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfmthd">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCFMTHD.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcSttbfBkmkMoveFrom">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBF BKMK move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbSttbfBkmkMoveFrom">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB STTBF BKMK move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBkfMoveFrom">
            <summary>
            Gets or sets This value is undefined and MUST be ignored
            </summary>
            <value>
            The fc PLCF BKF move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBkfMoveFrom">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF BKF move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBklMoveFrom">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKL move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBklMoveFrom">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF BKL move from.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcSttbfBkmkMoveTo">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBF BKMK move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbSttbfBkmkMoveTo">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB STTBF BKMK move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBkfMoveTo">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKF move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBkfMoveTo">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF BKF move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBklMoveTo">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKL move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBklMoveTo">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF BKL move to.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused1">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused1">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused1.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused2">
            <summary>
            Gets or sets This value is undefined and MUST be ignored
            </summary>
            <value>
            The fc unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused2">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused2.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused3">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused3">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused3.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcSttbfBkmkArto">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc STTBF BKMK arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbSttbfBkmkArto">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB STTBF BKMK arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBkfArto">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKF arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBkfArto">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored
            </summary>
            <value>
            The LCB PLCF BKF arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcPlcfBklArto">
            <summary>
            Gets or sets Undefined and MUST be ignored.
            </summary>
            <value>
            The fc PLCF BKL arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbPlcfBklArto">
            <summary>
            Gets or sets MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB PLCF BKL arto.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcArtoData">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc arto data.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbArtoData">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB arto data.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused4">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused4">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused4.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused5">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused5.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused5">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused5.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcUnused6">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc unused6.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbUnused6">
            <summary>
            Gets or sets This value MUST be zero, and MUST be ignored.
            </summary>
            <value>
            The LCB unused6.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcOssTheme">
            <summary>
            Gets or sets This value is undefined and MUST be ignored.
            
            </summary>
            <value>
            The fc oss theme.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbOssTheme" -->
        <member name="P:Syncfusion.Presentation.Fib.FibRgFcLcb2007FcColorSchemeMapping">
            <summary>
            Gets or sets  This value is undefined and MUST be ignored.
            </summary>
            <value>
            The fc color scheme mapping.
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Syncfusion.Presentation.Fib.FibRgFcLcb2007LcbColorSchemeMapping" -->
        <member name="P:Syncfusion.Presentation.Fib.CswNew">
            <summary>
            Gets or sets an unsigned integer that specifies the count of 16-bit values corresponding to fibRgCswNew that follow.
            This MUST be one of the following values, depending on the value of nFib.
            Value of nFib    cswNew
            0x00C1           0
            0x00D9           0x0002
            0x0101           0x0002
            0x010C           0x0002
            0x0112           0x0005
            </summary>
            <value>
            The CSW new.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.NFibNew">
            <summary>
            Gets or sets an unsigned integer that specifies the version number of the file format that is used.
            This value MUST be one of the following.
            0x00D9
            0x0101
            0x010C
            0x0112
            </summary>
            <value>
            The n fib new.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.CQuickSavesNew">
            <summary>
            Gets or sets an unsigned integer that specifies the number of times that this document was incrementally saved since the last full save. This value MUST be between 0 and 0x000F, inclusively.
            </summary>
            <value>
            The c quick saves new.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.LidThemeOther">
            <summary>
            Gets or sets the lid theme other.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The lid theme other.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.LidThemeFE">
            <summary>
            Gets or sets the lid theme far east.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The lid theme fe.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.LidThemeCS">
            <summary>
            Gets or sets the lid theme complex script.
            This value is undefined and MUST be ignored.
            </summary>
            <value>
            The lid theme cs.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.EncodingCharSize">
            <summary>
            Gets the size of the encoding character.
            </summary>
            <value>
            The size of the encoding character.
            </value>
        </member>
        <member name="P:Syncfusion.Presentation.Fib.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>
            The encoding.
            </value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.MD5Context">
            <summary>
            Summary description for MD5_CTX.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.MD5Context.m_uiI">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.MD5Context.m_buf">
            <summary>
            scratch buffer
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.MD5Context.m_in">
            <summary>
            input buffer
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.MD5Context.m_digest">
            <summary>
            actual digest after MD5Final call
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.Update(System.Byte[],System.UInt32)">
            <summary>
            Updates
            </summary>
            <param name="inBuf">The input buf.</param>
            <param name="inLen">The buffer length.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.Final">
            <summary>
            Finals this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.StoreDigest">
            <summary>
            Stores the digest.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.F(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            F(x, y, z)
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.G(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            G(x, y, z)
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.H(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            H(x, y, z)
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.III(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            I(x, y, z)
            </summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <param name="z">The z.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.ROTATE_LEFT(System.UInt32,System.Byte)">
            <summary>
            ROTATE_LEFT
            </summary>
            <param name="x">The x.</param>
            <param name="n">The n.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.FF(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            FF
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="x">The x.</param>
            <param name="s">The s.</param>
            <param name="ac">The ac.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.GG(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            GG
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="x">The x.</param>
            <param name="s">The s.</param>
            <param name="ac">The ac.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.HH(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            HH
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="x">The x.</param>
            <param name="s">The s.</param>
            <param name="ac">The ac.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.II(System.UInt32@,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte,System.UInt32)">
            <summary>
            II
            </summary>
            <param name="a">A.</param>
            <param name="b">The b.</param>
            <param name="c">The c.</param>
            <param name="d">The d.</param>
            <param name="x">The x.</param>
            <param name="s">The s.</param>
            <param name="ac">The ac.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.MD5Context.Transform(System.UInt32[])">
            <summary>
            Transforms the specified inn.
            </summary>
            <param name="inn">The inn.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.MD5Context.I">
            <summary>
            Gets the I.
            </summary>
            <value>The I.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.MD5Context.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>The buffer.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.MD5Context.InBuffer">
            <summary>
            Gets the input buffer.
            </summary>
            <value>The input buffer.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.MD5Context.Digest">
            <summary>
            Gets the digest.
            </summary>
            <value>The digest.</value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.SecurityHelper">
            <summary>
            This class contains utility methods used by Word 2007 and Word 2010 Encryption/Decryption implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.PasswordIterationCount">
            <summary>
            Number of iterations used for key generation.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.EncryptionInfoStream">
            <summary>
            Name of encryption info stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.DataSpacesStorage">
            <summary>
            Name of dataspaces storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.DataSpaceMapStream">
            <summary>
            Name of dataspace map stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.TransformPrimaryStream">
            <summary>
            Name of the transform primary stream.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.DataSpaceInfoStorage">
            <summary>
            Name of dataspace info storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.TransformInfoStorage">
            <summary>
            Name of transform info storage.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.EncryptedPackageStream">
            <summary>
            Name of encrypted package stream.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.GetEncryptionType(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Gets the type of the encryption.
            </summary>
            <param name="storage">The storage.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.ReadInt32(System.IO.Stream,System.Byte[])">
            <summary>
            Reads Int32 value from the stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="buffer">Temporary buffer to put extracted bytes into.</param>
            <returns>Extracted Int32 value.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.ReadUnicodeString(System.IO.Stream)">
            <summary>
            Extracts padded unicode string from a stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <returns>Extracted string.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.ReadUnicodeStringZero(System.IO.Stream)">
            <summary>
            Read zero-terminated string from the stream.
            </summary>
            <param name="stream">Stream to get string from.</param>
            <returns>Extracted string (without trailing zero).</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.WriteInt32(System.IO.Stream,System.Int32)">
            <summary>
            Writes Int32 value into the stream.
            </summary>
            <param name="stream">Stream to put data into.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.WriteUnicodeString(System.IO.Stream,System.String)">
            <summary>
            Writes padded unicode string from a stream.
            </summary>
            <param name="stream">Stream to get data from.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.WriteUnicodeStringZero(System.IO.Stream,System.String)">
            <summary>
            Writes zero-terminated string into the stream.
            </summary>
            <param name="stream">Stream to put string into.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.CreateKey(System.String,System.Byte[],System.Int32)">
            <summary>
            Creates key object based on the salt and password.
            </summary>
            <param name="password">Password to use.</param>
            <param name="salt">Salt to use.</param>
            <param name="keyLength">Required key length.</param>
            <returns>Array with created key.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.CreateAgileEncryptionKey(System.Security.Cryptography.HashAlgorithm,System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates the agile encryption key.
            </summary>
            <param name="password">The password.</param>
            <param name="salt">The salt.</param>
            <param name="blockKey">The block key.</param>
            <param name="keyLength">Length of the key.</param>
            <param name="iterationCount">The iteration count.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.EncryptDecrypt(System.Byte[],Syncfusion.Presentation.Security.SecurityHelper.EncryptionMethod,System.Int32)">
            <summary>
            Encrypts/decrypts buffer with specified method.
            </summary>
            <param name="data">Data to process.</param>
            <param name="method">Method to use.</param>
            <param name="blockSize">Size of the encryption block.</param>
            <returns>Modified (encrypted/decrypted) data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.CombineArray(System.Byte[],System.Byte[])">
            <summary>
            Combines two arrays into one.
            </summary>
            <param name="buffer1">The first buffer to combine.</param>
            <param name="buffer2">The second buffer to combine.</param>
            <returns>Combined array.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.CorrectSize(System.Byte[],System.Int32,System.Byte)">
            <summary>
            Corrects the size.
            </summary>
            <param name="hashBuf">The hash buf.</param>
            <param name="size">The size.</param>
            <param name="padding">The padding.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.ConcatenateIV(System.Byte[],System.Byte[])">
            <summary>
            Concatenates the IV.
            </summary>
            <param name="data">The data.</param>
            <param name="IV">The IV.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.SecurityHelper.CompareArray(System.Byte[],System.Byte[])">
            <summary>
            Compares the array.
            </summary>
            <param name="buffer1">The buffer1.</param>
            <param name="buffer2">The buffer2.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Presentation.Security.SecurityHelper.EncrytionType">
            <summary>
            Represents type of the encryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.EncrytionType.Standard">
            <summary>
            Word 2007 encryption format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.EncrytionType.Agile">
            <summary>
            Word 2010 encryption format.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.SecurityHelper.EncrytionType.None">
            <summary>
            Wrong encryption format.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.StandardDecryptor">
            <summary>
            This class is responsible for decryption of Standard encryption (Word 2007) files.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.BlockSize">
            <summary>
            Size of the decryption block.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.m_dataSpaceMap">
            <summary>
            Dataspace map.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.m_info">
            <summary>
            Encryption info.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.m_storage">
            <summary>
            Compound storage that should be decrypted.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.m_arrKey">
            <summary>
            Array containing key data.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardDecryptor.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.Decrypt">
            <summary>
            Decrypts internal storage.
            </summary>
            <returns>Decrypted stream.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.Initialize(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Prepares decryptor for actual decryption.
            </summary>
            <param name="storage">Compound storage to get required data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.CheckPassword(System.String)">
            <summary>
            Checks whether password is correct.
            </summary>
            <param name="password">Password to check.</param>
            <returns>True if password verification succeeded.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypts specified buffer.
            </summary>
            <param name="data"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.ParseTransfrom(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Extracts transform data from the storage.
            </summary>
            <param name="dataSpaces">Storage to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.ParseDataSpaceMap(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Extracts dataspace map from the storage.
            </summary>
            <param name="dataSpaces">Storage to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardDecryptor.ParseTransformInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Extracts TransformInfo from the storage.
            </summary>
            <param name="transformStorage">Storage to get data from.</param>
        </member>
        <member name="T:Syncfusion.Presentation.Security.StandardEncryptionInfo">
            <summary>
            Represents the standard encryption info for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptionInfo.m_iVersionInfo">
            <summary>
            A Version structure where Version.vMajor MUST be 0x0003, and Version.vMinor MUST be 0x0002.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptionInfo.m_iFlags">
            <summary>
            A copy of the Flags stored in the EncryptionHeader field of this structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptionInfo.m_header">
            <summary>
            An EncryptionHeader structure that specifies parameters used to encrypt data.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptionInfo.m_verifier">
            <summary>
            An EncryptionVerifier structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptionInfo.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptionInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptionInfo.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptionInfo.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.StandardEncryptionInfo.VersionInfo">
            <summary>
            A Version structure where Version.vMajor MUST be 0x0003, and Version.vMinor MUST be 0x0002.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.StandardEncryptionInfo.Flags">
            <summary>
            A copy of the Flags stored in the EncryptionHeader field of this structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.StandardEncryptionInfo.Header">
            <summary>
            An EncryptionHeader structure that specifies parameters used to encrypt data.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.StandardEncryptionInfo.Verifier">
            <summary>
            An EncryptionVerifier structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.StandardEncryptor">
            <summary>
            This class used to encrypt data using Standard encryption (Word 2007) with AES 128
            encryption algorithm and SHA-1 hashing algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.KeyLength">
            <summary>
            Key length.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.DefaultVersion">
            <summary>
            Default version.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.DefaultFlags">
            <summary>
            Default flags.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.AES128AlgorithmId">
            <summary>
            Encryption algorithm id (AES-128).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.SHA1AlgorithmHash">
            <summary>
            Hashing algorithm id (SHA-1).
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.DefaultProviderType">
            <summary>
            Provider type.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.DefaultCSPName">
            <summary>
            Default CSP name.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.StandardEncryptor.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.Encrypt(System.IO.Stream,System.String,Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Encrypts specified stream.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="password">Password to use.</param>
            <param name="root">Root storage to put encrypted data into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.PrepareDataSpaces(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Preparse data spaces structures inside specified storage.
            </summary>
            <param name="root">Storage to put DataSpaces inside.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.SerializeVersion(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes VersionInfo stream inside specified storage.
            </summary>
            <param name="dataSpaces">Storage to serialize VersionInfo into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.SerializeTransformInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes transformation info.
            </summary>
            <param name="dataSpaces">Storage to serialize into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.SerializeDataSpaceInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes dataspace info.
            </summary>
            <param name="dataSpaces">Storage to serialize into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.SerializeDataSpaceMap(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Serializes DataSpaceMap stream.
            </summary>
            <param name="dataSpaces">Storage to place stream into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.PrepareEncryptionInfo(Syncfusion.CompoundFile.Presentation.ICompoundStorage,System.String)">
            <summary>
            Prepare EncryptionInfo record and stores it in appropriate stream.
            </summary>
            <param name="root">Root storage.</param>
            <param name="password">Encryption password.</param>
            <returns>Encryption key.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.CreateSalt(System.Int32)">
            <summary>
            Creates random salt.
            </summary>
            <param name="length">Desired salt length.</param>
            <returns>Array with random data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypts specified buffer.
            </summary>
            <param name="data">Data to encrypt.</param>
            <param name="key">Encryption key.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.Security.StandardEncryptor.Encrypt(System.IO.Stream,System.Byte[],System.IO.Stream)">
            <summary>
            Encrypt specified stream.
            </summary>
            <param name="stream">Stream to encrypt.</param>
            <param name="key">Encryption key.</param>
            <param name="output">Output stream.</param>
        </member>
        <member name="T:Syncfusion.Presentation.Security.TransformInfoHeader">
            <summary>
            Represents the transform info header for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_iTransformType">
            <summary>
            An unsigned integer that specifies the type of transform to be applied.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_strTransformId">
            <summary>
            An identifier associated with a specific transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_strTransformName">
            <summary>
            The friendly name of the transform.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_iReaderVersion">
            <summary>
            The reader version.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_iUpdaterVersion">
            <summary>
            The updater version.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_iWriterVersion">
            <summary>
            The writer version.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.TransformInfoHeader.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.TransformInfoHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.TransformInfoHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the class.
            </summary>
            <param name="stream">Stream to get data from.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.TransformInfoHeader.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.TransformType">
            <summary>
            An unsigned integer that specifies the type of transform to be applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.TransformId">
            <summary>
            An identifier associated with a specific transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.TransformName">
            <summary>
            The friendly name of the transform.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.ReaderVersion">
            <summary>
            The reader version.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.UpdaterVersion">
            <summary>
            The updater version.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.TransformInfoHeader.WriterVersion">
            <summary>
            The writer version.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.VersionInfo">
            <summary>
            Represents the version information for Encryption/Decryption of Word documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.VersionInfo.m_strFeatureId">
            <summary>
            The functionality for which the DataSpaceVersionInfo structure specifies
            version information. MUST be "Microsoft.Container.DataSpaces".
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.VersionInfo.m_iReaderVersion">
            <summary>
            The reader version of the data spaces structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.VersionInfo.m_iUpdaterVersion">
            <summary>
            The updater version of the data spaces structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.VersionInfo.m_iWriterVersion">
            <summary>
            The writer version of the data spaces structure.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.VersionInfo.m_securityHelper">
            <summary>
            Security helper contains utility methods for encryption/decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.VersionInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.VersionInfo.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into specified stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.VersionInfo.FeatureId">
            <summary>
            The functionality for which the DataSpaceVersionInfo structure specifies
            version information. MUST be "Microsoft.Container.DataSpaces".
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.VersionInfo.ReaderVersion">
            <summary>
            The reader version of the data spaces structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.VersionInfo.UpdaterVersion">
            <summary>
            The updater version of the data spaces structure.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.Security.VersionInfo.WriterVersion">
            <summary>
            The writer version of the data spaces structure.
            </summary>
        </member>
        <member name="T:Syncfusion.Presentation.Security.XmlEncryptionDescriptor">
            <summary>
            Represents the xml encryption descriptor for Encryption/Decryption of Word 2010/2013 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.m_keyData">
            <summary>
            Specifies the key data used for Encryption/Decryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.m_dataIntegrity">
            <summary>
            Specifies the data integrity used for Encryption/Decryption.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.m_keyEncryptors">
            <summary>
            Specifies the key encryptors used for Encryption/Decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.Parse(System.IO.Stream)">
            <summary>
            Parses the specified stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.Serialize(System.IO.Stream)">
            <summary>
            Serializes object into stream.
            </summary>
            <param name="stream">Stream to serialize into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.CreateWriter(System.IO.Stream)">
            <summary>
            Create xml writer
            </summary>
            <param name="data">The stream</param>
            <returns>returns the xml writer</returns>
        </member>
        <member name="P:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.KeyData">
            <summary>
            Gets or sets the key data.
            </summary>
            <value>The key data.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.DataIntegrity">
            <summary>
            Gets or sets the data integrity.
            </summary>
            <value>The data integrity.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.XmlEncryptionDescriptor.KeyEncryptors">
            <summary>
            Gets or sets the key encryptors.
            </summary>
            <value>The key encryptors.</value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.KeyData">
            <summary>
            Represents the key data for Encryption/Decryption of Word 2010 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_iSaltSize">
            <summary>
            Specifies the number of bytes used by salt.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_iBlockSize">
            <summary>
            Specifies the number of bytes used to encrypt one block of data.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_iKeyBits">
            <summary>
            Specifies the number of bits used by encryption algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_iHashSize">
            <summary>
            Specifies the number of bytes used by hash value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_sCipherAlgorithm">
            <summary>
            Specifies the cipher algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_sCipherChaining">
            <summary>
            Specifies the chaining mode used by the cipher algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_sHashAlgorithm">
            <summary>
            Specifies the hashing algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyData.m_arrSalt">
            <summary>
            Specifies the salt value.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyData.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyData.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyData.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.SaltSize">
            <summary>
            Gets or sets the size of the salt.
            </summary>
            <value>The size of the salt.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.BlockSize">
            <summary>
            Gets or sets the size of the block.
            </summary>
            <value>The size of the block.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.KeyBits">
            <summary>
            Gets or sets the key bits.
            </summary>
            <value>The key bits.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.HashSize">
            <summary>
            Gets or sets the size of the hash.
            </summary>
            <value>The size of the hash.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.CipherAlgorithm">
            <summary>
            Gets or sets the cipher algorithm.
            </summary>
            <value>The cipher algorithm.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.CipherChaining">
            <summary>
            Gets or sets the cipher chaining.
            </summary>
            <value>The cipher chaining.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm.
            </summary>
            <value>The hash algorithm.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyData.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>The salt.</value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.DataIntegrity">
            <summary>
            Represents the data integrity for Encryption/Decryption of Word 2010 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataIntegrity.m_encryptedHmacKey">
            <summary>
            Specifies an encrypted key used for generating the encryptedHmacValue.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.DataIntegrity.m_encryptedHmacValue">
            <summary>
            Specifies an HMAC derived from the encryptedHmacKey and the encrypted data.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataIntegrity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataIntegrity.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.DataIntegrity.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataIntegrity.EncryptedHmacKey">
            <summary>
            Gets or sets the encrypted hmac key.
            </summary>
            <value>The encrypted hmac key.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.DataIntegrity.EncryptedHmacValue">
            <summary>
            Gets or sets the encrypted hmac value.
            </summary>
            <value>The encrypted hmac value.</value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.KeyEncryptors">
            <summary>
            Represents the key encryptors for Encryption/Decryption of Word 2010 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.KeyEncryptors.m_encryptedKey">
            <summary>
            Specifies encrypted key used for Encryption/Decryption.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyEncryptors.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyEncryptors.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.KeyEncryptors.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.KeyEncryptors.EncryptedKey">
            <summary>
            Gets or sets the encrypted key.
            </summary>
            <value>The encrypted key.</value>
        </member>
        <member name="T:Syncfusion.Presentation.Security.EncryptedKey">
            <summary>
            Represents the encrypted key for Encryption/Decryption of Word 2010 documents.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_iSpinCount">
            <summary>
            Specifies the spin count
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_iSaltSize">
            <summary>
            Specifies the number of bytes used by salt.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_iBlockSize">
            <summary>
            Specifies the number of bytes used to encrypt one block of data.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_iKeyBits">
            <summary>
            Specifies the number of bits used by encryption algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_iHashSize">
            <summary>
            Specifies the number of bytes used by hash value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_sCipherAlgorithm">
            <summary>
            Specifies the cipher algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_sCipherChaining">
            <summary>
            Specifies the chaining mode used by the cipher algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_sHashAlgorithm">
            <summary>
            Specifies the hashing algorithm.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_arrSalt">
            <summary>
            Specifies the salt value.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_encryptedVerifierHashInput">
            <summary>
            Specifies the encrypted verifier hash input used in password verification.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_encryptedVerifierHashValue">
            <summary>
            Specifies the encrypted verifier hash value used in password verification.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Security.EncryptedKey.m_encryptedKeyValue">
            <summary>
            Specifies the encrypted form of the intermediate key.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptedKey.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptedKey.Parse(System.Xml.XmlReader)">
            <summary>
            Parses the specified reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Security.EncryptedKey.Serialize(System.Xml.XmlWriter)">
            <summary>
            Serializes the specified writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.SpinCount">
            <summary>
            Gets or sets the spin count.
            </summary>
            <value>The spin count.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.SaltSize">
            <summary>
            Gets or sets the size of the salt.
            </summary>
            <value>The size of the salt.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.BlockSize">
            <summary>
            Gets or sets the size of the block.
            </summary>
            <value>The size of the block.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.KeyBits">
            <summary>
            Gets or sets the key bits.
            </summary>
            <value>The key bits.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.HashSize">
            <summary>
            Gets or sets the size of the hash.
            </summary>
            <value>The size of the hash.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.CipherAlgorithm">
            <summary>
            Gets or sets the cipher algorithm.
            </summary>
            <value>The cipher algorithm.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.CipherChaining">
            <summary>
            Gets or sets the cipher chaining.
            </summary>
            <value>The cipher chaining.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm.
            </summary>
            <value>The hash algorithm.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.Salt">
            <summary>
            Gets or sets the salt.
            </summary>
            <value>The salt.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.EncryptedVerifierHashInput">
            <summary>
            Gets or sets the encrypted verifier hash input.
            </summary>
            <value>The encrypted verifier hash input.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.EncryptedVerifierHashValue">
            <summary>
            Gets or sets the encrypted verifier hash value.
            </summary>
            <value>The encrypted verifier hash value.</value>
        </member>
        <member name="P:Syncfusion.Presentation.Security.EncryptedKey.EncryptedKeyValue">
            <summary>
            Gets or sets the encrypted key value.
            </summary>
            <value>The encrypted key value.</value>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DocPropsVTypesPrefix">
            <summary>
            Prefix for DocPropsVTypes namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.XSIPartType">
            <summary>
            Name of the relation type that indicates XSI part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.CorePropertiesPrefix">
            <summary>
            Prefix for core properties namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DublinCorePartType">
            <summary>
            Name of the relation type that indicates dublin core part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DublinCorePrefix">
            <summary>
            Prefix for dublin core namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DublinCoreTermsPartType">
            <summary>
            Name of the relation type that indicates dublin core terms part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DublinCoreTermsPrefix">
            <summary>
            Prefix for dublin core terms namespace.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.DCMITypePartType">
            <summary>
            Name of the relation type that indicates DCMIType part.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.ExtendedPropertiesPartType">
            <summary>
            Name of the relation type that indicates that part contains extended document properties.
            </summary>
        </member>
        <member name="F:Syncfusion.Presentation.Serializator.CorePropertiesPartType">
            <summary>
            Name of the relation type that indicates that part contains core properties.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeExtendedProperties(System.Xml.XmlWriter,Syncfusion.Presentation.IBuiltInDocumentProperties,Syncfusion.Presentation.ICustomDocumentProperties)">
            <summary>
            Serializes extended document properties.
            </summary>
            <param name="writer">XmlWriter to serialize extended properties into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeCoreProperties(System.Xml.XmlWriter,Syncfusion.Presentation.IBuiltInDocumentProperties)">
            <summary>
            Serializes core properties into XmlWriter.
            </summary>
            <param name="writer">XmlWriter to serialize core properties into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeCreatedModifiedTimeElement(System.Xml.XmlWriter,System.String,System.DateTime)">
            <summary>
            Serializes created and modified datetime element into XmlWriter.
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="tagName">Element tag name.</param>
            <param name="dateTime">Date time value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeCustomProperties(System.Xml.XmlWriter,Syncfusion.Presentation.ICustomDocumentProperties)">
            <summary>
            Serializes custom properties into XmlWriter.
            </summary>
            <param name="writer">XmlWriter to serialize properties into.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeAttribute(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            Serializes attribute if it differs from default value.
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="attributeName">Attribute name.</param>
            <param name="value">Attribute value.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeAttribute(System.Xml.XmlWriter,System.String,System.Int32,System.Int32)">
            <summary>
            Serializes attribute if it differs from default value.
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="attributeName">Attribute name.</param>
            <param name="value">Attribute value.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:Syncfusion.Presentation.Serializator.SerializeCustomProperty(System.Xml.XmlWriter,Syncfusion.Presentation.DocumentPropertyImpl,System.Int32)">
            <summary>
            Serializes custom property into XmlWriter.
            </summary>
            <param name="writer">XmlWriter to serialize into.</param>
            <param name="property">Custom property to serialize.</param>
            <param name="iPropertyId">Custom property id.</param>
        </member>
        <member name="M:Syncfusion.Presentation.SlideImplementation.Slide.AddNotesSlide">
            <summary>
            Adds a new notes to the slide.
            </summary>
            <returns>Returns the notes slide of <see cref="T:Syncfusion.Presentation.INotesSlide"/> instance.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.SlideImplementation.Slide.RemoveNotesSlide">
            <summary>
            Removes the notes slide.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SlideImplementation.Slide.SlideID">
            <summary>
            Gets the Unique ID for the current slide. Read-only. The Unique ID ranges from 256 to 2147483647.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SlideImplementation.Slide.SlideNumber">
            <summary>
            Gets the number of the current slide. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.Presentation.SlideImplementation.Slide.NotesSlide">
            <summary>
            Gets the current notes slide instance. Returns null if no notes are present.
            </summary>
        </member>
        <member name="M:Syncfusion.Presentation.SlideImplementation.Slides.Insert(System.Int32,Syncfusion.Presentation.ISlide)">
            <summary>
            Inserts an element into the slide collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The slide value to insert.</param>
        </member>
        <member name="M:Syncfusion.Presentation.TableImplementation.Cell.Clone">
            <summary>
            Creates a copy of the current cell.
            </summary>
            <returns>Returns the cloned cell object</returns>
        </member>
        <member name="M:Syncfusion.Presentation.TableImplementation.Row.Clone">
            <summary>
            Creates a copy of the current row.
            </summary>
            <returns>Returns the cloned row object</returns>
        </member>
        <member name="M:Syncfusion.Presentation.TableImplementation.Table.Clone">
            <summary>
            Creates a copy of the current table.
            </summary>
            <returns>Returns the cloned table object</returns>
        </member>
        <member name="T:Syncfusion.Presentation.UtilityMethods">
             <summary>
             Represents the conversion utilities.
             </summary>
             <example>
             <code lang="CS">
             UtilityMethods utility = new UtilityMethods(); 
             //Convert emu to inch
             double inch = UtilityMethods.EmuToInch(234);
             //Convert emu to point
             double point = UtilityMethods.EmuToPoint(234);
             //Convert inch to emu
             double emu = UtilityMethods.InchToEmu(12);
             //Convert inch to pixel
             float pixel = UtilityMethods.InchToPixel(34);
             //convert inch to point
             float inchToPoint = UtilityMethods.InchToPoint(540);
             //Convert point to emu
             double pointToEmu = UtilityMethods.PointToEmu(45.89);
             //Convert point to pixel
             double pointToPixel = UtilityMethods.PointToPixel(786.90);
             </code>
            <code lang="VB.NET">
            Dim utility As New UtilityMethods()
            'Convert emu to inch
            Dim inch As Double = UtilityMethods.EmuToInch(234)
            'Convert emu to point
            Dim point As Double = UtilityMethods.EmuToPoint(234)
            'Convert inch to emu
            Dim emu As Double = UtilityMethods.InchToEmu(12)
            'Convert inch to pixel
            Dim pixel As Single = UtilityMethods.InchToPixel(34)
            'convert inch to point
            Dim inchToPoint As Single = UtilityMethods.InchToPoint(540)
            'Convert point to emu
            Dim pointToEmu As Double = UtilityMethods.PointToEmu(45.89)
            'Convert point to pixel
            Dim pointToPixel As Double = UtilityMethods.PointToPixel(786.9)
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.CreateReader(System.IO.Stream)">
            <summary>
            Creates xml reader to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <returns>Created xml reader.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.CreateReader(System.IO.Stream,System.Boolean)">
            <summary>
            Creates xml reader to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <param name="skipToElement"></param>
            <returns>Created xml reader.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.CreateWriter(System.IO.TextWriter)">
            <summary>
            Creates xml writer to read data from the stream.
            </summary>
            <param name="data">Data to read.</param>
            <returns>Created xml writer.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.EmuToPoint(System.Int32)">
            <summary>
            Converts the specified Emu unit to the equivalent Point unit.
            </summary>
            <param name="emu">Specifies the value in Emu unit.</param>
            <returns>Returns the value in Point unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.EmuToInch(System.Int32)">
            <summary>
            Converts the specified Emu unit to the equivalent Inch unit.
            </summary>
            <param name="emu">Specifies the value in Emu unit.</param>
            <returns>Returns the value in Inch unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.InchToEmu(System.Double)">
            <summary>
            Converts the specified Inch unit to the equivalent Emu unit.
            </summary>
            <param name="inch">Specifies the value in Inch unit.</param>
            <returns>Returns the value in Emu unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.PointToEmu(System.Double)">
            <summary>
            Converts the specified Point unit to the equivalent Emu unit.
            </summary>
            <param name="point">Specifies the value in Point unit.</param>
            <returns>Returns the value in Emu unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.InchToPoint(System.Double)">
            <summary>
            Converts the specified Inch unit to the equivalent Point unit.
            </summary>
            <param name="inch">Specifies the value in Inch unit.</param>
            <returns>Returns the value in Point unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.InchToPixel(System.Double)">
            <summary>
            Converts the specified Inch unit to the equivalent Pixel unit.
            </summary>
            <param name="inch">Specifies the value in Inch unit.</param>
            <returns>Returns the value in Pixel unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.EmuToPoint(System.Int64)">
            <summary>
            Converts the specified Emu unit to the equivalent Point unit.
            </summary>
            <param name="emu">Specifies the value in Emu unit.</param>
            <returns>Returns the value in Point unit.</returns>
        </member>
        <member name="M:Syncfusion.Presentation.UtilityMethods.PointToPixel(System.Double)">
            <summary>
            Converts the specified Point unit to the equivalent Pixel unit.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>Returns the converted value in Pixel unit.</returns>
            <remarks>1 inch equals 72 points.</remarks>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.CompoundStream">
            <summary>
            This interface represents stream in the compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.CompoundStream.m_strStreamName">
            <summary>
            Name of the stream.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.CompoundStream.#ctor(System.String)">
            <summary>
            Initializes new instance of the compound stream object.
            </summary>
            <param name="streamName">Name of the stream.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.CompoundStream.CopyTo(Syncfusion.CompoundFile.Presentation.CompoundStream)">
            <summary>
            Copies stream content into another stream object.
            </summary>
            <param name="stream">Stream to copy data into.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.CompoundStream.Name">
            <summary>
            Returns name of the stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.ICompoundFile">
            <summary>
            This interface gives access to compound file functionality.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundFile.Flush">
            <summary>
            Flushes content into internal buffer.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundFile.Save(System.IO.Stream)">
            <summary>
            Saves compound file into stream
            </summary>
            <param name="stream">Stream to save data into.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundFile.Save(System.String)">
            <summary>
            Saves compound file into file.
            </summary>
            <param name="fileName">Name of the file to save into.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.ICompoundFile.RootStorage">
            <summary>
            Returns root storage object for this file.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.ICompoundStorage">
            <summary>
            This interface represents storage object in the compound file.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.CreateStream(System.String)">
            <summary>
            Creates new stream inside this storage.
            </summary>
            <param name="streamName">Name of the stream to create.</param>
            <returns>Created stream object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.OpenStream(System.String)">
            <summary>
            Opens existing stream inside this storage.
            </summary>
            <param name="streamName">Name of the stream to open.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.DeleteStream(System.String)">
            <summary>
            Removes existing stream from this storage.
            </summary>
            <param name="streamName">Name of the stream to remove.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.ContainsStream(System.String)">
            <summary>
            Determines whether storage contains specified stream.
            </summary>
            <param name="streamName">Name of the stream to check.</param>
            <returns>true if storage contains specified stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.CreateStorage(System.String)">
            <summary>
            Creates new substorage inside this one.
            </summary>
            <param name="storageName">Name of the storage to create.</param>
            <returns>Created storage object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.OpenStorage(System.String)">
            <summary>
            Opens existing substorage inside this one.
            </summary>
            <param name="storageName">Name of the storage to open.</param>
            <returns>Created storage object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.DeleteStorage(System.String)">
            <summary>
            Removes exisiting substorage from this one.
            </summary>
            <param name="storageName">Name of the storage to remove.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.ContainsStorage(System.String)">
            <summary>
            Determines whether this storage contains substorage with specified name.
            </summary>
            <param name="storageName">Name of the storage to check.</param>
            <returns>true if storage contains substorage with specified name.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.Flush">
            <summary>
            Commits changes.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.InsertCopy(Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Inserts copy of the storage and all subitems inside current storage.
            </summary>
            <param name="storageToCopy">Storage to copy.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.ICompoundStorage.InsertCopy(Syncfusion.CompoundFile.Presentation.CompoundStream)">
            <summary>
            Inserts copy of the stream inside current storage.
            </summary>
            <param name="streamToCopy">Stream to copy.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.ICompoundStorage.Streams">
            <summary>
            Returns all stream names that are placed inside this stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.ICompoundStorage.Storages">
            <summary>
            Returns all storage names that are placed inside this stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.ICompoundStorage.Name">
            <summary>
            Returns name of the storage.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundFile">
            <summary>
            .Net compound file implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.RootEntryName">
            <summary>
            Name of the root entry.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_stream">
            <summary>
            Source stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_header">
            <summary>
            File header.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_fat">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_dif">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_directory">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_root">
            <summary>
            Root storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_shortStream">
            <summary>
            Short stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_miniFatStream">
            <summary>
            Stream containing items described by minifat.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_miniFat">
            <summary>
            MiniFAT.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.m_bDirectMode">
            <summary>
            Indicates whether substreams should maintain their own stream or should write
            directly into the file's stream.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Main">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteDirectory(System.String,Syncfusion.CompoundFile.Presentation.Net.Directory)">
            <summary>
            Writes directory structure into file.
            </summary>
            <param name="path">Destination path.</param>
            <param name="directory">Directory to write.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteStorage(System.String,Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Writes storage to specified path
            </summary>
            <param name="path">Destination path.</param>
            <param name="storage">Storage to write.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteStream(System.String,System.String,Syncfusion.CompoundFile.Presentation.ICompoundStorage)">
            <summary>
            Writes stream into file
            </summary>
            <param name="path">Destination path.</param>
            <param name="streamName">Stream name.</param>
            <param name="storage">Parent storage object.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.#ctor(System.IO.Stream)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.#ctor(System.String,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Open(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.InitializeVariables">
            <summary>
            Initializes internal variables.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.ReadSector(System.Byte[],System.Int32,System.Int32,Syncfusion.CompoundFile.Presentation.Net.FileHeader)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="sectorIndex"></param>
            <param name="header"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.GetEntryStream(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            
            </summary>
            <param name="entry"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.SetEntryStream(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.IO.Stream)">
            <summary>
            Sets stream data for directory entry.
            </summary>
            <param name="entry">Directory entry to update stream data for.</param>
            <param name="stream">Stream to set.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.SetEntryLongStream(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.IO.Stream)">
            <summary>
            Sets entrie's long stream.
            </summary>
            <param name="entry">Entry to update data for.</param>
            <param name="stream">Data to set.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.SetEntryShortStream(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.IO.Stream)">
            <summary>
            Sets entrie's short stream.
            </summary>
            <param name="entry">Entry to update data for.</param>
            <param name="stream">Data to set.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteData(System.IO.Stream,System.Int32,System.IO.Stream,Syncfusion.CompoundFile.Presentation.Net.FAT)">
            <summary>
            Writes stream data into compound file main stream
            </summary>
            <param name="destination">Main stream to write into.</param>
            <param name="startSector">Start sector to write.</param>
            <param name="stream">Stream to write.</param>
            <param name="fat">Fat object.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.AllocateSectors(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.Int32,System.Int32,Syncfusion.CompoundFile.Presentation.Net.FAT)">
            <summary>
            Here we have to allocate required sectors number.
            </summary>
            <param name="entry">Entry to allocate sectors for.</param>
            <param name="iAllocatedSectors">Number of already allocated sectors.</param>
            <param name="iRequiredSectors">Number of required sectors.</param>
            <param name="fat">FAT object.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.AllocateSectors(System.Int32,System.Int32,System.Int32,Syncfusion.CompoundFile.Presentation.Net.FAT)">
            <summary>
            Allocates sectors.
            </summary>
            <param name="iSector">Start sector in the chain.</param>
            <param name="iAllocatedSectors">Number of already allocated sectors.</param>
            <param name="iRequiredSectors">Number of required sectors.</param>
            <param name="fat">Fat object.</param>
            <returns>Start sector of the added chain.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.GetSectorOffset(System.Int32,System.UInt16)">
            <summary>
            Gets offset to the sector.
            </summary>
            <param name="sectorIndex">Zero-based sector index.</param>
            <param name="sectorShift">Sector shift (2^sectorShift = sector size).</param>
            <returns>Offset to the required sector.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.GetSectorOffset(System.Int32,System.UInt16,System.Int32)">
            <summary>
            Gets offset to the sector.
            </summary>
            <param name="sectorIndex">Zero-based sector index.</param>
            <param name="sectorShift">Sector shift (2^sectorShift = sector size).</param>
            <param name="headerSize">Size of the header.</param>
            <returns>Offset to the required sector.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.CheckHeader(System.IO.Stream)">
            <summary>
            Checks whether stream header belongs to compound file.
            </summary>
            <param name="stream">Stream to check.</param>
            <returns>True if stream probably contains compound file data.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.AllocateDirectoryEntry(System.String,Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType)">
            <summary>
            Allocates new directory entry.
            </summary>
            <param name="streamName">Name of the stream.</param>
            <param name="entryType">Entry type.</param>
            <returns>Created directory entry.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.RemoveItem(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            Marks item as free.
            </summary>
            <param name="directoryEntry">Directory entry to be removed/freed.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.ReadData(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.Int64,System.Byte[],System.Int32)">
            <summary>
            Reads data from internal stream.
            </summary>
            <param name="entry">Entry to read data from.</param>
            <param name="position">Position inside entry stream.</param>
            <param name="buffer">Buffer that will cotain read data.</param>
            <param name="length">Size of the data to read.</param>
            <returns>Number of actually read bytes.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteData(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data into internal stream.
            </summary>
            <param name="entry">Entry to write data into.</param>
            <param name="position">Position inside entry stream.</param>
            <param name="buffer">Buffer containing data to write.</param>
            <param name="offset">Offset inside buffer to the data to write.</param>
            <param name="length">Size of the data to write.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Save(System.IO.Stream)">
            <summary>
            Saves compound file into stream.
            </summary>
            <param name="stream">Stream to save data into.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.WriteStreamTo(System.IO.Stream)">
            <summary>
            Writes internal stream into specified one.
            </summary>
            <param name="destination">Destination stream to write into.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.SaveMiniStream">
            <summary>
            Saves mini stream data.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.SerializeDirectory">
            <summary>
            Serializes directory entries.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Save(System.String)">
            <summary>
            Saves compound file into file.
            </summary>
            <param name="fileName">Name of the file to save into.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Header">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Directory">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Root">
            <summary>
            Returns root storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.DIF">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.Fat">
            <summary>
            
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.BaseStream">
            <summary>
            Returns base stream. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.DirectMode">
            <summary>
            Gets or sets value indicating whether substreams should maintain their own stream
            or should write directly into the file's stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundFile.RootStorage">
            <summary>
            Returns root storage object for this file.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundFileException">
            <summary>
            This is exception thrown when experiencing problems with compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundFileException.DefaultExceptionMessage">
            <summary>
            Default exception message.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFileException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundFileException.#ctor(System.String)">
            <summary>
            Initializes new instance of the exception.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.m_parentFile">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.m_nodes">
            <summary>
            RBTree with child elements.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.m_entry">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundFile,System.String,System.Int32)">
            <summary>
            Initializes new instance of the storage.
            </summary>
            <param name="parent">Parent file.</param>
            <param name="name">Name of the new storage.</param>
            <param name="entryIndex">Index to the directory entry that stores storage information.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundFile,Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            Initializes new instance of the storage.
            </summary>
            <param name="parentFile">Parent compound file object.</param>
            <param name="entry">Entry that describes current storage.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.AddItem(System.Int32)">
            <summary>
            
            </summary>
            <param name="entryIndex"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.CreateStream(System.String)">
            <summary>
            Creates new stream.
            </summary>
            <param name="streamName">Name of the stream to create.</param>
            <returns>Created stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.OpenStream(System.String)">
            <summary>
            Opens stream.
            </summary>
            <param name="streamName">Name of the stream to open.</param>
            <returns>Opened stream or null if there is no such stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.DeleteStream(System.String)">
            <summary>
            Removes stream from the storage, if it contains stream with such name.
            </summary>
            <param name="streamName">Stream name to delete.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.ContainsStream(System.String)">
            <summary>
            Checks whether storage contains stream with specified name.
            </summary>
            <param name="streamName">Name of the stream to check.</param>
            <returns>True if storage has stream with such name; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.OpenStorage(System.String)">
            <summary>
            Opens existing storage.
            </summary>
            <param name="storageName">Name of the storage to open.</param>
            <returns>Opened storage item or null if it was impossible to open it.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.DeleteStorage(System.String)">
            <summary>
            Removes substorage from existing storage.
            </summary>
            <param name="storageName">Name of the storage to remove.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.ContainsStorage(System.String)">
            <summary>
            Checks whether this storage contains substorage with specified name.
            </summary>
            <param name="storageName">Name to check.</param>
            <returns>True if there is such storage; false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.GetNodeId(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Returns directory entry id that corresponds to the specified node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.Name">
            <summary>
            Returns name of the storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorage.Entry">
            <summary>
            Returns directory entry for this stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper">
            <summary>
            This is wrapper over compound stream object. Simply redirects all calls to it
            with one exception - it doesn't dispose underlying stream object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.m_storage">
            <summary>
            Wrapped storage object.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundStorage)">
            <summary>
            Initializes new instance of the wrapper.
            </summary>
            <param name="wrapped">Object to wrap.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Dispose">
            <summary>
            Frees all allocated resources.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.CreateStream(System.String)">
            <summary>
            Creates new stream inside this storage.
            </summary>
            <param name="streamName">Name of the stream to create.</param>
            <returns>Created stream object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.OpenStream(System.String)">
            <summary>
            Opens existing stream inside this storage.
            </summary>
            <param name="streamName">Name of the stream to open.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.DeleteStream(System.String)">
            <summary>
            Removes existing stream from this storage.
            </summary>
            <param name="streamName">Name of the stream to remove.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.ContainsStream(System.String)">
            <summary>
            Determines whether storage contains specified stream.
            </summary>
            <param name="streamName">Name of the stream to check.</param>
            <returns>true if storage contains specified stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.CreateStorage(System.String)">
            <summary>
            Creates new substorage inside this one.
            </summary>
            <param name="storageName">Name of the storage to create.</param>
            <returns>Created storage object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.OpenStorage(System.String)">
            <summary>
            Opens existing substorage inside this one.
            </summary>
            <param name="storageName">Name of the storage to open.</param>
            <returns>Created storage object.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.DeleteStorage(System.String)">
            <summary>
            Removes exisiting substorage from this one.
            </summary>
            <param name="storageName">Name of the storage to remove.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.ContainsStorage(System.String)">
            <summary>
            Determines whether this storage contains substorage with specified name.
            </summary>
            <param name="storageName">Name of the storage to check.</param>
            <returns>true if storage contains substorage with specified name.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Flush">
            <summary>
            Commits changes.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Streams">
            <summary>
            Returns all stream names that are placed inside this stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Storages">
            <summary>
            Returns all storage names that are placed inside this stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Name">
            <summary>
            Returns name of the storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStorageWrapper.Entry">
            <summary>
            Returns directory entry for this stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect">
            <summary>
            .Net implementation of the compound stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet">
            <summary>
            .Net implementation of the compound stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.m_parentFile">
            <summary>
            Parent file item.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.m_entry">
            <summary>
            Directory entry of this stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.m_stream">
            <summary>
            Stream with data. If it is null, then data hasn't been read yet or stream is closed.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundFile,Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            Initializes new instance of the stream.
            </summary>
            <param name="file">Parent file object.</param>
            <param name="entry">Entry that describes this stream item.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position
            within the stream by the number of bytes read. 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer
            contains the specified byte array with the values between offset and
            (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin
            storing the data read from the current stream.</param>
            <param name="length">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than
            the number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            writes a sequence of bytes to the current stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes
            from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to
            begin copying bytes to the current stream.</param>
            <param name="length">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. 
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference
            point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Flush">
            <summary>
            Causes any buffered data to be written to the underlying compound file.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Stream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Entry">
            <summary>
            Returns directory entry for this stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Length">
            <summary>
            Gets the length in bytes of the stream. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamNet.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.m_lPosition">
            <summary>
            Stream position.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundFile,Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            Initializes new instance of the stream.
            </summary>
            <param name="file">Parent file object.</param>
            <param name="entry">Entry that describes this stream item.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Open">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position
            within the stream by the number of bytes read. 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer
            contains the specified byte array with the values between offset and
            (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin
            storing the data read from the current stream.</param>
            <param name="length">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than
            the number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            writes a sequence of bytes to the current stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes
            from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to
            begin copying bytes to the current stream.</param>
            <param name="length">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. 
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference
            point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Flush">
            <summary>
            Causes any buffered data to be written to the underlying compound file.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Length">
            <summary>
            Gets the length in bytes of the stream. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamDirect.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper">
            <summary>
            This is wrapper over compound stream object. Simply redirects all calls to it
            with one exception - it doesn't dispose underlying stream object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.m_stream">
            <summary>
            Wrapped stream object.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.#ctor(Syncfusion.CompoundFile.Presentation.CompoundStream)">
            <summary>
            Initializes new instance of the wrapper.
            </summary>
            <param name="wrapped">Object to wrap.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Flush">
            <summary>
            Causes any buffered data to be written to the underlying compound file.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position
            within the stream by the number of bytes read. 
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer
            contains the specified byte array with the values between offset and
            (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin
            storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>The total number of bytes read into the buffer. This can be less than
            the number of bytes requested if that many bytes are not currently available,
            or zero (0) if the end of the stream has been reached.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream. 
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference
            point used to obtain the new position.</param>
            <returns>The new position within the current stream.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            writes a sequence of bytes to the current stream and advances the current
            position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes
            from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to
            begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Length">
            <summary>
            Gets the length in bytes of the stream. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.CompoundStreamWrapper.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DIF.SectorsInHeader">
            <summary>
            Number of items in the file header.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DIF.m_arrSectorID">
            <summary>
            List of all fat sector ids.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DIF.m_arrDifSectors">
            <summary>
            List with used Dif sectors.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DIF.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DIF.#ctor(System.IO.Stream,Syncfusion.CompoundFile.Presentation.Net.FileHeader)">
            <summary>
            
            </summary>
            <param name="stream"></param>
            <param name="header"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DIF.AddDifSectors(System.Int32,Syncfusion.CompoundFile.Presentation.Net.FAT)">
            <summary>
            Adds required number of DIF sectors.
            </summary>
            <param name="sectorCount">Number of sectors to add.</param>
            <param name="fat">FAT object.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DIF.SectorIds">
            <summary>
            
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.Directory">
            <summary>
            This class represents directory structure in the compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.Directory.m_lstEntries">
            <summary>
            List of directory entries.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.Directory.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.Directory.#ctor(System.Byte[])">
            <summary>
            Initializes new instance of the directory.
            </summary>
            <param name="data">Data to parse.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.Directory.FindEmpty">
            <summary>
            Searches for empty entry index.
            </summary>
            <returns>Index of the first empty directory entry.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.Directory.Add(Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry)">
            <summary>
            Adds new entry to the collection or replaces existing empty entry with this one.
            </summary>
            <param name="entry">Entry to add.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.Directory.Write(System.IO.Stream)">
            <summary>
            Saves directory entries into specified stream.
            </summary>
            <param name="stream">Stream to save directory into.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.Directory.Entries">
            <summary>
            Returns list of directory entries.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry">
            <summary>
            Represents single directory entry in the compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.SizeInFile">
            <summary>
            Size of a single directory entry.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.StreamNameSize">
            <summary>
            Size of the stream name field.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_strName">
            <summary>
            Entry name.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_entryType">
            <summary>
            Entry type.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_color">
            <summary>
            Entry "color" in red-black tree.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_leftId">
            <summary>
            Id of the left-sibling.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_rightId">
            <summary>
            Id of the right-sibling.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_childId">
            <summary>
            Id of the child acting as the root of all the children of thes element (if entry type if Storage).
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_storageGuid">
            <summary>
            Storage CLSID.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_iStorageFlags">
            <summary>
            User flags of this storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_dateCreate">
            <summary>
            Create time-stamp for a storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_dateModify">
            <summary>
            Modify time-stamp for a storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_iStartSector">
            <summary>
            Starting stream sector.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_uiSize">
            <summary>
            Stream size.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_iReserved">
            <summary>
            Reserved. Must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.m_iEntryId">
            <summary>
            Entry id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.LastSector">
            <summary>
            Last sector id.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.#ctor(System.String,Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType,System.Int32)">
            <summary>
            Initializes new instance of the entry.
            </summary>
            <param name="name">Name of the new entry.</param>
            <param name="type">Type of the new entry.</param>
            <param name="entryId">Id of the new entry.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes new instance of the entry.
            </summary>
            <param name="data">Data of the new entry.</param>
            <param name="offset">Offset to the entry data.</param>
            <param name="entryId">Entry id.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Write(System.IO.Stream)">
            <summary>
            Writes directory entry data inside specified stream.
            </summary>
            <param name="stream">Stream to write data into.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Name">
            <summary>
            Entry name.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Type">
            <summary>
            Entry type.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Color">
            <summary>
            Entry "color" in red-black tree.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.LeftId">
            <summary>
            Id of the left-sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.RightId">
            <summary>
            Id of the right-sibling.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.ChildId">
            <summary>
            Id of the child acting as the root of all the children of thes element (if entry type if Storage).
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.StorageGuid">
            <summary>
            Storage CLSID.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.StorageFlags">
            <summary>
            User flags of this storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.DateCreate">
            <summary>
            Create time-stamp for a storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.DateModify">
            <summary>
            Modify time-stamp for a storage.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.StartSector">
            <summary>
            Starting stream sector.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Size">
            <summary>
            Stream size.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.Reserved">
            <summary>
            Reserved. Must be zero.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryId">
            <summary>
            Returns entry id. Read-only.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType">
            <summary>
            Possible entry types.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType.Invalid">
            <summary>
            Invalid entry.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType.Storage">
            <summary>
            Entry is storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType.Stream">
            <summary>
            Entry is stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.DirectoryEntry.EntryType.Root">
            <summary>
            Root entry.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STGTY">
            <summary>
            The STGTY enumeration values are used in the type member of the STATSTG
            structure to indicate the type of the storage element.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGTY.STGTY_STORAGE">
            <summary>
            Indicates that the storage element is a storage object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGTY.STGTY_STREAM">
            <summary>
            Indicates that the storage element is a stream object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGTY.STGTY_LOCKBYTES">
            <summary>
            Indicates that the storage element is a byte-array object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGTY.STGTY_PROPERTY">
            <summary>
            Indicates that the storage element is a property storage object.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STREAM_SEEK">
            <summary>
            The STREAM_SEEK enumeration values specify the origin from which to
            calculate the new seek-pointer location.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STREAM_SEEK.STREAM_SEEK_SET">
            <summary>
            The new seek pointer is an offset relative to the beginning of
            the stream. In this case, the dlibMove parameter is the new seek
            position relative to the beginning of the stream.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STREAM_SEEK.STREAM_SEEK_CUR">
            <summary>
            The new seek pointer is an offset relative to the current seek
            pointer location. In this case, the dlibMove parameter is the
            signed displacement from the current seek position.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STREAM_SEEK.STREAM_SEEK_END">
            <summary>
            The new seek pointer is an offset relative to the end of the stream.
            In this case, the dlibMove parameter is the new seek position
            relative to the end of the stream.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.LOCKTYPE">
            <summary>
            The LOCKTYPE enumeration values indicate the type of locking requested
            for the specified range of bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.LOCKTYPE.LOCK_WRITE">
            <summary>
            If this lock is granted, the specified range of bytes can be opened
            and read any number of times, but writing to the locked range is
            prohibited except for the owner who granted this lock.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.LOCKTYPE.LOCK_EXCLUSIVE">
            <summary>
            If this lock is granted, writing to the specified range of bytes is
            prohibited except by the owner granted this lock.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.LOCKTYPE.LOCK_ONLYONCE">
            <summary>
            If this lock is granted, no other LOCK_ONLYONCE lock can be obtained
            on the range. Usually this lock type is an alias for some other lock
            type. Thus, specific implementations can have additional behavior
            associated with this lock type.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STGM">
            <summary>
            The STGM enumeration values are used in the IStorage, IStream, and
            IPropertySetStorage interfaces. These elements are often combined
            using an OR operator.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_READ">
            <summary>
            Indicates that the object is read-only, meaning that modifications
            cannot be made.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_WRITE">
            <summary>
            STGM_WRITE lets you save changes to the object, but does not permit
            access to its data.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_READWRITE">
            <summary>
            STGM_READWRITE allows you to both access and modify an object's data.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_SHARE_DENY_NONE">
            <summary>
            Specifies that subsequent openings of the object are not denied read
            or write access. If no flag from the sharing group is specified,
            this flag is assumed.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_SHARE_DENY_READ">
            <summary>
            Prevents others from subsequently opening the object in STGM_READ mode.
            It is typically used on a root storage object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_SHARE_DENY_WRITE">
            <summary>
            Prevents others from subsequently opening the object for STGM_WRITE
            or STGM_READWRITE access.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_SHARE_EXCLUSIVE">
            <summary>
            Prevents others from subsequently opening the object in any mode. In
            transacted mode, sharing of STGM_SHARE_DENY_WRITE or STGM_SHARE_EXCLUSIVE
            can significantly improve performance since they don't require snapshotting.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_PRIORITY">
            <summary>
            Opens the storage object with exclusive access to the most recently
            committed version.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_CREATE">
            <summary>
            Indicates that an existing storage object or stream should be removed
            before the new one replaces it.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_CONVERT">
            <summary>
            Creates the new object while preserving existing data in a stream
            named "Contents".
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_FAILIFTHERE">
            <summary>
            Causes the create operation to fail if an existing object with the
            specified name exists.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_DIRECT">
            <summary>
            In direct mode, each change to a storage or stream element is
            written as it occurs.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_TRANSACTED">
            <summary>
            In transacted mode, changes are buffered and written only if an
            explicit commit operation is called.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_NOSCRATCH">
            <summary>
            In transacted mode, a temporary scratch file is usually used to
            save modifications until the Commit method is called.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_NOSNAPSHOT">
            <summary>
            This flag is used when opening a storage object with STGM_TRANSACTED
            and without STGM_SHARE_EXCLUSIVE or STGM_SHARE_DENY_WRITE.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_SIMPLE">
            <summary>
            STGM_SIMPLE is a mode that provides a much faster implementation of
            a compound file in a limited, but frequently used case.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_DIRECT_SWMR">
            <summary>
            The STGM_DIRECT_SWMR supports direct mode for single-writer,
            multireader file operations.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGM.STGM_DELETEONRELEASE">
            <summary>
            Indicates that the underlying file is to be automatically destroyed
            when the root storage object is released.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STGFMT">
            <summary>
            The STGFMT enumeration values specify the format of a storage object
            and are used in the StgCreateStorageEx and StgOpenStorageEx functions
            in the STGFMT parameter.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGFMT.STGFMT_STORAGE">
            <summary>
            Indicates that the file must be a compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGFMT.STGFMT_FILE">
            <summary>
            Indicates that the file must not be a compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGFMT.STGFMT_ANY">
            <summary>
            Indicates that the system will determine the file type and use the
            appropriate structured storage or property set implementation.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGFMT.STGFMT_DOCFILE">
            <summary>
            Indicates that the file must be a compound file and is similar to
            the STGFMT_STORAGE flag, but indicates that the compound-file form
            of the compound-file implementation must be used.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS">
            <summary>
            Error code which StgOpenStorage method can return after execution.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.S_OK">
            <summary>
            Success code.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.S_FAIL">
            <summary>
            Filed.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_ACCESSDENIED">
            <summary>
            Access Denied.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_FILEALREADYEXISTS">
            <summary>
            File already exists.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_FILENOTFOUND">
            <summary>
            File could not be found.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INSUFFICIENTMEMORY">
            <summary>
            There is insufficient memory available to complete operation.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INVALIDFLAG">
            <summary>
             Invalid flag error.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INVALIDFUNCTION">
            <summary>
            Unable to perform requested operation.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INVALIDHANDLE">
            <summary>
            Attempted an operation on an invalid object.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INVALIDNAME">
            <summary>
            The name is not valid.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_INVALIDPOINTER">
            <summary>
            Invalid pointer error.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_LOCKVIOLATION">
            <summary>
            A lock violation has occurred.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_NOTSIMPLEFORMAT">
            <summary>
            The compound file was not created with the STGM_SIMPLE flag.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_OLDDLL">
            <summary>
            The compound file was produced with a newer version of storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_OLDFORMAT">
            <summary>
             The compound file was produced with an incompatible version of storage.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_PATHNOTFOUND">
            <summary>
            The path could not be found.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_SHAREVIOLATION">
            <summary>
            A share violation has occurred.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STG_ERRORS.STG_E_TOOMANYOPENFILES">
            <summary>
            There are insufficient resources to open another file.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.STGC">
            <summary>
            The STGC enumeration constants specify the conditions for performing
            the commit operation in the IStorage::Commit and IStream::Commit methods.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGC.STGC_DEFAULT">
            <summary>
            You can specify this condition with STGC_CONSOLIDATE or some
            combination of the other three flags in this list of elements.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGC.STGC_OVERWRITE">
            <summary>
            The commit operation can overwrite existing data to reduce overall
            space requirements.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGC.STGC_ONLYIFCURRENT">
            <summary>
            Prevents multiple users of a storage object from overwriting each
            other's changes.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGC.STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE">
            <summary>
            Commits the changes to a write-behind disk cache, but does not save
            the cache to the disk.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.STGC.STGC_CONSOLIDATE">
            <summary>
            Microsoft Windows 2000/XP: Indicates that a storage should be
            consolidated after it is committed, resulting in a smaller file on disk.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.PID">
            <summary>
            Reserved global Property IDs.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_DICTIONARY">
            <summary>
            PID_DICTIONARY Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_CODEPAGE">
            <summary>
            PID_CODEPAGE Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_FIRST_USABLE">
            <summary>
            PID_FIRST_USABLE Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_FIRST_NAME_DEFAULT">
            <summary>
            PID_FIRST_NAME_DEFAULT Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_LOCALE">
            <summary>
            PID_LOCALE Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_MODIFY_TIME">
            <summary>
            PID_MODIFY_TIME Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_SECURITY">
            <summary>
            PID_SECURITY Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_BEHAVIOR">
            <summary>
            PID_BEHAVIOR Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_ILLEGAL">
            <summary>
            PID_ILLEGAL Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_MIN_READONLY">
            <summary>
            PID_MIN_READONLY Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PID.PID_MAX_READONLY">
            <summary>
            PID_MAX_READONLY Id.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.PRSPEC">
            <summary>
            PRSPEC property ids.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PRSPEC.PRSPEC_INVALID">
            <summary>
            INVALID Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PRSPEC.PRSPEC_LPWSTR">
            <summary>
            LPWSTR Id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PRSPEC.PRSPEC_PROPID">
            <summary>
            PROPID Id.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.PROPSPEC">
            <summary>
            The PROPSPEC structure is used by many of the methods of IPropertyStorage to specify a 
            property either by its property identifier (ID) or the associated string name.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PROPSPEC.ulKind">
            <summary>
            Indicates the union member used. This member can be one of the following values.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.PROPSPEC.propid">
            <summary>
            Specifies the value of the property ID. Use either this value or the following lpwstr, not both.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.VARTYPE">
            <summary>
            This enumeration is used in VARIANT, TYPEDESC, OLE property sets, and safe arrays.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_EMPTY">
            <summary>
            Variable type is not specified.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_I4">
            <summary>
            Variable type is 4-byte signed INT.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_DATE">
            <summary>
            Variable type is date.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_BSTR">
            <summary>
            Variable type is binary string.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_BOOL">
            <summary>
            Variable type is Boolean; True=-1, False=0.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_VARIANT">
            <summary>
            Variable type is VARIANT FAR*. 
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_INT">
            <summary>
            Variable type is int.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_LPSTR">
            <summary>
            Variable type is LPSTR.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_LPWSTR">
            <summary>
            Variable type is LPWSTR
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_FILETIME">
            <summary>
            Variable type is FILENAME string.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.VARTYPE.VT_VECTOR">
            <summary>
            Variable type is binary VECTOR.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.GlobalAllocFlags">
            <summary>
            Flags for GlobalAlloc function.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.GlobalAllocFlags.GMEM_FIXED">
            <summary>
            Allocates fixed memory. The return value is a pointer.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.GlobalAllocFlags.GMEM_MOVEABLE">
            <summary>
            Allocates movable memory. Memory blocks are never moved in physical memory, 
            but they can be moved within the default heap.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.GlobalAllocFlags.GMEM_ZEROINIT">
            <summary>
            Initializes memory contents to zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.GlobalAllocFlags.GMEM_NODISCARD">
            <summary>
            NO Discard memory.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.FAT">
            <summary>
            This class represents FAT object in the compound file.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FAT.m_lstFatChains">
            <summary>
            
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FAT.m_freeSectors">
            <summary>
            List with free sectors.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FAT.m_usSectorShift">
            <summary>
            Sector size.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FAT.m_stream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.#ctor(System.IO.Stream,System.UInt16,System.Int32)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.#ctor(System.IO.Stream,System.UInt16,System.IO.Stream,System.Int32)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.#ctor(Syncfusion.CompoundFile.Presentation.Net.CompoundFile,System.IO.Stream,Syncfusion.CompoundFile.Presentation.Net.DIF,Syncfusion.CompoundFile.Presentation.Net.FileHeader)">
            <summary>
            Initializes new instance of the fat.
            </summary>
            <param name="file">Parent compound file object.</param>
            <param name="stream">Stream to extract fat from.</param>
            <param name="dif">DIF object to help in parsing</param>
            <param name="header">File header object.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.GetStream(System.IO.Stream,System.Int32,Syncfusion.CompoundFile.Presentation.Net.CompoundFile)">
            <summary>
            Gets data of the compound file substream.
            </summary>
            <param name="stream">Stream with compound file data.</param>
            <param name="firstSector">First sector of the stream to get.</param>
            <param name="file">Parent compound file object.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.NextSector(System.Int32)">
            <summary>
            Gets index of the next sector in the chain.
            </summary>
            <param name="sectorIndex">Index of the current sector in the chain.</param>
            <returns>Next sector in the chain.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.CloseChain(System.Int32)">
            <summary>
            Closes sectors chain by marking all those sectors as free starting from specified one.
            </summary>
            <param name="iSector"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.EnlargeChain(System.Int32,System.Int32)">
            <summary>
            Enlarges existing sectors chain.
            </summary>
            <param name="sector">Last sector in the chain that requires enlargment.</param>
            <param name="sectorCount">Number of sectors to add.</param>
            <returns>Index of the chain start (used when chain wasn't created before).</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.FreeSector(System.Int32)">
            <summary>
            Frees specified sector.
            </summary>
            <param name="sector">Sector to free.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.AllocateNewSectors(System.Int32@,System.Int32)">
            <summary>
            Allocates required number of new sectors.
            </summary>
            <param name="sector">Start sector index.</param>
            <param name="count">Number of sectors to allocate.</param>
            <returns>First sector in the new part of the chain.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.AllocateFreeSectors(System.Int32@,System.Int32)">
            <summary>
            Allocates required number of free sectors.
            </summary>
            <param name="sector">Start sector index (this value points to the last used sector after this operation).</param>
            <param name="count">Number of sectors to allocate.</param>
            <returns>First sector in the new part of the chain</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.Write(System.IO.Stream,Syncfusion.CompoundFile.Presentation.Net.DIF,Syncfusion.CompoundFile.Presentation.Net.FileHeader)">
            <summary>
            Saves fat data into stream.
            </summary>
            <param name="stream">Stream to write fat data into.</param>
            <param name="dif">DIF object to update after writing.</param>
            <param name="header">File header.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.AllocateFatSectors(System.Int32,Syncfusion.CompoundFile.Presentation.Net.DIF)">
            <summary>
            Allocates required number of fat sectors.
            </summary>
            <param name="fatSectorsCount">Number of sectors that must be allocated.</param>
            <param name="dif">DIF structure that contains info about fat sectors sequence.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.FillNextSector(System.Int32,System.Byte[])">
            <summary>
            Fills single fat sector.
            </summary>
            <param name="fatItemToStart">Index in the fat to start writing from.</param>
            <param name="arrSector">Sector to fill.</param>
            <returns>First item that wasn't saved inside sector.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.AllocateSector(System.Int32)">
            <summary>
            Allocates new sector of the specified sector type.
            </summary>
            <param name="sectorType">Sector type to allocate.</param>
            <returns>Allocated sector index.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.AddSector">
            <summary>
            Adds single sector to the stream.
            </summary>
            <returns>Index of the added sector.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.WriteSimple(System.IO.MemoryStream,System.Int32)">
            <summary>
            Writes fat data directly into a stream.
            </summary>
            <param name="stream">Stream to write data into.</param>
            <param name="sectorSize">Size of the sector to use for writing.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.GetSectorOffset(System.Int32)">
            <summary>
            Evaluates sector offset.
            </summary>
            <param name="sectorIndex">Zero-based sector index to evaluate offset for.</param>
            <returns>Offset to the sector start.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FAT.GetChainLength(System.Int32)">
            <summary>
            Evaluates number of sectors in the sector chain starting from the specified sector.
            </summary>
            <param name="firstSector">Starting sector of the entry to enumerate.</param>
            <returns>Number of sectros in the sector chain.</returns>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FAT.SectorSize">
            <summary>
            Sector size.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.FileHeader">
            <summary>
            This class represents compound file header.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.HeaderSize">
            <summary>
            Size of the header.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.SignatureSize">
            <summary>
            Signature size.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.DefaultSignature">
            <summary>
            Default (and the only supported) signature.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_arrSignature">
            <summary>
            File signature.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_classId">
            <summary>
            Class id.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usMinorVersion">
            <summary>
            Minor version of the format.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usDllVersion">
            <summary>
            Major version of the dll/format.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usByteOrder">
            <summary>
            Byte order, 0xFFFE for Intel byte-ordering.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usSectorShift">
            <summary>
            Size of sectors in power-of-two (typically 9).
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usMiniSectorShift">
            <summary>
            Size of mini-sectors in power-of-two (typically 6).
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_usReserved">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_uiReserved1">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_uiReserved2">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iFatSectorsNumber">
            <summary>
            Number of sectors in the FAT chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iDirectorySectorStart">
            <summary>
            First sector in the directory chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iSignature">
            <summary>
            Signature used for transactioning, must be zero.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_uiMiniSectorCutoff">
            <summary>
            Maximum size for mini-streams. Typically 4096 bytes.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iMiniFastStart">
            <summary>
            First sector in the mini-FAT chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iMiniFatNumber">
            <summary>
            Number of sectors in the mini-FAT chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iDifStart">
            <summary>
            First sector in the DIF chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_iDifNumber">
            <summary>
            Number of sectors in the DIF chain.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.FileHeader.m_arrFatStart">
            <summary>
            First 109 fat sectors.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.#ctor(System.IO.Stream)">
            <summary>
            Initializes new instance of the file header and extracts data from the stream.
            </summary>
            <param name="stream">Stream to extract header data from.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.Serialize(System.IO.Stream)">
            <summary>
            Saves header into specified stream.
            </summary>
            <param name="stream">Stream to write header into.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.CheckSignature(System.IO.Stream)">
            <summary>
            Checks whether starting bytes of the stream are the same as signature of the compound file.
            </summary>
            <param name="stream">Stream to check.</param>
            <returns>True if stream contains required signature.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.CheckSignature">
            <summary>
            Checks whether signature is supported.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.CheckSignature(System.Byte[])">
            <summary>
            Checks whether signature is supported.
            </summary>
            <param name="arrSignature">Data to compare with default signature.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.WriteUInt16(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.WriteUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="value"></param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.FileHeader.WriteInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="value"></param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.SectorSize">
            <summary>
            Size of the sector. Read-only.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.MinorVersion">
            <summary>
            Minor version of the format.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.DllVersion">
            <summary>
            Major version of the dll/format.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.ByteOrder">
            <summary>
            Byte order, 0xFFFE for Intel byte-ordering.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.SectorShift">
            <summary>
            Size of sectors in power-of-two (typically 9).
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.MiniSectorShift">
            <summary>
            Size of mini-sectors in power-of-two (typically 6).
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.Reserved">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.Reserved1">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.Reserved2">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.FatSectorsNumber">
            <summary>
            Number of sectors in the FAT chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.DirectorySectorStart">
            <summary>
            First sector in the directory chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.Signature">
            <summary>
            Signature used for transactioning, must be zero.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.MiniSectorCutoff">
            <summary>
            Maximum size for mini-streams. Typically 4096 bytes.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.MiniFastStart">
            <summary>
            First sector in the mini-FAT chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.MiniFatNumber">
            <summary>
            Number of sectors in the mini-FAT chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.DifStart">
            <summary>
            First sector in the DIF chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.DifNumber">
            <summary>
            Number of sectors in the DIF chain.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.FileHeader.FatStart">
            <summary>
            First 109 fat sectors.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.ItemNamesComparer">
            <summary>
            This comparer is used to compare item names inside storage.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.ItemNamesComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less
            than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Less than zero if x is less than y. 
            Zero if x equals y. 
            Greater than zero if x is greater than y. 
            </returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.ItemNamesComparer.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less
            than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Less than zero if x is less than y. 
            Zero if x equals y. 
            Greater than zero if x is greater than y. 
            </returns>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.NodeColor">
            <summary>
            Suitable Node colors used for 2-3-4 nodes detection.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.NodeColor.Red">
            <summary>
            Red color of node.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.NodeColor.Black">
            <summary>
            Black color of node.
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode">
            <summary>
            Node class used for proper storing of data in the Map Collection.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_left">
            <summary>
            Reference on left branch.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_right">
            <summary>
            Reference on right branch.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_parent">
            <summary>
            Reference on parent branch.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_color">
            <summary>
            Color of node branch.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_bIsNil">
            <summary>
            Is current node Nil element or not?
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_key">
            <summary>
            Key part of stored in node data.
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.m_value">
            <summary>
            Value part of stored in node data.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.#ctor(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,System.Object,System.Object)">
            <summary>
            Create red colored Tree node.
            </summary>
            <param name="left">Reference on left branch.</param>
            <param name="parent">Reference on parent branch.</param>
            <param name="right">Refernce on right branch.</param>
            <param name="key">Key value of node.</param>
            <param name="value">Value part of node.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.#ctor(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,System.Object,System.Object,Syncfusion.CompoundFile.Presentation.Net.NodeColor)">
            <summary>
            Main constructor of class.
            </summary>
            <param name="left">Reference on left branch.</param>
            <param name="parent">Reference on parent branch.</param>
            <param name="right">Refernce on right branch.</param>
            <param name="key">Key value of node.</param>
            <param name="value">Value part of node.</param>
            <param name="color">Color of node.</param>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Left">
            <summary>
            Reference on left branch.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Right">
            <summary>
            Reference on right branch.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Parent">
            <summary>
            Reference on parent branch.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Color">
            <summary>
            Color of node branch.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.IsNil">
            <summary>
            Is current node Nil element or not?
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Key">
            <summary>
            Key part of stored in node data.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.Value">
            <summary>
            Value part of stored in node data.
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.IsRed">
            <summary>
            Is current node set to red color?
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.RBTreeNode.IsBlack">
            <summary>
            Is current node set to black color?
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.MapCollection">
            <summary></summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.MapCollection.m_MyHead">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.MapCollection.m_size">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.MapCollection.m_comparer">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.#ctor">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.#ctor(System.Collections.IComparer)">
            <summary>
            Create collection with specified comparer for Key values.
            </summary>
            <param name="comparer">Comparer for key values.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Initialize">
            <summary>
            Create Empty node for collection.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Add(System.Object,System.Object)">
            <summary>
            Add item into collection.
            </summary>
            <param name="key">Key part.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Contains(System.Object)">
            <summary>
            Check whether collection contains specified key.
            </summary>
            <returns>True if node with specified key is found; otherwise False.</returns>
            <param name="key">Key for check.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Remove(System.Object)">
            <summary>
            Remove from collection item with specified key.
            </summary>
            <param name="key">Key to identify item.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.begin">
            <summary>
            TODO: place correct comment here
            </summary>
            <returns>
            TODO: place correct comment here
            </returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Min(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Get minimum value for specified branch.
            </summary>
            <param name="node">Branch start node.</param>
            <returns>Reference on minimum value node.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Max(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Get maximum value for specified branch.
            </summary>
            <param name="node">Branch start node.</param>
            <returns>Reference on maximum value node.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Inc(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Go to to next item in collection.
            </summary>
            <param name="node">Start node.</param>
            <returns>Reference on next item in collection or this.Empty if nothing found.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Dec(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Get previous item from collection.
            </summary>
            <param name="node">Start node.</param>
            <returns>Rererence on previous item in collection.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.LBound(System.Object)">
            <summary>
            Find node in collection by key value (search in lower side).
            </summary>
            <param name="key">Key of node to find.</param>
            <returns>Reference on found node, otherwise this.Empty value.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.UBound(System.Object)">
            <summary>
            Find node in collection by key value (search in upper side).
            </summary>
            <param name="key">Key of node to find.</param>
            <returns>Reference on found node, otherwise this.Empty value.</returns>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.LRotate(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Rotate branch into left side.
            </summary>
            <param name="_where">Branch start node.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.RRotate(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Rotate branch into right side.
            </summary>
            <param name="_where">Branch start node.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Erase(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            Erase node from collection.
            </summary>
            <param name="_root">Item to erase.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Insert(System.Boolean,Syncfusion.CompoundFile.Presentation.Net.RBTreeNode,System.Object,System.Object)">
            <summary>
            Insert item into collection.
            </summary>
            <param name="_addLeft">Add into left side of tree or right.</param>
            <param name="_where">Node for placement.</param>
            <param name="key">Key part of node.</param>
            <param name="value">Value part of node.</param>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapCollection.GetEnumerator">
            <summary>
            Returns enumerator.
            </summary>
            <returns>Returns enumerator of current interface.</returns>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Empty">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Count">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.MapCollection.Item(System.Object)">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.m_current">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="F:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.m_parent">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.#ctor(Syncfusion.CompoundFile.Presentation.Net.RBTreeNode)">
            <summary>
            TODO: place correct comment here
            </summary>
            <param name="parent"/>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.Reset">
            <summary></summary>
        </member>
        <member name="M:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.MoveNext">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="P:Syncfusion.CompoundFile.Presentation.Net.MapEnumerator.Current">
            <summary>
            TODO: place correct comment here
            </summary>
        </member>
        <member name="T:Syncfusion.CompoundFile.Presentation.Net.SectorTypes">
            <summary>
            Contains constants that defines all known sector types.
            </summary>
        </member>
        <member name="T:Syncfusion.XlsIOBaseAssembly">
            <exclude/>
             <summary>
             This class holds the name of the Syncfusion.OfficeChart.Base assembly and provides a helper 
             routine that helps with resolving types when loading a serialization stream and when 
             the framework probes for assemblies by reflection. 
             </summary>
        </member>
        <member name="F:Syncfusion.XlsIOBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information: "Syncfusion.OfficeChart"
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIOBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the XlsIO assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.XlsIOBaseAssembly.RootNamespace">
            <summary>
            The root namespace of this assembly. Used internally for locating resources within the assembly.
            </summary>
        </member>
    </members>
</doc>
