<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Linq.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.Windows.Data.CollectionViewAdv">
            <summary>
            ICollectionViewAdv is an extended interface from ICollectionView that implements
            support for Grouping structure, Summaries, Table Summaries, Filters.
            CollectionViewAdv is an abstract class that implements ICollectionViewAdv and
            implements most of the basic details. By sub-classing CollectionViewAdv the
            following properties could be extended, 
            <para> </para>
            <list type="bullet">
            <item>
            <description>Sorting</description></item>
            <item>
            <description>Filtering</description></item>
            <item>
            <description>Grouping</description></item></list>
            <para>Summaries</para>
            <para> </para>
            <para>It also implements IUnboundExpressionFunc that extends the usage for
            complex Grouping / Summaries / Filtering etc., If there is a complex data
            structure and that follows a common pattern, simply overriding the
            GetExpressionFunc should automatically process all LINQ queries with ease. The
            ITypedList data source is handled by generating an expression to retrieve the
            values,</para>
            <para></para>
            <code lang="C#">        
            internal Expression&lt;Func&lt;string, object, object&gt;&gt; GetITypedListFunc(string propertyName)
                    {
                        if (this.isITypedListSource)
                        {
                            var typedList = this.SourceCollection as ITypedList;
                            Func&lt;string, object, object&gt; recordFunc = (columnName,
            record) =&gt;
                            {
                                var pdc = typedList.GetItemProperties(null);
                                if (pdc != null)
                                {
                                    var pd = pdc.GetPropertyDescriptor(propertyName);
                                    if (pd != null)
                                    {
                                        return pd.GetValue(record);
                                    }
                                }
            
                                return null;
                            };
            
                            Expression&lt;Func&lt;string, object,
            object&gt;&gt; expFunc = (columnName, record) =&gt; recordFunc(columnName,
            record);
                            return expFunc;
                        }
            
                        return null;
                    }
            </code>         
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.ICollectionViewAdv">
            <summary>
            ICollectionViewAdv is an extended interface from ICollectionView that implements
            support for Grouping structure, Summaries, Table Summaries, Filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.AddListener(System.ComponentModel.ICollectionView)">
            <summary>
            Adds the listener.
            </summary>
            <param name="collectionView">The collection view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the record entry.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the property access provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.GetItemProperties">
            <summary>
            Gets the item properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.SetCustomExpressionFunc(Syncfusion.Windows.Data.IUnboundExpressionFunc)">
            <summary>
            Enable customization for runtime dynamic objects in LINQ queries.
            </summary>
            <param name="expressionFunctor"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.Suspend">
            <summary>
            Suspends this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.Resume">
            <summary>
            Resumes this instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ICollectionViewAdv.RefreshFiltering">
            <summary>
            Refresh toplevel groups --Added for the fix SD8300.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.Records">
            <summary>
            Gets the records list structure.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the caption summary row.
            </summary>
            <value>The caption summary row.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.Relations">
            <summary>
            Gets the relations.
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.SummaryRows">
            <summary>
            Gets the summary rows.
            </summary>
            <value>The summary rows.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the filter predicates.
            </summary>
            <value>The filter predicates.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the table summary rows.
            </summary>
            <value>The table summary rows.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.SortComparers">
            <summary>
            Gets the sort comparers for the sort description.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.GroupComparer">
            <summary>
            Defines the custom group comparer to enable customization of the group sort order.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.EditItemState">
            <summary>
            Gets the state of the edit item.
            </summary>
            <value>The state of the edit item.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.CurrentEditItemState">
            <summary>
            Gets the state of the current edit item.
            </summary>
            <value>The state of the current edit item.</value>
        </member>
        <member name="E:Syncfusion.Windows.Data.ICollectionViewAdv.RecordPropertyChanged">
            <summary>
            Record Property Changed event handler
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.PersistGroupsExpandedState">
            <summary>
            Enable groupe expand state persistance. This will affect performance if there are large number of groups.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ICollectionViewAdv.IsGroupsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is groups expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is groups expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Data.IUnboundExpressionFunc">
            <summary>
            Returns an Expression to embed in LINQ operation queries implemented by <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IUnboundExpressionFunc.GetFunc(System.String)">
            <summary>
            Custom Functor to enable runtime customized objects over default operations other than LINQ queries.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IUnboundExpressionFunc.GetTypeFunc(System.String)">
            <summary>
            Custom Functor to enable runtime customized objects over default operations other than LINQ queries.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IUnboundExpressionFunc.GetExpressionFunc(System.String)">
            <summary>
            Custom expression functor to enable runtime customized objects into LINQ queries.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.IUnboundExpressionFunc.GetTypeExpressionFunc(System.String)">
            <summary>
            Custom expression functor to enable runtime customized objects into LINQ queries.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="F:Syncfusion.Windows.Data.CollectionViewAdv.isinApplyFilter">
            <summary>
            Check whether the filter is applied or not.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.CollectionViewAdv"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.UpdateCollectionView(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the collection view by handling the NotifyCollectionChangedEventArgs if there is no grouping.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CreateItemPropertiesProvider">
            <summary>
            Creates the item properties provider. Override this method to have return custom <see cref="T:Syncfusion.Windows.Data.IPropertyAccessProvider"/> and have customizations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Windows.Data.CollectionViewAdv"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.AddListener(System.ComponentModel.ICollectionView)">
            <summary>
            Adds the listener to an external ICollectionView. It will add set the ExternalCollectionView Propety n Wires the CurrentChanged event
            </summary>
            <param name="externalcollectionview">The externalcollectionview.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.EnsureSourceList">
            <summary>
            Call this method in the derived CollectionView once the constructor is called.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.EnsureInitialized">
            <summary>
            Ensures the records are initialized properly.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.System#Windows#IWeakEventListener#ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the <see cref="T:System.Windows.WeakEventManager"/> calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the <see cref="T:System.Windows.WeakEventManager"/> handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SortDescriptionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CreateRecords">
            <summary>
            Creates the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Contains(System.Object)">
            <summary>
            Returns a value that indicates whether a given item belongs to this collection view.
            </summary>
            <param name="item">The object to check.</param>
            <returns>
            true if the item belongs to this collection view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetItemAt(System.Int32)">
            <summary>
            Gets the item at.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.IndexOf(System.Object)">
            <summary>
            Indexes the of.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.DeferRefresh">
            <summary>
            Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.
            </summary>
            <returns>
            An <see cref="T:System.IDisposable"/> object that you can use to dispose of the calling object.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.PassesFilter(System.Object)">
            <summary>
            Passeses the filter.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetGroupResult(System.String[])">
            <summary>
            Gets the group result.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.OnTopLevelGroupPopulated(Syncfusion.Windows.Data.TopLevelGroup)">
            <summary>
            Called when the TopLevelGroup is populated with groups and records.
            </summary>
            <param name="topLevelGroup">The top level group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CreateTopLevelGroup">
            <summary>
            Creates the top level group.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Syncfusion.Windows.Data.CollectionViewAdv.isCurrentAfterLast">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection.
            </summary>
            <value></value>
            <returns>
            Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection; otherwise, false.
            </returns>
        </member>
        <member name="F:Syncfusion.Windows.Data.CollectionViewAdv.isEmpty">
            <summary>
            Returns a value that indicates whether the resulting view is empty.
            </summary>
            <value></value>
            <returns>true if the resulting view is empty; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.SetCurrent(System.Object,System.Int32)">
            <summary>
            Sets the current item.
            </summary>
            <param name="newItem">The new item.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Sets the current item.
            </summary>
            <param name="newItem">The new item.</param>
            <param name="newPosition">The new position.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentTo(System.Object)">
            <summary>
            Sets the specified item to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view.
            </summary>
            <param name="item">The item to set as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.</param>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentToFirst">
            <summary>
            Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentToLast">
            <summary>
            Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentToNext">
            <summary>
            Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentToPosition(System.Int32)">
            <summary>
            Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view.
            </summary>
            <param name="position">The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> to.</param>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.MoveCurrentToPrevious">
            <summary>
            Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/>.
            </summary>
            <returns>
            true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> is an item within the view; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Refresh">
            <summary>
            Recreates the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RefreshOrDefer">
            <summary>
            If the current view is in defer mode, the flags for refresh is set, otherwise it refreshes the view.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RefreshOverride">
            <summary>
            Override this method to modify actions during refresh.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Processes the collection during editing process.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.SuspendEvents">
            <summary>
            Suspends the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.ResumeEvents">
            <summary>
            Resumes the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RaiseCollectionChangedEvent(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the collection changed event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RefreshSort">
            <summary>
            Refreshes the sort.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.AddNew">
            <summary>
            Adds a new item to the collection.
            </summary>
            <returns>
            The new item that is added to the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CollectionChanged"/> event.
            </summary>
            <param name="args">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CancelEdit">
            <summary>
            Ends the edit transaction and discards any pending changes to the item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.ResetEditItemCache">
            <summary>
            Ends the edit transaction and discards the editing item changes
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CancelNew">
            <summary>
            Ends the add transaction and discards the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CancelNew(System.Boolean,System.Boolean)">
            <summary>
            Cancels the new item in view.
            </summary>
            <param name="cancelNewItem"></param>
            <param name="allowCancel"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CommitEdit(System.String)">
            <summary>
            Ends the edit transaction and saves the pending changes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CommitNew">
            <summary>
            Ends the add transaction and saves the pending new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.EditItem(System.Object)">
            <summary>
            Begins an edit transaction of the specified item.
            </summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.Remove(System.Object)">
            <summary>
            Removes the specified item from the collection.
            </summary>
            <param name="record">The record to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position from the collection.
            </summary>
            <param name="index">The position of the item to remove.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:PropertyChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetExpressionFunc(System.String)">
            <summary>
            Gets the expression func for complex data sources.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetItemProperties">
            <summary>
            Gets the item properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.BeginInit">
            <summary>
            Signals the object that initialization is starting.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.EndInit">
            <summary>
            Signals the object that initialization is complete.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.GetPropertyAccessProvider">
            <summary>
            Gets the property access provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewAdv.CreateRecordEntry(System.Object)">
            <summary>
            Creates the record entry.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.DispatchOwner">
            <summary>
            Gets or sets the Dispatcher of the UI object associated with this CollectionViewAdv.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.ItemProperties">
            <summary>
            Gets the item properties.
            </summary>
            <value>The item properties.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.ExternalCollectionView">
            <summary>
            Gets or sets the external collection view.
            </summary>
            <value>The external collection view.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Records">
            <summary>
            Gets the records list structure.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanFilter">
            <summary>
            Gets a value that indicates whether this view supports filtering via the <see cref="P:System.ComponentModel.ICollectionView.Filter"/> property.
            </summary>
            <value></value>
            <returns>true if this view support filtering; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanGroup">
            <summary>
            Gets a value that indicates whether this view supports grouping via the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions"/> property.
            </summary>
            <value></value>
            <returns>true if this view supports grouping; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanSort">
            <summary>
            Gets a value that indicates whether this view supports sorting via the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions"/> property.
            </summary>
            <value></value>
            <returns>true if this view supports sorting; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Culture">
            <summary>
            Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.
            </summary>
            <value></value>
            <returns>
            The culture to use during sorting.
            </returns>
        </member>
        <member name="E:Syncfusion.Windows.Data.CollectionViewAdv.CurrentChanged">
            <summary>
            When implementing this interface, raise this event after the current item has been changed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.CollectionViewAdv.CurrentChanging">
            <summary>
            When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CurrentItem">
            <summary>
            Gets the current item in the view.
            </summary>
            <value></value>
            <returns>
            The current item of the view or null if there is no current item.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CurrentPosition">
            <summary>
            Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> within the view.
            </summary>
            <value></value>
            <returns>
            The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> within the view.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Filter">
            <summary>
            Gets or sets a callback used to determine if an item is suitable for inclusion in the view.
            </summary>
            <value></value>
            <returns>
            A method used to determine if an item is suitable for inclusion in the view.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsGrouping">
            <summary>
            Gets a value indicating whether this instance is grouping.
            </summary>
            <value>
            	<c>true</c> if this instance is grouping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.GroupDescriptions">
            <summary>
            Gets a collection of <see cref="T:System.ComponentModel.GroupDescription"/> objects that describe how the items in the collection are grouped in the view.
            </summary>
            <value></value>
            <returns>
            A collection of <see cref="T:System.ComponentModel.GroupDescription"/> objects that describe how the items in the collection are grouped in the view.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.GroupList">
            <summary>
            Gets the TopLevelGroup as <see cref="T:Syncfusion.Windows.Data.IGroupList"/>.
            </summary>
            <value>The group list.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.TopLevelGroup">
            <summary>
            Gets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Groups">
            <summary>
            Gets the top-level groups.
            </summary>
            <value></value>
            <returns>
            A read-only collection of the top-level groups or null if there are no groups.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsCurrentAfterLast">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection.
            </summary>
            <value></value>
            <returns>
            Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the end of the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsCurrentBeforeFirst">
            <summary>
            Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the beginning of the collection.
            </summary>
            <value></value>
            <returns>
            Returns true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem"/> of the view is beyond the beginning of the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsCurrentInSync">
            <summary>
            Gets a value indicating whether this instance is current in sync.
            </summary>
            <value>
            	<c>true</c> if this instance is current in sync; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether this instance is refresh deferred.
            </summary>
            <value>
            	<c>true</c> if this instance is refresh deferred; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.SortDescriptions">
            <summary>
            Gets a collection of <see cref="T:System.ComponentModel.SortDescription"/> objects that describe how the items in the collection are sorted in the view.
            </summary>
            <value></value>
            <returns>
            A collection of <see cref="T:System.ComponentModel.SortDescription"/> objects that describe how the items in the collection are sorted in the view.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.SourceCollection">
            <summary>
            Returns the underlying collection.
            </summary>
            <value></value>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> object that is the underlying collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsLegacyDataTable">
            <summary>
            Gets a value indicating whether this instance is legacy data table.
            </summary>
            <value>
            	<c>true</c> if this instance is legacy data table; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsInSuspend">
            <summary>
            Gets the value if the editing mode is in suspend state. Use this variable for listening changes in other source list changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsInEndDefer">
            <summary>
            Gets a value indicating whether this instance is in end defer.
            </summary>
            <value>
            	<c>true</c> if this instance is in end defer; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.EnablePaging">
            <summary>
            This property used to find out the paging is enabled
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsViewLevelPaging">
            <summary>
            This property used to find out the Paging is ViewLevel or sourcelevel
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.PagedSource">
            <summary>
            This property hold the PagedCollectionView object
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanAddNew">
            <summary>
            Gets a value that indicates whether a new item can be added to the collection.
            </summary>
            <value></value>
            <returns>true if a new item can be added to the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanCancelEdit">
            <summary>
            Gets a value that indicates whether the editing of an item can be canceled.
            </summary>
            <value></value>
            <returns>true if editing an item can be canceled; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CanRemove">
            <summary>
            Gets a value that indicates whether an item can be removed from the collection.
            </summary>
            <value></value>
            <returns>true if an item can be removed from the collection; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CurrentAddItem">
            <summary>
            Gets the item that is being added during the current add transaction.
            </summary>
            <value></value>
            <returns>
            The item that is being added if <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew"/> is true; otherwise, null.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CurrentEditItem">
            <summary>
            Gets the item in the collection that is being edited.
            </summary>
            <value></value>
            <returns>
            The item in the collection that is being edited if <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem"/> is true; otherwise, null.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.EditItemState">
            <summary>
            Gets the state of the edit item.
            </summary>
            <value>The state of the edit item.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsAddingNew">
            <summary>
            Gets a value that indicates whether an add transaction is in progress.
            </summary>
            <value></value>
            <returns>true if an add transaction is in progress; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsInPropertyChange">
            <summary>
            Gets or Sets when Items property changed
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.SortingOptions">
            <summary>
            Gets or Sets when Sorting is Enabled or Disabled. 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsEditingItem">
            <summary>
            Gets a value that indicates whether an edit transaction is in progress.
            </summary>
            <value></value>
            <returns>true if an edit transaction is in progress; otherwise, false.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.NewItemPlaceholderPosition">
            <summary>
            Gets or sets the position of the new item placeholder in the collection.
            </summary>
            <value></value>
            <returns>
            One of the enumeration values that specifies the position of the new item placeholder in the collection.
            </returns>
        </member>
        <member name="E:Syncfusion.Windows.Data.CollectionViewAdv.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.UsesLocalArray">
            <summary>
            Gets a value indicating whether [uses local array].
            </summary>
            <value><c>true</c> if [uses local array]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.PersistGroupsExpandedState">
            <summary>
            Gets / sets
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsGroupsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is groups expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is groups expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.CaptionSummaryRow">
            <summary>
            Gets or sets the caption summary row.
            </summary>
            <value>The caption summary row.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.TableSummaryRows">
            <summary>
            Gets the table summary rows.
            </summary>
            <value>The table summary rows.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.SummaryRows">
            <summary>
            Gets the summary rows.
            </summary>
            <value>The summary rows.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.FilterPredicates">
            <summary>
            Gets or sets the filter predicates.
            </summary>
            <value>The filter predicates.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.Relations">
            <summary>
            Gets the relations.
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.IsDynamicBound">
            <summary>
            Gets a value indicating whether this instance is dynamic bound.
            </summary>
            <value>
            	<c>true</c> if this instance is dynamic bound; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.CollectionViewAdv.GroupComparer">
            <summary>
            Defines the custom group comparer. This will work only when the grouped column is also sorted.
            </summary>
            <value></value>
        </member>
        <member name="T:Syncfusion.Windows.Data.IEditItemState">
            <summary>
            Specifies a state while editing items
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SortingOptions.Default">
            <summary>
            Sorting Enabled always
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SortingOptions.DisableSortingOnEdit">
            <summary>
            Sorting Disabled when cell value is edited
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SortingOptions.DisableSortingOnPropertyChange">
            <summary>
            Sorting Disabled when cell property value changed
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IPropertyAccessProvider">
            <summary>
            Exposes method to Get/Set from the underlying object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPropertyAccessProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPropertyAccessProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.DataTableCollectionView">
            <summary>
            Extended CollectionViewAdv to handle DataTable / DataView sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.DataTableCollectionView"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.UpdateCollectionView(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Updates the collection view by handling the NotifyCollectionChangedEventArgs if there is no grouping.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SortDescriptionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.RefreshSort">
            <summary>
            Refreshes the sort.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.RefreshSortingOrderWithFiltersForBottomLevel(System.Collections.Generic.List{Syncfusion.Windows.Data.Group},System.String,System.Int32)">
            <summary>
            Refreshes the sorting order for bottom level.
            </summary>
            <param name="groups">The groups.</param>
            <param name="prevFilter"></param>
            <param name="level"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.CreateRecords">
            <summary>
            Creates the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.GetGroupResult(System.String[])">
            <summary>
            Gets the group result.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.DataTableCollectionView.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.DataTableCollectionView.ViewSource">
            <summary>
            Gets or sets the view source.
            </summary>
            <value>The view source.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.FilterPredicate">
            <summary>
            Holds values for Filtering.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.FilterPredicate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.FilterPredicate"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.FilterPredicate.FilterType">
            <summary>
            Gets or sets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.FilterPredicate.FilterValue">
            <summary>
            Gets or sets the filter value.
            </summary>
            <value>The filter value.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.FilterPredicate.PredicateType">
            <summary>
            Gets or sets the type of the predicate.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.FilterPredicate.FilterBehavior">
            <summary>
            Gets or sets the type of the filterbehavior.
            </summary>
            <value>The type of the predicate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.FilterPredicate.IsCaseSensitive">
            <summary>
            Gets or sets a value indicating whether this instance is case sensitive.
            </summary>
            <value>
            	<c>true</c> if this instance is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Syncfusion.Windows.Data.PredicateType">
            <summary>
            Predicate type defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PredicateType.And">
            <summary>
            Does an AND operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PredicateType.Or">
            <summary>
            Does an OR operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.FilterOperatorType">
            <summary>
            Default Filter Operator is defined for Filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.FilterOperatorType.Equals">
            <summary>
            Does an Equals operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.FilterOperatorType.StartsWith">
            <summary>
            Does an StartsWith operation on filters.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.FilterOperatorType.Contains">
            <summary>
            Does an Contains operation on filters.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IGroupList">
            <summary>
            Interface that exposes method to the TopLevelGroup for Add / Remove / Contains /
            IndexOf methods with the underlying bound object.
            </summary>
            <remarks>
            This interface will only interact with the underlying bound object that can be
            found in RecordEntry.Data.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupList.Add(System.Object,System.Boolean)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupList.Insert(System.Object,System.Int32,System.Boolean)">
            <summary>
            Insert the record in the specified position.
            </summary>
            <param name="record">The record.</param>
            <param name="index"></param>
            <param name="isInSourceCollectionChange"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupList.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange">if set to <c>true</c> [is in source collection change].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupList.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupList.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.#ctor(Syncfusion.Windows.Data.TopLevelGroup)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.GroupDisplayElements"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.IndexOf(Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Insert(System.Int32,Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Add(Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Add(Syncfusion.Windows.Data.NodeEntry,System.Boolean)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Contains(Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.CopyTo(Syncfusion.Windows.Data.NodeEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.Remove(Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupDisplayElements.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupDisplayElements.TopLevelGroup">
            <summary>
            Gets or sets the top level group.
            </summary>
            <value>The top level group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupDisplayElements.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Data.NodeEntry"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupDisplayElements.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupDisplayElements.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.GroupEntry">
            <summary>
            GroupEntry contains the list of groups for each sub-groups populated for the <see cref="T:Syncfusion.Windows.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.NodeEntry">
            <summary>
            NodeEntry is the base class for the Grouping data structure used by <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/> interface. It exposes some base level
            details for the derived constructs to use.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.NodeEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.NodeEntry"/> class.
            </summary>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.NodeEntry.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:Syncfusion.Windows.Data.NodeEntry"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.NodeEntry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.NodeEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Windows.Data.NodeEntry.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>The level.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.NodeEntry.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.NodeEntry.IsGroups">
            <summary>
            Gets or sets a value indicating whether this instance is groups.
            </summary>
            <value><c>true</c> if this instance is groups; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.NodeEntry.IsRecords">
            <summary>
            Gets or sets a value indicating whether this instance is records.
            </summary>
            <value>
            	<c>true</c> if this instance is records; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEntry.#ctor(Syncfusion.Windows.Data.GroupEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.GroupEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEntry.ToSummaryArray">
            <summary>
            returns an array of SummaryDetails for each group.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupEntry.Groups">
            <summary>
            Gets or sets the groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.#ctor(Syncfusion.Windows.Data.Group,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.Group"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.OnGroupExpanded">
            <summary>
            Called when group.IsExpanded = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.OnGroupCollapsed">
            <summary>
            Called when group.IsExpanded = false;.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult},System.Boolean)">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult},Syncfusion.Windows.Data.PagedCollectionView,System.Boolean)">
            <summary>
            Populates the specified groups to populate for the paging.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <param name="page"></param>
            <param name="IsViewLevelPaging"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult},System.Collections.Generic.List{Syncfusion.Windows.Data.Group},Syncfusion.Windows.Data.Group,System.Int32,System.Boolean)">
            <summary>
            Populates the specified groups to populate.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <param name="groups">The groups.</param>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.Populate(System.Collections.Generic.IEnumerable{Syncfusion.Linq.GroupResult},System.Collections.Generic.List{Syncfusion.Windows.Data.Group},Syncfusion.Windows.Data.Group,System.Int32,Syncfusion.Windows.Data.PagedCollectionView,System.Boolean)">
            <summary>
            Populates the specified groups to populate for paging.
            </summary>
            <param name="groupsToPopulate">The groups to populate.</param>
            <param name="groups">The groups.</param>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="_page">PagedSource</param>
            <param name="IsViewLevePaging">IsViewLevelPaging</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.CreateNewGroup(Syncfusion.Windows.Data.Group,Syncfusion.Linq.GroupResult,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="groupResult">The group result.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.CreateNewGroup(Syncfusion.Windows.Data.Group,System.Object,System.Int32)">
            <summary>
            Creates the new group.
            </summary>
            <param name="parent">The parent.</param>
            <param name="Key">The key.</param>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.CreateDetailsForRecords(Syncfusion.Windows.Data.Group,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.CreateDetailsForRecords(Syncfusion.Windows.Data.Group,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Creates the details for records.
            </summary>
            <param name="parent">The parent.</param>
            <param name="source">The source.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.CreateDetailsForGroups(System.Int32)">
            <summary>
            Creates the details for groups.
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.SetDirty">
            <summary>
            Sets the dirty. When this is set to true, the YAmountCache will be re-computed for the whole group structure.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetYAmountCache">
            <summary>
            Each group knows the exact height of its child nodes. The YAmountCache returns the y height of each group based on its inner node levels.and their expanded states
            </summary>
            <returns>Calculated YAmount</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetSourceYAmountCache">
            <summary>
            Gets the source Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetParentYAmountCache">
            <summary>
            Gets the parent Y amount cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetRecordCount">
            <summary>
            Gets the record count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetGroupsCount">
            <summary>
            Gets the groups count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetRelationsCount">
            <summary>
            Gets the relations count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.Group.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Key">
            <summary>
            Gets or sets the key for the Group.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.ItemsCount">
            <summary>
            Gets the items count.
            </summary>
            <value>The items count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.IsBottomLevel">
            <summary>
            Gets or sets a value indicating whether this instance is bottom level. Bottom-Level group will have the list of records for the Group.
            </summary>
            <value>
            	<c>true</c> if this instance is bottom level; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Details">
            <summary>
            Gets or sets the details for this group. This could be Groups / Records collection.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Records">
            <summary>
            Gets the records when Group.Details is list of records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Source">
            <summary>
            Gets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.Groups">
            <summary>
            Gets the groups when Group.Details is list of Groups.
            </summary>
            <value>The groups.</value>
        </member>
        <member name="E:Syncfusion.Windows.Data.Group.PropertyChanged">
            <summary>
            Occurs when [property changed].
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.Group.SummaryDetails">
            <summary>
            Contains summary record for this group
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.GroupComparer">
            <summary>
            IComparer implemented for <see cref="T:Syncfusion.Windows.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupComparer.Compare(Syncfusion.Windows.Data.Group,Syncfusion.Windows.Data.Group)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value
            Condition
            Less than zero
            <paramref name="x"/> is less than <paramref name="y"/>.
            Zero
            <paramref name="x"/> equals <paramref name="y"/>.
            Greater than zero
            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.DisplayElementEnumerator.#ctor(Syncfusion.Windows.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.DisplayElementEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.DisplayElementEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.DisplayElementEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.DisplayElementEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Windows.Data.DisplayElementEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.DisplayElementEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.DisplayElementEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.GroupEnumerator">
            <summary>
            Enumerates any <see cref="P:Syncfusion.Windows.Data.GroupEnumerator.Group"/> class and lists out all the elements in a one-dimensional array.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEnumerator.#ctor(Syncfusion.Windows.Data.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.GroupEnumerator"/> class.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupEnumerator.Group">
            <summary>
            Gets or sets the group.
            </summary>
            <value>The group.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <value></value>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.GroupingExtensions">
            <summary>
            Extensions for <see cref="T:Syncfusion.Windows.Data.Group"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupingExtensions.ExpandAllAtLevel(Syncfusion.Windows.Data.Group,System.Int32)">
            <summary>
            Expands all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupingExtensions.CollapseAllAtLevel(Syncfusion.Windows.Data.Group,System.Int32)">
            <summary>
            Collapses all groups at the specified level.
            </summary>
            <param name="group">The group.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupingExtensions.ExpandAll(Syncfusion.Windows.Data.Group)">
            <summary>
            Expands all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupingExtensions.CollapseAll(Syncfusion.Windows.Data.Group)">
            <summary>
            Collapses all groups.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupingExtensions.GetTopLevelGroup(Syncfusion.Windows.Data.NodeEntry)">
            <summary>
            Gets the top level group.
            </summary>
            <param name="entry">The entry.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.GroupRecordEntry">
            <summary>
            Contains a list of records with its related summaries and unfiltered records. The <see cref="T:Syncfusion.Windows.Data.Group"/> class uses
            GroupRecordEntry if the group.IsBottomLevel = true;.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32,System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.GroupRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="source">The source.</param>
            <param name="filterPredicate"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object})">
            <summary>
            Populates the records.
            </summary>
            <param name="source">The source.</param>
            <param name="filterPredicate">The filter predicate.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.PopulateRecords(System.Collections.IEnumerable,System.Predicate{System.Object},System.Boolean)">
            <summary>
            This overload Method used to find the GroupRecords for paging Support
            </summary>
            <param name="source"></param>
            <param name="filterPredicate"></param>
            <param name="isViewLevelPaging"></param>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.CreateRecord(System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.GetRecordsCount">
            <summary>
            Gets the records count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.GetRelationsCount">
            <summary>
            Gets the relations count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.GroupRecordEntry.ToArray">
            <summary>
            returns the underlying objects array from the record entries.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupRecordEntry.UnfilteredRecords">
            <summary>
            Gets the unfiltered records.
            </summary>
            <value>The unfiltered records.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupRecordEntry.Records">
            <summary>
            Gets or sets the records.
            </summary>
            <value>The records.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.GroupRecordEntry.Summaries">
            <summary>
            Gets the summaries for the bottom level records.
            </summary>
            <value>The summaries.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.NestedRecordEntry">
            <summary>
            Contains a list of nested records for each <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> and nested <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.NestedRecordEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.NestedRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="P:Syncfusion.Windows.Data.NestedRecordEntry.NestedLevel">
            <summary>
            Gets or sets the nested level.
            </summary>
            <value>The nested level.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.NestedRecordEntry.View">
            <summary>
            Gets or sets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.NestedRecordEntry.NestedRecords">
            <summary>
            Gets the nested records.
            </summary>
            <value>The nested records.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.RecordEntry">
            <summary>
            Contains the underlying business object bound to <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/> instance. 
            Nested records can be specified / controlled using the PopulateChildView method.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.OnExpanded">
            <summary>
            Called when RecordEntry.IsExpanded = true;
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.SetExpanded">
            <summary>
            Called when RecordEntry.IsExpanded = false;
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.SetCollapsed">
            <summary>
            Sets IsExpanded = false without any calls to the events or overrides.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.PopulateChildView(Syncfusion.Windows.Data.ICollectionViewAdv,System.Int32,System.String)">
            <summary>
            Populates the child view.
            </summary>
            <param name="collectionView">The collection view.</param>
            <param name="level">The level.</param>
            <param name="relationName">Name of the relation.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.RecordEntry.OnCollapsed">
            <summary>
            Called when [collapsed].
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.RecordEntry.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.RecordEntry.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value>
            	<c>true</c> if this instance is expanded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.RecordEntry.ChildViews">
            <summary>
            Gets or sets the child views.
            </summary>
            <value>The child views.</value>
        </member>
        <member name="M:Syncfusion.Windows.Data.ListIndexer`1.Find(System.Object)">
            <summary>
            Finds the location of item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.SummaryRecordEntry">
            <summary>
            Contains the list of Summary aggregates computed using <see cref="T:Syncfusion.Windows.Data.ISummaryRow"/> instance in this class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.SummaryRecordEntry.#ctor(Syncfusion.Windows.Data.NodeEntry,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.SummaryRecordEntry"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.SummaryRecordEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Syncfusion.Windows.Data.SummaryRecordEntry.SummaryValues">
            <summary>
            Gets the summary values.
            </summary>
            <value>The summary values.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.SummaryRecordEntry.SummaryRow">
            <summary>
            Gets or sets the summary row.
            </summary>
            <value>The summary row.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.SummaryValue">
            <summary>
            Instance to cache the summary aggregate values into the <see cref="T:Syncfusion.Windows.Data.SummaryRecordEntry"/> instance.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.SummaryValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.SummaryValue"/> class.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.SummaryValue.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.SummaryValue.AggregateValues">
            <summary>
            Gets or sets the aggregate values.
            </summary>
            <value>The aggregate values.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.ISummaryRow">
            <summary>
            Common properties exposed through ISummaryRow for getting information on the
            summary values to be computed for the Groups in <see cref="T:Syncfusion.Windows.Data.TopLevelGroup"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.IsVisible">
            <summary>
            Gets or sets a value indicating whether this instance is visible.
            </summary>
            <value>
            	<c>true</c> if this instance is visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.ShowSummaryInRow">
            <summary>
            Gets or sets a value indicating whether [show summary in row].
            </summary>
            <value><c>true</c> if [show summary in row]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.SummaryColumns">
            <summary>
            Gets the summary columns.
            </summary>
            <value>The summary columns.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryRow.TitleColumnCount">
            <summary>
            Gets or sets the title column count.
            </summary>
            <value>The title column count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryColumn.CustomAggregate">
            <summary>
            Gets or sets the custom aggregate. Should implement <see cref="T:Syncfusion.Windows.Data.ISummaryAggregate"/> interface to delegate the custom summaries.
            </summary>
            <value>The custom aggregate.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryColumn.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryColumn.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryColumn.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.ISummaryColumn.SummaryType">
            <summary>
            Gets or sets the type of the summary.
            </summary>
            <value>The type of the summary.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.SummaryType">
            <summary>
            Different Enum types of SummaryType.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SummaryType.CountAggregate">
            <summary>
            Specify the count aggregate for the <see cref="T:Syncfusion.Windows.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SummaryType.DoubleAggregate">
            <summary>
            Specify Double value aggregate for the <see cref="T:Syncfusion.Windows.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SummaryType.Int32Aggregate">
            <summary>
            Specify Int32 value aggregate for the <see cref="T:Syncfusion.Windows.Data.ISummaryColumn"/>.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.SummaryType.Custom">
            <summary>
            Specify custom aggregate for the <see cref="T:Syncfusion.Windows.Data.ISummaryColumn"/>. Implement <see cref="T:Syncfusion.Windows.Data.ISummaryAggregate"/> or <see cref="T:Syncfusion.Windows.Data.ISummaryExpressionAggregate"/> interface to delegate the summary computation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.ISummaryAggregate">
            <summary>
            Implement this interface to delegate the summary computation.
            <code lang="C#">    
                class GridDataInt32Aggregate : ISummaryAggregate
                {
                    public GridDataInt32Aggregate()
                    {
                    }
            
                    public int Sum
                    {
                        get;
                        set;
                    }
            
                    public Action&lt;IEnumerable, string,
            PropertyDescriptor&gt; CalculateAggregateFunc()
                    {
                        return (items, property, pd) =&gt;
                        {
                            if (pd.Name == &quot;Sum&quot;)
                                this.Sum =
            Convert.ToInt32(items.AsQueryable().Sum(property));
                        };
                    }
                }
            </code>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ISummaryAggregate.CalculateAggregateFunc">
            <summary>
            Calculates the aggregate func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.ISummaryExpressionAggregate">
            <summary>
            Implement this interface to delegate custom summary computation. This interface
            also extends summary computation for unbound values.
            <code lang="C#">    
                internal class CountAggregate : ISummaryExpressionAggregate
                {
                    public CountAggregate()
                    {
                    }
            
                    public int Count
                    {
                        get;
                        set;
                    }
                    #region ISummaryExpressionAggregate Members
                    public Action&lt;IEnumerable, string,
            Expression&lt;Func&lt;string, object, object&gt;&gt;, PropertyDescriptor&gt;
            CalculateAggregateExpressionFunc()
                    {
                        return (items, property, expressionFunc, pd) =&gt;
                        {
                            if (pd.Name == &quot;Count&quot;)
                            {
                                this.Count = items.AsQueryable().Count();
                            }
                        };
                    }
            
                    #endregion
                }
            </code>
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ISummaryExpressionAggregate.CalculateAggregateExpressionFunc">
            <summary>
            Calculates the aggregate expression func.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.ISummaryParallelizable">
            <summary>
            Implement this interface to know if the Summary expressions can use PLINQ
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.DoubleAggregate">
            Count, Minimum, Maximum, Sum, and Average for double fields.
        </member>
        <member name="T:Syncfusion.Windows.Data.DataTableAggregator">
            <summary>
            <code lang="C#">internal class GridDataTableCountAggregate :
            GridDataTableAggregator, ISummaryAggregate
                {
                    public GridDataTableCountAggregate(DataTable table)
                        : base(table)
                    {
                    }</code>
            <para></para>
            <para></para>
            <para></para>        public int Count 
            <para></para>
            <para></para>        { 
            <para></para>
            <para></para>            get; 
            <para></para>
            <para></para>            set; 
            <para></para>
            <para></para>        } 
            <para></para>
            <para></para>
            <para>      <code lang="C#">  #region IGridDataSummaryAggregate Members
            </code></para>
            <para></para>
            <para></para>
            <para></para>        public Action&lt;IEnumerable, string,
            PropertyDescriptor&gt; CalculateAggregateFunc() 
            <para></para>
            <para></para>        { 
            <para></para>
            <para></para>            return (items, property, pd) =&gt; 
            <para></para>
            <para></para>            { 
            <para></para>
            <para></para>                var table = this.GetClonedTable(items); 
            <para></para>
            <para></para>                if (pd.Name == &quot;Count&quot;) 
            <para></para>
            <para></para>               <code lang="C#"> { </code>
            <para></para>
            <para></para>                    this.Count =
            (int)table.Compute(string.Format(&quot;Count({0})&quot;, property),
            string.Empty); 
            <para></para>
            <para></para>                } 
            <para></para>
            <para></para>            }; 
            <para></para>
            <para></para>        } 
            <para></para>
            <para></para>
            <para></para>        #endregion 
            <para></para>
            <para></para>    }
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Data.TopLevelGroup">
            <summary>
            TopLevelGroup is the first-level of the Groups present in <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/>. It maintains the data structure for Grouping with <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/>. Iterate the DisplayElements property to get one-to-one mapping of the index with the TopLevelGroup items. Access all the Bottom-level and other nested level groups with the Groups property.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IGroupRefresh">
            <summary>
            Implement this interface to control refresh done with the <see cref="T:Syncfusion.Windows.Data.TopLevelGroup"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupRefresh.RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupRefresh.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IGroupRefresh.DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.#ctor(Syncfusion.Windows.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.TopLevelGroup"/> class.
            </summary>
            <param name="collectionView">The collection view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Invalidate(System.Int32,System.Int32)">
            <summary>
            Invalidates the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Syncfusion#Windows#Data#IGroupRefresh#RefreshSortingOrder">
            <summary>
            Refreshes the sorting order.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Syncfusion#Windows#Data#IGroupRefresh#RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.SuspendEvents">
            <summary>
            Suspends the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.ResumeEvents">
            <summary>
            Resumes the events.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Syncfusion#Windows#Data#IGroupRefresh#DeferRefresh">
            <summary>
            returns an IDisposable object to specify controlled updates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Add(System.Object,System.Boolean)">
            <summary>
            Adds the specified record.
            </summary>
            <param name="record">The record.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Remove(System.Object,System.Boolean)">
            <summary>
            Removes the specified record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange">if set to <c>true</c> [is in source collection change].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.ResetGroup(System.Object,System.String)">
            <summary>
            Resets the group.
            </summary>
            <param name="record">The record.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.RemoveRecord(System.Object,System.Boolean)">
            <summary>
            Removes the record.
            </summary>
            <param name="record">The record.</param>
            <param name="isInSourceCollectionChange">if set to <c>true</c> [is in source collection change].</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.Contains(System.Object)">
            <summary>
            Determines whether the record is found in the DisplayElements of the TopLevelGroup.
            </summary>
            <param name="record">The record.</param>
            <returns>
            	<c>true</c> if [contains] [the specified record]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.IndexOf(System.Object)">
            <summary>
            Finds the index of the record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.ResetDisplayElements">
            <summary>
            Resets the display elements.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.GetMaxLevel">
            <summary>
            Gets the max level.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.GetGroupCaptionText(Syncfusion.Windows.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.Windows.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <param name="columnHeaderName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.GetGroupCaptionTextList(Syncfusion.Windows.Data.Group,System.String,System.String)">
            <summary>
            Gets the group caption text for the specified <see cref="T:Syncfusion.Windows.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
            <param name="groupSpecifierText">The group specifier text.</param>
            <param name="columnHeaderName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.UpdateCaptionSummaries">
            <summary>
            Updates the caption summaries.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.UpdateSummaries(Syncfusion.Windows.Data.Group)">
            <summary>
            Updates the summaries for the specified <see cref="T:Syncfusion.Windows.Data.Group"/>.
            </summary>
            <param name="group">The group.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.TopLevelGroup.HasDetailsView">
            <summary>
            Determines whether [has details view].
            </summary>
            <returns>
            	<c>true</c> if [has details view]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.IsTopLevelGroup">
            <summary>
            Gets a value indicating whether this instance is top level group. Top-Level Group will be the first-level group.
            </summary>
            <value>
            	<c>true</c> if this instance is top level group; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.RelationsCount">
            <summary>
            Gets or sets the relations count.
            </summary>
            <value>The relations count.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.CollectionView">
            <summary>
            Gets the collection view.
            </summary>
            <value>The collection view.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.GroupDescriptions">
            <summary>
            Gets the group descriptions.
            </summary>
            <value>The group descriptions.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.DisplayElements">
            <summary>
            Gets the display elements.
            </summary>
            <value>The display elements.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.TopLevelGroup.IsLegacyDataTable">
            <summary>
            Gets a value indicating whether this instance is legacy data table.
            </summary>
            <value>
            	<c>true</c> if this instance is legacy data table; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Syncfusion.Windows.Data.TopLevelGroup.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.CollectionViewHelper">
            <summary>
            ICollectionViewAdv helper extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewHelper.ToTypedSource(System.Collections.IEnumerable,System.Type)">
            <summary>
            Converts the IEnumerable data source as a strongly typed generic source.
            </summary>
            <param name="itemsSource">The items source.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.CollectionViewHelper.IsGenericType(System.Collections.IEnumerable)">
            <summary>
            Determines whether [is generic type] [the specified items source].
            </summary>
            <param name="itemsSource">The items source.</param>
            <returns>
            	<c>true</c> if [is generic type] [the specified items source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.IListEvents">
            <summary>
            Exposes events for flat IBindingList or INotifyCollectionChanged implemented data sources. Used by SourceListWrapper 
            for wrapping up in a generic collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IListEvents.WireCollectionChangedHandler(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Wires the collection changed handler.
            </summary>
            <param name="notifyCollectionChangedSource">The notify collection changed source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.IListEvents.WireListChangedHandler(System.ComponentModel.IBindingList)">
            <summary>
            Wires the list changed handler.
            </summary>
            <param name="listSource">The list source.</param>
        </member>
        <member name="E:Syncfusion.Windows.Data.IListEvents.CollectionChanged">
            <summary>
            Occurs when collection is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.SourceListWrapper`1">
            <summary>
            A generic wrapper for normal IBindingList / INotifyCollectionChanged interface.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Syncfusion.Windows.Data.SourceListWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.SourceListWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.SourceListWrapper`1.WireCollectionChangedHandler(System.Collections.Specialized.INotifyCollectionChanged)">
            <summary>
            Wires the collection changed handler.
            </summary>
            <param name="notifyCollectionChangedSource">The notify collection changed source.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.SourceListWrapper`1.WireListChangedHandler(System.ComponentModel.IBindingList)">
            <summary>
            Wires the list changed handler.
            </summary>
            <param name="listSource">The list source.</param>
        </member>
        <member name="E:Syncfusion.Windows.Data.SourceListWrapper`1.CollectionChanged">
            <summary>
            Occurs when collection is changed.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IRecordsList">
            <summary>
            Implements an IList structure to contain the list of RecordEntry.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IRecordsList.IndexOfRecord(System.Object)">
            <summary>
            Returns the index for the underlying record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IRecordsList.GetItemAt(System.Int32)">
            <summary>
            Gets the item at index specified.
            </summary>
            <param name="recordIndex">Index of the record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IRecordsList.GetRecord(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> for the underlying business object.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IRecordsList.CreateRecordEntry(System.Object)">
            <summary>
            Creates the <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> for the business object.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IRecordsList.ReomveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IRecordsList.TableSummaries">
            <summary>
            Gets the table summaries.
            </summary>
            <value>The table summaries.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.IParallelizableView">
            <summary>
            Implement this interface to instruct the QueryableCollectionView derived view for generating PLINQ query expression trees.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PageChangingEventArgs.#ctor(System.Int32)">
            <summary>
            Constructor that takes the target page index
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
        </member>
        <member name="P:Syncfusion.Windows.Data.PageChangingEventArgs.NewPageIndex">
            <summary>
            Gets the index of the requested page
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.IPagedCollectionView.MoveToPage(System.Int32)">
            <summary>
            Moves to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">The index of the page to which to move.</param>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="E:Syncfusion.Windows.Data.IPagedCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.IPagedCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.ItemCount">
            <summary>
            Gets the number of known items in the view before paging is applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IPagedCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied,
            or -1 if that total number is unknown.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IFilterDefinition">
            <summary>
            Specifies properties for filtering with <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IFilterDefinition.MappingName">
            <summary>
            Gets or sets the name of the mapping.
            </summary>
            <value>The name of the mapping.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.IFilterDefinition.Filters">
            <summary>
            Gets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.RelationType">
            <summary>
            Specifies the relation type.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.RelationType.MasterDetails">
            <summary>
            Specifies Mater-Detail kind of relation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.RelationType.ForeignKeyReference">
            <summary>
            Specifies Foreign Key reference relation.
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.IRelationDefinition">
            <summary>
            Specifies the relation definition for the <see cref="T:Syncfusion.Windows.Data.ICollectionViewAdv"/>.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.IRelationDefinition.RelationalColumn">
            <summary>
            Gets or sets the relational column.
            </summary>
            <value>The relational column.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.IRelationDefinition.RelationType">
            <summary>
            Gets or sets the type of the relation.
            </summary>
            <value>The type of the relation.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.ItemPropertiesProvider">
            <summary>
            Implements <see cref="T:Syncfusion.Windows.Data.IPropertyAccessProvider"/> to Get / Set value on the underlying object.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.ItemPropertiesProvider.GetValue(System.Object,System.String)">
            <summary>
            Gets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.ItemPropertiesProvider.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="record">The record.</param>
            <param name="propName">Name of the prop.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView">
            <summary>
            PagedCollectionView view over an IEnumerable.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.uncancelableCurrentChangingEventArgs">
            <summary>
            Since there's nothing in the un-cancelable event args that is mutable,
            just create one instance to be used universally.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._cachedPageIndex">
            <summary>
            Value that we cache for the PageIndex if we are in a DeferRefresh,
            and the user has attempted to move to a different page.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._cachedPageSize">
            <summary>
            Value that we cache for the PageSize if we are in a DeferRefresh,
            and the user has attempted to change the PageSize.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._culture">
            <summary>
            CultureInfo used in this PagedCollectionView
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._currentChangedMonitor">
            <summary>
            Private accessor for the Monitor we use to prevent recursion
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._currentItem">
            <summary>
            Private accessor for the CurrentItem
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._currentPosition">
            <summary>
            Private accessor for the CurrentPosition
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._deferLevel">
            <summary>
            The number of requests to defer Refresh()
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._editItem">
            <summary>
            The item we are currently editing
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._filter">
            <summary>
            Private accessor for the Filter
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._flags">
            <summary>
            Private accessor for the CollectionViewFlags
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._internalList">
            <summary>
            Private accessor for the InternalList
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._isGrouping">
            <summary>
            Keeps track of whether groups have been applied to the
            collection already or not. Note that this can still be set
            to false even though we specify a GroupDescription, as the 
            collection may not have gone through the PrepareGroups function.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._itemConstructor">
            <summary>
            ConstructorInfo obtained from reflection for generating new items
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._itemConstructorIsValid">
            <summary>
            Whether we have the correct ConstructorInfo information for the ItemConstructor
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._newItem">
            <summary>
            The new item we are getting ready to add to the collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._pageIndex">
            <summary>
            Private accessor for the PageIndex
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._pageSize">
            <summary>
            Private accessor for the PageSize
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._pollForChanges">
            <summary>
            Whether the source needs to poll for changes
            (if it did not implement INotifyCollectionChanged)
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._sortDescriptions">
            <summary>
            Private accessor for the SortDescriptions
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._sourceCollection">
            <summary>
            Private accessor for the SourceCollection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._timestamp">
            <summary>
            Timestamp used to see if there was a collection change while 
            processing enumerator changes
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView._trackingEnumerator">
            <summary>
            Private accessor for the TrackingEnumerator
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>
            Helper constructor that sets default values for isDataSorted and isDataInGroupOrder.
            </summary>
            <param name="source">The source for the collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.#ctor(System.Collections.IEnumerable,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PagedCollectionView class.
            </summary>
            <param name="source">The source for the collection</param>
            <param name="isDataSorted">Determines whether the source is already sorted</param>
            <param name="isDataInGroupOrder">Whether the source is already in the correct order for grouping</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.AddNew">
            <summary>
            Add a new item to the underlying collection.  Returns the new item.
            After calling AddNew and changing the new item as desired, either
            CommitNew or CancelNew" should be called to complete the transaction.
            </summary>
            <returns>The new item we are adding</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CancelEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:Syncfusion.Windows.Data.PagedCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are discarded.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CancelNew">
            <summary>
            Complete the transaction started by AddNew. The new
            item is removed from the collection.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CommitEdit">
            <summary>
            Complete the transaction started by <seealso cref="M:Syncfusion.Windows.Data.PagedCollectionView.EditItem(System.Object)"/>.
            The pending changes (if any) to the item are committed.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CommitNew">
            <summary>
            Complete the transaction started by AddNew. We follow the WPF
            convention in that the view's sort, filter, and paging
            specifications (if any) are applied to the new item.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.Contains(System.Object)">
            <summary>
            Return true if the item belongs to this view.  No assumptions are
            made about the item. This method will behave similarly to IList.Contains().
            If the caller knows that the item belongs to the
            underlying collection, it is more efficient to call PassesFilter.
            </summary>
            <param name="item">The item we are checking to see whether it is within the collection</param>
            <returns>Boolean value of whether or not the collection contains the item</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.DeferRefresh">
            <summary>
            Enter a Defer Cycle.
            Defer cycles are used to coalesce changes to the ICollectionView.
            </summary>
            <returns>IDisposable used to notify that we no longer need to defer, when we dispose</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.EditItem(System.Object)">
            <summary>
            Begins an editing transaction on the given item.  The transaction is
            completed by calling either CommitEdit or CancelEdit.  Any changes made 
            to the item during the transaction are considered "pending", provided 
            that the view supports the notion of "pending changes" for the given item.
            </summary>
            <param name="item">Item we want to edit</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.GetEnumerator">
            <summary> 
            Implementation of IEnumerable.GetEnumerator().
            This provides a way to enumerate the members of the collection
            without changing the currency.
            </summary>
            <returns>IEnumerator for the collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Interface Implementation for GetEnumerator()
            </summary>
            <returns>IEnumerator that we get from our internal collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.GetItemAt(System.Int32)">
            <summary>
            Retrieve item at the given zero-based index in this PagedCollectionView, after the source collection
            is filtered, sorted, and paged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if index is out of range
            </exception>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>Item at specified index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.IndexOf(System.Object)">
            <summary> 
            Return the index where the given item appears, or -1 if doesn't appear.
            </summary>
            <param name="item">Item we are searching for</param>
            <returns>Index of specified item</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentTo(System.Object)">
            <summary> 
            Move to the given item. 
            </summary>
            <param name="item">Item we want to move the currency to</param>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentToFirst">
            <summary> 
            Move to the first item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentToLast">
            <summary> 
            Move to the last item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentToNext">
            <summary> 
            Move to the next item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentToPosition(System.Int32)">
            <summary>
            Move CurrentItem to this index
            </summary>
            <param name="position">Position we want to move the currency to</param>
            <returns>True if the resulting CurrentItem is an item within the view; otherwise False</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveCurrentToPrevious">
            <summary> 
            Move to the previous item. 
            </summary>
            <returns>Whether the operation was successful</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveToFirstPage">
            <summary>
            Moves to the first page.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveToLastPage">
            <summary>
            Moves to the last page.
            The move is only attempted when TotalItemCount is known.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveToNextPage">
            <summary>
            Moves to the page after the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveToPage(System.Int32)">
            <summary>
            Requests a page move to page <paramref name="pageIndex"/>.
            </summary>
            <param name="pageIndex">Index of the target page</param>
            <returns>Whether or not the move was successfully initiated.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.MoveToPreviousPage">
            <summary>
            Moves to the page before the current page we are on.
            </summary>
            <returns>Whether or not the move was successful.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.PassesFilter(System.Object)">
            <summary>
            Return true if the item belongs to this view.  The item is assumed to belong to the
            underlying DataCollection;  this method merely takes filters into account.
            It is commonly used during collection-changed notifications to determine if the added/removed
            item requires processing.
            Returns true if no filter is set on collection view.
            </summary>
            <param name="item">The item to compare against the Filter</param>
            <returns>Whether the item passes the filter</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.Refresh">
            <summary>
            Re-create the view, using any SortDescriptions and/or Filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.Remove(System.Object)">
            <summary>
            Remove the given item from the underlying collection. It
            needs to be in the current filtered, sorted, and paged view
            to call this.
            </summary>
            <param name="item">Item we want to remove</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RemoveAt(System.Int32)">
            <summary>
            Remove the item at the given index from the underlying collection.
            The index is interpreted with respect to the view (filtered, sorted,
            and paged list).
            </summary>
            <param name="index">Index of the item we want to remove</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.InvokePath(System.Object,System.String,System.Type)">
            <summary>
            Helper for SortList to handle nested properties (e.g. Address.Street)
            </summary>
            <param name="item">parent object</param>
            <param name="propertyPath">property names path</param>
            <param name="propertyType">property type that we want to check for</param>
            <returns>child object</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.AdjustCurrencyForAdd(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.AdjustCurrencyForEdit(System.Object,System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            </summary>
            <param name="newCurrentItem">Item that we want to set currency to</param>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.AdjustCurrencyForRemove(System.Int32)">
            <summary>
            Fix up CurrentPosition and CurrentItem after a collection change
            The index can be -1 if the item was removed from a previous page
            </summary>
            <param name="index">Index of item involved in the collection change</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CheckFlag(Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags)">
            <summary>
            Returns true if specified flag in flags is set.
            </summary>
            <param name="flags">Flag we are checking for</param>
            <returns>Whether the specified flag is set</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CompletePageMove(System.Int32)">
            <summary>
            Called to complete the page move operation to set the
            current page index.
            </summary>
            <param name="pageIndex">Final page index</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ConvertToInternalIndex(System.Int32)">
            <summary>
            Convert a value for the index passed in to the index it would be
            relative to the InternalIndex property.
            </summary>
            <param name="index">Index to convert</param>
            <returns>Value for the InternalIndex</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CopySourceToInternalList">
            <summary>
            Copy all items from the source collection to the internal list for processing.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.EndAddNew(System.Boolean)">
            <summary>
            Common functionality used by CommitNew, CancelNew, and when the
            new item is removed by Remove or Refresh.
            </summary>
            <param name="cancel">Whether we canceled the add</param>
            <returns>The new item we ended adding</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.EndDefer">
            <summary>
            Subtracts from the deferLevel counter and calls Refresh() if there are no other defers
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.EnsureItemConstructor">
            <summary>
            Makes sure that the ItemConstructor is set for the correct type
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.EnsureCollectionInSync">
            <summary>
             If the IEnumerable has changed, bring the collection up to date.
             (This isn't necessary if the IEnumerable is also INotifyCollectionChanged
             because we keep the collection in sync incrementally.)
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.GetItemType(System.Boolean)">
            <summary>
            Helper function used to determine the type of an item
            </summary>
            <param name="useRepresentativeItem">Whether we should use a representative item</param>
            <returns>The type of the items in the collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.GetRepresentativeItem">
            <summary>
            Gets a representative item from the collection
            </summary>
            <returns>An item that can represent the collection</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.InternalIndexOf(System.Object)">
            <summary>
            Return index of item in the internal list.
            </summary>
            <param name="item">The item we are checking</param>
            <returns>Integer value on where in the InternalList the object is located</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.InternalItemAt(System.Int32)">
            <summary>
            Return item at the given index in the internal list.
            </summary>
            <param name="index">The index we are checking</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OkToChangeCurrent">
            <summary>
            Ask listeners (via ICollectionView.CurrentChanging event) if it's OK to change currency
            </summary>
            <returns>False if a listener cancels the change, True otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
                Notify listeners that this View has changed
            </summary>
            <remarks>
                CollectionViews (and sub-classes) should take their filter/sort/grouping/paging
                into account before calling this method to forward CollectionChanged events.
            </remarks>
            <param name="args">
                The NotifyCollectionChangedEventArgs to be passed to the EventHandler
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnCurrentChanged">
            <summary>
            Raises the CurrentChanged event
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnCurrentChanging">
            <summary>
            Raise a CurrentChanging event that is not cancelable.
            This is called by CollectionChanges (Add, Remove, and Refresh) that 
            affect the CurrentItem.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnCurrentChanging(System.ComponentModel.CurrentChangingEventArgs)">
            <summary>
            Raises the CurrentChanging event
            </summary>
            <param name="args">
                CancelEventArgs used by the consumer of the event.  args.Cancel will
                be true after this call if the CurrentItem should not be changed for
                any reason.
            </param>
            <exception cref="T:System.InvalidOperationException">
                This CurrentChanging event cannot be canceled.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnGroupByChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            GroupBy changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupBy has changed</param>
            <param name="e">Arguments for the NotifyCollectionChanged event</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnGroupDescriptionChanged(System.Object,System.EventArgs)">
            <summary>
            GroupDescription changed handler
            </summary>
            <param name="sender">CollectionViewGroup whose GroupDescription has changed</param>
            <param name="e">Arguments for the GroupDescriptionChanged event</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event.
            </summary>
            <param name="e">PropertyChangedEventArgs for this change</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.OnPropertyChanged(System.String)">
            <summary>
            Helper to raise a PropertyChanged event.
            </summary>
            <param name="propertyName">Property name for the property that changed</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.PrepareLocalArray(System.Collections.IEnumerable)">
            <summary>
            Create, filter and sort the local index array.
            called from Refresh(), override in derived classes as needed.
            </summary>
            <param name="enumerable">new IEnumerable to associate this view with</param>
            <returns>new local array to use for this view</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ProcessAddEvent(System.Object,System.Int32)">
            <summary>
            Process an Add operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="addedItem">Item added to the source collection</param>
            <param name="addIndex">Index item was added into</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ProcessCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Process CollectionChanged event on source collection 
            that implements INotifyCollectionChanged.
            </summary>
            <param name="args">
            The NotifyCollectionChangedEventArgs to be processed.
            </param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ProcessRemoveEvent(System.Object,System.Boolean)">
            <summary>
            Process a Remove operation from an INotifyCollectionChanged event handler.
            </summary>
            <param name="removedItem">Item removed from the source collection</param>
            <param name="isReplace">Whether this was part of a Replace operation</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ProcessInsertToCollection(System.Object,System.Int32)">
            <summary>
            Handles adding an item into the collection, and applying sorting, filtering, grouping, paging.
            </summary>
            <param name="item">Item to insert in the collection</param>
            <param name="index">Index to insert item into</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RaiseCurrencyChanges(System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Raises Currency Change events
            </summary>
            <param name="fireChangedEvent">Whether to fire the CurrentChanged event even if the parameters have not changed</param>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldCurrentPosition">CurrentPosition before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RaisePageChanged">
            <summary>
            Raises the PageChanged event
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RaisePageChanging(System.Int32)">
            <summary>
            Raises the PageChanging event
            </summary>
            <param name="newPageIndex">Index of the requested page</param>
            <returns>True if the event is cancelled (e.Cancel was set to True), False otherwise</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RefreshInternal">
            <summary>
            Will call RefreshOverride and clear the NeedsRefresh flag
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RefreshOrDefer">
            <summary>
            Refresh, or mark that refresh is needed when defer cycle completes.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.RefreshOverride">
            <summary>
            Re-create the view, using any SortDescriptions. 
            Also updates currency information.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.ResetCurrencyValues(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Set currency back to the previous value it had if possible. If the item is no longer in view
            then either use the first item in the view, or if the list is empty, use null.
            </summary>
            <param name="oldCurrentItem">CurrentItem before processing changes</param>
            <param name="oldIsCurrentBeforeFirst">IsCurrentBeforeFirst before processing changes</param>
            <param name="oldIsCurrentAfterLast">IsCurrentAfterLast before processing changes</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SetCurrent(System.Object,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            CollectionViews (and sub-classes) should use this method to update
            the Current values.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SetCurrent(System.Object,System.Int32,System.Int32)">
            <summary>
            Set CurrentItem and CurrentPosition, no questions asked!
            </summary>
            <remarks>
            This method can be called from a constructor - it does not call
            any virtuals.  The 'count' parameter is substitute for the real Count,
            used only when newItem is null.
            In that case, this method sets IsCurrentAfterLast to true if and only
            if newPosition >= count.  This distinguishes between a null belonging
            to the view and the dummy null when CurrentPosition is past the end.
            </remarks>
            <param name="newItem">New CurrentItem</param>
            <param name="newPosition">New CurrentPosition</param>
            <param name="count">Numbers of items in the collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SetCurrentToPosition(System.Int32)">
            <summary>
            Just move it. No argument check, no events, just move current to position.
            </summary>
            <param name="position">Position to move the current item to</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SetFlag(Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags,System.Boolean)">
            <summary>
            Sets the specified Flag(s)
            </summary>
            <param name="flags">Flags we want to set</param>
            <param name="value">Value we want to set these flags to</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SetSortDescriptions(System.ComponentModel.SortDescriptionCollection)">
            <summary>
            Set new SortDescription collection; re-hook collection change notification handler
            </summary>
            <param name="descriptions">SortDescriptionCollection to set the property value to</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SortDescriptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            SortDescription was added/removed, refresh PagedCollectionView
            </summary>
            <param name="sender">Sender that triggered this handler</param>
            <param name="e">NotifyCollectionChangedEventArgs for this change</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SortList(System.Collections.Generic.List{System.Object})">
            <summary>
            Sort the List based on the SortDescriptions property.
            </summary>
            <param name="list">List of objects to sort</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.VerifyRefreshNotDeferred">
            <summary>
            Helper to validate that we are not in the middle of a DeferRefresh
            and throw if that is the case.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.CollectionChanged">
            <summary>
            Raise this event when the (filtered) view changes
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
            <summary>
            CollectionChanged event (per INotifyCollectionChanged).
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.CurrentChanged">
            <summary>
            Raised when the CurrentItem property changed
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.CurrentChanging">
            <summary>
            Raised when the CurrentItem property is changing
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.PageChanged">
            <summary>
            Raised when a page index change completed
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.PageChanging">
            <summary>
            Raised when a page index change is requested
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.PropertyChanged">
            <summary>
            PropertyChanged event.
            </summary>
        </member>
        <member name="E:Syncfusion.Windows.Data.PagedCollectionView.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
            <summary>
            PropertyChanged event (per INotifyPropertyChanged)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanAddNew">
            <summary>
            Gets a value indicating whether the view supports AddNew.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanCancelEdit">
            <summary>
            Gets a value indicating whether the view supports the notion of "pending changes" 
            on the current edit item.  This may vary, depending on the view and the particular
            item.  For example, a view might return true if the current edit item
            implements IEditableObject, or if the view has special knowledge about 
            the item that it can use to support rollback of pending changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanChangePage">
            <summary>
            Gets a value indicating whether the PageIndex value is allowed to change or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanFilter">
            <summary>
            Gets a value indicating whether we support filtering with this ICollectionView.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanGroup">
            <summary>
            Gets a value indicating whether this view supports grouping.
            When this returns false, the rest of the interface is ignored.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanRemove">
            <summary>
            Gets a value indicating whether the view supports Remove and RemoveAt.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanSort">
            <summary>
            Gets a value indicating whether we support sorting with this ICollectionView.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.Count">
            <summary>
            Gets the number of records in the view after 
            filtering, sorting, and paging.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.Culture">
            <summary>
            Gets or sets Culture to use during sorting.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CurrentAddItem">
            <summary>
            Gets the new item when an AddNew transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CurrentEditItem">
            <summary>
            Gets the affected item when an EditItem transaction is in progress
            Otherwise it returns null.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CurrentItem">
            <summary> 
            Gets the "current item" for this view 
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CurrentPosition">
            <summary>
            Gets the ordinal position of the CurrentItem within the 
            (optionally sorted and filtered) view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.Filter">
            <summary>
            Gets or sets the Filter, which is a callback set by the consumer of the ICollectionView
            and used by the implementation of the ICollectionView to determine if an
            item is suitable for inclusion in the view.
            </summary>        
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support filtering and will throw a NotSupportedException.
            Use <seealso cref="P:Syncfusion.Windows.Data.PagedCollectionView.CanFilter"/> property to test if filtering is supported before
            assigning a non-null value.
            </exception>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsAddingNew">
            <summary>
            Gets a value indicating whether an "AddNew" transaction is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsCurrentAfterLast">
            <summary> 
            Gets a value indicating whether currency is beyond the end (End-Of-File). 
            </summary>
            <returns>Whether IsCurrentAfterLast</returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsCurrentBeforeFirst">
            <summary> 
            Gets a value indicating whether currency is before the beginning (Beginning-Of-File). 
            </summary>
            <returns>Whether IsCurrentBeforeFirst</returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsEditingItem">
            <summary>
            Gets a value indicating whether an EditItem transaction is in progress.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsEmpty">
            <summary>
            Gets a value indicating whether the resulting (filtered) view is empty.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsPageChanging">
            <summary>
            Gets a value indicating whether a page index change is in process or not.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.ItemCount">
            <summary>
            Gets the minimum number of items known to be in the source collection
            that verify the current filter if any
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.NeedsRefresh">
            <summary>
            Gets a value indicating whether this view needs to be refreshed.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.NewItemPlaceholderPosition">
            <summary>
            Gets or sets whether to include a placeholder for a new item, and if so,
            where to put it. Only the value NewItemPlaceholderPosition.None is supported.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.PageIndex">
            <summary>
            Gets the current page we are on. (zero based)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.PageSize">
            <summary>
            Gets or sets the number of items to display on a page. If the
            PageSize = 0, then we are not paging, and will display all items
            in the collection. Otherwise, we will have separate pages for 
            the items to display.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.SortDescriptions">
            <summary>
            Gets the Sort criteria to sort items in collection.
            </summary>
            <remarks>
            <p>
            Clear a sort criteria by assigning SortDescription.Empty to this property.
            One or more sort criteria in form of <seealso cref="T:System.ComponentModel.SortDescription"/>
            can be used, each specifying a property and direction to sort by.
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            Simpler implementations do not support sorting and will throw a NotSupportedException.
            Use <seealso cref="P:Syncfusion.Windows.Data.PagedCollectionView.CanSort"/> property to test if sorting is supported before adding
            to SortDescriptions.
            </exception>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.SourceCollection">
            <summary>
            Gets the source of the IEnumerable collection we are using for our view.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.TotalItemCount">
            <summary>
            Gets the total number of items in the view before paging is applied.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.CanConstructItem">
            <summary>
            Gets a value indicating whether we have a valid ItemConstructor of the correct type
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.InternalCount">
            <summary>
            Gets the private count without taking paging or
            placeholders into account
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.InternalList">
            <summary>
            Gets the InternalList
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsCurrentInSync">
            <summary>
            Gets a value indicating whether CurrentItem and CurrentPosition are
            up-to-date with the state and content of the collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsCurrentInView">
            <summary>
            Gets a value indicating whether the current item is in the view
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsGrouping">
            <summary>
            Gets a value indicating whether or not we have grouping 
            taking place in this collection.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.IsRefreshDeferred">
            <summary>
            Gets a value indicating whether there
            is still an outstanding DeferRefresh in
            use.  If at all possible, derived classes
            should not call Refresh if IsRefreshDeferred
            is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.NeedToMoveToPreviousPage">
            <summary>
            Gets whether the current page is empty and we need
            to move to a previous page.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.OnLastLocalPage">
            <summary>
            Gets a value indicating whether we are on the last local page
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.PageCount">
            <summary>
            Gets the number of pages we currently have
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.SourceList">
            <summary>
            Gets the SourceCollection as an IList
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.Timestamp">
            <summary>
            Gets Timestamp used by the NewItemAwareEnumerator to determine if a
            collection change has occurred since the enumerator began.  (If so,
            MoveNext should throw.)
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.UsesLocalArray">
            <summary>
            Gets a value indicating whether a private copy of the data 
            is needed for sorting, filtering, and paging. We want any deriving 
            classes to also be able to access this value to see whether or not 
            to use the default source collection, or the internal list.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.Item(System.Int32)">
            <summary>
            Return the item at the specified index
            </summary>
            <param name="index">Index of the item we want to retrieve</param>
            <returns>The item at the specified index</returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.RequestPageMoveDelegate">
            <summary>
            Delegate used to asynchronously trigger a page move.
            </summary>
            <param name="pageIndex">Requested page index</param>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags">
            <summary>
            Enum for CollectionViewFlags
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsDataInGroupOrder">
            <summary>
            Whether the list of items (after applying the sort and filters, if any) 
            is already in the correct order for grouping. 
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsDataSorted">
            <summary>
            Whether the source collection is already sorted according to the SortDescriptions collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.ShouldProcessCollectionChanged">
            <summary>
            Whether we should process the collection changed event
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsCurrentBeforeFirst">
            <summary>
            Whether the current item is before the first
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsCurrentAfterLast">
            <summary>
            Whether the current item is after the last
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.NeedsRefresh">
            <summary>
            Whether we need to refresh
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.CachedIsEmpty">
            <summary>
            Whether we cache the IsEmpty value
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsPageChanging">
            <summary>
            Indicates whether a page index change is in process or not
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsMoveToPageDeferred">
            <summary>
            Whether we need to move to another page after EndDefer
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CollectionViewFlags.IsUpdatePageSizeDeferred">
            <summary>
            Whether we need to update the PageSize after EndDefer
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.CultureSensitiveComparer">
            <summary>
            Creates a comparer class that takes in a CultureInfo as a parameter,
            which it will use when comparing strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.CultureSensitiveComparer._culture">
            <summary>
            Private accessor for the CultureInfo of our comparer
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CultureSensitiveComparer.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Creates a comparer which will respect the CultureInfo
            that is passed in when comparing strings.
            </summary>
            <param name="culture">The CultureInfo to use in string comparisons</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.CultureSensitiveComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the specified CultureInfo for string and using the default object comparer for all other objects.
            </remarks>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.DeferHelper">
            <summary>
            Used to keep track of Defer calls on the PagedCollectionView, which
            will prevent the user from calling Refresh() on the view. In order
            to allow refreshes again, the user will have to call IDisposable.Dispose,
            to end the Defer operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.DeferHelper.collectionView">
            <summary>
            Private reference to the CollectionView that created this DeferHelper
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.DeferHelper.#ctor(Syncfusion.Windows.Data.PagedCollectionView)">
            <summary>
            Initializes a new instance of the DeferHelper class
            </summary>
            <param name="collectionView">CollectionView that created this DeferHelper</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.DeferHelper.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.SimpleMonitor">
            <summary>
            A simple monitor class to help prevent re-entrant calls
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.SimpleMonitor.entered">
            <summary>
            Whether the monitor is entered
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SimpleMonitor.Enter">
            <summary>
            Sets a value indicating that we have been entered
            </summary>
            <returns>Boolean value indicating whether we were already entered</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SimpleMonitor.Dispose">
            <summary>
            Cleanup method called when done using this class
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.SimpleMonitor.Busy">
            <summary>
            Gets a value indicating whether we have been entered or not
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator">
            <summary>
            IEnumerator generated using the new item taken into account
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.#ctor(Syncfusion.Windows.Data.PagedCollectionView,System.Collections.IEnumerator,System.Object)">
            <summary>
            Initializes a new instance of the NewItemAwareEnumerator class.
            </summary>
            <param name="collectionView">The PagedCollectionView we are creating the enumerator for</param>
            <param name="baseEnumerator">The baseEnumerator that we pass in</param>
            <param name="newItem">The new item we are adding to the collection</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.MoveNext">
            <summary>
            Implements the MoveNext function for IEnumerable
            </summary>
            <returns>Whether we can move to the next item</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Reset">
            <summary>
            Implements the Reset function for IEnumerable
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._collectionView">
            <summary>
            CollectionView that we are creating the enumerator for
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._baseEnumerator">
            <summary>
            The Base Enumerator that we are passing in
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._position">
            <summary>
            The position we are appending items to the enumerator
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._newItem">
            <summary>
            Reference to any new item that we want to add to the collection
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator._timestamp">
            <summary>
            Timestamp to let us know whether there have been updates to the collection
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Current">
            <summary>
            Gets the Current value for IEnumerable
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.BeforeNewItem">
            <summary>
            Whether the position is before the new item
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.OnNewItem">
            <summary>
            Whether the position is on the new item that is being created
            </summary>
        </member>
        <member name="F:Syncfusion.Windows.Data.PagedCollectionView.NewItemAwareEnumerator.Position.AfterNewItem">
            <summary>
            Whether the position is after the new item
            </summary>
        </member>
        <member name="T:Syncfusion.Windows.Data.PagedCollectionView.SortFieldComparer">
            <summary>
            IComparer class to sort by class property value (using reflection).
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SortFieldComparer.#ctor(System.ComponentModel.ICollectionView)">
            <summary>
            Create a comparer, using the SortDescription and a Type;
            tries to find a reflection PropertyInfo for each property name
            </summary>
            <param name="collectionView">CollectionView that contains list of property names and direction to sort by</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SortFieldComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="x">first item to compare</param>
            <param name="y">second item to compare</param>
            <returns>Negative number if x is less than y, zero if equal, and a positive number if x is greater than y</returns>
            <remarks>
            Compares the 2 items using the list of property names and directions.
            </remarks>
        </member>
        <member name="M:Syncfusion.Windows.Data.PagedCollectionView.SortFieldComparer.FindInsertIndex(System.Object,System.Collections.IList)">
            <summary>
            Steps through the given list using the comparer to find where
            to insert the specified item to maintain sorted order
            </summary>
            <param name="x">Item to insert into the list</param>
            <param name="list">List where we want to insert the item</param>
            <returns>Index where we should insert into</returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.PropertyInfoExtensions.GetPropertyDescriptor(Syncfusion.Windows.Data.PropertyInfoCollection,System.String)">
            <summary>
            Generate the Property Descriptot for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>
            <param name="columnType"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Windows.Data.QueryableCollectionView">
            <summary>
            Extends CollectionViewAdv to implement LINQ based operations on strongly-typed
            data sources.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.OnSortDescriptionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SortDescriptionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.RefreshSort">
            <summary>
            Refreshes the sort.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.RefreshSortingOrderWithFiltersForBottomLevel(System.Collections.Generic.List{Syncfusion.Windows.Data.Group})">
            <summary>
            Refreshes the sorting order for bottom level.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.CreateRecords">
            <summary>
            Creates the records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.RefreshFilters">
            <summary>
            Refreshes the filters.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.QueryableCollectionView.GetGroupResult(System.String[])">
            <summary>
            Gets the group result.
            </summary>
            <param name="groupBy">The group by.</param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.QueryableCollectionView.UsePLINQ">
            <summary>
            Gets or sets a value indicating whether [use PLINQ]. 
            </summary>
            <value><c>true</c> if [use PLINQ]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.QueryableCollectionView.ViewSource">
            <summary>
            Gets the underlying view source that holds the current collection in a separate IQueryable view.
            </summary>
            <value>The view source.</value>
        </member>
        <member name="T:Syncfusion.Windows.Data.EnumerableRecordsWrapper">
            <summary>
            Implements <see cref="T:Syncfusion.Windows.Data.IRecordsList"/> interface to enumerate the records
            data structure for <see cref="T:Syncfusion.Windows.Data.CollectionViewAdv"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.CreateNew(System.Collections.IEnumerable,Syncfusion.Windows.Data.CollectionViewAdv)">
            <summary>
            Create a new instance of <see cref="T:Syncfusion.Windows.Data.EnumerableRecordsWrapper"/>.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The view.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.#ctor(Syncfusion.Windows.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.EnumerableRecordsWrapper"/> class.
            </summary>
            <param name="view">The view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.#ctor(System.Collections.IEnumerable,Syncfusion.Windows.Data.CollectionViewAdv)">
            <summary>
            Initializes a new instance of the <see cref="T:Syncfusion.Windows.Data.EnumerableRecordsWrapper"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="view">The view.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.EnsureRecordsFromTopLevelGroup">
            <summary>
            Populates the records from top level group.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.CreateRecord(System.Object)">
            <summary>
            Creates the record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.OnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when collection is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.CreateRecordEntry(System.Object)">
            <summary>
            Creates the record entry.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Add(System.Object)">
            <summary>
            Adds the specified data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.IndexOfRecord(System.Object)">
            <summary>
            Returns the index for the underlying record.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.GetItemAt(System.Int32)">
            <summary>
            Gets the item at index specified.
            </summary>
            <param name="recordIndex">Index of the record.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.GetRecord(System.Object)">
            <summary>
            Gets the <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> for the underlying business object.
            </summary>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.IndexOf(Syncfusion.Windows.Data.RecordEntry)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Insert(System.Int32,Syncfusion.Windows.Data.RecordEntry)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Add(Syncfusion.Windows.Data.RecordEntry)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.ReomveAll">
            <summary>
            Dispose all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Contains(Syncfusion.Windows.Data.RecordEntry)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.CopyTo(Syncfusion.Windows.Data.RecordEntry[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            -or-
            Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Remove(Syncfusion.Windows.Data.RecordEntry)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Syncfusion.Windows.Data.EnumerableRecordsWrapper.View">
            <summary>
            Gets the view.
            </summary>
            <value>The view.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.EnumerableRecordsWrapper.TableSummaries">
            <summary>
            Gets the table summaries.
            </summary>
            <value>The table summaries.</value>
        </member>
        <member name="P:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Syncfusion.Windows.Data.RecordEntry"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Syncfusion.Windows.Data.EnumerableRecordsWrapper.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Syncfusion.Windows.Data.EnumerableRecordsWrapper.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Syncfusion.Windows.Common.TypeHelper">
            <summary>
            Utility class for Type related operations
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetDefaultMemberName(System.Type)">
            <summary>
            Gets the default member name that is used for an indexer (e.g. "Item").
            </summary>
            <param name="type">Type to check.</param>
            <returns>Default member name.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetNestedProperty(System.Type,System.String,System.Exception@,System.Object@)">
            <summary>
            Retrieves the value and type of a property. That property can be nested and its path
            can include indexers. Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">The parent Type</param>
            <param name="propertyPath">Property path</param>
            <param name="exception">Potential exception</param>
            <param name="item">Parent item which will be set to the property value if non-null.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetNestedPropertyType(System.Type,System.String)">
            <summary>
            Extension method that returns the type of a property. That property can be nested and
            its path can include indexers. Each element of the path needs to be a public instance property.
            </summary>
            <param name="parentType">Type that exposes that property</param>
            <param name="propertyPath">Property path</param>
            <returns>Property type</returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetNestedPropertyValue(System.Object,System.String,System.Type,System.Exception@)">
            <summary>
            Retrieves the value of a property. That property can be nested and its path can
            include indexers. Each element of the path needs to be a public instance property.
            The return value will either be of type propertyType or it will be null.
            </summary>
            <param name="item">Object that exposes the property</param>
            <param name="propertyPath">Property path</param>
            <param name="propertyType">Property type</param>
            <param name="exception">Potential exception</param>
            <returns>Property value</returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetPropertyOrIndexer(System.Type,System.String,System.Object[]@)">
            <summary>
            Returns the PropertyInfo for the specified property path.  If the property path
            refers to an indexer (e.g. "[abc]"), then the index out parameter will be set to the value
            specified in the property path.  This method only supports indexers with a single parameter
            that is either an int or a string.  Int parameters take priority over string parameters.
            </summary>
            <param name="type">Type to search.</param>
            <param name="propertyPath">Property path.</param>
            <param name="index">Set to the index if return value is an indexer, otherwise null.</param>
            <returns>PropertyInfo for either a property or an indexer.</returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.GetTypeName(System.Type)">
            <summary>
            Returns the friendly name for a type
            </summary>
            <param name="type">The type to get the name from</param>
            <returns>Textual representation of the input type</returns>
        </member>
        <member name="M:Syncfusion.Windows.Common.TypeHelper.SplitPropertyPath(System.String)">
            <summary>
            Returns a list of substrings where each one represents a single property within a nested
            property path which may include indexers.  For example, the string "abc.d[efg][h].ijk"
            would return the substrings: "abc", "d", "[efg]", "[h]", and "ijk".
            </summary>
            <param name="propertyPath">Path to split.</param>
            <returns>List of property substrings.</returns>
        </member>
        <member name="M:Syncfusion.Linq.Data.DataSetExtensions.EscapeLikeValue(System.String)">
            <summary>
            Insert [ wildcard ] in LIKE Queries.
            http://msdn.microsoft.com/en-us/library/ms179859.aspx
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.FunctionalExtensions">
            <summary>
            Functional method extensions
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.CreateNewInstanceConstructor(System.Type,System.String,System.Type)">
            <summary>
            Creates the new instance constructor.
            </summary>
            <param name="type">The type.</param>
            <param name="fullName">The full name.</param>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Iterates over an IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Iterates over a generic IEnumerable instance to a delegated function
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.IterateIndex``1(``0[],System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.IterateIndex``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            Iterates the index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.True``1">
            <summary>
            Trues this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.False``1">
            <summary>
            Falses this instance.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified expr1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expr1">The expr1.</param>
            <param name="expr2">The expr2.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.Fold``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the specified list.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.FoldLeft``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the left.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.FoldRight``2(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``0},``0)">
            <summary>
            Folds the right.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="list">The list.</param>
            <param name="func">The func.</param>
            <param name="acc">The acc.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.FunctionalExtensions.MoveTo(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Moves to.
            </summary>
            <param name="list">The list.</param>
            <param name="src">The SRC.</param>
            <param name="dest">The dest.</param>
        </member>
        <member name="T:Syncfusion.Linq.FilterType">
            <summary>
            Specifies the FilterType to be used in LINQ methods.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.LessThan">
            <summary>
            Performs LessThan operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.LessThanOrEqual">
            <summary>
            Performs LessThan Or Equal operation.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Equals">
            <summary>
            Checks Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.NotEquals">
            <summary>
            Checks for Not Equals on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.GreaterThanOrEqual">
            <summary>
            Checks for Greater Than or Equal on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.GreaterThan">
            <summary>
            Checks for Greater Than on the operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.StartsWith">
            <summary>
            Checks for StartsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.EndsWith">
            <summary>
            Checks for EndsWith on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Contains">
            <summary>
            Checks for Contains on the string operands.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Undefined">
            <summary>
            Returns invalid type
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterType.Between">
            <summary>
            Checks for Between two date on the operands.
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.FilterBehavior">
            <summary>
            Specifies the Filter Behaviour for the filter predicates.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterBehavior.StronglyTyped">
            <summary>
            Parses only StronglyTyped values.
            </summary>
        </member>
        <member name="F:Syncfusion.Linq.FilterBehavior.StringTyped">
            <summary>
            Parses all values by converting them as string.
            </summary>
        </member>
        <member name="T:Syncfusion.Linq.NullableHelperInternal">
            <summary>
            A framework independent utility class for the new Nullable type in .NET Framework 2.0
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.IsComplexType(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Indicates whether the specified PropertyDescriptor has nested properties.
            </summary>
            <param name="pd">The PropertyDescriptor to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.IsComplexType(System.Type)">
            <summary>
            Indicates whether the specified Type has nested properties.
            </summary>
            <param name="t">The Type to be checked.</param>
            <returns>True if nested properties are found; False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.ChangeType(System.Object,System.Type)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
            Use this method instead of Convert.ChangeType. Makes Convert.ChangeType work with Nullable types.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.FixDbNUllasNull(System.Object,System.Type)">
            <summary>
            Returns null if value is DBNull and specified type is a Nullable type. Otherwise the value is returned unchanged.
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.NullableHelperInternal.GetUnderlyingType(System.Type)">
            <summary>
            Returns the underlying type of a Nullable type. For .NET 1.0 and 1.1 this method will always return null.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Linq.NullableHelperInternal.TypeConverterHelper">
            <exclude/>
        </member>
        <member name="T:Syncfusion.Linq.ValueConvert">
            <summary>
            <see cref="T:Syncfusion.Linq.ValueConvert"/> provides conversion routines for values
            to convert them to another type and routines for formatting values.
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <overload>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </overload>
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.TryParse(System.String,System.Type)">
            <summary>
            Tries the parse.
            </summary>
            <param name="s">The string value.</param>
            <param name="type">The underline type.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ChangeType(System.Object,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Converts value from one type to another using an optional <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="value">The original value.</param>
            <param name="type">The target type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value.</param>
            <param name="format">Format string.</param>
            <param name="returnDbNUllIfNotValid">Indicates whether exceptions should be avoided or catched and return value should be DBNull if
            it cannot be converted to the target type.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Overloaded. Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String)">
            <summary>
            Parses the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="format">A format string used in a <see cref="M:System.Object.ToString"/> call. Right now
            format is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.Parse(System.String,System.Type,System.IFormatProvider,System.String[],System.Boolean)">
            <summary>
            Parse the given text using the resultTypes "Parse" method or using a type converter.
            </summary>
            <param name="s">The text to parse.</param>
            <param name="resultType">The requested result type.</param>
            <param name="provider">A <see cref="T:System.IFormatProvider"/> used to format or parse the value. Can be NULL.</param>
            <param name="formats">A string array holding permissible formats used in a <see cref="M:System.Object.ToString"/> call. Right now
            formats is only interpreted to enable roundtripping for formatted dates.
            </param>
            <param name="returnDbNUllIfNotValid">Indicates whether DbNull should be returned if value cannot be parsed. Otherwise an exception is thrown.</param>
            <returns>The new value in the target type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)">
            <summary>
            Generates display text using the specified format, culture info and number format.
            </summary>
            <param name="value">The value to format.</param>
            <param name="valueType">The value type on which formatting is based. The original value will first be converted to this type.</param>
            <param name="format">The format like in ToString(string format).</param>
            <param name="ci">The <see cref="T:System.Globalization.CultureInfo"/> for formatting the value.</param>
            <param name="nfi">The <see cref="T:System.Globalization.NumberFormatInfo"/> for formatting the value.</param>
            <returns>The string with the formatted text for the value.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetDefaultValue(System.Type)">
            <summary>
            Returns a representative value for any given type. 
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <returns>A value with the specified type.</returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@)">
            <summary>
            Overloaded. Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.ParseValueWithTypeInformation(System.String,System.Object@,System.Boolean)">
            <summary>
            Parses the given string including type information. String can be in format %lt;type&gt; 'value'
            </summary>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <param name="allowConvertFromBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.TryConvertFromBase64String(System.Type,System.String,System.Object@)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a byte array from a base64 string.
            </summary>
            <param name="type"></param>
            <param name="valueAsString"></param>
            <param name="retVal"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValueWithTypeInformation(System.Object)">
            <summary>
            Overloaded. Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.FormatValueWithTypeInformation(System.Object,System.Boolean)">
            <summary>
            Formats the given value as string including type information. String will be in format %lt;type&gt; 'value'
            </summary>
            <param name="value"></param>
            <param name="allowConvertToBase64">Indicates whether TypeConverter should be checked whether the type to be
            parsed supports conversion to/from byte array (e.g. an Image)</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.TryConvertToBase64String(System.Object)">
            <summary>
            Indicates whether the TypeConverter associated with the type supports conversion to/from a byte array (e.g. an Image). 
            If that is the case the string is converted to a base64 string from a byte array.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetTypeName(System.Type)">
            <summary>
            Returns the type name. If type is not in mscorlib, the assembly name is appended.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.GetType(System.String)">
            <summary>
            Returns the type from the specified name. If an assembly name is appended the list of currently loaded
            assemblies in the current AppDomain are checked.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.ValueConvert.IsEmpty(System.String)">
            <summary>
            Indicates whether string is null or empty.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:Syncfusion.Linq.ValueConvert.AllowFormatValueTrimEnd">
            <summary>
            Indicates whether <see cref="M:Syncfusion.Linq.ValueConvert.FormatValue(System.Object,System.Type,System.String,System.Globalization.CultureInfo,System.Globalization.NumberFormatInfo)"/> should trim whitespace characters from
            the end of the formatted text.
            </summary>
        </member>
        <member name="M:Syncfusion.Windows.Data.PropertyDescriptorExtensions.SetValue(System.ComponentModel.PropertyDescriptorCollection,System.Object,System.Object,System.String)">
            <summary>
            Sets the value for the corresponding object available in the PropertyDescriptorCollection
            </summary>
            <param name="pdc">ItemProperties</param>
            <param name="record">Record</param>
            <param name="value">Value</param>
            <param name="columnName">Mapping name of the column(Includeing complex mapping names)</param>
        </member>
        <member name="M:Syncfusion.Windows.Data.PropertyDescriptorExtensions.GetPropertyDescriptor(System.ComponentModel.PropertyDescriptorCollection,System.String)">
            <summary>
            Generate the Property Descriptor for corresponding Property it may be simple or complex property
            </summary>
            <param name="pdc"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Syncfusion.Linq.QueryableExtensions">
            <summary>
            Provides extension methods for Queryable source. 
            <para></para>
            <para></para>
            <para>var fonts = FontFamily.Families.AsQueryable(); </para>
            <para></para>
            <para></para>
            <para>We would normally write Expressions as, </para>
            <para></para>
            <code lang="C#">var names = new string[] {&quot;Tony&quot;, &quot;Al&quot;,
            &quot;Sean&quot;, &quot;Elia&quot;}.AsQueryable();
            names.OrderBy(n=&gt;n);</code>
            <para></para>
            <para></para>
            <para>This would sort the names based on alphabetical order. Like so, the
            Queryable extensions are a set of extension methods that define functions which
            will generate expressions based on the supplied values to the functions.</para>
            </summary>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.AndPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an AND binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GroupBy(System.Linq.IQueryable,System.String,System.String,System.Type)">
            <summary>
            Generates the GroupBy Expression
            </summary>
            <param name="source"></param>
            <param name="groupByName"></param>
            <param name="sortAction"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderBy query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderBy(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an OrderByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().OrderByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrderByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a OrderByDescending query for the Queryable source.
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders =
            queryable.OrderByDescending(&quot;ShipCountry&quot;);</code>
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GetValueExpression(System.Linq.Expressions.ParameterExpression,System.String,System.Type)">
            <summary>
            Generate expression from simple and complex property
            </summary>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
            <param name="paramExpression"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.OrPredicate(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates an OR binary expression for the given Binary expressions.
            <para></para>
            </summary>
            <param name="expr1"></param>
            <param name="expr2"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Parameter(System.Linq.IQueryable)">
            <summary>
            Creates a ParameterExpression that is required when building a series of
            predicates for the WHERE filter.
            <para></para>
            <code lang="C#">        DataClasses1DataContext db = new
            DataClasses1DataContext();
                    var orders = db.Orders.Skip(0).Take(100).ToList();
                    var queryable = orders.AsQueryable();
                    var parameter =
            queryable.Parameter();</code>
            <para></para>
            <para></para>Use this same parameter passed to generate different predicates and
            finally to generate the Lambda.
            </summary>
            <remarks>
            If we specify a parameter for every predicate, then the Lambda expression scope
            will be out of the WHERE query that gets generated.
            </remarks>
            <param name="source"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Predicate(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.String,System.Object,Syncfusion.Linq.FilterType,Syncfusion.Linq.FilterBehavior,System.Boolean,System.Type)">
            <summary>
            Predicate is a Binary expression that needs to be built for a single or a series
            of values that needs to be passed on to the WHERE expression. 
            <para></para>
            <para></para>
            <code lang="C#">var binaryExp = queryable.Predicate(parameter,
            &quot;EmployeeID&quot;, &quot;4&quot;, true);</code>
            </summary>
            <remarks>
            First create a ParameterExpression using the Parameter extension function, then
            use the same ParameterExpression to generate the predicates.
            </remarks>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="propertyName"></param>
            <param name="constValue"></param>
            <param name="filterType"></param>
            <param name="filteBehaviour"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a Select query for a single property value.
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.String[])">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new string[]{
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Select(System.Linq.IQueryable,System.Collections.Generic.IEnumerable{System.String},System.Type)">
            <summary>
            Generates a Select query based on the properties passed. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var selector = queryable.Select(new List&lt;string&gt;() {
            &quot;OrderID&quot;, &quot;ShipCountry&quot; });</code>
            <para></para>
            <para>It returns a dynamic class generated thru ReflectionEmit, Use reflection
            to identify the properties and values.</para>
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Skip(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a SKIP expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.GetDelegateInvokeExpressionAggregateFunc``1(System.Linq.Expressions.ParameterExpression,System.String,System.Delegate)">
            <summary>
            Use this method with a cached delegate, this improves performance when using complex Expressions.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="paramExp"></param>
            <param name="propertyName"></param>
            <param name="expressionFunc"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Take(System.Linq.IQueryable,System.Int32,System.Type)">
            <summary>
            Generates a TAKE expression in the IQueryable source.
            </summary>
            <param name="source">The source.</param>
            <param name="constValue">The const value.</param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenBy(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenBy query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenBy(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenBy``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenBy query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenBy(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenByDescending``1(System.Linq.IQueryable,System.Collections.Generic.IComparer{``0},System.Type)">
            <summary>
            Generates an ThenByDescending query for the IComparer defined. 
            <para></para>
            <para> </para>
            <code lang="C#">   public class OrdersComparer :
            IComparer&lt;Order&gt;
                {
                    public int Compare(Order x, Order y)
                    {
                        return string.Compare(x.ShipCountry, y.ShipCountry);
                    }
                }</code>
            <para></para>
            <para><code lang="C#">var sortedOrders =
            db.Orders.Skip(0).Take(5).ToList().ThenByDescending(o =&gt; o, new
            OrdersComparer());</code></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="comparer"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.ThenByDescending(System.Linq.IQueryable,System.String,System.Type)">
            <summary>
            Generates a ThenByDescending query for the Queryable source. 
            <para></para>
            <code lang="C#">            DataClasses1DataContext db = new
            DataClasses1DataContext();
                        var orders = db.Orders.Skip(0).Take(10).ToList();
                        var queryable = orders.AsQueryable();
                        var sortedOrders = queryable.OrderBy(&quot;ShipCountry&quot;);
                        sortedOrders = sortedOrders.ThenByDescending(&quot;ShipCity&quot;);</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Where(System.Linq.IQueryable,System.String,System.Object,Syncfusion.Linq.FilterType,System.Boolean,System.Type)">
            <summary>
            Generates the where expression.
            <para></para>
            <code lang="C#">            var nw = new Northwind(@&quot;Data Source =
            Northwind.sdf&quot;);
                        IQueryable queryable = nw.Orders.AsQueryable();
                        var filters = queryable.Where(&quot;ShipCountry&quot;,
            &quot;z&quot;, FilterType.Contains);
                        foreach (Orders item in filters)
                        {
                            Console.WriteLine(&quot;{0}/{1}&quot;, item.OrderID,
            item.ShipCountry);
                        }</code>
            </summary>
            <param name="source"></param>
            <param name="propertyName">Name of the property.</param>
            <param name="value"></param>
            <param name="filterType"></param>
            <param name="isCaseSensitive"></param>
            <param name="sourceType"></param>
        </member>
        <member name="M:Syncfusion.Linq.QueryableExtensions.Where(System.Linq.IQueryable,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Use this function to generate WHERE expression based on Predicates. The
            AndPredicate and OrPredicate should be used in combination to build the
            predicate expression which is finally passed on to this function for creating a
            Lambda. 
            <para></para>
            <para></para>
            <para></para>DataClasses1DataContext db = new DataClasses1DataContext();
            <para></para>            var orders = db.Orders.Skip(0).Take(100).ToList();
            <para></para>            var queryable = orders.AsQueryable();
            <para></para>            var parameter =
            queryable.Parameter(&quot;ShipCountry&quot;);
            <para></para>            var binaryExp = queryable.Predicate(parameter,
            <para></para>&quot;ShipCountry&quot;, &quot;USA&quot;, true);
            <para></para>            var filteredOrders = queryable.Where(parameter,
            binaryExp);
            <para></para>            foreach (var order in filteredOrders)
            <para></para>            {
            <para></para>                Console.WriteLine(order);
            <para></para>            }
            <para></para>
            <para></para>
            <para></para>Build Predicates for Contains / StartsWith / EndsWith,
            <para></para>
            <para></para>            IQueryable queryable = nw.Orders.AsQueryable();
            <para></para>            var parameter = queryable.Parameter();
            <para></para>            var exp1 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;h&quot;, FilterType.Contains);
            <para></para>            var exp2 = queryable.Predicate(parameter,
            &quot;ShipCountry&quot;, &quot;a&quot;, FilterType.StartsWith);
            <para></para>            var andExp = exp2.OrPredicate(exp1);
            <para></para>            var filters = queryable.Where(parameter, andExp);
            <para></para>            foreach (Orders item in filters)
            <para></para>            {
            <para></para>                Console.WriteLine(&quot;{0}/{1}&quot;,
            item.OrderID, item.ShipCountry);
            <para></para>            }
            <para></para>
            </summary>
            <param name="source"></param>
            <param name="paramExpression"></param>
            <param name="predicateExpression"></param>
        </member>
    </members>
</doc>
