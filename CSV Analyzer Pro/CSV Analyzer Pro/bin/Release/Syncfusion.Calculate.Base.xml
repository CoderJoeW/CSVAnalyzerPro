<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syncfusion.Calculate.Base</name>
    </assembly>
    <members>
        <member name="T:Syncfusion.NamespaceDoc">
            <summary>
            Contains the class for assembly information.
            </summary>
        </member>
        <member name="T:Syncfusion.CalculateBaseAssembly">
            <summary>
            This class holds the name of the Syncfusion.Calculate.Base assembly and provides a helper 
            routine that helps with resolving types when loading a serialization stream and when 
            the framework probes for assemblies by reflection. 
            </summary>
        </member>
        <member name="F:Syncfusion.CalculateBaseAssembly.Name">
            <summary>
            The full name of this assembly without version information, e.g. "Syncfusion.Grid".
            </summary>
        </member>
        <member name="F:Syncfusion.CalculateBaseAssembly.Assembly">
            <summary>
            A reference to the <see cref="T:System.Reflection.Assembly"/> for the grid assembly.
            </summary>
        </member>
        <member name="F:Syncfusion.CalculateBaseAssembly.RootNamespace">
            <summary>
            The root namespace of this assembly. Used internally for locating resources within the assembly.
            </summary>
        </member>
        <member name="M:Syncfusion.CalculateBaseAssembly.AssemblyResolver(System.Object,System.ResolveEventArgs)">
            <summary>
            This delegate helps with resolving types and can be used as an event handler
            for a <see cref="E:System.AppDomain.AssemblyResolve"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data with information about the type.</param>
            <returns>A reference to the assembly where the type is located.</returns>
            <remarks>
            Use this handler when reading back types from a serialization stream
            saved with an earlier version of this assembly.
            </remarks>
            <example>
            <code lang="C#">
            		public static GridModel LoadSoap(Stream s)
            		{
            			try
            			{
            				AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(GridAssembly.AssemblyResolver);
            				SoapFormatter b = new SoapFormatter();
            				b.AssemblyFormat = FormatterAssemblyStyle.Simple;
            				GridModel t = b.Deserialize(s) as GridModel;
            				t.Modified = false;
            				return t;
            			}
            			finally
            			{
            				AppDomain.CurrentDomain.AssemblyResolve -= new ResolveEventHandler(GridAssembly.AssemblyResolver);
            			}
            		}
            
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Calculate.CalculateConfig">
            <summary>
            CalculateConfig serves as a Configuration class for the calculate library. In the current version, there are no explicit settings.
            Adding this component from the tool box allows you to easily configure your project for calculate support.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalculateConfig.#ctor">
            <summary>
            Constructor function
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalculateConfig.Copyright">
            <summary>
            Copyright notice for the library.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.FormulaInfo">
            <summary>
            FormulaInfo maintains information on a single formula object.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.FormulaInfo.FormulaText">
            <summary>
            A property that gets/sets the text of the initial formula.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.FormulaInfo.FormulaValue">
            <summary>
            A property that gets/sets the last computed value of this formula.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.FormulaInfo.ParsedFormula">
            <summary>
            A property that gets/sets the formula as a parsed string.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.CalcEngine">
            <summary>
            CalcEngine encapsulates the code required to parse and compute formulas. Hashtable
            properties maintain a Formula Library of functions as well as a list
            of dependent cells.
            <para/>
            You can add and remove library functions.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.TABLE_ROW">
            <summary>
            used to calculate the row in Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.TABLE_HEADERS">
            <summary>
            used to calculate the header in Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.TABLE_TOTALS">
            <summary>
            used to calculate the total in Table.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.TABLE_DATA">
            <summary>
            used to calculate the data in Table
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.TABLE_ALL">
            <summary>
            used to calculate all in Table
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.machineepsilon">
            <summary>
            Used to store the value as double
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.maxrealnumber">
            <summary>
            Used to store the value as double
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.minrealnumber">
            <summary>
            Used to store the value as double
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.already_registered">
            <summary>
            Used to store the registed values
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.ACC">
            <summary>
            Used to store the number
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.BIGNO">
            <summary>
            Used to store the big number as double
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.BIGNI">
            <summary>
            Used to store the value as double
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaErrorStrings">
            <summary>
            String array that holds the strings used in error messages within the Formula Engine.
            </summary>
            <remarks>If you want to change the error messages displayed within the Formula Engine,
            you can set your new strings into the appropriate position in the FormulaErrorStrings
            array. Here is the code that shows the default settings. You should assign your new
            strings to the corresponding positions. If you modify any of these strings, then
            you should call <see cref="M:Syncfusion.Calculate.CalcEngine.ReloadErrorStrings"/> to make sure the internal strings 
            used in the engine reflect your changes.
            </remarks>
            <example>Here is the code that shows position of each string in FormulaErrorStrings:
            <code lang="C#">
            	public string[] FormulaErrorStrings = new string[]
            	{
            		"binary operators cannot start an expression",	//0
            		"cannot parse",									//1
            		"bad library",									//2
            		"invalid char in front of",						//3
            		"number contains 2 decimal points",				//4
            		"expression cannot end with an operator",		//5
            		"invalid characters following an operator",		//6
            		"invalid character in number",					//7
            		"mismatched parentheses",						//8
            		"unknown formula name",							//9
            		"requires a single argument",					//10
            		"requires 3 arguments",							//11
            		"invalid Math argument",						//12
            		"requires 2 arguments",							//13
            		"bad index",									//14
            		"too complex",									//15
            		"circular reference: ",							//16
            		"missing formula",								//17
            		"improper formula",								//18
            		"invalid expression",							//19
            		"cell empty"									//20
            		"bad formula",									//21
            		"empty expression",								//22
            		""                                              //23
            		"mismatched string quotes",                     //24
                    "wrong number of arguments",                    //25
                    "invalid arguments",							//26
                    "iterations do not converge",                   //27
                    "Control named '{0}' is already registered",    //28
                    "Calculation overflow",							//29
                    "Missing sheet"								    //30
            	};
            </code>
            </example>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.IgnoreValueChanged">
            <summary>
            Field that turns on/off processing of the ICalcData.ValueChanged event.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.Treat1900AsLeapYear">
            <summary>
            Set the boolean as true
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.isNameRangeIntersected">
            <summary>
            This field is maintained to perform the calculation when formula contains intersected named ranges.
            For e.g., "=VOCE1 INDIRECT(MESE)" formula returns cell reference because name range is intersected.
            otherwise returns the corresponding cell value(eg: formula  "=SUM(INDIRECT("A131:A135"))").
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.#ctor(Syncfusion.Calculate.ICalcData)">
            <summary>
            The constructor.
            </summary>
            <param name="ParentObject">The ICalcData from the underlying grid.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.FormulaErrorStringCheck(System.String,Syncfusion.Calculate.CalcEngine.FormulaArgumentType)">
            <summary>
            A method that checks the possible cases for error string(invalid arguments for formula).
            </summary>
            <param name="args">The arguments of formula.</param>
            <param name="argumentType">The formula's argument type.</param>
            <returns>Returns the Error string if formula has invalid arguments </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.AddFunction(System.String,Syncfusion.Calculate.CalcEngine.LibraryFunction)">
            <summary>
            A method that adds a function to the function library.
            </summary>
            <param name="name">The name of the function to be added.</param>
            <param name="func">The function to be added.</param>
            <returns>True if successfully added, otherwise False.</returns>
            <remarks>
            LibraryFunction is a delegate that defines the signature of functions that
            you can add to the function library.
            <code>
            public delegate string LibraryFunction(string args);
            </code>
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.AddNamedRange(System.String,System.String)">
            <summary>
            Adds a named range to the NamedRanges collection.
            </summary>
            <param name="name">The name of the range to be added.</param>
            <param name="range">The range to be added.</param>
            <returns>True if successfully added, otherwise False.</returns>
            <remarks>
            The range should be a string such as A4:C8.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.AdjustRangeArg(System.String@)">
            <summary>
            Accepts a possible parsed formula and returns the calculated value
            without quotes.
            </summary>
            <param name="range">The argument to be adjusted.</param>
            <remarks>
            This method is useful in custom functions if you want to allow
            your custom functions to handle parsed formulas as arguments. In
            this case, calling this method at the beginning of your custom function
            will allow you custom function to work only with computed values, and not
            have to handle parsed formulas directly.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ClearLibraryComputationException">
            <summary>
            Call this method to clear whether an exception was raised during the computation of a library function.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ColIndex(System.String)">
            <summary>
            A method that gets the column index from a cell reference passed in.
            </summary>
            <param name="s">String holding a cell reference such as C21 or AB11.</param>
            <returns>An integer with the corresponding column number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChar(System.String)">
            <summary>
            Returns the character whose number code is specified in the argument.
            </summary>
            <param name="arg">The number used to retrieve the character.</param>
            <returns>The character string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeClean(System.String)">
            <summary>
            Retuns the text removing the first 32 nonprintable characters(ranging from 0 to 31) in 7-bit ASCII code.
            </summary>
            <param name="arg">Text or range holding text including nonprintable characters</param>
            <returns>Text without nonprintable characters(first 32)</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDb(System.String)">
            <summary>
            Computes the declining balance of an asset.
            </summary>
            <param name="argList">Delimited string containing the initial cost,
            salvage value, life of asset, period of calculation, and months in the initial year.</param>
            <returns>Declining balance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDdb(System.String)">
            <summary>
            Computes the double declining balance of an asset.
            </summary>
            <param name="argList">Delimited string containing the initial cost,
            salvage value, life of asset, period of calculation, and factor.</param>
            <returns>Double declining balance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDevsq(System.String)">
            <summary>
            Returns the sum of the squares of the mean deviations.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>Sum of the squares of the mean deviation.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCUMIPMT(System.String)">
            <summary>
            Returns the cumulative interest paid for an investment period with a constant interest rate.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Number of interest rate</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeACCRINT(System.String)">
            <summary>
            Calculates the accrued interest of a security in the case of periodic payments.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Accrued interest</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCUMPRINC(System.String)">
            <summary>
            Returns the cumulative principal paid for an investment period with a constant interest rate.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Cumulative principal value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeReceived(System.String)">
            <summary>
            Returns the amount received at maturity for a fully invested security.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDCount(System.String)">
            <summary>
            Returns the amount received at maturity for a fully invested security.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDCountA(System.String)">
            <summary>
            Counts the nonblank cells in a field (column) of records in a list or database that match conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDAverage(System.String)">
            <summary>
            Averages the values in a field (column) of records in a list or database that match conditions you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDGet(System.String)">
            <summary>
            Extracts a single value from a column of a list or database that matches conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDMax(System.String)">
            <summary>
            Returns the largest number in a field (column) of records in a list or database that matches conditions you that specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDMin(System.String)">
            <summary>
            Returns the smallest number in a field (column) of records in a list or database that matches conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDProduct(System.String)">
            <summary>
            Returns the smallest number in a field (column) of records in a list or database that matches conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDVar(System.String)">
            <summary>
            Estimates the variance of a population based on a sample by using the numbers in a field (column) of records in a list or database that match conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDVarp(System.String)">
            <summary>
            Calculates the variance of a population based on the entire population by using the numbers in a field (column) of records in a list or database that match conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDStdev(System.String)">
            <summary>
            Estimates the standard deviation of a population based on a sample by using the numbers in a field (column) of records in a list or database that match conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDStdevp(System.String)">
            <summary>
            Calculates the standard deviation of a population based on the entire population by using the numbers in a field (column) of records in a list or database that match conditions that you specify.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDSum(System.String)">
            <summary>
            Adds the numbers in a field (column) of records in a list or database that match conditions that you specify
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Received amount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetDataFromArgs(System.String)">
            <summary>
            Used to get the data from arguments
            </summary>
            <param name="args">Arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CheckIfNameRangesIntersect(System.String,System.String@)">
            <summary>
            Below method used to intersect the NamedRanges when the parsed formula contains space.
            </summary>
            <param name="formula"> A string holding a valid parsed formula.</param>
            <param name="finalValue">The intersected NamedRanges value.</param>
            <returns>If the namerange intersects, returns true, else false.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputedValue(System.String)">
            <summary>
            Evaluates a parsed formula.
            </summary>
            <param name="formula">A string holding a valid parsed formula.</param>
            <returns>The computed value of the formula.</returns>
            <remarks>The string passed into this function must be previously parsed
            using ParseFormula. </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeEnsureIFCall(System.String@)">
            <summary>
            Compute the NestedIF formulas using the old code structure of CalcEngine.
            </summary>
            <param name="formula">formula to execute / compute</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeShortCircuitIFFormula(System.String@)">
            <summary>
            Compute the NestedIF formulas using new parse and compute technique.
            </summary>
            <param name="formula">formula to execute / compute</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeExact(System.String)">
            <summary>
            Returns whether or not the two arguments passed in are exactly the same.
            </summary>
            <param name="range">A string holding two arguments (separated by commas) of
            cell references, strings,
            formulas, or numbers.</param>
            <returns>True if the arguments are exactly the same ignoring formats, false other wise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFind(System.String)">
            <summary>
            Finds the first occurrence of one string in another string.
            </summary>
            <param name="arg">Conatins two or three arguments. The first argument is the string
            to find. The second string is the string that is being searched. The third argument
            is the start location in the second string for the search.</param>
            <returns>The location of the found string.</returns>
            <remarks>The location count starts at 1. If the third argument is missing, it defaults to 1.
            If the first string does not appear in the second string, #VALUE! is returned. The searches are done
            in a case sensitive manner.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFormula(System.String)">
            <summary>
            A method that computes a parsed formula.
            </summary>
            <param name="parsedFormula">The parsed formula to be computed.</param>
            <returns>A string holding the computed value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIndex(System.String)">
            <summary>
            Returns the value at a specified row and column from within a given range.
            </summary>
            <param name="arg">look_range, row, col</param>
            <returns>The value.</returns>
            <remarks>
            Only the array form of this function is supported.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsError(System.String)">
            <summary>
            Returns True is the string denotes an error.
            </summary>
            <param name="range">String to be tested.</param>
            <returns>True if the value is an error.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsRef(System.String)">
            <summary>
            Checks whether the value is a reference or not.
            </summary>
            <param name="args">value or reference</param>
            <returns>TRUE or FALSE</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.SplitArgsPreservingQuotedCommas(System.String)">
            <summary>
            Returns an array of argument strings from a single string where the arguments are delimited by <see cref="P:Syncfusion.Calculate.CalcEngine.ParseArgumentSeparator"/>.
            </summary>
            <param name="args">Contains the argument list.</param>
            <returns>A string array of arguments.</returns>
            <remarks>This method properly preserves any quoted strings that contain the <see cref="P:Syncfusion.Calculate.CalcEngine.ParseArgumentSeparator"/> character.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.SplitArguments(System.String,System.Char)">
            <summary>
            A method to split the arguments using argument seperator.
            </summary>
            <param name="args">arguments to split.</param>
            <param name="argSeperator">argument seperator used to split.</param>
            <returns>A string array.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRandbetween(System.String)">
            <summary>
            Returns a random integer number between the specified two numbers.
            </summary>
            <param name="argList">StartNumber, EndNumber</param>
            <returns>Random numberbetween two value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeXor(System.String)">
            <summary>
            Returns the exclusive OR of all values treated as logical values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers. Each item in the list is considered True if it is nonzero
            and False if it is zero.</param>
            <returns>A string holding the exclusive OR of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSearch(System.String)">
            <summary>
            Returns the number of the starting position of the first string from the second string.
            </summary>
            <param name="argList">first strring, second string and starting position</param>
            <returns>index of the string</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeReplaceB(System.String)">
            <summary>
            replaces part of a text string, based on the number of characters, with a different text string
            </summary>
            <param name="argList">Text in which is want to replace, The position of the character in old_text., The number of characters in old_text </param>
            <returns>returns replaced text</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.besseli1(System.Double)">
            <summary>
            Return the value of besseli1
            </summary>
            <param name="x">value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.besselk0(System.Double)">
            <summary>
            Return the value of besselk0
            </summary>
            <param name="x">value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.besselk1(System.Double)">
            <summary>
            Return the value of the besselk1
            </summary>
            <param name="x">value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIfNA(System.String)">
            <summary>
            Returns a value you specify if a formula evaluates to #N/A
            otherwise, returns the result of the formula.
            </summary>
            <param name="range">String to be tested.</param>
            <returns>Returns the computed value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAverageIF(System.String)">
            <summary>
            Returns the average of all the cells in a range which is statisfy the given single criteria
            </summary>
            <param name="argList">range of cells, criteria, average_range</param>
            <returns>returns the average value of the cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAcsch(System.String)">
            <summary>
            Returns the archyperbolic cosecant of an angle.
            </summary>
            <param name="argList">A cell reference or a cell or a number</param>
            <returns>A string containing the archyperbolic cosecant of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBigMul(System.String)">
            <summary>
            Returns the full product of two 32-bit numbers.
            </summary>
            <param name="argList">The two 32 bit numbers.</param>
            <returns>A string containing the product of two 32 bit numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDivRem(System.String)">
            <summary>
             Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.
            </summary>
            <param name="argList"></param>
            <returns>returns the quotient of two 64-bit signed integers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIEEERemainder(System.String)">
            <summary>
            Returns the remainder resulting from the division of a specified number by another specified number.
            </summary>
            <param name="argList">contains a divisor and dividend</param>
            <returns>Returns the remainder.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConfidenceT(System.String)">
            <summary>
            Return the value of ComputeConfidenceT
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Covariance(System.Double[],System.Double[],System.Double)">
            <summary>
            Returns the sample covariance between two arrays.
            Arrays should be of equal length, and contain more than one element.
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
            <param name="decayFactor">In most applications, the decay factor is between 0 and 1.  Weigth on the last element in arrays is 1.0, the 2nd to last element d, 3rd to last d^2, ...</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.SumOfGeometricSeries(System.Double,System.Int32)">
            <summary>
            Returns the sum of a geometric series of length n, who's first element is 1.
            For decay factor d, S = 1 + d + d^2 + ... + d^(n-1)
            </summary>
            <param name="decayFactor">Decay factor Typically between -1 adn +1.</param>
            <param name="length">Number of elements in the geometric series, must be positive.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.SumOfInfiniteGeometricSeries(System.Double)">
            <summary>
            Returns the sum of an infinite geometric series who's first element is 1.
            For decay factor d, S = 1 + d + d^2 + ...
            </summary>
            <param name="decayFactor">Decay factor. Typically between -1 adn +1.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.HalfLifeOfGeometricSeries(System.Double,System.Int32)">
            <summary>
            Returns the half-life of a geometric series of length n, who's first element is 1.
            For decay factor d,  1 + d + d^2 + ... + d^(h-1) = 0.5 * [1 + d + d^2 + ... + d^(n-1)]
            </summary>
            <param name="decayFactor">Decay factor Typically between -1 adn +1.</param>
            <param name="length">Number of elements in the geometric series, must be positive.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.MostRecentValues(System.Double[],System.Int32)">
            <summary>
            Returns the most recent points from an array (the points with the highest index values).
            For functions with a decay factor, the weight on the last element in the array is the highest.
            In many applications this corresponds with the assumption that the last element in the array represents the most recent data point.
            </summary>
            <param name="inArray">Array from which the data points will be selected.</param>
            <param name="length">The number of data points to be returned.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Mean(System.Double[],System.Double,System.Int32)">
            <summary>
            Returns the mean of an array.
            </summary>
            <param name="array">Array of data for which we are calculating the mean.  For time series, the last element (index = n-1), is the most recent.</param>
            <param name="decayFactor">In most applications, the decay factor is between 0 and 1.  Weigth on the last element in array is 1.0, the 2nd to last element d, 3rd to last d^2, ...</param>
            <param name="length">Window length. Method uses the most recent n points, n = length.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.WeightedMean(System.Double[],System.Double[])">
            <summary>
            Returns the weighted averages of the values in valueArray using the corresponding weights in weightArray.
            </summary>
            <param name="valueArray">array of values for which we are computing the weighted average</param>
            <param name="weightArray">array of weights used in computing the weighted average</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.NormalCumulativeDistribution(System.Double,System.Double,System.Double)">
            <summary>
            Returns the CDF of the normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFOinv(System.String)">
            <summary>
            Returns the inverse of F distribution.
            </summary>
            <param name="argList">p, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns x such that F distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.FCumulativeDistributionInverse(System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the inverse of the CDF of the F distribution.
            For k = 3, and 5+ the solution is an approximation. 
            </summary>
            <param name="p">Cumulative probability of the distribution. p is between 0 and 1.</param>
            <param name="k1">Degrees of freedom for numerator chi-sqared distribution.</param>
            <param name="k2">Degrees of freedom for denominator chi-sqared distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.NormalCumulativeDistributionInverse(System.Double,System.Double,System.Double)">
             <summary>
             Returns the inverse of the CDF of the normal distribution.
             </summary>
             <param name="p">Cumulative probability of the distribution. 0 &lt;= p &gt;= 1.</param>
            <param name="mean">Mean of the distribution.</param>
             <param name="standardDeviation">Standard deviation of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.UniformCumulativeDensityFunction(System.Double,System.Double,System.Double)">
            <summary>
            Returns the CDF of the uniform distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="min">Minimum value of the distribution.</param>
            <param name="max">Maximum value of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeModeOsngl(System.String)">
            <summary>
            Returns the most frequent value in the range.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The most frequent value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeModeOMult(System.String)">
            <summary>
            Returns a vertical array of the most frequently occurring, or repetitive values in an array or range of data. 
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The most frequent value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTOdist(System.String)">
             <summary>
            Returns the Student's t-distribution. 
             </summary>
             <param name="argList">x, degreesfreedom1.</param>
             <returns>Returns the Student's t-distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.generateSubArray(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            A method to get submatrix for matrix function used internally.
            </summary>
            <param name="a">double Array -  Matrix</param>
            <param name="N">Matix rows</param>
            <param name="j1">Columns</param>
            <returns>Matrix</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSeriessum(System.String)">
            <summary>
            Return the value of ComputeSeriessum
            </summary>
            <param name="arg">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBahtText(System.String)">
            <summary>
            Returns the row index of the passed in cell reference.
            </summary>
            <param name="arg">Contains zero or one argument. If no argument is passed, returns the row index of the
            location of this Row function cell, otherwise returns the row index of the passed in cell reference.</param>
            <returns>The row index.</returns>
            <remarks>
            This method doesn't return an array of row numbers as the array formula entry is not supported in engine. It is another usecase of this library function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.getBetween(System.String,System.String,System.String)">
            <summary>
            Return the value of between strings
            </summary>
            <param name="strSource">source string</param>
            <param name="strStart">start</param>
            <param name="strEnd">end</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CreateSheetFamilyID">
            <summary>
            CreateSheetFamilyID is a method to create familyID for a sheet.
            </summary>
            <returns>Sheet family ID.</returns>
            <remarks>
            Essential Calculate supports multisheet references within a family of ICalcData objects. To use
            this functionality, you use this method to get a unique identifier for
            the family. Then in the RegisterGridAsSheet method that you call to add ICalcData objects
            to this family, you pass this unique identifier to mark the ICalcData objects as belonging
            to this family. You can only cross reference ICalcData objects within the same family.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.FindNextEndIndex(System.String,System.Int32@)">
            <summary>
            Find the next table formula or table Range end index i.e last index of '[' 
            </summary>
            <param name="formula">formula to find index</param>
            <param name="location">location of start index to search the char '['</param>
            <returns>locatio of end index</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetCalcID">
            <summary>
            Retrieves the current CalcEngine calculation level ID.
            </summary>
            <returns>Current calculation level ID.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetCellsFromArgs(System.String)">
            <summary>
            A method that retrieves a string array of cells from the range passed in.
            </summary>
            <remarks>
            Converts arguments in these forms to a string array of individual cells:<para/>
            	A1,A2,B4,C1,...,D8<para/>
            	A1:A5<para/>
            	A1:C5<para/>
            </remarks>
            <param name="args">String containing a cell range.</param>
            <returns>String array of cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CanGetRowIndex(System.String)">
            <summary>
            To check whether the row index can be obtained from the arguments
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetFormulaRowCol(Syncfusion.Calculate.ICalcData,System.Int32,System.Int32)">
            <summary>
            Gets the text of any formula at the given row and column of the ICalcData object.
            </summary>
            <param name="grd">The ICalcData object.</param>
            <param name="row">The one-based row in the grd object.</param>
            <param name="col">The one-based col in the grd object.</param>
            <returns>String containing the text of the formula.</returns>
            <remarks>If the data item at row and column is not a formula, the
            return value is an empty string.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetFormulaText(System.String@)">
            <summary>
            Given a string, it returns a string that is passed through the FormulaParsing event
            to allow any listener to modify it.
            </summary>
            <param name="s">A string that is to be potentially parsed.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetSheetFamilyItem(Syncfusion.Calculate.ICalcData)">
            <summary>
            Returns the GridSheetFamilyItem for the specified model. If there was no item registered for
            the model, a new item is created and cached.
            </summary>
            <param name="model">The grid model.</param>
            <returns>The GridSheetFamilyItem for the specified model.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetFormulaArrayBounds(System.String,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Return the value of arraybounds as boolean
            </summary>
            <param name="currentCell">current cell</param>
            <param name="arrayHeight">height</param>
            <param name="arrayWidth">width</param>
            <param name="firstRowIndex">firstrowindex</param>
            <param name="firstColIndex">firstcolumnindex</param>
            <param name="lastRowIndex">lastrowindex</param>
            <param name="lastColIndex">lastcolumnindex</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetValueFromArg(System.String)">
            <summary>
            A Virtual method to compute the value based on the argument passed in.
            </summary>
            <remarks>
            This method takes the argument and checks whether it is a
            parsed formula, a raw number, or a cell reference like A21.
            The return value is a string that holds the computed value of
            the passed in argument.
            </remarks>
            <param name="arg">A parsed formula, raw number, or cell reference.</param>
            <returns>A string with the computed number in it.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetValueFromParentObject(System.String)">
            <summary>
            Conditionally gets either the formula value or the cell
            value depending upon whether the requested cell is a FormulaCell.
            </summary>
            <param name="cell1">The alphanumeric cell label, like A1, or EE14.</param>
            <returns>String holding either the cell value or the computed formula value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetValueFromParentObject(System.String,System.Boolean)">
            <summary>
            Returns the value of specified cell in a Grid.
            </summary>
            <param name="cell1">Cell address</param>
            <param name="calculateFormula">If true, compute the formula and returns calculated result. 
            Else, simply returns the value of the cell.</param>
            <returns>value of the cell</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetValueFromParentObject(Syncfusion.Calculate.ICalcData,System.Int32,System.Int32)">
            <summary>
            Conditionally gets either the formula value or the cell
            value depending upon whether the requested cell is a FormulaCell.
            </summary>
            <param name="grd">The ICalcData object holding the requested cell.</param>
            <param name="row">Row index of the requested cell.</param>
            <param name="col">Column index of the requested cell.</param>
            <returns>String holding either the cell value or the computed formula value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetValueFromParentObject(System.Int32,System.Int32)">
            <summary>
            Conditionally gets either the formula value or the cell
            value depending upon whether the requested cell is a FormulaCell.
            </summary>
            <param name="row">Row index of the requested cell.</param>
            <param name="col">Column index of the requested cell.</param>
            <returns>String holding either the cell value or the computed formula value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.HandleIteration(System.String,Syncfusion.Calculate.FormulaInfo)">
            <summary>
            Return the value of HandleIteration
            </summary>
            <param name="s">value</param>
            <param name="formula">formula</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.InitLibraryFunctions">
            <summary>
            Creates and initially loads the function library with the supported functions.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.IsCellReference(System.String)">
            <summary>
            Determines whether the arg is a valid cell name.
            </summary>
            <param name="args">Cell name.</param>
            <returns>True is the arg is a valid cell name, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.MarkLibraryFormulas(System.String@)">
            <summary>
            Tokenizes all library references.
            </summary>
            <remarks>
            Accepts a string such as Sin(A1+A2) and tokenizes it into
            bqSIN[A1A2a]b which serves as input to ComputedValue.
            </remarks>
            <param name="formula">Formula to be tokenized.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.MarkNamedRanges(System.String@)">
            <summary>
            Replaces NamedRanges with their values.
            </summary>
            <remarks>
            Accepts a string such as Sin(SumRange) and tokenizes it into
            bqSIN[A1A4a]b which serves as input to ComputedValue.
            </remarks>
            <param name="argList">argList containing named ranges.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetTopRowIndexFromRange(System.String)">
            <summary>
            Get the first row Index of Cell Range
            </summary>
            <param name="range">Cell Range to find index</param>
            <returns>get the top row index</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetTableRange(System.String)">
            <summary>
            Get the cell Range for table NameRange
            </summary>
            <param name="text">Formula or NamedRange</param>
            <returns>cell range string</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CheckForStringTIC(System.String)">
            <summary>
            This method check "\"in the string and removes if the string contains  "\"\.
            </summary>
            <param name="text"> input string.</param>
            <returns> returns The parsed string value without the "\"\</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ParseAndComputeFormula(System.String)">
            <summary>
            A method that parses and computes the string formula passed in.
            </summary>
            <param name="formula">The text formula to be parsed and computed.</param>
            <returns>A string holding the computed value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ParseFormula(System.String)">
            <summary>
            A method that parses the text in a formula passed in.
            </summary>
            <param name="formula">The text formula to be parsed.</param>
            <returns>A string holding a parsed representation of the formula.</returns>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.findNamedRange">
            <summary>
            This method is used to check the given text is Namedrange or not.
            </summary>
            <param name="text">Parsed string.</param>
            <returns>returns the CellRange value if the parsed text is NamedRange.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.PlaceVariablenameTokensIntoFormula(System.String)">
            <summary>
            Swaps variable names for tokens.
            </summary>
            <param name="formula">The formula holding variable names.</param>
            <returns>The formula with tokens.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.PullUpdatedValue(System.String)">
            <summary>
            This method retrieves the value in the requested cell reference using fresh computations 
            for any cells that affect the value of the requested cell.
            </summary>
            <param name="cellRef"> A cell reference like:   Sheet5!B14</param>
            <returns>A freshly computed value for the cell.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.PullUpdatedValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            PullUpdatedValue is a method used to recompute the cells that are referred to compute the requested value.
            </summary>
            <param name="targetSheetID">Integer identifying the ICalcData object.</param>
            <param name="row">The row in the ICalcData object.</param>
            <param name="col">The column in the ICalcData object.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.PutTokensForSheets(System.String@)">
            <summary>
            Accepts an unparsed formula string and replaces any sheet references with corresponding tokens.
            </summary>
            <param name="text">The unparsed formula string.</param>
            <remarks>
            This is an advanced method that lets you replace sheet names with corresponding tokens. You may have need of
            this method if you are adding your own functions to the function library.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RecalculateRange(Syncfusion.Calculate.RangeInfo,Syncfusion.Calculate.ICalcData)">
            <summary>
            This method recalculates any formula cells in the specified range.
            </summary>
            <remarks>The calculations for non-visible formula cells are performed the next time
             cell are actually displayed. If you want the calculation performed immediately
             on cells (visible or not), call the two argument overload of RecalculateRange,
             passing the forceCalculations argument as True.</remarks>
            <param name="range">GridRangInfo object that specifies the cells to be recalculated.</param>
            <param name="data">ICalcData object that holds the data to be recalculated.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Refresh(System.String)">
            <summary>
            Refresh is a method that recalculates any cell that depends upon the passed in cell.
            </summary>
            <param name="s">A cell such as A21 or EE31.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RefreshRange(Syncfusion.Calculate.RangeInfo)">
            <summary>
            Recalculates every cell that depends upon any cell in the passed-in range.
            </summary>
            <remarks>For example, if range is RangeInfo(1,1,2,2), and cells (5,6) and
            (12,17) hold formulas that reference the cells in the range, then cells (5,6)
            and (12,17) will be re-computed as the result of this call.</remarks>
            <param name="range">RangeInfo object to be refreshed.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RegisterGridAsSheet(System.String,Syncfusion.Calculate.ICalcData,System.Int32)">
            <summary>
            RegisterGridAsSheet is a method that registers an ICalcData object so it can be referenced in a formula from another ICalcData object.
            </summary>
            <param name="refName">The reference name used to refer to this ICalcData object from formulas in other ICalcData objects.
            </param>
            <param name="model">The ICalcData from the ICalcData object being registered.
            </param>
            /// <param name="sheetFamilyID">An integer previously created with a call
            to CalcEngine.CreateSheetFamilyID. This number is used to identify
            the ICalcData objects as belonging to a particular family of ICalcData objects. You can only reference
            ICalcData objects from within the same family.
            </param>
            <remarks>
            Essential Calculate supports multisheet references with its formulas. For example, if you
            have two ICalcData objects, then you can reference cells from the first ICalcData object
            in the second ICalcData object. For this to work, both ICalcData objects need to be registered using this method.
            The syntax for using a sheet reference as part of a formula is to prefix a cell reference
            with the sheet reference name followed by an exclamation point.
            The formula "= sheet1!A1 + sheet2!C3" would add the value is cell A1 for
            the ICalcData object whose reference name is sheet1 to the value from cell C3 in the ICalcData object
            whose reference name is sheet2.
            </remarks>
            <example> Use this code to use cross sheet references:
            <code lang="C#">
            	//Register three ICalcData objects so cell can be referenced across ICalcData objects:
            	int sheetfamilyID = CalcEngine.CreateSheetFamilyID();
            	myCalcEngine.RegisterGridAsSheet("summary", calcData1, sheetfamilyID);
            	myCalcEngine.RegisterGridAsSheet("income", calcData2, sheetfamilyID);
            	myCalcEngine.RegisterGridAsSheet("expenses", calcData3, sheetfamilyID);
            	....
            	//Sample formula usage for cells in calcData1, the 'summary' data source.
            	//This code sums ups some cells from calcData3, the 'expenses' data source
            	//and calcData2, the 'income' data source.
            	//Sum the range B2:B8 from expenses:
            	string sumExpenses = "= Sum(expenses!B2:expenses!B8)";
            	//Sum the range B2:B4 from income:
            	string sumIncome = "= Sum(income!B2:income!B4)";
            </code>
            <code lang="VB">
            	'Register three ICalcData objects so cell can be referenced across ICalcData objects:
            	Dim sheetfamilyID As Integer = CalcEngine.CreateSheetFamilyID();
            	myCalcEngine.RegisterGridAsSheet("summary", calcData1, sheetfamilyID)
            	myCalcEngine.RegisterGridAsSheet("income", calcData2, sheetfamilyID)
            	myCalcEngine.RegisterGridAsSheet("expenses", calcData3, sheetfamilyID)
            	....
            	'Sample formula usage for cells in calcData1, the 'summary' data source.
            	'This code sums ups some cells from calcData3, the 'expenses' data source
            	'and calcData2, the 'income' data source.
            	'Sum the range B2:B8 from expenses:
            	Dim sumExpenses As String = "= Sum(expenses!B2:expenses!B8)"
            	'Sum the range B2:B4 from income:
            	Dim sumIncome As String = "= Sum(income!B2:income!B4)"
            </code>
            </example>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RenameSheet(System.String,Syncfusion.Calculate.ICalcData)">
            <summary>
            Change the sheet name of <see cref="T:Syncfusion.Calculate.ICalcData"/> with the given name.
            </summary>
            <param name="sheetName">Name of the sheet.</param>
            <param name="model">The ICalcData object.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RegisterVariableNames(System.String[])">
            <summary>
            Registers a list of variable names so you can use it within formulas.
            </summary>
            <param name="list">List of names.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RemoveFunction(System.String)">
            <summary>
            A method that removes a function from the function library.
            </summary>
            <param name="name">The name of the function to be removed.</param>
            <returns>True if successfully removed, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RemoveNamedRange(System.String)">
            <summary>
            Removes a range from the NamedRanges collection.
            </summary>
            <param name="name">The name of the range to be removed.</param>
            <returns>True if successfully removed, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ResetSheetFamilyID">
            <summary>
            A method to reset the cached ICalcData object IDs.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ResetSheetIDs">
            <summary>
            Resets the internal sheet token marker to 0.
            </summary>
            <remarks>
            When RegisterGridAsSheet is called to add a ICalcData object to a CalcEngine,
            this newly added sheet is associated with an integer used in tokenizing formulas.
            This sheetID integer is required in the PullUpdatedValue method to specify the ICalcData
            object being accessed. The GetSheetID method allows you to retrieve a sheetID given
            an ICalcData object. This internal sheet token marker is a static member of CalcEngine,
            and is incremented each time a new ICalcData object is registered with the CalcEngine
            using RegisterGridAsSheet.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ResetVariableNames">
            <summary>
            Clears any variable names registered with the CalcEngine.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RowIndex(System.String)">
            <summary>
            A method to retrieve the row index from a cell reference.
            </summary>
            <param name="s">String holding a cell reference such as C21 or AB11.</param>
            <returns>An integer with the corresponding row number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLogest(System.String)">
            <summary>
            Returns the m parameter of the exponential curve y = b * m^x that best fits the given points. Only the first two Excel parameters are used.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>returns m parameter.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLogestb(System.String)">
            <summary>
            Returns the b value from the exponential curve y = b * m^x.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>returns calculated b value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StripTics(System.String)">
            <summary>
            Removes outer quote marks from a string with no inner quote marks.
            </summary>
            <param name="s">The string with possible outer quote marks.</param>
            <returns>The string with any outer quote marks removed.</returns>
            <remarks>This is a utility method that removes outer quotes on a string.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.TextIsEmpty(System.String)">
            <summary>
            Tests whether a string is NULL or empty.
            </summary>
            <param name="s">String to be tested.</param>
            <returns>True is passed in string is null or empty, otherwise False.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ToString">
            <summary>
            An overridden method to display information on the cell currently being calculated.
            </summary>
            <returns>String with information on the cell currently being calculated.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.UnregisterGridAsSheet(System.String,Syncfusion.Calculate.ICalcData)">
            <summary>
            Unregisters a grid so it can no longer be referenced in a formula from another grid.
            </summary>
            <param name="refName">The reference name used to refer to this grid from formulas in other grids.
            </param>
            <param name="model">The grid model.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.UpdateCalcID">
            <summary>
            A method that increases the calculation level of the CalcEngine.
            </summary>
            <remarks>Every formula has a calculation ID level associated with it. Every time
            a formula is retrieved, its calculation ID level is compared with the CalcEngine
            ID level. If they do not agree, the formula is recomputed. Calling UpdateCalcID
            will force any formula to be recomputed the next time it is retrieved.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.UpdateDependenciesAndCell(System.String)">
            <summary>
            Triggers a calculation for any value depending upon the given cell.
            </summary>
            <param name="cell1">The cell.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDate(System.String)">
            <summary>
            Returns the number of days since 01 Jan 1900.
            </summary>
            <param name="argList">Year, month, and day.</param>
            <returns>Number of days.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDatevalue(System.String)">
            <summary>
            Returns the number of days since 01 Jan 1900.
            </summary>
            <param name="argList">Text containing a date.</param>
            <returns>Number of days.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDay(System.String)">
            <summary>
            Returns the day of the serial number date.
            </summary>
            <param name="argList">Serial number date.</param>
            <returns>Day of the given date.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDays360(System.String)">
            <summary>
            Number of days between 2 dates using 360 day year.
            </summary>
            <param name="argList">Serial number date1, serial number date1 and method.</param>
            <returns>Days between the dates.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeYearFrac(System.String)">
            <summary>
            returns the fraction of the year represented by the number of whole days between two given dates
            </summary>
            <param name="argList">startDate, endDate, basis (optional)</param>
            <returns>returns the fraction of the year</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDays(System.String)">
            <summary>
            Returns the number of days between two dates.
            </summary>
            <param name="argList">startDate, endDate</param>
            <returns>Returns the number of days</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeEDate(System.String)">
            <summary>
            returns the date of given date after the specific month
            </summary>
            <param name="argList">startDate, months</param>
            <returns>returns the date</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeEOMonth(System.String)">
            <summary>
            Returns the last date of the date after the specific month of given date.
            </summary>
            <param name="argList">startDate, month</param>
            <returns>return the date.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWeeknum(System.String)">
            <summary>
            Returns the week number of a specific date
            </summary>
            <param name="argList">serial_number,start_day of week (optional)</param>
            1 or omitted - Sunday 
            2 Monday 
            11 Monday 
            12 Tuesday 
            13 Wednesday 
            14 Thursday 
            15 Friday  
            16 Saturday 
            17 Sunday 
            21 Monday 
            <returns>returns the week number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeISOWeeknum(System.String)">
            <summary>
            Returns ISO week number of the year for a given date
            </summary>
            <param name="argList">date</param>
            <returns>returns ISO week number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWorkDay(System.String)">
            <summary>
            returns the date of the given date after the number of working days 
            </summary>
            <param name="argList">startDate, days,  holidays (optional)</param>
            <returns>returns the date</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNetworkDays(System.String)">
            <summary>
            Returns the value of ComputeNetworkDays
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNetworkDaysintl(System.String)">
            <summary>
            Returns the number of whole workdays between two dates, week end and holidays are not consider as working days
            </summary>
            <param name="argList">start_date, end_date,weekend (optional), holidays (optional)</param>
            <returns>return the work days</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWorkDayintl(System.String)">
            <summary>
            Returns the serial number of the given date before or after a specified number of workdays
            </summary>
            <param name="argList">startDate, days, weekend (optional) , holidays (optional)</param>
            <returns>return the serial number of specific date.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHour(System.String)">
            <summary>
            Returns the hour of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Hour of given time.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMinute(System.String)">
            <summary>
            Returns the minute of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Minute of given time.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSecond(System.String)">
            <summary>
            Returns the second of the given time.
            </summary>
            <param name="argList">Given time.</param>
            <returns>Second of given time.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMonth(System.String)">
            <summary>
            Returns the month of the given date.
            </summary>
            <param name="argList">given time</param>
            <returns>Month of given date.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNow(System.String)">
            <summary>
            Returns the current date and time as a date serial number.
            </summary>
            <param name="argList">Parameter Ignored.</param>
            <returns>Current date and time as serial number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeToday(System.String)">
            <summary>
            Returns the current date as a date serial number.
            </summary>
            <param name="argList">Parameter Ignored.</param>
            <returns>Current date as date serial number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTime(System.String)">
            <summary>
            Returns a fraction of a day.
            </summary>
            <param name="argList">Hour, minute, and second.</param>
            <returns>Fraction of a day.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTimevalue(System.String)">
            <summary>
            Returns a fraction of a day.
            </summary>
            <param name="argList">Time as a text string.</param>
            <returns>Fraction of a day.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWeekday(System.String)">
            <summary>
            Day of the week.
            </summary>
            <param name="argList">Serial number date1 and return_type.</param>
            <returns>Days between the dates.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeYear(System.String)">
            <summary>
            Returns the year of the given date.
            </summary>
            <param name="argList">Given date.</param>
            <returns>Month of given date.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.BaseToBase(System.String,System.Int32,System.Int32)">
            <summary>
            Calculates the Output to the concerned base.
            </summary>
            <param name="argList">Data to be converted.</param>
            <param name="from">Base of the Given Data</param>
            <param name="to">Base to be obtained.</param>
            <returns>The data concerning to the base in 'to' parameter</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDec2Bin(System.String)">
            <summary>
            Computes the Binary value for the given Decimal Number.
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>Returns the calculated Binary value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDec2Oct(System.String)">
            <summary>
            Computes the Octal value for the given Decimal Number.
            </summary>
            <param name="argList">data to be converted.</param>
            <returns>Returns the calculated Octal value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDec2Hex(System.String)">
            <summary>
            Computes the Hexadecimal value for the given Decimal Number.
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>Returns the calculated Hexadecimal value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBin2Oct(System.String)">
            <summary>
            Computes the Octal Number for the given binary NUmber.
            </summary>
            <param name="argList">Input BinaryNumber</param>
            <returns>The resultant Octal Number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBin2Dec(System.String)">
            <summary>
            Computes the Decimal Number for the given binary NUmber.
            </summary>
            <param name="argList">Input BinaryNumber</param>
            <returns>The resultant Decimal Number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBin2Hex(System.String)">
            <summary>
            
            </summary>
            <param name="argList"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHex2Bin(System.String)">
            <summary>
            Computes the Binary value for the given Hexadecimal Data.
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>Returns the calculated Binary value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHex2Oct(System.String)">
            <summary>
            Computes the Octal Equivalent for the given Hexadecimal value
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>The calculated Octal value for the given. </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHex2Dec(System.String)">
            <summary>
            Computes the Decimal Equivalent for the given Hexadecimal value
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>The calculated Decimal value for the given.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOct2Bin(System.String)">
            <summary>
            Computes the Binary value for the given Octal Number.
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>Returns the calculated Binary value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOct2Hex(System.String)">
            <summary>
            Calculates the Hexadecimal equivalent value for the given Octal value
            </summary>
            <param name="argList">Data to be converted.</param>
            <returns>The Converted Hexadecimal value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOct2Dec(System.String)">
            <summary>
            Computes the Decimal Equivalent for the given Octal value
            </summary>
            <param name="argList">The Value to be converted to Decimal</param>
            <returns>The calculated value for the given  </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeReal(System.String)">
            <summary>
            Gets the Real part of the given Complex number.
            </summary>
            <param name="argList">Given complex number.</param>
            <returns>Real part of the given complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImaginary(System.String)">
            <summary>
            Gets the Imaginary part of the given Complex number.
            </summary>
            <param name="argList">Given complex number.</param>
            <returns>Imaginary part of the given complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImABS(System.String)">
            <summary>
            Returns the absolute value (modulus) of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The absolute value (modulus) of given complex number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImProduct(System.String)">
            <summary>
            Computes the Product of the given Complex Numbers
            </summary>
            <param name="argList">Input Complex Numbers</param>
            <returns>The multiplied result of the two complex numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeComplex(System.String)">
            <summary>
            Obtains the complex number for the given real and imaginary part.
            </summary>
            <param name="argList">Given real and Imaginary part.</param>
            <returns>The complex number derived from the real and imaginary part.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImSum(System.String)">
            <summary>
            Computes the sum of two complex number.
            </summary>
            <param name="argList">Parameter that is used for performing sum</param>
            <returns>The calculated sum of the numbers</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImSub(System.String)">
            <summary>
            Computes the Difference of two complex number.
            </summary>
            <param name="argList">Parameter that is used for performing Subtraction</param>
            <returns>The calculated difference of the numbers</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImConjugate(System.String)">
            <summary>
            Returns the complex conjugate of a complex number in x + yi or x + yj text format.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The complex conjugate of a complex number in x + yi or x + yj text format.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImDiv(System.String)">
            <summary>
            Computes the Division of the given Complex Numbers
            </summary>
            <param name="argList">Input Complex Numbers</param>
            <returns>The Divided result of the two complex numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImSqrt(System.String)">
            <summary>
            Returns the Square Root of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Square Root of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImArgument(System.String)">
            <summary>
            Returns the argument  (theta), an angle expressed in radians
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The argument  (theta), an angle expressed in radians</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMSin(System.String)">
            <summary>
             Returns the IMSin of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMSin of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImSinH(System.String)">
            <summary>
            Returns the Hyperbolic Sine value of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Hyperbolic Sine Value of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMCSC(System.String)">
            <summary>
             Returns the IMCSC of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMCSC of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMCos(System.String)">
            <summary>
             Returns the IMCos of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMCos of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMSEC(System.String)">
            <summary>
             Returns the IMSEC of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMSEC of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMTan(System.String)">
            <summary>
             Returns the IMTan of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMTan of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImCot(System.String)">
            <summary>
             Returns the IMCot of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMCot of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMCSCH(System.String)">
            <summary>
             Returns the IMCSCH of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMCSCH of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImCosH(System.String)">
            <summary>
            Returns the Hyperbolic Cos value of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Hyperbolic Cos Value of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMTanH(System.String)">
            <summary>
             Returns the IMTanH of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMTanH of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMCotH(System.String)">
            <summary>
             Returns the IMCotH of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMCotH of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMSecH(System.String)">
            <summary>
             Returns the IMSecH of the given Complex Number.
             </summary>
             <param name="argList">Input Complex Number</param>
             <returns>The IMSecH of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMLOG10(System.String)">
            <summary>
            Returns the LOG10 value of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Log10 of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMLOG2(System.String)">
            <summary>
            Returns the Log2 of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Log2 of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIMLN(System.String)">
            <summary>
            Returns the LOG value of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Log of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImEXP(System.String)">
            <summary>
            Returns the Exponent of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The Exponent of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeImPower(System.String)">
            <summary>
            Returns the power of the given Complex Number.
            </summary>
            <param name="argList">Input Complex Number</param>
            <returns>The power of the given Complex Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBitOr(System.String)">
            <summary>
            Computes the Bit OR of the given two numbers.
            </summary>
            <param name="argList">Input Numbersfor which the OR operations has to be performed.</param>
            <returns>Bit OR value of the given two numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBitXor(System.String)">
            <summary>
            Computes the Bit XoR of the given two numbers.
            </summary>
            <param name="argList">Input Numbersfor which the OR operations has to be performed.</param>
            <returns>Bit OR value of the given two numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBitAnd(System.String)">
            <summary>
            Computes the Bit AND of the given two numbers.
            </summary>
            <param name="argList">Input Numbersfor which the AND operations has to be performed.</param>
            <returns>Bit AND value of the given two numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBitLShift(System.String)">
            <summary>
            Computes the Bit Left Shift of the given number.
            </summary>
            <param name="argList">Input Numbersfor which the OR operations has to be performed.</param>
            <returns>Bit Left Shift value of the given number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBitRShift(System.String)">
            <summary>
            Computes the Bit Right Shift of the given number.
            </summary>
            <param name="argList">Input Numbersfor which the Bit Right Shift operations has to be performed.</param>
            <returns>Bit Right Shift value of the given number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeErf(System.String)">
            <summary>
             Returns the error function .
             </summary>
             <param name="argList">Input Number</param>
             <returns>The error function.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeErfCPrecise(System.String)">
            <summary>
             Returns the Complement of error function .
             </summary>
             <param name="argList">Input Number</param>
             <returns>The Complement of error function.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeErfPrecise(System.String)">
            <summary>
             Returns the error function .
             </summary>
             <param name="argList">Input Number</param>
             <returns>The error function.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBesselI(System.String)">
            <summary>
            Return the value of the ComputeBesselI 
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.besseli0(System.Double)">
            <summary>
            Return the value of besseli0
            </summary>
            <param name="x">value</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBesselJ(System.String)">
            <summary>
             Returns the BesselJ function of order n of the specified number.
             </summary>
             <param name="argList">Input Number</param>
             <returns>The BesselJ of the Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.j1(System.String)">
            <summary>
            Returns the Bessel function of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.j0(System.String)">
            <summary>
            Returns the Bessel function of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBesselY(System.String)">
            <summary>
             Returns the BesselY function of order n of the specified number.
             </summary>
             <param name="argList">Input Number</param>
             <returns>The BesselY of the Number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.y0(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 0 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.y1(System.Double)">
            <summary>
            Returns the Bessel function of the second kind, of order 1 of the specified number.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputebesselK(System.String)">
            <summary>
            Returns the value of ComputebesselK
            </summary>
            <param name="argList">arguments list</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConversion(System.String)">
            <summary>
            Returns the value of ComputeConversion
            </summary>
            <param name="argList">arguments list</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.LookupCachingClearAll">
            <summary>
            Clears all look up caches used in HLookUp and VLookUp calculations so they will be recreated the
            next time one of these functions is used.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.LookupCachingClearSheet(Syncfusion.Calculate.ICalcData)">
            <summary>
            Returns the value of Clearsheet
            </summary>
            <param name="grd">Icalcdata</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ReloadErrorStrings">
            <summary>
            Use this method to reset internal error strings if you make changes to <see cref="F:Syncfusion.Calculate.CalcEngine.FormulaErrorStrings"/>.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Determinant(System.Double[0:,0:],System.Int32)">
            <summary>
            Used to find the determinant internally for matrix function
            </summary>
            <param name="a">double array</param>
            <param name="k">array length</param>
            <returns>double value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.NormalProbabilityDensity(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Probabilitydistribution of the normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="mean">Mean of the distribution.</param>
            <param name="standardDeviation">Standard deviation of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Cofactor(System.Double[0:,0:],System.Int32,System.Double[0:,0:]@)">
            <summary>
            find the cofactor of matrix
            </summary>
            <param name="num"></param>
            <param name="f">array length</param>
            <param name="inverse">return the inverse matrix</param>
            <returns>return success state</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Inverse(System.Double[0:,0:],System.Double[0:,0:],System.Int32,System.Double[0:,0:]@)">
            <summary>
            To find the inverse of matrix
            </summary>
            <param name="num">matrix</param>
            <param name="fac">cofactor matrix</param>
            <param name="r">matrix length</param>
            <param name="inverse">Inveser matrix</param>
            <returns>Inverse Matrix</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ChiSquaredProbabilityDensityFunction(System.Double,System.Int32)">
            <summary>
            Chi-squared probability density function.
            </summary>
            <param name="x">The value at which the PDF is evaluated.</param>
            <param name="k">Degress of freedom, or number independent standard normal distributions.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.NormalCumulativeDistributionFunctionInverse(System.Double,System.Double,System.Double)">
             <summary>
             Returns the inverse of the CDF of the normal distribution.
             </summary>
             <param name="p">Cumulative probability of the distribution. 0 &lt;= p &gt;= 1.</param>
            <param name="mean">Mean of the distribution.</param>
             <param name="standardDeviation">Standard deviation of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalCumulativeDistributionInverse(System.Double)">
            <summary>
            Returns the inverse of the CDF of the standard normal distribution.
            </summary>
            <param name="p">Cumulative probability of the distribution. p is between 0 and 1.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNpv(System.String)">
            <summary>
            Computes the net present value an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period
            and a list of invested values.</param>
            <returns>Net present value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePmt(System.String)">
            <summary>
            Computes the payment for a loan.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period,
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Payment amount.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePpmt(System.String)">
            <summary>
            Computes the principal payment for a period.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period, the period,
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Principal payment.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePv(System.String)">
            <summary>
            Computes the present value of an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period,
            number of periods, payment per period, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Present value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRate(System.String)">
            <summary>
            Computes the internal rate of return of a series of cash flows.
            </summary>
            <param name="argList">Delimited string containing a range of cells and an initial guess.</param>
            <returns>Internal rate of return.</returns>
            <remarks>
            This IRR calculation uses Newton's method to approximate a root of
                      f(r) = Sum( values[i]/(1+r)^i) = 0
            where the Sum index is i = 1 to the number of values. The algorithm returns a value if
            the relative difference between root approximations is less than 1e-7. It fails if this
            accuracy is not attained in 20 iterations.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSln(System.String)">
            <summary>
            Computes the straight-line depreciation of an asset per period.
            </summary>
            <param name="argList">Delimited string containing the cost,
            salvage value, and life.</param>
            <returns>Depreciation of the asset.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSyd(System.String)">
            <summary>
            Computes the sum of years digits depreciation of an asset per period.
            </summary>
            <param name="argList">Delimited string containing the cost,
            salvage value, life, and period.</param>
            <returns>Depreciation for the requested period.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVdb(System.String)">
            <summary>
            Computes the variable declining balance of an asset.
            </summary>
            <param name="argList">Delimited string containing the initial cost,
            salvage value, life of asset, period of calculation, and factor.</param>
            <returns>Variable declining balance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDollarDe(System.String)">
            <summary>
            Converts a number to text using currency format.
            </summary>
            <param name="args">Number and the number of digits.</param>
            <returns>Currency format string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDollarFr(System.String)">
            <summary>
            Converts a number to text using currency format.
            </summary>
            <param name="args">Number and the number of digits.</param>
            <returns>Currency format string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDuration(System.String)">
            <summary>
             Returns the weighted average of the present value of the cash flows
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Number of years</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeACCRINTM(System.String)">
            <summary>
            Calculates the accrued interest of a security that pays interest at maturity.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Accrued interest</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRRI(System.String)">
            <summary>
            Calculates the equivalent interest rate for the growth of an investment.
            </summary>
            <param name="args">Investment periods, present and future value of the investments.</param>
            <returns>Returns the equivalent interest.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFvschedule(System.String)">
            <summary>
            Returns the future value of an initial principal after applying a series of compound interest rates.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Number of future value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIntrate(System.String)">
            <summary>
             Returns the interest rate for a fully invested security.
            </summary>
            <param name="argList">Number and the number of digits</param>
            <returns>Rate of interest</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDisc(System.String)">
            <summary>
             Returns the discount rate for a security.
            </summary>
            <param name="args">Number and the number of digits</param>
            <returns>Rate of Discount</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFv(System.String)">
            <summary>
            Computes the future value of an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period,
            number of periods, payment per period, present value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Future value of the investment.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIpmt(System.String)">
            <summary>
            Computes the interest payment for a period.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period, the period,
            number of periods, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Interest payment.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIrr(System.String)">
            <summary>
            Computes the internal rate of return of a series of cash flows.
            </summary>
            <param name="argList">Delimited string containing a range of cells and an initial guess.</param>
            <returns>Internal rate of return.</returns>
            <remarks>
            This IRR calculation uses Newton's method to approximate a root of
                      f(r) = Sum( values[i]/(1+r)^i) = 0
            where the Sum index is i = 1 to the number of values. The algorithm returns a value if
            the relative difference between root approximations is less than 1e-5. It fails if this
            accuracy is not attained in 20 iterations.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeXirr(System.String)">
            <summary>
             Computes the internal rate of return for a schedule of possibly non-periodic cash flows.
            </summary>
            <param name="argList">A list of two or three arguments. The first argument contains a range of cash flows, the second argument
            contains a list of corresponding date serial number values, and the third argument contains an initial guess at the return value.</param>
            <returns>The internal rate of return.</returns>
            <remarks>The computation uses a root finding algorithm. If the algorithm does not converge to a result within 100 iterations,
            an error is returned. The convergence requirement is an absolute error of 0.000001. The first date must be the earliest date,
            and the dates must be date serial numbers. Also, there must be at least one positive cash flow and at least one negative cash
            flow in the cash flow values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIspmt(System.String)">
            <summary>
            Computes the simple interest payment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period, the period,
            number of periods, and present value.</param>
            <returns>Simple interest payment.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMirr(System.String)">
            <summary>
            Computes the modified internal rate of return of a series of cash flows.
            </summary>
            <param name="argList">Delimited string containing a range of cells,
            finance interest rate, and a reinvested interest rate.</param>
            <returns>Modified internal rate of return.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNper(System.String)">
            <summary>
            Computes the number of periods an investment.
            </summary>
            <param name="argList">Delimited string containing the rate as percentage per period,
            payment per period, present value, future value, and payment type (0 = end of period, 1 = start of period).</param>
            <returns>Number of periods.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAddress(System.String)">
            <summary>
            this function used to obtain the address of a cell in a worksheet, given specified row and column numbers
            </summary>
            <param name="argList">The argList contain the row and column postion and type of reference</param>
            <returns>Address of the given row and column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCell(System.String)">
            <summary>
            Return the information about cell
            </summary>
            <param name="arg">content, reference</param>
            <returns>Cell information</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeInfo(System.String)">
            <summary>
            Returns the current operation environment information
            </summary>
            <param name="argList">Type</param>
            <returns>environment information</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeType(System.String)">
            <summary>
            Returns the interger value for the datatype of given text
            </summary>
            <param name="argList">text</param>
            <returns>integer value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsFormula(System.String)">
            <summary>
            Return the value of ComputeIsFormula
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHLookUp(System.String)">
            <summary>
            Returns a horizontal table look up value.
            </summary>
            <param name="range">Contains search value, table, return index and match properties.</param>
            <returns>Matching value found in the table.</returns>
            <remarks> For example, =HLOOKUP("Axles",A1:C4,2,TRUE) looks for the exact
            match for Axles in A1:C1 and returns the corresponding value in A2:C2.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMatch(System.String)">
            <summary>
            Finds the index a specified value in a lookup_range.
            </summary>
            <param name="arg">look_value, lookup_range, match_type</param>
            <returns>The relative index of the lookup_value in the lookup_range.</returns>
            <remarks>
            Lookup_range should be a either a single row range or a single column range.
            If match_type is 0, the relative index of the first exact match (ignoring case)
            in the specified range is returned. If match_type is 1, the values in the range
            should be in ascending order, and the index of the largest value less than or
            equal to the lookup_value is returned. If match_type is -1, the values in the range
            should be in descending order, and the index of the smallest value greater than or
            equal to the lookup_value is returned.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetResultRange(System.String,System.String)">
            <summary>
            Below method is used to returns the cellrange while the lookup vector is cellrange and result vector is cell(eg:=LOOKUP(2,D7:I7,A1)).
            </summary>
            <param name="lookupRange"> lookup vectors value.</param>
            <param name="resultRange"> result vectors value.</param>
            <returns>Returns the cellrange of result vector. </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLookUp(System.String)">
            <summary>
            Returns a value from result table either from a one-row or one-column range or from an array 
            </summary>
            <param name="range">Lookup Value, lookup range, result range</param>
            <returns>Matching value found in the table</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVLookUp(System.String)">
            <summary>
            Returns a vertical table look up value.
            </summary>
            <param name="range">Contains search value, table, return index and match properties.</param>
            <returns>Matching value found in the table.</returns>
            <remarks> For example, =VLOOKUP("Axles",A1:C4,2,TRUE) looks for the exact
            match for Axles in A1:A4 and returns the corresponding value in B1:B4.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLeft(System.String)">
            <summary>
            Returns the left so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A left sub string..</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLen(System.String)">
            <summary>
            Returns the length of the given string.
            </summary>
            <param name="range">Contains the string.</param>
            <returns>An integer length.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMid(System.String)">
            <summary>
            Returns a substring of the given string.
            </summary>
            <param name="range">Contains the original string, start position of the substring,
            and the number of characters in the substring.</param>
            <returns>A substring.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRight(System.String)">
            <summary>
            Returns the right so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A right substring.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.IsSeparatorInTIC(System.String)">
            <summary>
            Returns True if the ParseArgumentSeparator character is included in a string.
            </summary>
            <param name="s">The string to be searched.</param>
            <returns>True or False.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GetStringArray(System.String)">
            <summary>
            Returns an array of strings from an argument list.
            </summary>
            <param name="s">A delimited argument list.</param>
            <returns>Array of strings from an argument list.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConcatenate(System.String)">
            <summary>
            Returns a single character string.
            </summary>
            <param name="range">List of strings to be concatenated.</param>
            <returns>A single string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIndirect(System.String)">
            <summary>
            Returns the reference specified by a text string. References are immediately evaluated to display their contents.
            <para>Syntax: INDIRECT(CellRefString, [IsA1Style])</para>
            </summary>
            <param name="args">Cell reference string.</param>
            <returns>Cell reference.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSubstitute(System.String)">
            <summary>
            In a given string, this method substitutes an occurrence of one string with another string.
            </summary>
            <param name="range">A list of 3 or 4 arguments: the original string, the search string, the
            replacement string, and optionally, an integer representing the occurrence to be replaced.
               </param>
            <returns>The modified string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeText(System.String)">
            <summary>
            Returns a quoted string from a date or number.
            </summary>
            <param name="range">Value to be converted to a string.</param>
            <returns>Quoted string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTextJoin(System.String)">
            <summary>
            The TEXTJOIN function combines the text from multiple ranges and/or strings, and includes a delimiter you specify between each text value that will be combined. If the delimiter is an empty text string, this function will effectively concatenate the ranges.
            </summary>
            <param name="range">A text string, or array of strings, such as a range of cells.</param>
            <returns>A single string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConcat(System.String)">
            <summary>
            The CONCAT function combines the text from multiple ranges and/or strings, but it doesn't provide the delimiter or IgnoreEmpty arguments.
            </summary>
            <param name="range">Text item to be joined. A string, or array of strings, such as a range of cells.</param>
            <returns>A single string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeValue(System.String)">
            <summary>
            Returns a number.
            </summary>
            <param name="range">A date or number string.</param>
            <returns>A number in the given string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMod(System.String)">
            <summary>
            Returns the remainder after dividing one number by another.
            </summary>
            <param name="range">Two numbers in a list.</param>
            <returns>The remainder.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTrunc(System.String)">
            <summary>
            Truncates a number to an integer.
            </summary>
            <param name="range">Value and number of digits.</param>
            <returns>Truncated value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumProduct(System.String)">
            <summary>
            Returns the sum of the products of corresponding values.
            </summary>
            <param name="range">Two cell ranges.</param>
            <returns>Sum of the products.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDollar(System.String)">
            <summary>
            Converts a number to text using currency format.
            </summary>
            <param name="args">Number and the number of digits.</param>
            <returns>Currency format string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFixed(System.String)">
            <summary>
            Rounds a number to the specified number of decimals, formats the number
            in decimal format using a period and commas, and return the result as text.
            </summary>
            <param name="args">
            Number, number of digits, a flag that prevents from include
            commas in the returned text.
            </param>
            <returns>Formatted number as string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChoose(System.String)">
            <summary>
            Returns the value at the specified index from a list of values.
            </summary>
            <param name="arg">A string of the form "Index, Value1, Value2,..." in which the term 'Index' denotes the index of the value to be retrieved.</param>
            <returns>The selected value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLower(System.String)">
            <summary>
            Converts text to lowercase.
            </summary>
            <param name="args">Value to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeUpper(System.String)">
            <summary>
            Converts text to uppercase.
            </summary>
            <param name="args">Value to convert.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeT(System.String)">
            <summary>
            Returns the string or text referred by the given value.
            </summary>
            <param name="args">value to find the referred text - Required </param>
            <returns>Returns the referred text</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeColumn(System.String)">
            <summary>
            Returns the column index of the passed in cell reference.
            </summary>
            <param name="arg">Contains zero or one argument. If no argument is passed, returns the column index of the
            location of this Column function call, otherwise returns the column index of the passed in cell reference.</param>
            <returns>The column index.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRow(System.String)">
            <summary>
            Returns the row index of the passed in cell reference.
            </summary>
            <param name="arg">Contains zero or one argument. If no argument is passed, returns the row index of the
            location of this Row function cell, otherwise returns the row index of the passed in cell reference.</param>
            <returns>The row index.</returns>
            <remarks>
            This method doesn't return an array of row numbers as the array formula entry is not supported in engine. It is another usecase of this library function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeN(System.String)">
            <summary>
            Returns a number converted from the provided value.
            </summary>
            <param name="args">Value to be converted.</param>
            <returns>A number in string format or an error string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNA(System.String)">
            <summary>
            Returns the error value(#N/A). Used internally.
            </summary>
            <param name="args">empty string.</param>
            <returns>error value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNA">
            <summary>
            Returns the error value (#N/A - value not available).
            </summary>
            <returns>error value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeErrorType(System.String)">
            <summary>
             Returns a number corresponding to the predefined error values(#NULL!, #VALUE!, #REF!, #NAME?, #NUM!, #N/A, "#GETTING_DATA). Returns #N/A if not or any value enclosed within double quotes.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTrim(System.String)">
            <summary>
            Removes all leading and trailing white-space characters.
            </summary>
            <param name="args">Value to trim.</param>
            <returns>
            The string that remains after all leading and trailing white-space characters
            were removed.
            </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsLogical(System.String)">
            <summary>
            Determines whether the value is a logical value.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is a logical value, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsNA(System.String)">
            <summary>
            Determines whether the value is the #NA error value.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is the #NA error value, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsErr(System.String)">
            <summary>
            Returns True is the string denotes an error except #N/A.
            </summary>
            <param name="range">Value to be tested.</param>
            <returns>True if the value is an error except #N/A, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsBlank(System.String)">
            <summary>
            Determines whether the value is empty string.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is empty, False otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsText(System.String)">
            <summary>
            Determines whether the value is string or not.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is a string, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsNonText(System.String)">
            <summary>
            Determines whether the value is not a string.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True if the value is not a string, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAnd(System.String)">
            <summary>
            Returns the And of all values treated as logical values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers. Each item in the list is considered True if it is nonzero
            and False if it is zero.</param>
            <returns>A string holding the And of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIFS(System.String)">
            <summary>
            The IFS function checks whether one or more conditions are met and returns a value that corresponds to the first TRUE condition. IFS can take the place of multiple nested IF statements, and is much easier to read with multiple conditions.
            </summary>
            <param name="args">A string holding [Something is True1, Value if True1, [Something is True2, Value if True2],…[Something is True127, Value if True127]</param>
            <returns>Returns a value that corresponds to the first TRUE condition</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSwitch(System.String)">
            <summary>
            The SWITCH function evaluates an expression against a list of values and returns the result corresponding to the first matching value. If there is no match, an optional default value may be returned.
            </summary>
            <param name="args">A string holding expression, value1, result1, [default or value2, result2],…[default or value3, result3]</param>
            <returns>Returns the result corresponding to the first matching value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOr(System.String)">
            <summary>
            Returns the inclusive Or of all values treated as logical values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers. Each item in the list is considered True if it is nonzero
            and False if it is zero.</param>
            <returns>A string holding the Or of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNot(System.String)">
            <summary>
             Flips the logical value represented by the argument.
            </summary>
            <remarks>
            The argument is
            treated as a logical expression with a non-zero value considered True and a zero value considered False.
            </remarks>
            <param name="args">A string holding either a single argument consisting of a
            cell reference, formula, or number.
            </param>
            <returns>Returns 0 if the argument evaluates to a non-zero value. Otherwise, it returns 1.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOffSet(System.String)">
            <summary>
            Returns a range that is the offset of the reference range by rows and cols.
            </summary>
            <param name="arg">reference, rows, cols, [height], [width]</param>
            <returns>A range offset.</returns>
            <remarks>The returned range is the range passed in through the reference variable offset
            by the number of rows in the rows variable and number of columns in the cols variable. If height and
            width are present in the argument list, they determine the number of rows and columns
            in the returned range. Otherwise, the dimensions of the returned range match the input range.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTrue(System.String)">
            <summary>
            Returns the logical value True.
            </summary>
            <param name="empty">Empty string.</param>
            <returns>Logical True value string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFalse(System.String)">
            <summary>
            Returns the logical value False.
            </summary>
            <param name="empty">Empty string.</param>
            <returns>Logical False value string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAcos(System.String)">
            <summary>
            Computes angle whose cosine is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding an angle whose cosine is the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeArabic(System.String)">
            <summary>
            Returns the Arabic value of Raman numeric
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAreas(System.String)">
            <summary>
            Returns the area of the passed in cell reference range
            </summary>
            <param name="arg">Contains one argument - reference</param>
            <returns>area of the passed in cell reference.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAsin(System.String)">
            <summary>
            Computes angle whose sine is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding an angle whose sine is the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAsinh(System.String)">
            <summary>
            The inverse of Sinh.
            </summary>
            <param name="args">The given value.</param>
            <returns>Result of ASinh(value).</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAtan(System.String)">
            <summary>
            Computes angle whose tangent is the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAtan2(System.String)">
            <summary>
            The ArcTangent of the x and y values.
            </summary>
            <param name="argList">x_value and y_value.</param>
            <returns>Angle whose tangent is y_value/x_value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAtanh(System.String)">
            <summary>
            The inverse of Tanh.
            </summary>
            <param name="args">|Value| &lt; 1.</param>
            <returns>Result of ATanh(value).</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCeiling(System.String)">
            <summary>
            Computes the smallest whole number greater than or equal to the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the smallest whole number greater than or equal to the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCeilingMath(System.String)">
            <summary>
            Returns the RoundUp of the given number to the given significance
            </summary>
            <param name="args">Number, significance, mode</param>
            <returns>RoundUp number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeColumns(System.String)">
            <summary>
            Returns the number of columns of the passed in cell reference.
            </summary>
            <param name="arg">Contains one argument - reference</param>
            <returns>number of columns.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCombin(System.String)">
            <summary>
            The number of combinations of a given number of items.
            </summary>
            <param name="argList">Number, number_items.</param>
            <returns>The number of combinations.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCombinA(System.String)">
            <summary>
            Returns the value of ComputeCombinA
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLog(System.String)">
            <summary>
            Computes the natural logarithm of the value in the argument.
            </summary>
            <param name="argList">A cell reference, formula, or number.</param>
            <returns>A string holding the natural logarithm of the value in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLog10(System.String)">
            <summary>
            Computes the base 10 logarithm of the value in the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the base 10 logarithm of the value in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeExp(System.String)">
            <summary>
            Computes e raised to the value of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the e raised to the value of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSqrtpi(System.String)">
            <summary>
            Returns the square root of product of given number with PI.
            </summary>
            <param name="args">Number</param>
            <returns>Sqrtpi value of given number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSqrt(System.String)">
            <summary>
            Computes the square root of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the square root of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAbs(System.String)">
            <summary>
            Computes the absolute value of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the absolute value of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCos(System.String)">
            <summary>
            Computes the cosine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the cosine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAcosh(System.String)">
            <summary>
            The inverse of Cosh.
            </summary>
            <param name="args">Value >= 1.</param>
            <returns>Result of ACosh(value).</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRand(System.String)">
            <summary>
            Returns an evenly distributed random number &gt;= 0 and &lt; 1.
            </summary>
            <param name="args">Ignored. Can be empty.</param>
            <returns>
            A string holding the random number.
            </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTan(System.String)">
            <summary>
            Computes the tangent the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTanh(System.String)">
            <summary>
            Computes the hyperbolic tangent of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic tangent of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CheckCriteria(System.Char,System.String,System.String)">
            <summary>
            Checks if value of S mets the Criteria or Not.
            </summary>
            <param name="op">Operator</param>
            <param name="s">Cell</param>
            <param name="criteria">The String value to be compared</param>
            <returns> True if Value of S equals Criteria Otherwise False</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.CheckCriteria(System.Char,System.String,System.Double)">
            <summary>
            Checks if value of S mets the Criteria or Not.
            </summary>
            <param name="op">Operator</param>
            <param name="s">Cell</param>
            <param name="compare">The double value to be compare</param>
            <returns> True if Value of S mets Criteria Otherwise returns False</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumif(System.String)">
            <summary>
            Sums the cells specified by some criteria.
            </summary>
            <param name="argList">The criteria range, the criteria, and the sum range.</param>
            <returns>A string holding the sum.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAsc(System.String)">
            <summary>
            Used to compute the value
            </summary>
            <param name="arg">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAcot(System.String)">
            <summary>
            Returns the arccotangent of a number.
            </summary>
            <param name="argList">A cell reference or number</param>
            <returns>A string containing the arccotangent of a number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAcoth(System.String)">
            <summary>
            Returns the hyperbolic arccotangent of a number.
            </summary>
            <param name="argList">A cell reference or number</param>
            <returns>A string containing the hyperbolic arccotangent of a number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAsech(System.String)">
            <summary>
             Returns the archyperbolic secant of an angle.
            </summary>
            <param name="argList">A cell reference or a number</param>
            <returns>A string containing the archyperbolic secant of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBase(System.String)">
            <summary>
            Retuns the number into text for the given radix base
            </summary>
            <param name="argList"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCosh(System.String)">
            <summary>
            Computes the hyperbolic cosine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic cosine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCot(System.String)">
            <summary>
            Returns the hyperbolic cosine of a number.
            </summary>
            <param name="argList">A cell reference or a number</param>
            <returns>A string containing the hyperbolic cosine of a number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCoth(System.String)">
            <summary>
            Returns the cotangent of an angle.
            </summary>
            <param name="argList">A cell reference or a number</param>
            <returns>A string containing the cotangent of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCsc(System.String)">
            <summary>
             Returns the cosecant of an angle
            </summary>
            <param name="argList">a cell reference or number</param>
            <returns>A string containing the cosecant of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCsch(System.String)">
            <summary>
            Returns the hyperbolic cosecant of an angle.
            </summary>
            <param name="argList"></param>
            <returns>A string containing the hyperbolic cosecant of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDecimal(System.String)">
            <summary>
            Returns the decimal number of the given text to the given base.
            </summary>
            <param name="argList">text,base</param>
            <returns>Decimal number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDegrees(System.String)">
            <summary>
            Converts radians into degrees.
            </summary>
            <param name="args">Value in radians.</param>
            <returns>Degrees for the given radians.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeEven(System.String)">
            <summary>
            Rounds up to larger in magnitude even number.
            </summary>
            <param name="args">Number to be rounded.</param>
            <returns>Rounded even value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFact(System.String)">
            <summary>
            Factorial of a given number.
            </summary>
            <param name="args">The given value, x.</param>
            <returns>Factorial of x.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFactdouble(System.String)">
            <summary>
            Returns the Double factorial value for given number.
            </summary>
            <param name="args">number to find FactDouble</param>
            <returns>FactDouble of given number. </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFloor(System.String)">
            <summary>
            Computes the largest whole number less than or equal to the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the largest whole number less than or equal to the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFormulaText(System.String)">
            <summary>
            Return the value of ComputeFormulaText
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGcd(System.String)">
            <summary>
            Returns the largest integer that divide the given numbers without any reminders.
            </summary>
            <param name="range">number1,number2,...</param>
            <returns>Returns the GCD value of given arguments</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHyperlink(System.String)">
            <summary>
            Create a shortcut for the link / path
            </summary>
            <param name="argList">link,name</param>
            <returns>shortcut name</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeInt(System.String)">
            <summary>
            Returns the integer value.
            </summary>
            <param name="range">Number to be truncated.</param>
            <returns>An integer.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsEven(System.String)">
            <summary>
            Determines whether the value is even or not.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True, if the value is even, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsNumber(System.String)">
            <summary>
            Determines whether the string contains a number or not.
            </summary>
            <param name="range">String to be tested.</param>
            <returns>True if the string is a number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIsOdd(System.String)">
            <summary>
            Determines whether the value is odd or not.
            </summary>
            <param name="args">Value to be tested.</param>
            <returns>True, if the value is odd, false otherwise.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLcm(System.String)">
            <summary>
            returns the smallest positive integer that is a multiple of all given values.
            </summary>
            <param name="range">Number1,Number2,...</param>
            <returns>The LCM value of given aruments</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLn(System.String)">
            <summary>
            Computes the natural logarithm of the value in the argument.
            </summary>
            <param name="argList">A cell reference, formula, or number.</param>
            <returns>A string holding the natural logarithm of the value in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMdeterm(System.String)">
            <summary>
            Returns the number of columns of the passed in cell reference.
            </summary>
            <param name="arg">Contains one argument - reference</param>
            <returns>number of columns.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMInverse(System.String)">
            <summary>
            Returns the number of columns of the passed in cell reference.
            </summary>
            <param name="arg">Contains one argument - reference</param>
            <returns>number of columns.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMmult(System.String)">
            <summary>
            Returns the number of columns of the passed in cell reference.
            </summary>
            <param name="arg">Contains one argument - reference</param>
            <returns>number of columns.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMround(System.String)">
            <summary>
            Determines the number rounded to the given multiple.
            </summary>
            <param name="argList">Number, Multible both are required</param>
            <returns>Mround value of given number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMultinomial(System.String)">
            <summary>
            Determines the Multinominal value of given range of numbers.
            </summary>
            <param name="range">Given numbers</param>
            <returns>Multinominal value of given range of numbers.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMUnit(System.String)">
            <summary>
             Returns the number of columns of the passed in cell reference.
             </summary>
             <param name="arg">Contains one argument - reference</param>
             <returns>number of columns.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeOdd(System.String)">
            <summary>
            Rounds up to larger in magnitude odd number.
            </summary>
            <param name="args">Number to be rounded.</param>
            <returns>Rounded odd value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePI(System.String)">
            <summary>
            Returns the number pi.
            </summary>
            <param name="args">Ignored. Can be empty.</param>
            <returns>A string holding the number pi.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePow(System.String)">
            <summary>
            Returns a specified number raised to the specified power.
            </summary>
            <param name="args">String containing two parameters separated by commas:
            the first being base number,
            the second being the exponent.</param>
            <returns>A string holding the value of the base number raised to the exponent.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeProduct(System.String)">
            <summary>
            Returns the product of the arguments in the list.
            </summary>
            <param name="range">List of arguments.</param>
            <returns>Product of the arguments.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeQuotient(System.String)">
            <summary>
            Returns the integer portion of division function.
            </summary>
            <param name="range">numerator, denominator to find the quotient</param>
            <returns>returns integer value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRadians(System.String)">
            <summary>
            Converts degrees into radians.
            </summary>
            <param name="args">Value in degrees.</param>
            <returns>Radians for the given degrees.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRoman(System.String)">
            <summary>
            Returns the arabic numeral to roman in TEXT format
            </summary>
            <param name="argList">Number, Form for style of roman text. 
            0 or omitted Classic. 
            1 More concise.  
            2 More concise.
            3 More concise.
            4 Simplified. 
            TRUE Classic. 
            FALSE Simplified. 
            </param>
            <returns>Retuns the Roman string of given numeric value based on the style form</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRound(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRounddown(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRoundup(System.String)">
            <summary>
            Rounds a number to a specified number of digits.
            </summary>
            <param name="argList">Number and number of digits.</param>
            <returns>Rounded number.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRows(System.String)">
            <summary>
            Returns the number of rows of the passed in cell reference.
            </summary>
            <param name="arg">Contains one argument.</param>
            <returns>number of rows.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSecant(System.String)">
            <summary>
            Returns the secant of an angle.
            </summary>
            <param name="argList"> A cell reference, or number.</param>
            <returns>A string conaining the secant of an angle</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSecanth(System.String)">
            <summary>
            Returns the hyperbolic secant of an angle.
            </summary>
            <param name="argList">A cell reference, or number</param>
            <returns>A string containing the hyperbolic secant of an angle.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSheet(System.String)">
            <summary>
            return the sheet number of the given value 
            </summary>
            <param name="argList">SheetName or cell or named range </param>
            <returns>sheet number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSheets(System.String)">
            <summary>
            return the sheet number of the given values 
            </summary>
            <param name="argList">SheetName or cell or named range </param>
            <returns>sheet number</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSign(System.String)">
            <summary>
            Returns a number indicating the sign of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding a number representing the sign of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSin(System.String)">
            <summary>
            Computes the sine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the sine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSinh(System.String)">
            <summary>
            Computes the hyperbolic sine of the argument.
            </summary>
            <param name="args">A cell reference, formula, or number.</param>
            <returns>A string holding the hyperbolic sine of the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSum(System.String)">
            <summary>
            Returns the sum of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the sum of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumIFS(System.String)">
            <summary>
            Returns the sum of all the cells in a range which is statisfy the given multible criteria
            </summary>
            <param name="argList">range of cells, criteria1, average_range1,...</param>
            <returns>returns the sum value of the cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumsq(System.String)">
            <summary>
            Returns the sum of the square of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the sum of the squares of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumx2my2(System.String)">
            <summary>
            Returns the sum of the differences of squares of the two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the differences of squares.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumx2py2(System.String)">
            <summary>
            Returns the sum of the sums of squares of the two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the sums of squares.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSumxmy2(System.String)">
            <summary>
            Returns the sum of the squares of the differences between two ranges.
            </summary>
            <param name="range">x_range and y_range.</param>
            <returns>A string holding sum of the squares of the differences.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTranspose(System.String)">
            <summary>
            Returns the vertical range of cells as a horizontal range, or vice versa
            </summary>
            <param name="arg">Cell refrences</param>
            <returns>value</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTruncate(System.String)">
            <summary>
            Returns the value of computeTruncate
            </summary>
            <param name="argList">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Covariance(System.Double[],System.Double[])">
            <summary>
            Returns the sample covariance between two arrays.
            Arrays should be of equal length, and contain more than one element.
            </summary>
            <param name="array1"></param>
            <param name="array2"></param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Mean(System.Double[])">
            <summary>
            Returns the mean of an array.
            </summary>
            <param name="array">Array of data for which we are calculating the mean.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Mean(System.Double[],System.Double)">
            <summary>
            Returns the mean of an array.
            </summary>
            <param name="array">Array of data for which we are calculating the mean.  For time series, the last element (index = n-1), is the most recent.</param>
            <param name="decayFactor">In most applications, the decay factor is between 0 and 1.  Weigth on the last element in array is 1.0, the 2nd to last element d, 3rd to last d^2, ...</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.InverseSumOfGeometricSeries(System.Double,System.Int32)">
            <summary>
            Returns the inverse of the sum of a geometric series of length n, who's first element is 1.
            For decay factor d, S = 1 + d + d^2 + ... + d^(n-1). Return 1/S.
            </summary>
            <param name="decayFactor">Decay factor Typically between -1 adn +1.</param>
            <param name="length">Number of elements in the geometric series, must be positive.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaLn(System.Double)">
            <summary>
            Calculates the natural logarithm of gamma function.
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAvedev(System.String)">
            <summary>
            Returns the average deviation of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the average deviation of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAveragea(System.String)">
            <summary>
            Returns the simple average of all values (including text) listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the simple average of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAverageIFS(System.String)">
            <summary>
            Returns the average of all the cells in a range which is statisfy the given multible criteria
            </summary>
            <param name="argList">range of cells, criteria1, average_range1,...</param>
            <returns>returns the average value of the cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChidist(System.String)">
            <summary>
            Returns the chi-squared distribution.
            </summary>
            <param name="argList">x, degrees of freedom.</param>
            <returns>The chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGrowth(System.String)">
            <summary>
            Returns the growth estimate using the exponential curve y = b * m^x that best fits the given points. Only the first two Excel parameters are used.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>returns estimated value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLogestMB(System.Double[],System.Double[],System.Double@,System.Double@)">
            <summary>
            Returns the m and b value used in exponential curve y = b * m^x.
            </summary>
            <param name="y">The set of y-values required in y = b*m^x</param>
            <param name="x">The set of x-values in y = b*m^x</param>
            <param name="b">output of b</param>
            <param name="m">output of m</param>
            <returns>returns calculated b value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammaln(System.String)">
            <summary>
            Returns the natural logarithm of the gamma function.
            </summary>
            <param name="argList">The value to be evaluated.</param>
            <returns>The natural logarithm of the gamma function.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChiinv(System.String)">
            <summary>
            Returns the inverse of the chi-squared distribution.
            </summary>
            <param name="argList">x, degrees of freedom.</param>
            <returns>The inverse of the chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChitest(System.String)">
            <summary>
            Returns the Chi Test for independence.
            </summary>
            <param name="range">Actual_range, expected_range.</param>
            <returns>Result of Chi Test: y-intercept.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormdist(System.String)">
            <summary>
            Returns the normal distribution.
            </summary>
            <param name="argList">x, mean, standarddev, cumulative.</param>
            <returns>The normal distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. The distribution value
            is computed interactively using Trapezoidal Rule to six to seven significant digits
            or 20 iteration maximum.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormsDist(System.String)">
            <summary>
            Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one.
            <para>Syntax: NORMSDIST(z)</para>
            </summary>
            <param name="argList">Z is the value for which you want the distribution.</param>
            <returns>Standard normal cumulative distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNorminv(System.String)">
            <summary>
            Returns the inverse of normal distribution.
            </summary>
            <param name="argList">P, mean, standard deviation.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.newnormalinv(System.Double)">
            <remarks>
             Enabled only when ExcelLikeComputations property is set to true.
             </remarks>
             <summary>
             Computes the inverse normal cumulative distribution for the given probability.
             </summary>
             <param name="p">probability</param>
             <returns>a double value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormsInv(System.String)">
            <summary>
            Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.
            <para>Syntax: NORMSINV(p)</para>
            </summary>
            <param name="argList">p is a probability corresponding to the normal distribution.</param>
            <returns>Inverse of standard normal cumulative distribution.</returns>
            <remarks>
            p should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConfidence(System.String)">
            <summary>
            Returns a confidence interval radius.
            </summary>
            <param name="argList">Alpha, standard deviation, size.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCorrel(System.String)">
            <summary>
            Returns the correlation coefficient of the two sets of points.
            </summary>
            <param name="range">range1, range2.</param>
            <returns>Correlation coefficient.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCount(System.String)">
            <summary>
            Returns the count of all values (including text) listed in the argument to
            evaluate to a number.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of all numerical values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCounta(System.String)">
            <summary>
            Returns the count of all values (including text) listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCountblank(System.String)">
            <summary>
            Returns the count of blank cells listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the count of blank cells listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCountif(System.String)">
            <summary>
            Counts the cells specified by some criteria.
            </summary>
            <param name="argList">The criteria range, the criteria.</param>
            <returns>Number of cells meeting the criteria.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCountIFFunctions(System.String,System.Boolean)">
            <summary>
            Calculates the CountIF and CountIFS formula
            </summary>
            <param name="argList"> The criteria range, the criteria</param>
            <param name="isCountif"> If true, calculate CountIF formula. Else calculate CountIFS formula.</param>
            <returns>Number of cells meeting the criteria.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCOUNTIFS(System.String)">
            <summary>
            The COUNTIFS function applies criteria to cells across multiple ranges and counts the number of times all criteria are met.
            </summary>
            <param name="argList">The criteria range, the criteria.</param>
            <returns>Number of cells meeting the criteria</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCovar(System.String)">
            <summary>
            Returns the covariance between the two sets of points.
            </summary>
            <param name="range">range1, range2.</param>
            <returns>The covariance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCritbinom(System.String)">
            <summary>
            Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
            </summary>
            <param name="argList">Number of trials, probability, alpha.</param>
            <returns>Returns the critical value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeExpondist(System.String)">
            <summary>
            Returns the exponential distribution.
            </summary>
            <param name="argList">x, lambda, cumulative.</param>
            <returns>The exponential distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFdist(System.String)">
            <summary>
            Returns the F (Fisher) probability distribution.
            </summary>
            <param name="argList">x, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns the F probability distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFinv(System.String)">
            <summary>
            Returns the inverse of F distribution.
            </summary>
            <param name="argList">p, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns x such that F distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFisher(System.String)">
            <summary>
            Returns the Fisher transformation of the input variable.
            </summary>
            <param name="argList">Input variable x.</param>
            <returns>Fisher transformation of x.</returns>
            <remarks>
            X should be between -1 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFisherinv(System.String)">
            <summary>
            Returns the inverse of Fisher transformation.
            </summary>
            <param name="argList">Input variable y.</param>
            <returns>The value x such that the Fisher transformation y is x.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeForecast(System.String)">
            <summary>
            Returns a forecasted value based on two sets of points using least square fit regression.
            </summary>
            <param name="range">x, rangex, rangey.</param>
            <returns>Forecasted value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeKurt(System.String)">
            <summary>
            Returns the kurtosis of the passed in values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The kurtosis of the data.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLarge(System.String)">
            <summary>
            Returns the Kth largest value in the range.
            </summary>
            <param name="range">range, k.</param>
            <returns>Kth largest value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLognormdist(System.String)">
            <summary>
            Returns the lognormal distribution.
            </summary>
            <param name="argList">x, mean, standarddev.</param>
            <returns>The lognormal distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLoginv(System.String)">
            <summary>
            Returns the inverse of the lognormal distribution.
            </summary>
            <param name="argList">p, mean, standarddev.</param>
            <returns>Returns the value x where the lognormal distribution of x is p.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMaxa(System.String)">
            <summary>
            Returns the maximum value of all values listed in the argument including logical values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the maximum value of all values listed in the argument.</returns>
            <remarks> True is treated as 1; False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMedian(System.String)">
            <summary>
            Returns the median value in the range.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>Median value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMina(System.String)">
            <summary>
            Returns the minimum value of all values listed in the argument including logical values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of:
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the minimum value of all values listed in the argument.</returns>
            <remarks> True is treated as 1; False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMode(System.String)">
            <summary>
            Returns the most frequent value in the range.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The most frequent value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNegbinomdist(System.String)">
            <summary>
            Returns the negative binomial distribution.
            </summary>
            <param name="argList">Number of failures, success threshold, probability, cumulative.</param>
            <returns>The negative binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePearson(System.String)">
            <summary>
            Returns the Pearson product moment correlation coefficient.
            </summary>
            <param name="range">Range1, range2.</param>
            <returns>Pearson product.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentile(System.String)">
            <summary>
            Returns the percentile position in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Percentile position.</returns>
            <remarks>K is a value between 0 and 1.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentrank(System.String)">
            <summary>
            Returns the percentage rank in the range.
            </summary>
            <param name="range">Range, x, significant digits.</param>
            <returns>Percentile position.</returns>
            <remarks>Significant digits are optional, defaulting to 3.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePermut(System.String)">
            <summary>
            The number of permutations of n items taken k at the time.
            </summary>
            <param name="argList">n, k</param>
            <returns>The number of combinations.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePoisson(System.String)">
            <summary>
            Returns the Poisson distribution.
            </summary>
            <param name="argList">x, mean, cumulative</param>
            <returns>Returns the exponential distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeProb(System.String)">
            <summary>
            Returns the probability that a value in the given range occurs.
            </summary>
            <param name="range">xrange1, prange2, lowerbound, upperbound.</param>
            <returns>The probability.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeQuartile(System.String)">
            <summary>
            Returns the quartile position in the range.
            </summary>
            <param name="range">Range, q.</param>
            <returns>Percentile position.</returns>
            <remarks>Q is 0, 1, 2, 3, 4.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRank(System.String)">
            <summary>
            Returns the rank of x in the range.
            </summary>
            <param name="range">X, range, order.</param>
            <returns>Rank of x.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRsq(System.String)">
            <summary>
            Returns the square of the Pearson product moment correlation coefficient.
            </summary>
            <param name="range">Range1, range2.</param>
            <returns>Square of the Pearson product.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSkew(System.String)">
            <summary>
            Returns the skewness of a distribution.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>Skewness of a distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSlope(System.String)">
            <summary>
            Returns the slope of the least square fit line through the given points.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>Y-intercept for the given points.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSmall(System.String)">
            <summary>
            Returns the kth smallest value in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStandardize(System.String)">
            <summary>
            Returns a normalized value.
            </summary>
            <param name="argList">X, mean, stddev.</param>
            <returns>Normalized value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdev(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdeva(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
            <remarks>Treats True as 1; False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdevaP(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
            <remarks>Treats True as 1; False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdevp(System.String)">
            <summary>
            Returns the population standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The population standard deviation.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdevpa(System.String)">
            <summary>
            Returns the population standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The population standard deviation.</returns>
            <remarks>Treats True as 1; False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSteyx(System.String)">
            <summary>
            Returns the standard error of the least square fit line through the given points.
            </summary>
            <param name="range">Y_range, x_range.</param>
            <returns>Standard error.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTrimmean(System.String)">
            <summary>
            Returns the mean of the range after removing points on either extreme.
            </summary>
            <param name="range">Range, percent.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVar(System.String)">
            <summary>
            Returns sample variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVara(System.String)">
            <summary>
            Returns sample variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
            <remarks> True is treated as 1; False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVarp(System.String)">
            <summary>
            Returns population variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The population variance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVarpa(System.String)">
            <summary>
            Returns population variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The population variance.</returns>
            <remarks> True is treated as 1; False is treated as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWeibull(System.String)">
            <summary>
            Returns the Weibull distribution.
            </summary>
            <param name="argList">X, alpha, beta, cumulative.</param>
            <returns>The Weibull distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeZtest(System.String)">
            <summary>
            Returns the one-tailed probability value of a Z test.
            </summary>
            <param name="range">Range, mu, sigma.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMax(System.String)">
            <summary>
            Returns the maximum value of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the maximum value of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMINIFS(System.String)">
            <summary>
            The MINIFS function returns the minimum value among cells specified by a given set of conditions or criteria.
            </summary>
            <param name="argList">range of cells, criteria1, average_range1,...</param>
            <returns>returns the Minimum value of the cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMAXIFS(System.String)">
            <summary>
            The MAXIFS function returns the maximum value among cells specified by a given set of conditions or criteria.
            </summary>
            <param name="argList">range of cells, criteria1, average_range1,...</param>
            <returns>returns the Maximum value of the cells.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSubTotal(System.String)">
            <summary>
            Returns the subtotal of input range(s).
            </summary>
            <param name="args">A list of cell references(seperated by commas)</param>
            <returns>Subtotal of range(s)</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMin(System.String)">
            <summary>
            Returns the minimum value of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the minimum value of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeAvg(System.String)">
            <summary>
            Returns the simple average of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>A string holding the simple average of all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHarmean(System.String)">
            <summary>
            Returns the harmonic mean of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The harmonic mean all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHypgeomdist(System.String)">
            <summary>
            Returns the hypergeometric distribution.
            </summary>
            <param name="argList">Number of sample successes, number of sample, number of population successes, number of population.</param>
            <returns>Returns the gamma distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeHypgeomOdist(System.String)">
            <summary>
            Returns the hypergeometric distribution.
            </summary>
            <param name="argList">Number of sample successes, number of sample, number of population successes, number of population.</param>
            <returns>Returns the gamma distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIf(System.String)">
            <summary>
            Conditionally computes one of two alternatives depending upon a logical expression.
            </summary>
            <remarks>
            The first argument is
            treated as a logical expression with a non-zero value considered True and a zero value considered False.
            The value of only one of the alternatives is computed depending upon the logical expression.
            </remarks>
            <param name="args">A string holding a list of three arguments.
            </param>
            <returns>Returns a string holding the second argument if the first argument is True (non-zero). Otherwise, it returns a string holding the third argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIfError(System.String)">
            <summary>
            Returns a value you specify if a formula evaluates to an error
            otherwise, returns the result of the formula.
            </summary>
            <param name="args">String to be tested.</param>
            <returns>Retuns the error string</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIntercept(System.String)">
            <summary>
            Returns the y-intercept of the least square fit line through the given points.
            </summary>
            <param name="range">y_range, x_range.</param>
            <returns>y-intercept for the given points.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBinomdist(System.String)">
            <summary>
            Returns the binomial distribution.
            </summary>
            <param name="argList">Number of successes, number of trials, probability, cumulative.</param>
            <returns>The binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSkewP(System.String)">
            <summary>
            Returns the skewness of a distribution based on a population a characterization of the degree of asymmetry of a distribution around its mean.
            </summary>
            <param name="range"> numbers or names, arrays, or reference that contain numbers</param>
            <returns>Skewness of a distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCovarianceP(System.String)">
            <summary>
            Returns population covariance, the average of the products of deviations for each data point pair in two data sets. 
            </summary>
            <param name="range">range1, range2.</param>
            <returns>The covarianceP</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCovarianceS(System.String)">
            <summary>
            Returns the sample covariance, the average of the products of deviations for each data point pair in two data sets.
            </summary>
            <param name="range">range1, range2.</param>
            <returns>The covariances</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentileInc(System.String)">
            <summary>
            Returns the percentile position in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Percentile position.</returns>
            <remarks>K is a value between 0 and 1.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentrankExc(System.String)">
            <summary>
            Returns the percentage rank Exc in the range.
            </summary>
            <param name="range">Range, x, significant digits.</param>
            <returns>Percentile position.</returns>
            <remarks>Significant digits are optional, defaulting to 3.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentileExc(System.String)">
            <summary>
            Returns the percentile position in the range.
            </summary>
            <param name="range">Range, k.</param>
            <returns>Percentile position.</returns>
            <remarks>K is a value between 0 and 1.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePercentrankInc(System.String)">
            <summary>
            Returns the percentage rank Inc in the range.
            </summary>
            <param name="range">Range, x, significant digits.</param>
            <returns>Percentile position.</returns>
            <remarks>Significant digits are optional, defaulting to 3.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeStdevaS(System.String)">
            <summary>
            Returns the sample standard deviation.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.
            </param>
            <returns>The sample standard deviation.</returns>
            <remarks>Treats True as 1; False as 0.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVarPAdv(System.String)">
            <summary>
            Returns sample variance of the listed values.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeVarSAdv(System.String)">
            <summary>
            Calculates variance based on the entire population (ignores logical values and text in the population).
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The sample variance.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePermutationA(System.String)">
            <summary>
            Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects.
            </summary>
            <param name="argList">n, k</param>
            <returns>The number of combinations.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormOdist(System.String)">
            <summary>
            Returns the normal distribution for the specified mean and standard deviation. 
            </summary>
            <param name="argList">x, mean, standarddev, cumulative.</param>
            <returns>The normal distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. 
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormOinv(System.String)">
            <summary>
            Returns the inverse of the normal cumulative distribution for the specified mean and standard deviation.
            </summary>
            <param name="argList">P, mean, standard deviation.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormOsODist(System.String)">
            <summary>
            Returns the standard normal cumulative distribution function. The distribution has a mean of 0 (zero) and a standard deviation of one.
            <para>Syntax: NORMSDIST(z)</para>
            </summary>
            <param name="argList">Z is the value for which you want the distribution.</param>
            <returns>Standard normal cumulative distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalProbabilityDensity(System.Double)">
            <summary>
            Returns the PDF of the standard normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalCumulativeDistributionFunction(System.Double)">
            <summary>
            Returns the CDF of the standard normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalProbabilityDensityFunction(System.Double)">
            <summary>
            Returns the PDF of the standard normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalCumulativeDistribution(System.Double)">
            <summary>
            Returns the CDF of the standard normal distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.StandardNormalCumulativeDistributionFunctionInverse(System.Double)">
            <summary>
            Returns the inverse of the CDF of the standard normal distribution.
            </summary>
            <param name="p">Cumulative probability of the distribution. p is between 0 and 1.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNormOsOInv(System.String)">
            <summary>
            Returns the inverse of the standard normal cumulative distribution. The distribution has a mean of zero and a standard deviation of one.
            <para>Syntax: NORMSINV(p)</para>
            </summary>
            <param name="argList">p is a probability corresponding to the normal distribution.</param>
            <returns>Inverse of standard normal cumulative distribution.</returns>
            <remarks>
            p should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWeiBullODist(System.String)">
            <summary>
            Calculates the Weibull Probability Density Function or the Weibull Cumulative Distribution Function for a supplied set of parameters.
            </summary>
            <param name="argList">x, alpha, beta, cumulative.</param>
            <returns>Returns the calculated weibull distribution.</returns>
            <remarks>
            cumulative =  A logical argument which denotes the type of distribution to be used
            TRUE	   =  Weibull Cumulative Distribution Function
            FALSE	   =  Weibull Probability Density Function
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeExponODist(System.String)">
            <summary>
            Returns the exponential distribution.
            </summary>
            <param name="argList">x, lambda, cumulative.</param>
            <returns>The exponential distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaInv(System.Double,System.Double,System.Double)">
            <summary>
            Used to calculate the inverse of gamma cummulative distribution
            </summary>
            <param name="p"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaInvInitialState(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to calculate the inverse gamma distribution at inital stage.
            </summary>
            <param name="a"></param>
            <param name="p"></param>
            <param name="beginX"></param>
            <param name="beginY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="di"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaInvMiddleState(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to calculate the inverse gamma distribution at middle stage.
            </summary>
            <param name="a"></param>
            <param name="p"></param>
            <param name="beginX"></param>
            <param name="beginY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="di"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaInvFinalState(System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Used to calculate the inverse gamma distribution at final stage.
            </summary>
            <param name="a"></param>
            <param name="p"></param>
            <param name="beginX"></param>
            <param name="beginY"></param>
            <param name="endX"></param>
            <param name="endY"></param>
            <param name="di"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaInvUpperIncomplete(System.Double,System.Double)">
            <summary>
            Used to calculate the upper incomplete integral of inverse gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaLowerIncomplete(System.Double,System.Double)">
            <summary>
            Used to calculate the lower incomplete integral of gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaUpperIncomplete(System.Double,System.Double)">
            <summary>
            Used to calculate the upper incomplete integral of gamma function.
            </summary>
            <param name="a"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaDistCummulative(System.Double,System.Double,System.Double)">
            <summary>
            Used to calculate the CDF(Cummulative Distribution Function) of Gamma distribution.
            </summary>
            <param name="a">Alpha</param>
            <param name="b">Beta</param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaDistProbability(System.Double,System.Double,System.Double)">
            <summary>
            Used to calculate the PDF(Probability Distribution Function) of Gamma distribution.
            </summary>
            <param name="a">Alpha</param>
            <param name="b">Beta</param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammadist(System.String)">
            <summary>
            Returns the gamma distribution.
            </summary>
            <param name="argList">X, alpha, beta, cumulative.</param>
            <returns>The gamma distribution.</returns>
            <remarks>
            X, alpha, and beta should be positive real numbers. Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. The distribution value
            is computed interactively using Trapezoidal Rule to six to seven significant digits
            or 20 iteration maximum.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammainv(System.String)">
            <summary>
            Returns the inverse of gamma distribution.
            </summary>
            <param name="argList">p, alpha, beta</param>
            <returns>Returns x such that gamma distribution at x is p.</returns>
            <remarks>
            P, alpha, and beta should be positive real numbers, with p between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGeomean(System.String)">
            <summary>
            Returns the geometric mean of all values listed in the argument.
            </summary>
            <param name="range">A string holding a list (separated by commas) of
            cell references,
            formulas, or numbers.</param>
            <returns>The geometric mean all values listed in the argument.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammaOdist(System.String)">
            <summary>
            Returns the gamma distribution.
            </summary>
            <param name="argList">X, alpha, beta, cumulative.</param>
            <returns>The gamma distribution.</returns>
            <remarks>
            X, alpha, and beta should be positive real numbers. Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function. The distribution value
            is computed interactively using Trapezoidal Rule to six to seven significant digits
            or 20 iteration maximum.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammaOinv(System.String)">
            <summary>
            Returns the inverse of gamma distribution.
            </summary>
            <param name="argList">p, alpha, beta</param>
            <returns>Returns x such that gamma distribution at x is p.</returns>
            <remarks>
            P, alpha, and beta should be positive real numbers, with p between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGammaln0Precise(System.String)">
            <summary>
            Returns the natural logarithm of the gamma function.
            </summary>
            <param name="argList">The value to be evaluated.</param>
            <returns>The natural logarithm of the gamma function.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeTOInv(System.String)">
             <summary>
            Returns the Student's t-distribution. 
             </summary>
             <param name="argList">x, degreesfreedom1.</param>
             <returns>Returns the Student's t-distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.TCumulativeDistributionInverse(System.Double,System.Int32)">
            <summary>
            Returns the inverse of the CDF of the Student's t distribution.
            For k = 3, and 5+ the solution is an approximation. 
            </summary>
            <param name="p">Cumulative probability of the distribution. p is between 0 and 1.</param>
            <param name="k">Degrees of freedom.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.TProbabilityDensity(System.Double,System.Int32)">
            <summary>
            Returns the PDF of Student's t distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="k">Degrees of freedom.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.TCumulativeDensity(System.Double,System.Int32)">
            <summary>
            Returns the CDF of Student's t distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="k">Degrees of freedom.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFOinvORt(System.String)">
            <summary>
            Returns the inverse of F distribution.
            </summary>
            <param name="argList">p, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns x such that F distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBinomOInv(System.String)">
            <summary>
            Returns the smallest value for which the cumulative binomial distribution is greater than or equal to a criterion value.
            </summary>
            <param name="argList">Number of trials, probability, alpha.</param>
            <returns>Returns the critical value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLognormOinv(System.String)">
            <summary>
            Returns the inverse of the lognormal distribution.
            </summary>
            <param name="argList">p, mean, standarddev.</param>
            <returns>Returns the value x where the lognormal distribution of x is p.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLognormOdist(System.String)">
            <summary>
            Returns the lognormal distribution.
            </summary>
            <param name="argList">x, mean, standarddev.</param>
            <returns>The lognormal distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeConfidenceOnorm(System.String)">
            <summary>
            Returns a confidence interval radius.
            </summary>
            <param name="argList">Alpha, standard deviation, size.</param>
            <returns>Returns x such that normal distribution at x is p.</returns>
            <remarks>
            P should be between 0 and 1.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChisqOdistORt(System.String)">
            <summary>
             Returns the chi-squared distribution.
             </summary>
             <param name="argList">x, degrees of freedom.</param>
             <returns>The chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFOdist(System.String)">
            <summary>
            Returns the F probability distribution.
            </summary>
            <param name="argList">x, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns the F probability distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.FProbabilityDensity(System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the PDF of the F distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="k1">Degrees of freedom for numerator chi-sqared distribution. k1 > 0.</param>
            <param name="k2">Degrees of freedom for denominator chi-sqared distribution. k2 > 0.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.FCumulativeDensity(System.Double,System.Int32,System.Int32)">
            <summary>
            Returns the CDF of the F distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="k1">Degrees of freedom for numerator chi-sqared distribution.</param>
            <param name="k2">Degrees of freedom for denominator chi-sqared distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.BetaFunction(System.Double,System.Double)">
            <summary>
            Euler integral. 
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.GammaFunction(System.Double)">
            <summary>
            Integral from 0 to infinity of e^(-t) * t^(z-1) dt
            </summary>
            <param name="z">If z > 143 the return value will exceed the double.MaxValue. The function will throw an exception.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.RIBetaFunction(System.Double,System.Double,System.Double)">
            <summary>
            To get the CDF of the beta distribution.
            </summary>
            <param name="x"></param>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.IBetaFunction(System.Double,System.Double,System.Double)">
            <summary>
            Euler integral. 
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFOdistORt(System.String)">
            <summary>
            Returns the F (Fisher) probability distribution.
            </summary>
            <param name="argList">x, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns the F probability distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChisqOdist(System.String)">
            <summary>
            Returns the chi-squared distribution.
            </summary>
            <param name="argList">x, degrees of freedom.</param>
            <returns>The chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChisqOinv(System.String)">
            <summary>
            Returns the inverse of the chi-squared distribution.
            </summary>
            <param name="argList">x, degrees of freedom.</param>
            <returns>The inverse of the chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChisqOTest(System.String)">
            <summary>
            Returns the Chi Test for independence.
            </summary>
            <param name="range">Actual_range, expected_range.</param>
            <returns>Result of Chi Test: y-intercept.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeChisqOinvORt(System.String)">
            <summary>
            Returns the inverse of the chi-squared distribution.
            </summary>
            <param name="argList">x, degrees of freedom.</param>
            <returns>The inverse of the chi-squared distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBinomOdist(System.String)">
            <summary>
            Returns the binomial distribution.
            </summary>
            <param name="argList">Number of successes, number of trials, probability, cumulative.</param>
            <returns>The binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeZOtest(System.String)">
            <summary>
            Returns the one-tailed probability value of a Z test.
            </summary>
            <param name="range">Range, mu, sigma.</param>
            <returns>Kth smallest value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRankOAvg(System.String)">
            <summary>
            Returns the rank of x in the range.
            </summary>
            <param name="range">X, range, order.</param>
            <returns>Rank of x.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRankOEq(System.String)">
            <summary>
            Returns the rank of x in the range.
            </summary>
            <param name="range">X, range, order.</param>
            <returns>Rank of x.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeIHDIST(System.String)">
            <summary>
            The Irwin-Hall distribution results from the sum on n independent standard uniform variables
            </summary>
            <param name="range">The value at which to evaluate the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.IHProbDens(System.Double,System.Int32)">
            <summary>
            The Irwin-Hall distribution results from the sum on n independent standard uniform variables
            </summary>
            <param name="x">The value at which to evaluate the distribution.</param>
            <param name="n">The number of standard uniform variables.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Combinations(System.Int32,System.Int32)">
            <summary>
            Returns the number of possible combinations of k objects from a set of n object. The order of the chosen objects does not matter.
            </summary>
            <param name="n">Number of objects</param>
            <param name="k">Number of objects chosen</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.Factorial(System.Int32)">
            <summary>
            Returns n! 
            0! = 1,otherwise n! = n * (n-1) * (n-2) * ... * 2 * 1,
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeUnidist(System.String)">
            <summary>
            Returns the PDF of the uniform distribution.
            </summary>
            <param name="argList">Number of successes, number of trials, probability, cumulative.</param>
            <returns>The binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.UniProbDens(System.Double,System.Double,System.Double)">
            <summary>
            Returns the PDF of the uniform distribution.
            </summary>
            <param name="x">Value at which the distribution is evaluated.</param>
            <param name="min">Minimum value of the distribution.</param>
            <param name="max">Maximum value of the distribution.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeQuartileOExc(System.String)">
            <summary>
            Returns the quartile position in the range.
            </summary>
            <param name="range">Range, q.</param>
            <returns>Percentile position.</returns>
            <remarks>Q is 0, 1, 2, 3, 4.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeQuartileOInc(System.String)">
            <summary>
            Returns the quartile position in the range.
            </summary>
            <param name="range">Range, q.</param>
            <returns>Percentile position.</returns>
            <remarks>Q is 0, 1, 2, 3, 4.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNegbinomODist(System.String)">
            <summary>
            Returns the negative binomial distribution.
            </summary>
            <param name="argList">Number of failures, success threshold, probability, cumulative.</param>
            <returns>The negative binomial distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputePoissonODist(System.String)">
            <summary>
            Returns the Poisson distribution.
            </summary>
            <param name="argList">x, mean, cumulative</param>
            <returns>Returns the exponential distribution.</returns>
            <remarks>
            Cumulative should be either
            True if you want to return the value of the distribution function or False
            if you want to return the value of the density function.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeDelta(System.String)">
            <summary>
            Compares the given two values
            </summary>
            <param name="argList">Two Numbers to be compared.</param>
            <returns>Returns the result of the comparision in the form of 0 or 1</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeGestep(System.String)">
            <summary>
            Compares the given two values
            </summary>
            <param name="argList">Two Numbers to be compared.</param>
            <returns>Returns the result of the comparision in the form of 0 or 1</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeBetaDist(System.String)">
            <summary>
            Returns the beta distribution.
            </summary>
            <param name="argList">x, degreesfreedom1, degreesfreedom2.</param>
            <returns>Returns the beta distribution.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.BetaCumulativeDist(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Beta cumulative density function.
            </summary>
            <param name="x">Value of the random variable for which the CDF is beign evaluated. x is between 0 and 1.</param>
            <param name="a">First shape parameter.</param>
            <param name="b">Second shape parameter.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.BetaProbabilityDens(System.Double,System.Double,System.Double)">
            <summary>
            Returns the Beta probability density function.
            </summary>
            <param name="x">Value of the random variable for which the PDF is beign evaluated. x is between 0 and 1.</param>
            <param name="a">Number of trials.</param>
            <param name="b">Number of times the event occurs in n trials.</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.TranslateText(System.String,System.String)">
            <summary>
            Return the value of TranslateText
            </summary>
            <param name="input">value</param>
            <param name="languagePair">language</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeCode(System.String)">
            <summary>
            Return the numeric code for first char of text
            </summary>
            <param name="argList">text</param>
            <returns>numeric code</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFindB(System.String)">
            <summary>
            Finds the first occurrence of one string in another string.
            </summary>
            <param name="arg">Conatins two or three arguments. The first argument is the string
            to find. The second string is the string that is being searched. The third argument
            is the start location in the second string for the search.</param>
            <returns>The location of the found string.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLeftB(System.String)">
            <summary>
            Returns the left so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A left sub string..</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeJis(System.String)">
            <summary>
            Used to compute the JIS function
            </summary>
            <param name="arg">arguments</param>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeLenB(System.String)">
            <summary>
            Returns the length of the given string.
            </summary>
            <param name="range">Contains the string.</param>
            <returns>An integer length.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeMidB(System.String)">
            <summary>
            Returns a substring of the given string.
            </summary>
            <param name="range">Contains the original string, start position of the substring,
            and the number of characters in the substring.</param>
            <returns>A substring.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRightB(System.String)">
            <summary>
            Returns the right so many characters in the given string.
            </summary>
            <param name="range">Contains the string and the number of characters.</param>
            <returns>A right substring.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeNumberValue(System.String)">
            <summary>
            Convert the text to number
            </summary>
            <param name="argList">text, </param>
            <returns>decimal separator,group separator </returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeProper(System.String)">
            <summary>
            Returns the text like first letter with upper letter  in each word
            </summary>
            <param name="argList">Text</param>
            <returns>proper text</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeReplace(System.String)">
            <summary>
            Replace the part of the text with a new text from orginal text
            </summary>
            <param name="argList">Text,Start index, Number of char to replace, new text </param>
            <returns>replaced string</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeRept(System.String)">
            <summary>
            Returns the number of repeated text
            </summary>
            <param name="argList">text, repeated count</param>
            <returns>text</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeSearchB(System.String)">
            <summary>
            Returns the number of the starting position of the first string from the second string.
            </summary>
            <param name="argList">first strring, second string and starting position</param>
            <returns>index of the string</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeUniChar(System.String)">
            <summary>
            Returns the Unicode char for the respective numeric value
            </summary>
            <param name="argList">Number</param>
            <returns>unicode char</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeUniCode(System.String)">
            <summary>
            Returns the corresponding number code for the first char of string.
            </summary>
            <param name="argList">text</param>
            <returns>numeric code</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeWebService(System.String)">
            <summary>
            Return the XML content of the given document
            </summary>
            <param name="argList">web link</param>
            <returns>XML data</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeEncodeURL(System.String)">
            <summary>
            Returns the encode url of the given text
            </summary>
            <param name="argList">text</param>
            <returns>returns the EncodeURL</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.ComputeFilterXml(System.String)">
            <summary>
            Filter the value from XML document
            </summary>
            <param name="argList">XML content</param>
            <returns>value</returns>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ExcelLikeComputations">
            <summary>
            A property that gets or sets the calculations of the <see cref="T:Syncfusion.Calculate.CalcEngine"/> computations to mimic the computations of Excel.
            </summary>
        </member>
        <member name="E:Syncfusion.Calculate.CalcEngine.FormulaParsing">
            <summary>
            Occurs whenever a string needs to be tested to determine whether it should be treated as a formula string and parsed,
            or be treated as a non-formula string. This event allows for preprocessing the unparsed formula.
            </summary>
            <remarks>This event may be raised more than once in the processing of a string into a formula.
            </remarks>
        </member>
        <member name="E:Syncfusion.Calculate.CalcEngine.UnknownFunction">
            <summary>
            Occurs whenever an unknown function is encountered during the parsing of a formula.
            </summary>
            <remarks>This event may be raised more than once in the parsing of a formula.
            </remarks>
        </member>
        <member name="E:Syncfusion.Calculate.CalcEngine.UpdateNamedRange">
            <summary>
            Occurs whenever an UpdateNamedRange function is encountered during the parsing of a formula.
            </summary>
            <remarks>This event may be raised more than once in the parsing of a formula.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ActiveCell">
            <summary>
            Gets the cell that is being calculated by the Engine.
            </summary>
            <remarks> You can use this properly within your custom functions to
            identify the item in the ICalcData object being computed.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.AllowShortCircuitIFs">
            <summary>
            Gets or sets whether IF function calculations should specifically avoid
            computing the non-used alternative.
            </summary>
            <remarks>
            The default value is false for code legacy consistency. When AllowShortCircuitIFs
            is set true, only the necessary alternative of an IF function is computed. To support
            this behavior, a change in how nested IF function calculations are done is necessary.
            The default way of calculating nested functions is inside-out, with the inner most
            functions being computed to a value before the next outer function is evaluated. To
            support short circuiting IF functions, nested IF functions need to be computed from
            the outside-in to know what alternative needs to be evaluated. This outside-in calculation
            pattern only applies to IF functions, and only when AllowShortCircuitIFs is true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.AlwaysComputeDuringRefresh">
            <summary>
            Gets or sets whether <see cref="F:Syncfusion.Calculate.FormulaInfo.calcID"/> is tested before
            computing a formula during a call to <see cref="M:Syncfusion.Calculate.CalcEngine.Refresh(System.String)"/>
            </summary>
            <remarks>When a value changes, then the Refresh method is called on any other
            formula that had a dependency on the changed value. During the Refresh call,
            the default behavior is to recompute all formulas (AlwaysComputeDuringRefresh = true).
            If you are using <see cref="M:Syncfusion.Calculate.CalcEngine.UpdateCalcID"/> to strictly control when new values
            should be used, then you should set this property to false. For example, if you are
            only using <see cref="M:Syncfusion.Calculate.CalcEngine.PullUpdatedValue(System.Int32,System.Int32,System.Int32)"/> exclusively to retrieve computed values,
            then setting AlwaysComputeDuringRefresh = false
            may be more efficient as it will only recompute the value once during the calculations.</remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.CalculatingSuspended">
            <summary>
            A property that gets/sets whether formulas are immediately calculated as dependent cells are changed.
            </summary>
            <remarks>Use this property to suspend calculations while a series of changes
            are made to dependent cells either by the user or programmatically. When the changes are
            complete, set this property to False and then call Engine.RecalcRange to recalculate
            the affected range. See the sample in GridFormulaCellModel.CalculatingSuspended.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.UseFormulaValues">
            <summary>
            A property that gets/sets whether Formula returns its FormulaValue instead of repeated calculation
            </summary>
            <remarks>Use this property to return the FormulaValue when a cell contain more depency cells.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.CheckDanglingStack">
            <summary>
            Gets or sets whether Invalid Formula is returned when the calculation stack is not fully exhausted during a calculation.
            </summary>
            <remarks>
            If you enter a formula like "=(1+2)(9+8)", Essential Calculate will compute this formula as 17, ignoring the dangling
            3 value on its calculation stack. If you want this situation flagged as a Invalid Formula, set this CheckDanglingStack property
            to true. The default value is false for backward compatibility purposes.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ColumnMaxCount">
            <summary>
            Used with row ranges to possibly provide the upperlimit on the number of columns in the ICalcData object.
            </summary>
            <remarks>
            Essential Calculate supports column ranges of the form 2:4 as in =SUM(2:4) to represent all cells in rows
            2, 3 and 4 from a ICalcData object. To get a value for the number of columns, the CalcEngine first checks to
            see if the ICalcData object supports the ISheetData interface. If this interface is supported, the column
            count used to determine the range is obtained through this interface. If the ICalcData object does not support
            ISupportColumnCount, then the value of ColumnMaxCount is used provided ColumnMaxCount > 0. If not, the fixed value 50
            is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.DependentCells">
            <summary>
            A read-only property that gets a mapping between a cell and a list of formula cells that depend on it.
            </summary>
            <remarks>
            The key is the given cell, and the value is a ArrayList of cells containing
            formulas that reference this cell.
            </remarks>
            <example> Here is code that will list formula cells affected by changing the given cell.
            <code lang="C#">
            public void DisplayAllAffectedCells()
            {
            	CalcEngine engine = ((GridFormulaCellModel)this.gridControl1.CellModels["FormulaCell"]).Engine;
            	foreach(object o in engine.DependentCells.Keys)
            	{
            		string s1 = o as string;
            		Console.Write(s1 + " affects ");
            		ArrayList ht = (ArrayList) engine.DependentCells[s1];
            		foreach(object o1 in ht)
            		{
            			string s2 = o1 as string;
            			Console.Write(s2 + " ");
            		}
            		Console.WriteLine("");
            	}
            }
            </code>
            <code lang="VB">
            	Public Sub DisplayAllAffectedCells()
            		Dim engine As GridCalcEngine = CType(Me.gridControl1.CellModels("FormulaCell"), GridFormulaCellModel).Engine
            		Dim o As Object
            		For Each o In  engine.DependentCells.Keys
            			Dim s1 As String = CStr(o)
            			Console.Write((s1 + " affects "))
            			Dim ht As ArrayList = CType(engine.DependentCells(s1), ArrayList)
            			Dim o1 As Object
            			For Each o1 In  ht
            				Dim s2 As String = CStr(o1)
            				Console.Write((s2 + " "))
            			Next o1
            			Console.WriteLine("")
            		Next o
            	End Sub 'DisplayAllAffectedCells
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.DependentFormulaCells">
             <summary>
             A read-only property that gets a mapping between a formula cell and a list of cells upon which it depends.
             </summary>
             <remarks>
             The key is the given formula cell and the value is a Hashtable of cells that this
             formula cell references.
             </remarks>
             <example> Here is code that will lists formula cells affected by changing a given cell:
             <code lang="C#">
            		public void DisplayAllFormulaDependencies()
            		{
            			GridCalcEngine engine = ((GridFormulaCellModel)this.gridControl1.CellModels["FormulaCell"]).Engine;
            			foreach(object o in engine.DependentFormulaCells.Keys)
            			{
            				string s1 = o as string;
            				Console.Write(s1 + " depends upon ");
            				Hashtable ht = (Hashtable) engine.DependentFormulaCells[s1];
            				foreach(object o1 in ht.Keys)
            				{
            					string s2 = o1 as string;
            					Console.Write(s2 + " ");
            				}
            				Console.WriteLine("");
            			}
            		}
             </code>
             <code lang="VB">
            		Public Sub DisplayAllFormulaDependencies()
            			Dim engine As GridCalcEngine = CType(Me.gridControl1.CellModels("FormulaCell"), GridFormulaCellModel).Engine
            
            			Dim o As Object
            			For Each o In  engine.DependentFormulaCells.Keys
            				Dim s1 As String = CStr(o)
            				Console.Write((s1 + " depends upon "))
            				Dim ht As Hashtable = CType(engine.DependentFormulaCells(s1), Hashtable)
            				Dim o1 As Object
            				For Each o1 In  ht.Keys
            					Dim s2 As String = CStr(o1)
            					Console.Write((s2 + " "))
            				Next o1
            				Console.WriteLine("")
            			Next o
            		End Sub 'DisplayAllFormulaDependencies
             </code>
             </example>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ErrorStrings">
            <summary>
            A property that gets/sets list of # error strings recognized by Excel.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.EnsureIFCallDuringShortCircuit">
            <summary>
            Gets or sets whether the IF function implementation is called when <see cref="P:Syncfusion.Calculate.CalcEngine.AllowShortCircuitIFs"/> is true.
            The default behavior is to not call the IF Function code in the library, but instead, work directly with the
            IF clauses.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ForceRefreshCall">
            <summary>
            Gets or sets whether <see cref="M:Syncfusion.Calculate.CalcEngine.Refresh(System.String)"/> must be called on every cells whenever
            the <see cref="E:Syncfusion.Calculate.ICalcData.ValueChanged"/> is triggered.
            The default value is false.
            </summary>
            <remarks>
            When a value changes, then the Refresh method is called recursively every time
            the grid_ValuChanged is called. Setting this ForceRefreshCall to false will call
            Refresh for only those cells where the calculated value is actually modified.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.FormulaCharacter">
            <summary>
            A static property that gets/sets character by which string starts with, can be treated as formula.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.FormulaInfoTable">
            <summary>
            A read-only property that gets the collection of FormulaInfo objects being used by the CalcEngine.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.GetValueFromArgPreserveLeadingZeros">
            <summary>
            Gets or sets whether leading zeros are preserved in a call to <see cref="M:Syncfusion.Calculate.CalcEngine.GetValueFromArg(System.String)"/>.
            </summary>
            <remarks>
            If the value of arg is "0123" or a cell reference like A1 where A1 holds 0123, then the default behavior
            is for GetValueFromArg(arg) to return 123, stripping away any leading zeros. If you want calls to
            GetValueFromArg to preserve the leading zeros, then set GetValueFromArgPreserveLeadingZeros to true.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.IterationMaxCount">
            <summary>
            Gets or sets the maximum number of iterative calls that can be made on a cell. <see cref="P:Syncfusion.Calculate.CalcEngine.ThrowCircularException"/>
            will be set to true when you set IterationMaxCount to any value other than zero.
            </summary>
            <remarks>
            Essential Calculate supports an iterative process to solve equations of the
            form x=f(x). Here you should think of x as being a cell reference like B2 for example. Setting
            IterationMaxCount to some value other than zero allows the engine to iteratively compute
            f(x) using the previous iteration's calculated value for x. The initial value is either 0
            or the last saved value for a formula in that cell (if the calculation has been performed previously).
            The iterations continue until either the iteration count exceeds IterationMaxCount, or two
            successive iteration return values have a relative difference less than IterationMaxTolerance.
            For example, to have an initial value of 1, you can enter a formula   =1   into the cell, and then
            enter the self referencing formula into the same cell. This will make the iterative calculations start
            at 1 instead of 0.
            <see cref="P:Syncfusion.Calculate.CalcEngine.ThrowCircularException"/> must be set to true in order for the Iterative Calculation
            support to function For this reason, ThrowCircularException will be automatically set to true
            when you set a non-zero value to IterationMaxCount.
            The default value is 0 indicating that iterative calculation support is turned off.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.IterationMaxTolerance">
            <summary>
            Gets or sets the success tolerance used by the CalcEngine's iterative calculation support.
            </summary>
            <remarks>
            Essential Calculate supports an iterative process to solve equations of the
            form x=f(x). Here you should think of x as being a cell reference like B2 for example. Setting
            IterationMaxCount to some value other than zero allows the engine to iteratively compute
            f(x) using the previous iteration's calculated value for x. The initial value is either 0
            or the last saved value for a formula in that cell (if the calculation has been performed previously).
            The iterations continue until either the iteration count exceeds IterationMaxCount, or two
            successive iteration return values have a relative difference less than IterationMaxTolerance.
            The default value is 0.001.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.LibraryComputationException">
            <summary>
            Gets any Exception raised during the computation of a library function
            provided RethrowLibraryComputationExceptions is set true.
            </summary>
            <remarks>
            Use the <see cref="M:Syncfusion.Calculate.CalcEngine.ClearLibraryComputationException"/> method to set this property
            to null to indicate that there is no pending library exception within the engine.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.LibraryFunctions">
            <summary>
            A read-only property that gets a collection holding the current library functions.
            </summary>
            <remarks>
            This property gives you direct access to all library functions.
            The function name serves as the hash key and the function delegate
            serves as the hash value.
            The function name should contain only letters, digits or an underscore.
            You should use the <see cref="M:Syncfusion.Calculate.CalcEngine.AddFunction(System.String,Syncfusion.Calculate.CalcEngine.LibraryFunction)"/> method to add functions
            to this collection. Do not use the Add method inherited from Hashtable.
            The reason is that the hash key needs to be strictly upper case even though
            formula syntax is case insensitive with respect to functions names.
            Using the AddFunction method makes sure the hash key is properly set.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.LockDependencies">
            <summary>
            A property that gets / sets whether a changed value should trigger dependent changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.MaximumRecursiveCalls">
            <summary>
            Specifies the maximum number of recursive calls that can be used to compute a cellvalue.
            </summary>
            <remarks>This property comes into play when you have a calculated formula cell that depends on
            another calculated formula that depends on another calculated formula and so on. If the number of
            'depends on another formula' exceeds MaximumRecursiveCalls, you will see a Too Complex message
            displayed in the cell. The default value is 100, but you can set it higher or lower depending upon
            your expected needs. The purpose of the limit is to avoid a circular reference locking up your
            application.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.MaxStackDepth">
            <summary>
            Gets or sets the maximum calculation stack depth.
            </summary>
            <remarks>
            The default is 50. This is the number of recursive calls that can be made during calculations.</remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.NamedRanges">
            <summary>
            A property that gets/sets the current named ranges.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ParseArgumentSeparator">
            <summary>
            A static property that gets/sets character to be recognized by the parsing code as the delimiter for arguments in a named formula's argument list
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ParseDecimalSeparator">
            <summary>
            A static property that gets/sets the character to be recognized by the parsing engine as decimal separator for numbers.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ParseDateTimeSeparator">
            <summary>
            A static property that gets/sets the character to be recognized by the parsing engine as decimal separator for date.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ReservedWordOperators">
            <summary>
            Gets or sets a string array of six strings that hold the reserved strings
            that will be used for the OR, AND, XOR and IF THEN ELSE logical operators.
            </summary>
            <example>Here is the code that you can use to define this string array. This code
            shows the default strings that are used. Note that the string must include a leading
            and trailing blank, and must be lower case. In formulas that use these operators,
            the formulas themselves are case agnostic.
            <code lang="C#">
            	engine.ReservedWordOperators = new string[]
            	{
            		" or ",     //0
                    " and ",    //1
                    " xor ",    //2
                    "if ",     //3
                    " then ",   //4
                    " else ",    //6
                    "not "    //6
            	};
            </code>
            </example>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.RethrowLibraryComputationExceptions">
            <summary>
            Gets / sets whether the engine Rethrows any exception
            raised during the computation of a library function.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.RowMaxCount">
            <summary>
            Used with column ranges to possibly provide the upperlimit on the number of rows in the ICalcData object.
            </summary>
            <remarks>
            Essential Calculate supports column ranges of the form A:D as in =SUM(A:D) to represent all cells in columns
            A, B, C and D from a ICalcData object. To get a value for the number of rows, the CalcEngine first checks to
            see if the ICalcData object supports the ISheetData interface. If this interface is supported, the row
            count used to determine the range is obtained through this interface. If the ICalcData object does not support
            ISupportRowCount, then the value of RowMaxCount is used provided RowMaxCount > 0. If not, the fixed value 50
            is used.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.SupportLogicalOperators">
            <summary>
            Gets or sets whether OR, AND, XOR and IF THEN ELSE logical
            operators are supported.
            </summary>
            <remarks>
            The default value is false for backward compatibility.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.SupportRangeOperands">
             <summary>
             Gets or sets whether ranges can be used as binary operands.
             </summary>
             <remarks>
             If this property is true, Essential Calculate recognizes ranges such
             as B1:B5 and A4:E4 as operands of binary operators. So, if you
             set the formula  = A1:A5 + B1:B5  into cell C4, the calculation
             will retrieve the values in A4 and B4 to be used in place of the
             corresponding ranges A1:A5 and B1:B5. Note that such ranges must
             either have one column wide or one row tall. This fact is used to
             make the corresponding lookup determined by where the host cell that holds
             the formula is located. This host cell
             must either be in the same row or column as some cell in range.
            
             The default value is false.
             </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.SupportsSheetRanges">
             <summary>
             Gets or sets whether sheet range notation is supported.
             </summary>
             <remarks>
             Excel supports sheet range notation such as
             = SUM( sheet1:sheet3!A1 ) + Sum( sheet1:sheet3!B1:B4 ).
             For backward compatibility with earlier versions that did
             not support this sheet range notation, you can set
             this SupportsSheetRanges false.
            
             This implementation replaces a sheet range (sheet1:sheet3!B1:B4) with
             list of ranges (sheet1!B1:B4,sheet2!B1:B4,sheet3!B1:B4).
             </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ThrowCircularException">
            <summary>
            Gets / sets whether the CalcQuick should throw an exception when a circular calculation is encountered.
            </summary>
            <remarks>If this property is True, the CalcQuick will throw an exception
            when it detects a circular calculation. If ThrowCircularException is False, then
            no exception is thrown and the calculation will loop recursively until Engine.MaximumRecursiveCalls
            is exceeded.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.UseDependencies">
            <summary>
            A property that gets / sets whether the CalcEngine should track dependencies.
            </summary>
            <remarks>If you are using the CalEngine in a manner where you always
            call PullUpdatedValue to access the computations, then setting UseDependencies
            to False will make things more efficient as any requested computed value will
            be fully computed every time it is retrieved. In this situation, the CalcEngine
            does not need to track dependencies.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.UseNoAmpersandQuotes">
            <summary>
            A property that gets/sets whether strings concatenated using the '&amp;' operator should be
            returned inside double quote marks.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ExceptionThrown">
            <summary>
            A property that is used to identify whether the exception thrown or not while calculating the value.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.ValidPrecedingChars">
            <summary>
            For internal use.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.PreserveFormula">
            <summary>
            Gets or sets a value indicating whether [preserve formula].
            </summary>
            <value><c>true</c> if [preserve formula]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.TreatStringsAsZero">
            <summary>
            Gets of sets whether the CalcEngine treats nonempty strings as zeros when they are
            encountered during calculations.
            </summary>
            <remarks>
            The default value is true meaning that if a nonempty string is encountered during an arithmetic operation, it will be treated as zero.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.WeekEndType">
            <summary>
            Gets the weekend type
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.UseDatesInCalculations">
            <summary>
            Gets or sets whether dates can be used as operands in calculations. The default value is false.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.RethrowParseExceptions">
            <summary>
            Gets / sets whether the engine throws an exception when
            parsing fails with an unknown function error.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.NativeFormats">
            <summary>
            The List holds the formats of a Chinese Language.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcEngine.EnableLookupTableCaching">
            <summary>
            Gets or sets whether lookup tables used in the VLookUp and HLookUp functions are cached.
            </summary>
            <remarks>
            Depending upon your use case, caching look up tables can greatly speed up calculations involving HLookUp
            and VLookUp. If you make multiple calls to these functions passing in the same look up tables, and if these
            look up tables are relatively static (don't dynamically change as the look ups are taking place), then caching
            these tables will likely improve performance.
            </remarks>
        </member>
        <member name="T:Syncfusion.Calculate.CalcEngine.LibraryFunction">
            <summary>
            Delegate used to define functions that you add to the function library.
            </summary>
            <returns>Resultant value.</returns>
        </member>
        <member name="T:Syncfusion.Calculate.CalcEngine.FormulaArgumentType">
            <summary>
            Specifies the options for checking the formula error strings.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.None">
            <summary>
            Formula contains null arguments. For Example:PI,RANDOM...etc
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.Range">
            <summary>
            Formula contains range argument. For example:MEDIAN,...etc 
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.TwoTextWithNumber">
            <summary>
            Formula contains two text arguments with Number argument. For example:FIND,SEARCH...etc
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.TextWithNumber">
            <summary>
            Formula contains number and text arguments. For example:LEFT,RIGHT...etc
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.Numbers">
            <summary>
            Formula contains number arguments only. For example:ABS,ROUND,ROUNDDOWN,LOG...etc
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.Text">
            <summary>
            Formula contains text arguments only. For example:ARABIC,CLEAN...etc
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcEngine.FormulaArgumentType.Date">
            <summary>
            Formula contains Date argument. For example:DISC,...etc
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngine.LenComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares 2 strings based on their length.
            </summary>
            <returns>0, if both strings are equal; positive value if second string is greater; neagative value if first string is greater.</returns>
        </member>
        <member name="T:Syncfusion.Calculate.GridSheetFamilyItem">
            <summary>
            Encapsulates the properties that are needed to support multiple families of crossed-referenced grids.
            This class is for internal use only.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.GridSheetFamilyItem.ParentObjectToToken">
            <summary>
            Holds mapping from parent object to sheet token.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.GridSheetFamilyItem.SheetNameToParentObject">
            <summary>
            Holds mapping from sheet name to parent object.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.GridSheetFamilyItem.SheetNameToToken">
            <summary>
            Holds mapping from parent object to sheet name.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.GridSheetFamilyItem.TokenToParentObject">
            <summary>
            Holds mapping from sheet token to parent object.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.FormulaParsingEventHandler">
            <summary>
            Event delegate for the FormulaParsing event
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.FormulaParsingEventArgs">
             <summary>
             Used by the <see cref="E:Syncfusion.Calculate.CalcEngine.FormulaParsing"/> event, FormulaParsingEventArgs holds a reference
             to the string that is to be parsed. The FormulaParsing event allows the listener to preprocess
             the string that is being parsed.
             </summary>
             <remarks>
             Please note that this event may be raised more than once as a string is parsed.
             </remarks>
             <example> Here is code snippets that show how to tell a engine to also treat any text in a formula cell
             that begins with a minus(-) or a plus(+) as formulas. The default behavior is to treat only text beginning
             with equal(=) as formulas.
             <code lang="C#">
            		//subscribe to the event before any formulas are loaded into the grid...
                 Engine.FormulaParsing += new FormulaParsingEventHandler(Engine_FormulaParsing);
            
            		//Here is the handler code that adds an = if necessary so any string beginning with +, - or =
                 //is treated as a formula.
                   void Engine_FormulaParsing(object sender, FormulaParsingEventArgs e)
                   {
                       //allow cells starting with + and - to be treated as formula cells.
                       if (e.Text.StartsWith("-"))
                            e.Text = "=" + e.Text;
                       else if (e.Text.StartsWith("+"))
                            e.Text = "=" + e.Text.Substring(1);
                   }
             </code>
             </example>
        </member>
        <member name="M:Syncfusion.Calculate.FormulaParsingEventArgs.#ctor(System.String)">
            <summary>
            Holds a reference to the string that is to be parsed..
            </summary>
            <param name="text">The formula that is to be parsed.</param>
        </member>
        <member name="M:Syncfusion.Calculate.FormulaParsingEventArgs.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.FormulaParsingEventArgs.Text">
            <summary>
            A property that gets/sets the formula about to be parsed.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.UnknownFunctionEventHandler">
            <summary>
            Event delegate for UnknownFunction event.
            </summary>
            <param name="sender">The CalcEngine.</param>
            <param name="e">The <see cref="T:Syncfusion.Calculate.UnknownFunctionEventArgs"/> for this event.</param>
        </member>
        <member name="T:Syncfusion.Calculate.UnknownFunctionEventArgs">
            <summary>
            The event args for the UnknownFunction event which is raised whenever the CalcEngine encounters a function
            that is does not know.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.UnknownFunctionEventArgs.MissingFunctionName">
            <summary>
            Gets the name of the unknown function.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.UnknownFunctionEventArgs.CellLocation">
            <summary>
            Gets the location of the missing function.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.UpdateNamedRangeEventHandler">
            <summary>
            Event delegate for UpdateNamedRange event.
            </summary>
            <param name="sender">The CalcEngine.</param>
            <param name="e">The <see cref="T:Syncfusion.Calculate.UpdateNamedRangeEventArgs"/> for this event.</param>
        </member>
        <member name="T:Syncfusion.Calculate.UpdateNamedRangeEventArgs">
            <summary>
            The event args for the UpdateNamedRange event, which is raised whenever the CalcEngine calculate the intersection range of two named range .
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.NamespaceDoc">
            <summary>
            Contains the classes required to perform calculation.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.CalcQuickBase">
            <summary>
            A class that allows you to quickly add calculation support for controls on a form, or usercontrol.
            </summary>
            <remarks>
            To use CalcQuick, you instantiate an instance of the class. Then just by indexing the
            class object with string names to identify a formula object, you can have calculation support
            in your form. Alternatively, you can add a collection of Control-derived objects and the
            CalcQuick object will bind the Control.Text property allowing you to use the Control/Name property
            to reference other controls in a formula.
            </remarks>
            <example>
            Here is code that uses three TextBoxes, the first showing a value for an angle in degrees,
            and the other two displaying the sine and cosine of this angle. In this code, the calculations
            are done on the click of a button:
            <code lang="C#">
                CalcQuick calculator = null;
                   private void AngleForm_Load(object sender, System.EventArgs e)
                   {
                       //TextBox Angle = new TextBox();
                       this.Angle.Name = "Angle";
                       this.Angle.Text = "30";
                       //cosTB = new TextBox();
                       this.cosTB.Name = "cosTB";
                       this.cosTB.Text = "= cos([Angle] * pi() / 180) ";
                       //sinTB = new TextBox();
                       this.sinTB.Name = "sinTB";
                       this.sinTB.Text = "= sin([Angle] * pi() / 180) ";
                       // Instantiate the CalcQuick object:
                       this.calculator = new CalcQuick();
                   }
                   // Perform a manual calculation:
                   private void ComputeButton_Click(object sender, System.EventArgs e)
                   {
                       // Let the calculator know the values/formulas
                       // by using an indexer on the calculator object.
                       // Here we are using the TextBox.Name as the indexer key
                       // provided to the calculator object. This is not required.
                       // The only restriction for the indexer key values is that they
                       // be unique nonempty strings:
                       this.calculator["Angle"] = this.Angle.Text;
                       this.calculator["cosTB"] = this.cosTB.Text;
                       this.calculator["sinTB"] = this.sinTB.Text;
                       // Mark the calculator dirty:
                       this.calculator.SetDirty();
                       // Now as the values are retrieved from the calculator, they
                       // will be the newly calculated values:
                       this.cosTB.Text = this.calculator["cosTB"];
                       this.sinTB.Text = this.calculator["sinTB"];
                   }
            </code>
            <code lang="VB">
            Dim calculator As CalcQuick = Nothing
               Private Sub AngleForm_Load(sender As Object, e As System.EventArgs)
                   'TextBox Angle = new TextBox();
                   Me.Angle.Name = "Angle"
                   Me.Angle.Text = "30"
                   'cosTB = new TextBox();
                   Me.cosTB.Name = "cosTB"
                   Me.cosTB.Text = "= cos([Angle] * pi() / 180) "
            <para/>
                   'sinTB = new TextBox();
                   Me.sinTB.Name = "sinTB"
                   Me.sinTB.Text = "= sin([Angle] * pi() / 180) "
            <para/>
                   'Instantiate the CalcQuick object:
                   Me.calculator = New CalcQuick()
                   End Sub 'AngleForm_Load
            <para/>
               'Perform a manual calculation:
               Private Sub ComputeButton_Click(sender As Object, e As System.EventArgs)
                   'Let the calculator know the values/formulas
                   'by using an indexer on the calculator object.
                   'Here we are using the TextBox.Name as the indexer key
                   'provided to the calculator object. This is not required.
                   'The only restriction for the indexer key values is that they
                   'be unique nonempty strings:
                   Me.calculator("Angle") = Me.Angle.Text
                   Me.calculator("cosTB") = Me.cosTB.Text
                   Me.calculator("sinTB") = Me.sinTB.Text
            <para/>
                   'Mark the calculator dirty:
                   Me.calculator.SetDirty()
            <para/>
                   'Now as the values are retrieved from the calculator, they
                   'will be the newly calculated values:
                   Me.cosTB.Text = Me.calculator("cosTB")
                   Me.sinTB.Text = Me.calculator("sinTB")
               End Sub 'ComputeButton_Click
            </code>
            Here is code that uses the same three TextBoxes as above, but this time
            the code is set up to automatically compute things as you change the
            value in the Angle TextBox. There is no longer a need for a button handler
            to trigger setting / getting values.
            <code lang="C#">
                CalcQuick calculator = null;
            <para/>
                   private void AngleForm_Load(object sender, System.EventArgs e)
                   {
                       //TextBox Angle = new TextBox();
                       this.Angle.Name = "Angle";
                       this.Angle.Text = "30";
            <para/>
                       //cosTB = new TextBox();
                       this.cosTB.Name = "cosTB";
                       this.cosTB.Text = "= cos([Angle] * pi() / 180) ";
            <para/>
                       //sinTB = new TextBox();
                       this.sinTB.Name = "sinTB";
                       this.sinTB.Text = "= sin([Angle] * pi() / 180) ";
            <para/>
                       // Instantiate the CalcQuick object:
                       this.calculator = new CalcQuick();
                   }
            <para/>
                   // Perform a manual calculation:
                   private void ComputeButton_Click(object sender, System.EventArgs e)
                   {
                       // Let the calculator know the values/formulas
                       // by using an indexer on the calculator object.
                       // Here we are using the TextBox.Name as the indexer key
                       // provided to the calculator object. This is not required.
                       // The only restriction for the indexer key values is that they
                       // be unique nonempty strings:
                       this.calculator["Angle"] = this.Angle.Text;
                       this.calculator["cosTB"] = this.cosTB.Text;
                       this.calculator["sinTB"] = this.sinTB.Text;
            <para/>
                       // Mark the calculator dirty:
                       this.calculator.SetDirty();
            <para/>
                       // Now as the values are retrieved from the calculator, they
                       // will be the newly calculated values:
                       this.cosTB.Text = this.calculator["cosTB"];
                       this.sinTB.Text = this.calculator["sinTB"];
                   }
            </code>
            <code lang="VB">
            Dim calculator As CalcQuick = Nothing
            <para/>
               Private Sub AngleForm_Load(sender As Object, e As System.EventArgs)
                   'TextBox Angle = new TextBox();
                   Me.Angle.Name = "Angle"
                   Me.Angle.Text = "30"
            <para/>
                   'cosTB = new TextBox();
                   Me.cosTB.Name = "cosTB"
                   Me.cosTB.Text = "= cos([Angle] * pi() / 180) "
            <para/>
                   'sinTB = new TextBox();
                   Me.sinTB.Name = "sinTB"
                   Me.sinTB.Text = "= sin([Angle] * pi() / 180) "
            <para/>
                   'Instantiate the CalcQuick object:
                   Me.calculator = New CalcQuick()
                   End Sub 'AngleForm_Load
            <para/>
               'Perform a manual calculation:
               Private Sub ComputeButton_Click(sender As Object, e As System.EventArgs)
                   'Let the calculator know the values/formulas
                   'by using an indexer on the calculator object.
                   'Here we are using the TextBox.Name as the indexer key
                   'provided to the calculator object. This is not required.
                   'The only restriction for the indexer key values is that they
                   'be unique nonempty strings:
                   Me.calculator("Angle") = Me.Angle.Text
                   Me.calculator("cosTB") = Me.cosTB.Text
                   Me.calculator("sinTB") = Me.sinTB.Text
            <para/>
                   'Mark the calculator dirty:
                   Me.calculator.SetDirty()
            <para/>
                   'Now as the values are retrieved from the calculator, they
                   'will be the newly calculated values:
                   Me.cosTB.Text = Me.calculator("cosTB")
                   Me.sinTB.Text = Me.calculator("sinTB")
               End Sub 'ComputeButton_Click
            </code>
            </example>
        </member>
        <member name="T:Syncfusion.Calculate.ISheetData">
            <summary>
            Used in conjunction with <see cref="P:Syncfusion.Calculate.CalcEngine.RowMaxCount"/>.
            </summary>
            <remarks>
            Essential Calculate supports column ranges of the form A:D as in =SUM(A:D) to represent all cells in columns
            A, B, C and D from a ICalcData object. To get a value for the number of rows, the CalcEngine first checks to
            see if the ICalcData object supports the ISheetData interface. If this interface is supported, the row
            count used to determine the range is obtained through this interface. If the ICalcData object does not support
            ISheetData, then the value of <see cref="P:Syncfusion.Calculate.CalcEngine.RowMaxCount"/> is used provided RowMaxCount &gt; 0.
            and the index of  first and last rows and columns
            is used.
            </remarks>
        </member>
        <member name="T:Syncfusion.Calculate.ICalcData">
            <summary>
            ICalcData defines the minimal interface that a data object must support in order to use
            this formula engine.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.ICalcData.GetValueRowCol(System.Int32,System.Int32)">
            <summary>
            A method that gets the data value from the specified row and column.
            </summary>
            <param name="row">1-based index specifying the row index of the requested value.
            </param>
            <param name="col">1-based index specifying the column index of the requested data.</param>
            <returns>The data value at the given row and column index.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ICalcData.SetValueRowCol(System.Object,System.Int32,System.Int32)">
            <summary>
            A method that sets the data value to the specified row and column.
            </summary>
            <param name="value">The value.</param>
            <param name="row">One-based index specifying the row index of the value.</param>
            <param name="col">One-based index specifying the column index of the value.</param>
        </member>
        <member name="M:Syncfusion.Calculate.ICalcData.WireParentObject">
            <summary>
            A method that wires the ParentObject after the CalcEngine object is created or when a
            RegisterGridAsSheet call is made.
            </summary>
            <remarks>This method is a callback to the ParentObject so it can have a chance
            to subscribe to any change events it may need to implement ValueChanged properly.
            </remarks>
        </member>
        <member name="E:Syncfusion.Calculate.ICalcData.ValueChanged">
            <summary>
            Event for value changed
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetFirstRow">
            <summary>
            Get the idex of the first row in UsedRange
            </summary>
            <returns> index of first row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetLastRow">
            <summary>
            get the index of the last row in UsedRange
            </summary>
            <returns>index of last row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetRowCount">
            <summary>
            Gets the row count.
            </summary>
            <returns>Number of rows</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetFirstColumn">
            <summary>
            Gets the first column index.
            </summary>
            <returns>Index of first column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetLastColumn">
            <summary>
            Gets the last column index / column count.
            </summary>
            <returns>Index of last column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.ISheetData.GetColumnCount">
            <summary>
            Gets the column count.
            </summary>
            <returns>Number of columns</returns>
        </member>
        <member name="F:Syncfusion.Calculate.CalcQuickBase.ignoreChanges">
            <summary>
            Returns the value as false
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.#ctor">
            <summary>
            Default constructor:
            </summary>
            <remarks>Use this constructor when you want to have
            several CalcQuick objects that access the same
            static members of the CalcEngine.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.#ctor(System.Boolean)">
            <summary>
            Constructor that resets the CalcEngine object.
            </summary>
            <param name="resetStaticMembers">
            Indicates whether the static members of the CalcEngine class will be cleared.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.ResetKeys">
            <summary>
            A method to reset all the keys registered with CalcQuickBase object.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.CreateEngine">
            <summary>
            Creates the <see cref="T:Syncfusion.Calculate.CalcEngine"/> object used by this CalQuick object.
            </summary>
            <returns>Returns an instance of a CalcEngine object.</returns>
            <remarks>You can override this method and return a derived CalcEngine object use
            by the derived CalcQuick object.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.TryParseAndCompute(System.String)">
            <summary>
            A method that parses and computes a well-formed algebraic expression passed in.
            </summary>
            <param name="formulaText">The text of the formula.</param>
            <returns>The computed value.</returns>
            <remarks>You would use this method if you have a formula string which
            contains only constants or library function references. Such formulas
            do not depend upon other values. If you have registered a variable through
            an indexer, then that variable can be used in a formula expression passed into this
            method. This method will return the Exception text if an exception is thrown 
            during the computation.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetFormula(System.String)">
            <summary>
            A method that returns the formula string associated with the key passed in from a FormulaInfo object.
            </summary>
            <param name="key">The Hashtable key associated with the FormulaInfo object.</param>
            <returns>The formula string may be the empty string if no formula is stored with this key.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetValueRowCol(System.Int32,System.Int32)">
            <summary>
            A method to get the value of the cell referred. For internal CalcQuick use only.
            </summary>
            <param name="row">Row index.</param>
            <param name="col">Column index.</param>
            <returns>(row, col) data.</returns>
            <remarks>
            CalcQuick does not expose a (row, col) data access model.
            But since CalcEngine requires such a model, CalcQuick uses
            a row, col access model internally, but only exposes the
            formula Key model to access values.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.InitCalcQuick(System.Boolean)">
            <summary>
            Initializes any structures needed by this instance.
            </summary>
            <param name="resetStaticMembers">
            Indicates whether the static members of the CalcEngine class will be cleared.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.ParseAndCompute(System.String)">
            <summary>
            A method that parses and computes a well-formed algebraic expression passed in.
            </summary>
            <param name="formulaText">The text of the formula.</param>
            <returns>The computed value.</returns>
            <remarks>You would use this method if you have a formula string which
            contains only constants or library function references. Such formulas
            do not depend upon other values. If you have registered a variable through
            an indexer, then that variable can be used in a formula expression passed into this
            method.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.RefreshAllCalculations">
            <summary>
            A method that recompute any formulas stored in the CalcQuick instance.
            </summary>
            <remarks>
            This method only has is used when AutoCalc is False. It loops through
            all FormulaInfo objects stored in the CalcQuick object and recomputes
            any formulas.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.SetDirty">
            <summary>
            A method to force all calculations to be performed the next time the CalcQuick object is
            accessed with an indexer requesting the value.
            </summary>
            <remarks>
            Each FormulaInfo object contained in the CalcQuick instance
            has a calculation index that is checked any time the computed value is needed. If this index
            is current, no calculation is done, and the last computed value is returned. If this index
            is not current, the calculation is redone before the value is returned. Calling this method
            guarantees that no FormulaInfo object's calculation indexes will be current.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.SetValueRowCol(System.Object,System.Int32,System.Int32)">
            <summary>
            A method to set value to the specified cell. For internal CalcQuick use only.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.UpdateDependencies(System.String)">
            <summary>
            Loops through and updates all formula items that depend
            on the FormulaInfo object pointed to by the key.
            </summary>
            <param name="key">Identifies FormulaInfo object that triggered the update.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.WireParentObject">
            <summary>
            A method that wires the ParentObject after the CalcQuick object is created. For internal CalcQuick use only.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetFirstRow">
            <summary>
            Get the idex of the first row in UsedRange
            </summary>
            <returns>index of first row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetLastRow">
            <summary>
            get the index of the last row in UsedRange
            </summary>
            <returns>index of last row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetRowCount">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetFirstColumn">
            <summary>
            Gets the first column index.
            </summary>
            <returns>Index of first column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetLastColumn">
            <summary>
            Gets the last column index / column count.
            </summary>
            <returns>Index of last column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcQuickBase.GetColumnCount">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code
            </summary>
            <returns></returns>
        </member>
        <member name="E:Syncfusion.Calculate.CalcQuickBase.ValueChanged">
            <summary>
            For internal CalcQuick use only.
            </summary>
        </member>
        <member name="E:Syncfusion.Calculate.CalcQuickBase.ValueSet">
            <summary>
            Occurs when one of the FormulaInfo objects being
            maintained by the CalcQuick instance has changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.AutoCalc">
            <summary>
            A property that gets/sets the auto calculation mode of the CalcQuick.
            </summary>
            <remarks>
            By default, the CalcQuick will not update other values when you change
            a FormulaInfo object. By default, you explicitly call SetDirty()
            of the CalcQuick instance to force calculations to be done the next time
            they are required. Setting AutoCalc to True tells the CalcQuick to maintain
            the dependency information necessary to automatically update
            dependent formulas when values that affect these formulas change.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.CheckKeys">
            <summary>
            Gets or sets whether formulas should be checked for syntax during key substitutions. Default is true.
            </summary>
            <remarks>
            Prior to version 4.4, no syntax checking was performed during the initial parsing process of substituting
            for keys (variable names enclosed in square brackets). This early syntax checking support has been added to
            catch cases where a keys was not preceded (or followed) properly in the formula. This CheckKeys property
            is available for backward compatibility. To maintain the exact parsing algorithm found in versions
            prior to 4.4, set this property to false.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.ControlModifiedFlags">
            <summary>
            Maintains a set of modified flags indicating whether
            any control has had a value changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.DataStore">
            <summary>
            Maintains a collection of FormulaInfo objects.
            </summary>
            <remarks>
             This Hashtable serves as the data store for the
             CalcQuick instance. The keys are the strings used
             to identify formulas and the values are FormulaInfo
             objects that hold the information on each formula or value.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.DisposeEngineResource">
            <summary>
            Determines whether the CalcEngine object of this CalcQuick should be disposed on disposing this object.
            <para/>Default value is true.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.Engine">
            <summary>
            A read-only property that gets the reference to the CalcEngine object being used by this CalcQuick instance.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.FormulaCharacter">
            <summary>
            A property that gets/sets character by which string starts with, are treated as
            formulas when indexing a CalcQuick object.
            </summary>
            <remarks>If you use the technique of indexing the CalcQuick object
            to set a varaible value, then you indicate that the value should be a
            formula by starting the string with this character. If you do not want
            to require your formulas to start with this character, then you will not
            be able to use the indexing technique. Instead, you will have to call
            ParseAndCompute directly to handle formulas not starting with this
            character.</remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.KeyToRowsMap">
            <summary>
            Maintains a mapping between the string key and the row
            used in a CalcSheet to identify a FormulaInfo object.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.KeyToVectors">
            <summary>
            Maintains a mapping between the string key and a
            vector of numbers entered using a brace expression.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.NameToControlMap">
            <summary>
            Maintains a mapping between the string key and the control
            which is being used to identify a FormulaInfo object.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.RowsToKeyMap">
            <summary>
            Maintains a mapping between the row used in a CalcSheet
            and the string key used to identify a FormulaInfo object.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.Item(System.String)">
            <summary>
            Gets / sets formula values for CalcQuick.
            </summary>
            <param name="key">The indexer used to identify the formula.</param>
            <remarks>
            Using an indexer on the CalcQuick instance is the primary method
            of setting a value to be used in a CalcQuick object. The string
            used as the indexer is the key that you use to reference this formula
            value in other formulas used in this CalcQuick instance.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcQuickBase.ThrowCircularException">
            <summary>
            Gets / sets whether the CalcQuick should throw an exception when a circular calculation is encountered.
            </summary>
            <remarks>If this property is True, the CalcQuick will throw an exception
            when it detects a circular calculation. If ThrowCircularException is False, then
            no exception is thrown and the calculation will loop recursively until Engine.MaximumRecursiveCalls
            is exceeded.
            </remarks>
        </member>
        <member name="T:Syncfusion.Calculate.QuickValueSetEventHandler">
            <summary>
            An event handler that represents the method to handle the <see cref="T:Syncfusion.Calculate.QuickValueSetEventHandler"/> event.
            </summary>
            <remarks>
            This event is raised whenever an indexer is used on the CalcQuick object to assign
            it a value or when a value is assigned as the result of a calculation being done.
            </remarks>
        </member>
        <member name="T:Syncfusion.Calculate.QuickValueSetEventArgs">
            <summary>
            Event argument class for the <see cref="T:Syncfusion.Calculate.QuickValueSetEventArgs"/> event.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.QuickValueSetEventArgs.#ctor(System.String,System.String,Syncfusion.Calculate.FormulaInfoSetAction)">
            <summary>
            The only constructor for QuickValueSetEventArgs.
            </summary>
            <param name="key">This is the object that is used as the key value in the Hashtable to
            identify the formula information. It is also the string you use in formulas (enclosed in brackets)
            to reference a formula from another formula.</param>
            <param name="value">New value being assigned.</param>
            <param name="action">Indicates the reason the event is being raised. See FormulaInfoSetAction.</param>
        </member>
        <member name="P:Syncfusion.Calculate.QuickValueSetEventArgs.Action">
            <summary>
            The reason the event was raised.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.QuickValueSetEventArgs.Key">
            <summary>
            A property that gets/sets the Hashtable lookup object for the FormulaInfo object being changed.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.QuickValueSetEventArgs.Value">
            <summary>
            A property that gets/sets the new value being set.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.FormulaInfoSetAction">
            <summary>
            Flags the reason that quickValueSet was raised.
            </summary>
            <remarks>When QuickValueSet event is raised, it passes an
            argument of FormulaInfoSetAction to indicate what was being assigned
            to the CalcQuick object using an indexer. </remarks>
        </member>
        <member name="F:Syncfusion.Calculate.FormulaInfoSetAction.FormulaSet">
            <summary>
            A formula (string starting with FormulaCharacter) was assigned.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.FormulaInfoSetAction.NonFormulaSet">
            <summary>
            Something other than a formula was assigned.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.FormulaInfoSetAction.CalculatedValueSet">
            <summary>
            A calculated value was assigned.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.FormulaInfoHashtable">
            <summary>
            Typed Hashtable returning FormulaInfo objects.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.FormulaInfoHashtable.Item(System.Object)">
            <summary>
            Gets or sets the FormulaInfo with the specified obj.
            </summary>
            <param name="obj">The key to identify the given FormulaInfo.</param>
            <value>FormulaInfo</value>
        </member>
        <member name="T:Syncfusion.Calculate.CalcSheet">
            <summary>
            CalcSheet represents a single worksheet in a workbook.
            </summary>
            <remarks>
            A CalcSheet plays the role of an Excel Worksheet. It maintains its own internal data object
            to hold FormulaInfo objects used by the CalcEngine in its calculation work. The CalcSheet accesses
            the raw data / formulas that you want to use in the calculations via the ICalcData interface.
            </remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that initializes an internal object array to
            hold data.
            </summary>
            <param name="rows">Number of rows in the data object.</param>
            <param name="cols">Number of columns in the data object.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor used during serialization.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.CreateSheetFromFile(System.String)">
            <summary>
            Creates a CalcSheet from a delimited text file
            created by WriteSheetToFile.
            </summary>
            <param name="fileName">The file name.</param>
            <returns>A CalcSheet instantiated with the file content.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Supports serialization.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Describes source and destination of the given stream..</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetValueRowCol(System.Int32,System.Int32)">
            <summary>
            Returns the value at the row and column.
            </summary>
            <param name="row">One-based row index.</param>
            <param name="col">One based column index.</param>
            <returns>The cell value.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.OnCalculatedValueChanged(Syncfusion.Calculate.ValueChangedEventArgs)">
            <summary>
            Raises the CalculatedValueChanged event.
            </summary>
            <param name="e">Includes the row, col, and value of the change.</param>
            <remarks>This event should be raised any time a value changes.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.OnValueChanged(Syncfusion.Calculate.ValueChangedEventArgs)">
            <summary>
            Raises the ValueChanged event.
            </summary>
            <param name="e">Includes the row, col, and value of the change.</param>
            <remarks>This event should be raised any time a value changes.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.ReadSSS(System.IO.StreamReader)">
            <summary>
            Creates a CalcSheet object from the content of a StreamReader.
            </summary>
            <param name="sr">The StreamReader.</param>
            <returns>The newly created CalcSheet object.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.SetValue(System.Int32,System.Int32,System.String)">
            <summary>
            A Virtual method to save the value through the ICalcData.SetValueRowCol implementation method
            and raise the ValueChanged event.
            </summary>
            <param name="row">The row index, one-based.</param>
            <param name="col">The column index, one-based.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.SetValueRowCol(System.Object,System.Int32,System.Int32)">
            <summary>
            A Virtual method to set a value at a given row and column.
            </summary>
            <param name="value">Value to be set.</param>
            <param name="row">One-based row index.</param>
            <param name="col">One-based column index.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.WireParentObject">
            <summary>
            A Virtual method that can be used to handle subscribing to any base object events necessary for implementing the
            ValueChanged event.
            </summary>
            <remarks>For example, when implementing ICalcData on a DataGrid-derived object,
            you need to know when something in the DataGrid changes so you can raise the
            required ICalcData.ValueChanged event. In WireParentObject, the DataGrid can
            subscribe to its DataSource's change event to handle this requirement. If the
            DataSource is a DataTable, then the DataTable.ColumnChanged event can fulfill
            the requirement.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetFirstRow">
            <summary>
            Get the idex of the first row in UsedRange
            </summary>
            <returns>index of first row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetLastRow">
            <summary>
            get the index of the last row in UsedRange
            </summary>
            <returns>index of last row</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetRowCount">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetFirstColumn">
            <summary>
            Gets the first column index.
            </summary>
            <returns>Index of first column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetLastColumn">
            <summary>
            Gets the last column index / column count.
            </summary>
            <returns>Index of last column</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.GetColumnCount">
            <summary>
            This API supports the .NET Framework infrastructure and is not intended to be used directly from your code
            </summary>
            <returns></returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.WriteSheetToFile(System.String)">
            <summary>
            Writes a delimited file.
            </summary>
            <param name="fileName">The output file name.</param>
            <remarks>The static Delimiter member specifies the field delimiter.
            Rows are delimited by Environment.NewLine characters.
            This method serializes formulas instead of computed values. To
            write a file containing computed values, use the WriteValuesToFile method.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.WriteSSS(System.IO.StreamWriter,System.Boolean)">
            <summary>
            Writes this CalcSheet object to the given StreamWriter.
            </summary>
            <param name="sw">The StreamWriter.</param>
            <param name="valuesOnly">Indicates whether to serialize formulas (False)
            or computed values (True).</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.WriteSSS(System.IO.StreamWriter)">
            <summary>
            Writes this CalcSheet object with formulas serialized to the given StreamWriter.
            </summary>
            <param name="sw">The StreamWriter.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheet.WriteValuesToFile(System.String)">
            <summary>
            Serializes the data with computed values to a delimited
            text file.
            </summary>
            <param name="fileName">The file name.</param>
            <remarks>The static Delimiter member specifies the field delimiter.
            Rows are delimited by Environment.NewLine characters.
            This method serializes computed values instead of formulas. To
            write a file containing formulas, use the WriteSheetToFile method.</remarks>
        </member>
        <member name="E:Syncfusion.Calculate.CalcSheet.CalculatedValueChanged">
            <summary>
            This event is raised in SetValueRowCol.
            </summary>
        </member>
        <member name="E:Syncfusion.Calculate.CalcSheet.ValueChanged">
            <summary>
            This event should be raised by the implementer of ICalcData whenever a value changes.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.CalculationsSuspended">
            <summary>
            Gets / sets a flag that indicates whether to compute dependent values
            as cells change.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.ColCount">
            <summary>
            A read-only property that gets the column count.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.Delimter">
            <summary>
            Gets / sets the field delimiter for the
            WriteSheetToFile method.
            </summary>
            <remarks>The default value is tab.</remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.Engine">
            <summary>
            A read-only property that gets the CalcEngine object used by this CalcSheet.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.LockSheetChanges">
            <summary>
            Enables or disables saving changes within the CalcSheet.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.Name">
            <summary>
            A property that gets / sets the name used to refer to this sheet.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.RowCount">
            <summary>
            A read-only property that gets the row count.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheet.Item(System.Int32,System.Int32)">
            <summary>
            Gets / sets a value through the ICalcData.GetValueRowCol
            and ICalcData.SetValueRowCol implementation methods.
            </summary>
            <param name="row">The row index.</param>
            <param name="col">The column index.</param>
        </member>
        <member name="T:Syncfusion.Calculate.CalcWorkbook">
            <summary>
            CalcWorkbook holds a collection of <see cref="T:Syncfusion.Calculate.CalcSheet"/> objects.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.CalcWorkbook.sheetNames">
            <summary>
            ArrayList of strings holding the CalcSheets names.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.#ctor(Syncfusion.Calculate.CalcSheet[],System.Collections.Hashtable)">
            <summary>
            Initializes a new instance of the CalcWorkbook class.
            </summary>
            <param name="calcSheets">The calc sheets.</param>
            <param name="namedRanges">Hashtable of key, value pairs for Namedrange values.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new <see cref="T:Syncfusion.Calculate.CalcWorkbook"/> from a serialization stream.
            </summary>
            <param name="info">An object that holds all the data needed to serialize or deserialize this instance.</param>
            <param name="context">Describes the source and destination of the serialized stream specified by info. </param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.CalculateAll">
            <summary>
            A Virtual method to calculate all formulas in this workbook.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.ClearFormulas(Syncfusion.Calculate.CalcSheet)">
            <summary>
            Removes all formulas in the given CalcSheet.
            </summary>
            <param name="sheet">The CalcSheet.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Implements the ISerializable interface and returns the data needed to serialize the workbook.
            </summary>
            <param name="info">A SerializationInfo object containing the information required to serialize the cell model.</param>
            <param name="context">A StreamingContext object containing the source and destination of the serialized stream.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.GetSheetID(System.String)">
            <summary>
            A method that gets the integer ID of a CalcSheet.
            </summary>
            <param name="sheetName">The CalcSheet name.</param>
            <returns>The integer ID.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.ReadSSS(System.String)">
            <summary>
            Creates a CalcWorkbook from a file written using WriteSSS.
            </summary>
            <param name="fileName">Pathname of the file.</param>
            <returns>A CalcWorkbook object.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcWorkbook.WriteSSS(System.String)">
            <summary>
            Writes a tab-delimited file holding the Workbook information.
            </summary>
            <param name="fileName">The pathname of the file to be written.</param>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.CalcSheetList">
            <summary>
            Gets or sets an Arraylist of CalcSheet objects used in this workbook.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.calcSheets">
            <summary>
            Array of CalcSheets objects used in this workbook.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.Engine">
            <summary>
            Gets/Sets the CalcEngine object.
            </summary>
            <remarks>
            The setter only sets once, and only if InitCalcWorkbook has been called
            with a zero CalcSheet count.
            </remarks>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.SheetCount">
            <summary>
            Number of CalcSheets in this workbook.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.Item(System.String)">
            <summary>
            Gets / sets a CalcSheet object with the given name.
            </summary>
            <param name="sheetName">The sheet name.</param>
        </member>
        <member name="P:Syncfusion.Calculate.CalcWorkbook.Item(System.Int32)">
            <summary>
            Gets / sets a CalcSheet object with the given index.
            </summary>
            <param name="sheetIndex">The sheet index.</param>
        </member>
        <member name="T:Syncfusion.Calculate.CalcSheetList">
            <summary>
            Wrapper ArrayList that holds a collection of CalcSheets.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.#ctor(Syncfusion.Calculate.CalcSheet[],Syncfusion.Calculate.CalcWorkbook)">
            <summary>
            Creates an CalcSheetList instance owned by the given workbook with the given CalcSheet list.
            </summary>
            <param name="list">list of CalcSheets</param>
            <param name="parentWorkBook">The Workbook</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.Add(System.Object)">
            <summary>
            A method that adds a new CalcSheet.
            </summary>
            <param name="o">The CalcSheet to be added.</param>
            <returns>The index of the added CalcSheet.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.Insert(System.Int32,System.Object)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.NameToIndex(System.String)">
            <summary>
            Returns the index for a CalcSheet.
            </summary>
            <param name="sheetName">The name of the CalcSheet.</param>
            <returns>The index of the CalcSheet.</returns>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.Remove(System.Object)">
            <summary>
            A method that removes a CalcSheet.
            </summary>
            <param name="o">The CalcSheet to be removed.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.RemoveAt(System.Int32)">
            <summary>
            Removes a CalcSheet.
            </summary>
            <param name="index">The index of the CalcSheet to be removed.</param>
        </member>
        <member name="M:Syncfusion.Calculate.CalcSheetList.ToArray">
            <summary>
             The CalcSheets in this collection.
            </summary>
            <returns>Returns a CalcSheet[].</returns>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheetList.Item(System.Int32)">
            <summary>
            Gets or sets the CalcSheet at the given index.
            </summary>
            <param name="i">The sheet index.</param>
        </member>
        <member name="P:Syncfusion.Calculate.CalcSheetList.Item(System.String)">
            <summary>
            Gets or sets the CalcSheet with a given name.
            </summary>
            <param name="sheetName">The sheet name.</param>
        </member>
        <member name="M:Syncfusion.Calculate.Utilities.IsSecurityPermissionAvailable">
            <summary>
             Calls SecurityPermission.Demand to find out if SecurityPermission is available.
            </summary>
            <returns>True if SecurityPermission is available.</returns>
        </member>
        <member name="T:Syncfusion.Calculate.ValueChangedEventHandler">
            <summary>
            An event handler that represents the method to handle the <see cref="E:Syncfusion.Calculate.CalcSheet.ValueChanged"/>
            event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <see cref="T:Syncfusion.Calculate.ValueChangedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Syncfusion.Calculate.ValueChangedEventArgs">
            <summary>
            A class containing data for the ICalcData.ValueChanged event.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.ValueChangedEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            The constructor.
            </summary>
            <param name="row">One-based row index for the value.</param>
            <param name="col">One-based col index for the value.</param>
            <param name="value">the value at the specified row,col.</param>
        </member>
        <member name="P:Syncfusion.Calculate.ValueChangedEventArgs.ColIndex">
            <summary>
            A property that gets/sets One-base column index.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.ValueChangedEventArgs.RowIndex">
            <summary>
            A property that gets/sets One-based row index.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.ValueChangedEventArgs.Value">
            <summary>
            A property that gets/sets the value.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.CalcEngineHelper">
            <summary>
            Used for CalcEngineHelper
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.CalcEngineHelper.FromOADate(System.Double)">
            <summary>
            Returns a DateTime equivalent to the specified OLE Automation Date.
            </summary>
            <param name="doubleOLEValue">An OLE Automation Date value.</param>
            <returns>An object that represents the same date and time as d.</returns>
        </member>
        <member name="T:Syncfusion.Calculate.LookupCachingMode">
            <summary>
            Specifies options for caching look up tables in HLookUp and VLookUp functions.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.LookupCachingMode.None">
            <summary>
            No caching is done.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.LookupCachingMode.VLOOKUP">
            <summary>
            Tables will be cached only for VLookUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.LookupCachingMode.HLOOKUP">
            <summary>
            Tables will be cached only for HLookUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.LookupCachingMode.Both">
            <summary>
            Tables will be cached for both VLookUp and HLookUp.
            </summary>
        </member>
        <member name="F:Syncfusion.Calculate.LookupCachingMode.OptimizeForMatches">
            <summary>
            Tables will be optimized for searching for exact matches. Set this flag if you expect your searches to find exact matches.
            </summary>
        </member>
        <member name="T:Syncfusion.Calculate.RangeInfo">
            <summary>
            RangeInfo represents a rectangle array of cells that may contain formulas, strings, or numbers
            that may be referenced by other formulas.
            </summary>
        </member>
        <member name="M:Syncfusion.Calculate.RangeInfo.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a RangeInfo instance with the given top, left, bottom and right values.
            </summary>
            <param name="top">Top row index of this range.</param>
            <param name="left">Left column index of this range.</param>
            <param name="bottom">Bottom row index of this range.</param>
            <param name="right">Right column index  of this range.</param>
            <remarks>The range values must be one-based indexes.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.RangeInfo.Cells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            A method to retrieve a range based on the numeric arguments passed in.
            </summary>
            <param name="top">Top row index of this range.</param>
            <param name="left">Left column index of this range.</param>
            <param name="bottom">Bottom row index of this range.</param>
            <param name="right">Right column index  of this range.</param>
            <returns>A RangeInfo object.</returns>
            <remarks>The range values must be one-based indexes.</remarks>
        </member>
        <member name="M:Syncfusion.Calculate.RangeInfo.GetAlphaLabel(System.Int32)">
            <summary>
            GetAlphaLabel is a method that retrieves a string value for the column whose numerical index is passed in.
            </summary>
            <param name="col"> Number index such as 1, 5, 27.</param>
            <returns>Corresponding alphabets label like A, E, AA.</returns>
        </member>
        <member name="P:Syncfusion.Calculate.RangeInfo.Bottom">
            <summary>
            A property that gets/sets the bottom row index of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.RangeInfo.Left">
            <summary>
            A property that gets/sets the left column index of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.RangeInfo.Right">
            <summary>
            A property that gets/sets the right row index of this range.
            </summary>
        </member>
        <member name="P:Syncfusion.Calculate.RangeInfo.Top">
            <summary>
            A property that gets/sets the top row index of this range.
            </summary>
        </member>
    </members>
</doc>
